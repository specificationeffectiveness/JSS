package org.meqantt;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest26 {

    public static boolean debug = false;

    @Test
    public void test13001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13001");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.connect("\000H00: 01110000 p 112\n01: 00000010 \002 2\n\ufffd\ufffd 0\n03: 00001010 \n 10\n", 100);
    }

    @Test
    public void test13002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13002");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage(header1);
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13003");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        connectMessage3.setCredentials("MQIsdp", "MQIsdp");
        org.meqantt.message.QoS qoS9 = connectMessage3.getWillQoS();
        boolean boolean10 = connectMessage3.hasPassword();
        java.lang.String str11 = connectMessage3.getPassword();
        org.meqantt.message.QoS qoS12 = connectMessage3.getQos();
        org.meqantt.message.QoS qoS13 = connectMessage3.getWillQoS();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(qoS9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MQIsdp" + "'", str11, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS12 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS12.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoS13);
    }

    @Test
    public void test13004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13004");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.ping();
        nettyClient1.subscribe("\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        nettyClient1.connect("00: 00000000 \000 0\n01: 00000000 \000 0\n", 15);
    }

    @Test
    public void test13005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13005");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 10);
        boolean boolean4 = connectMessage3.hasPassword();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getPassword();
        java.lang.String str7 = connectMessage3.getWillTopic();
        java.lang.String str8 = connectMessage3.getWillTopic();
        java.lang.String str9 = connectMessage3.getProtocolId();
        boolean boolean10 = connectMessage3.isCleanSession();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13006");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        org.meqantt.MqttListener mqttListener15 = null;
        nettyClient1.setListener(mqttListener15);
        nettyClient1.unsubscribe("\000\003hi!");
        org.meqantt.MqttListener mqttListener19 = null;
        nettyClient1.setListener(mqttListener19);
        nettyClient1.ping();
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("\000d\000\001\001d");
        nettyClient1.disconnect();
        nettyClient1.publish("\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.publish("\020\016\000\006MQIsdp\003\002\000\001\000\000", "\000H00: 01110000 p 112\n01: 00000010 \002 2\n\ufffd\ufffd 0\n03: 00001010 \n 10\n");
    }

    @Test
    public void test13007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13007");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        boolean boolean3 = connectMessage1.hasUsername();
        connectMessage1.setCredentials("00: 00110000 0 48\n01: 00010010 \022 18\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000000 \000 0\n11: 00001000 \b 8\n12: 11000000 \300 192\n13: 10000000 \200 128\n14: 01100100 d 100\n15: 11000000 \300 192\n16: 10000000 \200 128\n17: 00000001 \001 1\n18: 00000001 \001 1\n19: 01100100 d 100\n");
        java.lang.String str6 = connectMessage1.getUsername();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "00: 00110000 0 48\n01: 00010010 \022 18\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000000 \000 0\n11: 00001000 \b 8\n12: 11000000 \300 192\n13: 10000000 \200 128\n14: 01100100 d 100\n15: 11000000 \300 192\n16: 10000000 \200 128\n17: 00000001 \001 1\n18: 00000001 \001 1\n19: 01100100 d 100\n" + "'", str6, "00: 00110000 0 48\n01: 00010010 \022 18\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000000 \000 0\n11: 00001000 \b 8\n12: 11000000 \300 192\n13: 10000000 \200 128\n14: 01100100 d 100\n15: 11000000 \300 192\n16: 10000000 \200 128\n17: 00000001 \001 1\n18: 00000001 \001 1\n19: 01100100 d 100\n");
    }

    @Test
    public void test13008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13008");
        org.meqantt.message.SubscribeMessage subscribeMessage1 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList2 = subscribeMessage1.getTopics();
        org.meqantt.message.QoS qoS3 = subscribeMessage1.getQos();
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str9 = connectMessage8.getProtocolId();
        org.meqantt.message.QoS qoS10 = connectMessage8.getQos();
        subscribeMessage1.addTopic("", qoS10);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage13 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList14 = unsubscribeMessage13.getTopics();
        org.meqantt.message.Message.Type type15 = unsubscribeMessage13.getType();
        java.util.List<java.lang.String> strList16 = unsubscribeMessage13.getTopics();
        org.meqantt.message.QoS qoS17 = unsubscribeMessage13.getQos();
        subscribeMessage1.setQos(qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS17);
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage19.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + qoS3 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS3.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type15.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test13009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13009");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.subscribe("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener9 = null;
        nettyClient1.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.connect("00: 01100100 d 100\n01: 00000000 \000 0\n", 1);
        nettyClient1.subscribe("\000\003hi!");
        nettyClient1.connect("\000\006\ufffd\ufffd\003hi!", (int) (short) 100);
        org.meqantt.MqttListener mqttListener21 = null;
        nettyClient1.setListener(mqttListener21);
        org.meqantt.MqttListener mqttListener23 = null;
        nettyClient1.setListener(mqttListener23);
    }

    @Test
    public void test13010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13010");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 10);
        boolean boolean11 = connectMessage10.hasPassword();
        int int12 = connectMessage10.getKeepAlive();
        java.lang.String str13 = connectMessage10.getPassword();
        org.meqantt.message.QoS qoS14 = connectMessage10.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage("\000<Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS14);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage5.setQos(qoS14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13011");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        boolean boolean3 = connectMessage1.isWillRetained();
        int int4 = connectMessage1.getKeepAlive();
        java.lang.String str5 = connectMessage1.getWill();
        java.lang.String str6 = connectMessage1.getUsername();
        java.lang.String str7 = connectMessage1.getWillTopic();
        connectMessage1.setCredentials("00: 00000000 \000 0\n01: 00000000 \000 0\n", "\000d\000\001\001d");
        boolean boolean11 = connectMessage1.hasWill();
        connectMessage1.setCredentials("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        boolean boolean14 = connectMessage1.isWillRetained();
        org.meqantt.message.QoS qoS15 = connectMessage1.getWillQoS();
        boolean boolean16 = connectMessage1.isWillRetained();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(qoS15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13012");
        org.meqantt.message.PubAckMessage pubAckMessage1 = new org.meqantt.message.PubAckMessage(15);
    }

    @Test
    public void test13013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13013");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str7 = connectMessage6.getWill();
        connectMessage6.setWill("\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
        boolean boolean11 = connectMessage6.hasPassword();
        connectMessage6.setCredentials("\000<Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        boolean boolean14 = connectMessage6.hasUsername();
        boolean boolean15 = connectMessage6.hasPassword();
        connectMessage6.setCredentials("00: 01100100 d 100\n01: 00000000 \000 0\n");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13014");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str12 = connectMessage11.getUsername();
        int int13 = connectMessage11.getKeepAlive();
        java.lang.String str14 = connectMessage11.getWillTopic();
        boolean boolean15 = connectMessage11.isRetained();
        byte[] byteArray16 = connectMessage11.toBytes();
        java.lang.String str17 = connectMessage11.getPassword();
        org.meqantt.message.ConnectMessage connectMessage24 = new org.meqantt.message.ConnectMessage("\000d\000\001\001d", false, 100);
        java.lang.String str25 = connectMessage24.getProtocolId();
        connectMessage24.setWill("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00000011 \003 3\n05: 01101000 h 104\n06: 01101001 i 105\n07: 00100001 ! 33\n", "\000\004\001\003\003\001");
        org.meqantt.message.QoS qoS29 = connectMessage24.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("\ufffd\ufffd\001\000\000\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\000", qoS29);
        connectMessage11.setWill("\000H00: 01110000 p 112\n01: 00000010 \002 2\n\ufffd\ufffd 0\n03: 00001010 \n 10\n", "00: 00000000 \000 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", qoS29, true);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage7.setQos(qoS29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "MQIsdp" + "'", str25, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS29 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS29.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13015");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("", "\000\r\ufffd\ufffd\006\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\003hi!");
    }

    @Test
    public void test13016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13016");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        org.meqantt.MqttListener mqttListener15 = null;
        nettyClient1.setListener(mqttListener15);
        nettyClient1.unsubscribe("\000\003hi!");
        org.meqantt.MqttListener mqttListener19 = null;
        nettyClient1.setListener(mqttListener19);
        nettyClient1.ping();
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener25 = null;
        nettyClient1.setListener(mqttListener25);
        nettyClient1.connect("MQIsdp", 10);
        nettyClient1.publish("00: 00000000 \000 0\n01: 00000000 \000 0\n", "");
    }

    @Test
    public void test13017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13017");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str5 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage8.setDup(false);
        unsubscribeMessage8.setMessageId(100);
        unsubscribeMessage8.addTopic("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13018");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.DisconnectMessage disconnectMessage5 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage7 = new org.meqantt.message.PubRecMessage(header1);
        java.lang.String str8 = header1.toString();
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13019");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        int int3 = connectMessage2.getKeepAlive();
        java.lang.String str4 = connectMessage2.getPassword();
        boolean boolean5 = connectMessage2.hasPassword();
        java.lang.String str6 = connectMessage2.getProtocolId();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MQIsdp" + "'", str6, "MQIsdp");
    }

    @Test
    public void test13020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13020");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str4, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
    }

    @Test
    public void test13021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13021");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.Message.Header header3 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header3);
        org.meqantt.message.Message.Type type5 = header3.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage6 = new org.meqantt.message.UnsubAckMessage(header3);
        org.meqantt.message.SubscribeMessage subscribeMessage7 = new org.meqantt.message.SubscribeMessage(header3);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header3);
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) disconnectMessage8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type5.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test13022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13022");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage8 = new org.meqantt.message.PubRecMessage(header1);
        java.lang.String str9 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean11 = connectMessage10.isCleanSession();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str9, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13023");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.Message.Type type9 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage10 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage12 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage13 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage14 = new org.meqantt.message.PubCompMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void test13024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13024");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage7 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage9 = new org.meqantt.message.PubRecMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage9.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13025");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        unsubscribeMessage1.setDup(false);
        java.util.List<java.lang.String> strList4 = unsubscribeMessage1.getTopics();
        int int5 = unsubscribeMessage1.getMessageId();
        org.meqantt.message.Message.Header header7 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header7);
        java.util.List<org.meqantt.message.QoS> qoSList9 = subAckMessage8.getGrantedQoSs();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage12 = new org.meqantt.message.UnsubscribeMessage("\000d\000\001\001d");
        org.meqantt.message.QoS qoS13 = unsubscribeMessage12.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS13);
        subAckMessage8.addQoS(qoS13);
        unsubscribeMessage1.setQos(qoS13);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(qoSList9);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13026");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        java.lang.String str6 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage7 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage8.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13027");
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage("", byteArray8);
        java.lang.String str10 = publishMessage9.getTopic();
        java.lang.String str11 = publishMessage9.getDataAsString();
        byte[] byteArray12 = publishMessage9.getData();
        java.lang.String str13 = org.meqantt.util.FormatUtil.toString(byteArray12);
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage("\ufffd\003\000\000\000", byteArray12);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            publishMessage14.write(outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\000d\000\001\001d" + "'", str11, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test13028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13028");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        org.meqantt.message.Message.Type type3 = unsubscribeMessage1.getType();
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.addTopic("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        int int8 = unsubscribeMessage1.getMessageId();
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", true, 1);
        boolean boolean13 = connectMessage12.hasUsername();
        connectMessage12.setCredentials("MQIsdp");
        org.meqantt.message.Message.Type type16 = connectMessage12.getType();
        org.meqantt.message.ConnectMessage connectMessage22 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str23 = connectMessage22.getUsername();
        org.meqantt.message.QoS qoS27 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage("", qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList31 = subscribeMessage30.getTopics();
        org.meqantt.message.QoS qoS32 = subscribeMessage30.getQos();
        subscribeMessage28.addTopic("", qoS32);
        connectMessage22.setWill("", "\000d\000\001\001d", qoS32, true);
        java.lang.String str36 = connectMessage22.getPassword();
        connectMessage22.setCredentials("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        java.lang.String str40 = connectMessage22.getPassword();
        org.meqantt.message.QoS qoS41 = connectMessage22.getWillQoS();
        connectMessage12.setWill("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS41, true);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setQos(qoS41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type3.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.meqantt.message.Message.Type.CONNECT + "'", type16.equals(org.meqantt.message.Message.Type.CONNECT));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str40, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.junit.Assert.assertTrue("'" + qoS41 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS41.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13029");
        org.meqantt.message.Message.Header header1 = null;
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean3 = connectMessage2.isWillRetained();
        boolean boolean4 = connectMessage2.isWillRetained();
        java.lang.String str5 = connectMessage2.getUsername();
        org.meqantt.message.QoS qoS9 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage("", qoS9);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList13 = subscribeMessage12.getTopics();
        org.meqantt.message.QoS qoS14 = subscribeMessage12.getQos();
        subscribeMessage10.addTopic("", qoS14);
        connectMessage2.setWill("hi!", "", qoS14, false);
        boolean boolean18 = connectMessage2.hasUsername();
        org.meqantt.message.QoS qoS19 = connectMessage2.getWillQoS();
        boolean boolean20 = connectMessage2.hasUsername();
        java.lang.String str21 = connectMessage2.getWillTopic();
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type25 = subscribeMessage24.getType();
        org.meqantt.message.QoS qoS28 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage("", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList32 = subscribeMessage31.getTopics();
        org.meqantt.message.QoS qoS33 = subscribeMessage31.getQos();
        subscribeMessage29.addTopic("", qoS33);
        subscribeMessage24.addTopic("MQIsdp", qoS33);
        org.meqantt.message.UnsubAckMessage unsubAckMessage37 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS38 = unsubAckMessage37.getQos();
        subscribeMessage24.addTopic("", qoS38);
        connectMessage2.setWill("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", qoS38, false);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage("\000\ufffd\ufffd 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", qoS38);
        java.util.List<org.meqantt.message.QoS> qoSList43 = subscribeMessage42.getTopicQoSs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type25.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + qoS33 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS33.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS38 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS38.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList43);
    }

    @Test
    public void test13030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13030");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, (int) 'a');
        boolean boolean4 = connectMessage3.hasPassword();
        boolean boolean5 = connectMessage3.isCleanSession();
        byte[] byteArray6 = connectMessage3.toBytes();
        java.lang.String str7 = connectMessage3.getClientId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[16, 20, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 97, 0, 6, 77, 81, 73, 115, 100, 112]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
    }

    @Test
    public void test13031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13031");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage(header1);
        byte byte6 = connectMessage5.getProtocolVersion();
        java.lang.String str7 = connectMessage5.getPassword();
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type4.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 3 + "'", byte6 == (byte) 3);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test13032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13032");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test13033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13033");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getClientId();
        boolean boolean3 = connectMessage1.isCleanSession();
        connectMessage1.setCredentials("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        java.lang.String str6 = connectMessage1.getUsername();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n" + "'", str6, "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
    }

    @Test
    public void test13034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13034");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        java.lang.String str6 = connectMessage1.getWill();
        connectMessage1.setWill("\000\000", "\000\000");
        int int10 = connectMessage1.getKeepAlive();
        boolean boolean11 = connectMessage1.isCleanSession();
        boolean boolean12 = connectMessage1.hasPassword();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13035");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\ufffd\003\000\000\000", true, 10);
        connectMessage3.setWill("\020\ufffd\001\000\006MQIsdp\003&\000d\000\006MQIsdp\000\006MQIsdp\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n", "\000H00: 01110000 p 112\n01: 00000010 \002 2\n\ufffd\ufffd 0\n03: 00001010 \n 10\n");
    }

    @Test
    public void test13036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13036");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage7 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
    }

    @Test
    public void test13037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13037");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isCleanSession();
        boolean boolean3 = connectMessage1.hasWill();
        boolean boolean4 = connectMessage1.hasUsername();
        boolean boolean5 = connectMessage1.hasWill();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test13038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13038");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage4.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13039");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage4 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.Message.Header header6 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header6);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header6);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header6);
        java.lang.String str10 = header6.toString();
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header6);
        org.meqantt.message.UnsubAckMessage unsubAckMessage12 = new org.meqantt.message.UnsubAckMessage(header6);
        org.meqantt.message.PubRecMessage pubRecMessage13 = new org.meqantt.message.PubRecMessage(header6);
        org.meqantt.message.PingRespMessage pingRespMessage14 = new org.meqantt.message.PingRespMessage(header6);
        org.meqantt.message.PingReqMessage pingReqMessage15 = new org.meqantt.message.PingReqMessage(header6);
        java.lang.String str16 = header6.toString();
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage(header6);
        org.meqantt.message.Message.Header header20 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage(header20);
        org.meqantt.message.Message.Type type22 = header20.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage23 = new org.meqantt.message.UnsubscribeMessage(header20);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage(header20);
        org.meqantt.message.Message.Header header26 = null;
        org.meqantt.message.ConnectMessage connectMessage27 = new org.meqantt.message.ConnectMessage(header26);
        java.lang.String str28 = connectMessage27.getClientId();
        connectMessage27.setWill("hi!", "");
        boolean boolean32 = connectMessage27.hasPassword();
        boolean boolean33 = connectMessage27.isCleanSession();
        boolean boolean34 = connectMessage27.hasWill();
        org.meqantt.message.QoS qoS35 = connectMessage27.getWillQoS();
        subscribeMessage24.addTopic("hi!", qoS35);
        org.meqantt.message.Message.Header header39 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage40 = new org.meqantt.message.ConnectMessage(header39);
        java.lang.String str41 = connectMessage40.getProtocolId();
        boolean boolean42 = connectMessage40.hasPassword();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage46 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS47 = unsubscribeMessage46.getQos();
        connectMessage40.setWill("", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS47, false);
        subscribeMessage24.addTopic("\000d\000\001\001d", qoS47);
        org.meqantt.message.Message.Header header53 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage54 = new org.meqantt.message.SubscribeMessage(header53);
        java.util.List<java.lang.String> strList55 = subscribeMessage54.getTopics();
        java.util.List<java.lang.String> strList56 = subscribeMessage54.getTopics();
        java.util.List<org.meqantt.message.QoS> qoSList57 = subscribeMessage54.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage62 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean63 = connectMessage62.hasWill();
        java.lang.String str64 = connectMessage62.getWill();
        org.meqantt.message.Message.Header header67 = null;
        org.meqantt.message.ConnectMessage connectMessage68 = new org.meqantt.message.ConnectMessage(header67);
        boolean boolean69 = connectMessage68.isWillRetained();
        boolean boolean70 = connectMessage68.isWillRetained();
        java.lang.String str71 = connectMessage68.getUsername();
        org.meqantt.message.QoS qoS75 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage76 = new org.meqantt.message.SubscribeMessage("", qoS75);
        org.meqantt.message.SubscribeMessage subscribeMessage78 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList79 = subscribeMessage78.getTopics();
        org.meqantt.message.QoS qoS80 = subscribeMessage78.getQos();
        subscribeMessage76.addTopic("", qoS80);
        connectMessage68.setWill("hi!", "", qoS80, false);
        connectMessage62.setWill("MQIsdp", "hi!", qoS80, false);
        subscribeMessage54.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS80);
        org.meqantt.message.SubscribeMessage subscribeMessage87 = new org.meqantt.message.SubscribeMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS80);
        subscribeMessage24.addTopic("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS80);
        subscribeMessage17.addTopic("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", qoS80);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage4.setQos(qoS80);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str10, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str16, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + qoS35 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS35.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "MQIsdp" + "'", str41, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + qoS47 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS47.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(qoSList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + qoS80 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS80.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13040");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage9 = new org.meqantt.message.ConnAckMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13041");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.Message.Header header7 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header7);
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header7);
        org.meqantt.message.SubAckMessage subAckMessage10 = new org.meqantt.message.SubAckMessage(header7);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header7);
        org.meqantt.message.PubCompMessage pubCompMessage12 = new org.meqantt.message.PubCompMessage(header7);
        org.meqantt.message.SubAckMessage subAckMessage13 = new org.meqantt.message.SubAckMessage(header7);
        org.meqantt.message.UnsubAckMessage unsubAckMessage14 = new org.meqantt.message.UnsubAckMessage(header7);
        org.meqantt.message.PingRespMessage pingRespMessage15 = new org.meqantt.message.PingRespMessage(header7);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage16 = new org.meqantt.message.UnsubscribeMessage(header7);
        boolean boolean17 = unsubscribeMessage16.isDup();
        java.util.List<java.lang.String> strList18 = unsubscribeMessage16.getTopics();
        unsubscribeMessage16.addTopic("\000d\000\001\001d");
        byte[] byteArray24 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str25 = org.meqantt.util.FormatUtil.toString(byteArray24);
        org.meqantt.message.PublishMessage publishMessage26 = new org.meqantt.message.PublishMessage("hi!", byteArray24);
        org.meqantt.message.Message.Header header28 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage29 = new org.meqantt.message.PingReqMessage(header28);
        org.meqantt.message.PubCompMessage pubCompMessage30 = new org.meqantt.message.PubCompMessage(header28);
        org.meqantt.message.PubAckMessage pubAckMessage31 = new org.meqantt.message.PubAckMessage(header28);
        org.meqantt.message.PublishMessage publishMessage32 = new org.meqantt.message.PublishMessage(header28);
        org.meqantt.message.ConnAckMessage connAckMessage33 = new org.meqantt.message.ConnAckMessage(header28);
        org.meqantt.message.SubAckMessage subAckMessage34 = new org.meqantt.message.SubAckMessage(header28);
        org.meqantt.message.Message.Header header36 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type37 = header36.getType();
        org.meqantt.message.Message.Type type38 = header36.getType();
        org.meqantt.message.SubAckMessage subAckMessage39 = new org.meqantt.message.SubAckMessage(header36);
        org.meqantt.message.PingReqMessage pingReqMessage40 = new org.meqantt.message.PingReqMessage(header36);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage(header36);
        org.meqantt.message.ConnectMessage connectMessage42 = new org.meqantt.message.ConnectMessage(header36);
        org.meqantt.message.PingReqMessage pingReqMessage43 = new org.meqantt.message.PingReqMessage(header36);
        org.meqantt.message.SubscribeMessage subscribeMessage44 = new org.meqantt.message.SubscribeMessage(header36);
        java.util.List<java.lang.String> strList45 = subscribeMessage44.getTopics();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage47 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList48 = unsubscribeMessage47.getTopics();
        org.meqantt.message.Message.Type type49 = unsubscribeMessage47.getType();
        java.util.List<java.lang.String> strList50 = unsubscribeMessage47.getTopics();
        org.meqantt.message.QoS qoS51 = unsubscribeMessage47.getQos();
        subscribeMessage44.setQos(qoS51);
        subAckMessage34.addQoS(qoS51);
        publishMessage26.setQos(qoS51);
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS51);
        unsubscribeMessage16.setQos(qoS51);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage5.setQos(qoS51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertNull(type38);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type49.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + qoS51 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS51.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13042");
        org.meqantt.message.Message.Header header1 = null;
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean3 = connectMessage2.isWillRetained();
        boolean boolean4 = connectMessage2.isWillRetained();
        java.lang.String str5 = connectMessage2.getUsername();
        boolean boolean6 = connectMessage2.isCleanSession();
        java.lang.String str7 = connectMessage2.getWill();
        boolean boolean8 = connectMessage2.hasUsername();
        java.lang.String str9 = connectMessage2.getProtocolId();
        org.meqantt.message.Message.Header header12 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage(header12);
        org.meqantt.message.QoS qoS15 = null;
        subscribeMessage13.addTopic("hi!", qoS15);
        java.util.List<org.meqantt.message.QoS> qoSList17 = subscribeMessage13.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage23 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str24 = connectMessage23.getUsername();
        org.meqantt.message.QoS qoS28 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage("", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList32 = subscribeMessage31.getTopics();
        org.meqantt.message.QoS qoS33 = subscribeMessage31.getQos();
        subscribeMessage29.addTopic("", qoS33);
        connectMessage23.setWill("", "\000d\000\001\001d", qoS33, true);
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage("hi!", qoS33);
        subscribeMessage13.addTopic("\000d\000\001\001d", qoS33);
        connectMessage2.setWill("\000d\000\001\001d", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS33, false);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS33);
        subscribeMessage41.setDup(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertNotNull(qoSList17);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + qoS33 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS33.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13043");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Header header7 = null;
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header7);
        java.lang.String str9 = connectMessage8.getClientId();
        boolean boolean10 = connectMessage8.isCleanSession();
        java.lang.String str11 = connectMessage8.getProtocolId();
        org.meqantt.message.SubAckMessage subAckMessage14 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList15 = subAckMessage14.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList16 = subAckMessage14.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList17 = subAckMessage14.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList19 = subscribeMessage18.getTopics();
        org.meqantt.message.QoS qoS20 = subscribeMessage18.getQos();
        org.meqantt.message.ConnectMessage connectMessage25 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str26 = connectMessage25.getProtocolId();
        org.meqantt.message.QoS qoS27 = connectMessage25.getQos();
        subscribeMessage18.addTopic("", qoS27);
        subAckMessage14.addQoS(qoS27);
        org.meqantt.message.SubAckMessage subAckMessage30 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList31 = subAckMessage30.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList32 = subAckMessage30.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage36 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str37 = connectMessage36.getProtocolId();
        org.meqantt.message.QoS qoS38 = connectMessage36.getQos();
        subAckMessage30.addQoS(qoS38);
        byte[] byteArray40 = subAckMessage30.toBytes();
        org.meqantt.message.ConnectMessage connectMessage45 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str46 = connectMessage45.getUsername();
        org.meqantt.message.QoS qoS50 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage("", qoS50);
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList54 = subscribeMessage53.getTopics();
        org.meqantt.message.QoS qoS55 = subscribeMessage53.getQos();
        subscribeMessage51.addTopic("", qoS55);
        connectMessage45.setWill("", "\000d\000\001\001d", qoS55, true);
        boolean boolean59 = connectMessage45.isCleanSession();
        java.lang.String str60 = connectMessage45.getClientId();
        java.lang.String str61 = connectMessage45.getPassword();
        java.lang.String str62 = connectMessage45.getWill();
        byte[] byteArray63 = connectMessage45.toBytes();
        org.meqantt.message.PublishMessage publishMessage64 = new org.meqantt.message.PublishMessage("\000\003hi!", byteArray63);
        org.meqantt.message.QoS qoS65 = publishMessage64.getQos();
        subAckMessage30.addQoS(qoS65);
        subAckMessage14.addQoS(qoS65);
        connectMessage8.setWill("Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]", "\000\000", qoS65, false);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage6.setQos(qoS65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MQIsdp" + "'", str11, "MQIsdp");
        org.junit.Assert.assertNull(qoSList15);
        org.junit.Assert.assertNull(qoSList16);
        org.junit.Assert.assertNull(qoSList17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "MQIsdp" + "'", str26, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList31);
        org.junit.Assert.assertNull(qoSList32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "MQIsdp" + "'", str37, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS38 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS38.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-112, 3, 0, 0, 0]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + qoS55 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS55.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\000d\000\001\001d" + "'", str62, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + qoS65 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS65.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13044");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean3 = connectMessage2.isWillRetained();
        java.lang.String str4 = connectMessage2.getWillTopic();
        java.lang.String str5 = connectMessage2.getProtocolId();
        connectMessage2.setCredentials("\ufffd(\000\000\000\ufffd\ufffd 0\n\ufffd\ufffd 0\n", "\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n");
        int int9 = connectMessage2.getKeepAlive();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MQIsdp" + "'", str5, "MQIsdp");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test13045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13045");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\000\000", true, (int) (short) 1);
        boolean boolean4 = connectMessage3.isRetained();
        java.lang.String str5 = connectMessage3.getUsername();
        connectMessage3.setCredentials("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test13046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13046");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage9 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.Message.Header header11 = null;
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header11);
        boolean boolean13 = connectMessage12.isWillRetained();
        boolean boolean14 = connectMessage12.isWillRetained();
        java.lang.String str15 = connectMessage12.getUsername();
        connectMessage12.setCredentials("\000d\000\001\001d", "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        org.meqantt.message.ConnectMessage connectMessage28 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str29 = connectMessage28.getUsername();
        org.meqantt.message.QoS qoS33 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("", qoS33);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList37 = subscribeMessage36.getTopics();
        org.meqantt.message.QoS qoS38 = subscribeMessage36.getQos();
        subscribeMessage34.addTopic("", qoS38);
        connectMessage28.setWill("", "\000d\000\001\001d", qoS38, true);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage("hi!", qoS38);
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS38);
        org.meqantt.message.SubscribeMessage subscribeMessage44 = new org.meqantt.message.SubscribeMessage("", qoS38);
        org.meqantt.message.SubscribeMessage subscribeMessage45 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS38);
        org.meqantt.message.SubscribeMessage subscribeMessage47 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList48 = subscribeMessage47.getTopics();
        org.meqantt.message.ConnectMessage connectMessage53 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str54 = connectMessage53.getProtocolId();
        org.meqantt.message.QoS qoS55 = connectMessage53.getQos();
        subscribeMessage47.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS55);
        subscribeMessage45.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS55);
        org.meqantt.message.ConnectMessage connectMessage62 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str63 = connectMessage62.getProtocolId();
        org.meqantt.message.QoS qoS64 = connectMessage62.getQos();
        subscribeMessage45.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS64);
        org.meqantt.message.ConnectMessage connectMessage74 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str75 = connectMessage74.getUsername();
        org.meqantt.message.QoS qoS79 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage80 = new org.meqantt.message.SubscribeMessage("", qoS79);
        org.meqantt.message.SubscribeMessage subscribeMessage82 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList83 = subscribeMessage82.getTopics();
        org.meqantt.message.QoS qoS84 = subscribeMessage82.getQos();
        subscribeMessage80.addTopic("", qoS84);
        connectMessage74.setWill("", "\000d\000\001\001d", qoS84, true);
        org.meqantt.message.SubscribeMessage subscribeMessage88 = new org.meqantt.message.SubscribeMessage("hi!", qoS84);
        org.meqantt.message.SubscribeMessage subscribeMessage89 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS84);
        org.meqantt.message.SubscribeMessage subscribeMessage90 = new org.meqantt.message.SubscribeMessage("", qoS84);
        org.meqantt.message.SubscribeMessage subscribeMessage91 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS84);
        subscribeMessage45.addTopic("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS84);
        connectMessage12.setWill("\000d\000\001\001d", "\001\003\003\001", qoS84, false);
        org.meqantt.message.SubscribeMessage subscribeMessage95 = new org.meqantt.message.SubscribeMessage("", qoS84);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage9.setQos(qoS84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + qoS38 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS38.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MQIsdp" + "'", str54, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS55 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS55.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "MQIsdp" + "'", str63, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS64 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS64.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertTrue("'" + qoS84 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS84.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13047");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage4 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage8 = new org.meqantt.message.PubRelMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage8.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type6.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test13048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13048");
        org.meqantt.netty.MqttMessageHandler mqttMessageHandler0 = new org.meqantt.netty.MqttMessageHandler();
        org.meqantt.MqttListener mqttListener1 = null;
        mqttMessageHandler0.setListener(mqttListener1);
        org.meqantt.MqttListener mqttListener3 = null;
        mqttMessageHandler0.setListener(mqttListener3);
        org.meqantt.MqttListener mqttListener5 = null;
        mqttMessageHandler0.setListener(mqttListener5);
        org.meqantt.MqttListener mqttListener7 = null;
        mqttMessageHandler0.setListener(mqttListener7);
        org.meqantt.MqttListener mqttListener9 = null;
        mqttMessageHandler0.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        mqttMessageHandler0.setListener(mqttListener11);
        org.meqantt.MqttListener mqttListener13 = null;
        mqttMessageHandler0.setListener(mqttListener13);
        org.meqantt.MqttListener mqttListener15 = null;
        mqttMessageHandler0.setListener(mqttListener15);
        org.meqantt.MqttListener mqttListener17 = null;
        mqttMessageHandler0.setListener(mqttListener17);
        org.meqantt.MqttListener mqttListener19 = null;
        mqttMessageHandler0.setListener(mqttListener19);
        org.meqantt.MqttListener mqttListener21 = null;
        mqttMessageHandler0.setListener(mqttListener21);
        org.meqantt.MqttListener mqttListener23 = null;
        mqttMessageHandler0.setListener(mqttListener23);
        org.meqantt.MqttListener mqttListener25 = null;
        mqttMessageHandler0.setListener(mqttListener25);
        org.meqantt.MqttListener mqttListener27 = null;
        mqttMessageHandler0.setListener(mqttListener27);
        org.meqantt.MqttListener mqttListener29 = null;
        mqttMessageHandler0.setListener(mqttListener29);
        org.meqantt.MqttListener mqttListener31 = null;
        mqttMessageHandler0.setListener(mqttListener31);
        org.meqantt.MqttListener mqttListener33 = null;
        mqttMessageHandler0.setListener(mqttListener33);
        org.meqantt.MqttListener mqttListener35 = null;
        mqttMessageHandler0.setListener(mqttListener35);
        org.meqantt.MqttListener mqttListener37 = null;
        mqttMessageHandler0.setListener(mqttListener37);
        org.meqantt.MqttListener mqttListener39 = null;
        mqttMessageHandler0.setListener(mqttListener39);
        org.meqantt.MqttListener mqttListener41 = null;
        mqttMessageHandler0.setListener(mqttListener41);
        org.jboss.netty.channel.ChannelHandlerContext channelHandlerContext43 = null;
        org.jboss.netty.channel.ChannelStateEvent channelStateEvent44 = null;
        // The following exception was thrown during execution in test generation
        try {
            mqttMessageHandler0.disconnectRequested(channelHandlerContext43, channelStateEvent44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13049");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        int int3 = connectMessage2.getKeepAlive();
        org.meqantt.message.SubscribeMessage subscribeMessage7 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList8 = subscribeMessage7.getTopics();
        org.meqantt.message.QoS qoS9 = subscribeMessage7.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage("", qoS9);
        connectMessage2.setWill("hi!", "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", qoS9, true);
        connectMessage2.setCredentials("\001\003\003\001");
        boolean boolean15 = connectMessage2.isCleanSession();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage2.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + qoS9 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS9.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13050");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isCleanSession();
        boolean boolean3 = connectMessage1.hasUsername();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test13051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13051");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        connectMessage1.setCredentials("");
        java.lang.String str8 = connectMessage1.getClientId();
        org.meqantt.message.QoS qoS9 = connectMessage1.getWillQoS();
        boolean boolean10 = connectMessage1.isCleanSession();
        org.meqantt.message.QoS qoS11 = connectMessage1.getWillQoS();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(qoS9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(qoS11);
    }

    @Test
    public void test13052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13052");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage3 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.Message.Header header5 = null;
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header5);
        boolean boolean7 = connectMessage6.isWillRetained();
        boolean boolean8 = connectMessage6.isWillRetained();
        java.lang.String str9 = connectMessage6.getUsername();
        boolean boolean10 = connectMessage6.isCleanSession();
        java.lang.String str11 = connectMessage6.getWill();
        boolean boolean12 = connectMessage6.hasUsername();
        java.lang.String str13 = connectMessage6.getProtocolId();
        org.meqantt.message.Message.Header header16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage(header16);
        org.meqantt.message.QoS qoS19 = null;
        subscribeMessage17.addTopic("hi!", qoS19);
        java.util.List<org.meqantt.message.QoS> qoSList21 = subscribeMessage17.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage27 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str28 = connectMessage27.getUsername();
        org.meqantt.message.QoS qoS32 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("", qoS32);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList36 = subscribeMessage35.getTopics();
        org.meqantt.message.QoS qoS37 = subscribeMessage35.getQos();
        subscribeMessage33.addTopic("", qoS37);
        connectMessage27.setWill("", "\000d\000\001\001d", qoS37, true);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("hi!", qoS37);
        subscribeMessage17.addTopic("\000d\000\001\001d", qoS37);
        connectMessage6.setWill("\000d\000\001\001d", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS37, false);
        subscribeMessage3.addTopic("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", qoS37);
        org.meqantt.message.ConnectMessage connectMessage49 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str50 = connectMessage49.getUsername();
        org.meqantt.message.QoS qoS54 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage("", qoS54);
        org.meqantt.message.SubscribeMessage subscribeMessage57 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList58 = subscribeMessage57.getTopics();
        org.meqantt.message.QoS qoS59 = subscribeMessage57.getQos();
        subscribeMessage55.addTopic("", qoS59);
        connectMessage49.setWill("", "\000d\000\001\001d", qoS59, true);
        boolean boolean63 = connectMessage49.isCleanSession();
        java.lang.String str64 = connectMessage49.getClientId();
        byte byte65 = connectMessage49.getProtocolVersion();
        java.lang.String str66 = connectMessage49.getPassword();
        boolean boolean67 = connectMessage49.isCleanSession();
        int int68 = connectMessage49.getKeepAlive();
        java.lang.String str69 = connectMessage49.getPassword();
        org.meqantt.message.QoS qoS70 = connectMessage49.getWillQoS();
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage3.setQos(qoS70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MQIsdp" + "'", str13, "MQIsdp");
        org.junit.Assert.assertNotNull(qoSList21);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + qoS37 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS37.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + qoS59 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS59.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) 3 + "'", byte65 == (byte) 3);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + qoS70 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS70.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13053");
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str7 = connectMessage6.getUsername();
        org.meqantt.message.QoS qoS11 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage("", qoS11);
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList15 = subscribeMessage14.getTopics();
        org.meqantt.message.QoS qoS16 = subscribeMessage14.getQos();
        subscribeMessage12.addTopic("", qoS16);
        connectMessage6.setWill("", "\000d\000\001\001d", qoS16, true);
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 00010111 \027 23\n02: 11101111 \357 239\n03: 10111111 \277 191\n04: 10111101 \275 189\n05: 00001000 \b 8\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n10: 11000000 \300 192\n11: 10000000 \200 128\n12: 00000100 \004 4\n13: 11101111 \357 239\n14: 10111111 \277 191\n15: 10111101 \275 189\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 11101111 \357 239\n23: 10111111 \277 191\n24: 10111101 \275 189\n", qoS16);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13054");
        org.meqantt.message.SubAckMessage subAckMessage1 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage1.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage1.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str8 = connectMessage7.getProtocolId();
        org.meqantt.message.QoS qoS9 = connectMessage7.getQos();
        subAckMessage1.addQoS(qoS9);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage("hi!", qoS9);
        boolean boolean12 = subscribeMessage11.isRetained();
        org.meqantt.message.QoS qoS14 = null;
        subscribeMessage11.addTopic("00: 00000000 \000 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", qoS14);
        org.meqantt.message.Message.Header header18 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage19 = new org.meqantt.message.ConnectMessage(header18);
        org.meqantt.message.Message.Type type20 = header18.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage21 = new org.meqantt.message.UnsubscribeMessage(header18);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage(header18);
        org.meqantt.message.DisconnectMessage disconnectMessage23 = new org.meqantt.message.DisconnectMessage(header18);
        org.meqantt.message.DisconnectMessage disconnectMessage24 = new org.meqantt.message.DisconnectMessage(header18);
        org.meqantt.message.SubAckMessage subAckMessage25 = new org.meqantt.message.SubAckMessage(header18);
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList30 = subscribeMessage29.getTopics();
        org.meqantt.message.QoS qoS31 = subscribeMessage29.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("", qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("\000\000", qoS31);
        subAckMessage25.addQoS(qoS31);
        subscribeMessage11.addTopic("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", qoS31);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MQIsdp" + "'", str8, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS9 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS9.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13055");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        byte byte27 = connectMessage3.getProtocolVersion();
        org.meqantt.message.QoS qoS28 = connectMessage3.getWillQoS();
        boolean boolean29 = connectMessage3.hasWill();
        java.lang.String str30 = connectMessage3.getClientId();
        java.lang.String str31 = connectMessage3.getProtocolId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 3 + "'", byte27 == (byte) 3);
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "MQIsdp" + "'", str30, "MQIsdp");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MQIsdp" + "'", str31, "MQIsdp");
    }

    @Test
    public void test13056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13056");
        org.meqantt.message.SubscribeMessage subscribeMessage0 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList1 = subscribeMessage0.getTopics();
        org.meqantt.message.QoS qoS2 = subscribeMessage0.getQos();
        org.meqantt.message.QoS qoS4 = null;
        subscribeMessage0.addTopic("", qoS4);
        java.util.List<org.meqantt.message.QoS> qoSList6 = subscribeMessage0.getTopicQoSs();
        subscribeMessage0.setDup(false);
        java.util.List<org.meqantt.message.QoS> qoSList9 = subscribeMessage0.getTopicQoSs();
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage0.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + qoS2 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS2.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList6);
        org.junit.Assert.assertNotNull(qoSList9);
    }

    @Test
    public void test13057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13057");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        byte byte27 = connectMessage3.getProtocolVersion();
        org.meqantt.message.ConnectMessage connectMessage34 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean35 = connectMessage34.hasWill();
        java.lang.String str36 = connectMessage34.getWill();
        org.meqantt.message.Message.Header header39 = null;
        org.meqantt.message.ConnectMessage connectMessage40 = new org.meqantt.message.ConnectMessage(header39);
        boolean boolean41 = connectMessage40.isWillRetained();
        boolean boolean42 = connectMessage40.isWillRetained();
        java.lang.String str43 = connectMessage40.getUsername();
        org.meqantt.message.QoS qoS47 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage48 = new org.meqantt.message.SubscribeMessage("", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList51 = subscribeMessage50.getTopics();
        org.meqantt.message.QoS qoS52 = subscribeMessage50.getQos();
        subscribeMessage48.addTopic("", qoS52);
        connectMessage40.setWill("hi!", "", qoS52, false);
        connectMessage34.setWill("MQIsdp", "hi!", qoS52, false);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS52);
        connectMessage3.setWill("", "MQIsdp", qoS52, false);
        connectMessage3.setCredentials("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        boolean boolean64 = connectMessage3.isWillRetained();
        java.lang.String str65 = connectMessage3.getPassword();
        boolean boolean66 = connectMessage3.isDup();
        connectMessage3.setCredentials("MQIsdp");
        boolean boolean69 = connectMessage3.isWillRetained();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 3 + "'", byte27 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "00: 00000000 \000 0\n01: 00000000 \000 0\n" + "'", str65, "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test13058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13058");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        connectMessage1.setCredentials("\000d\000\001\001d");
        connectMessage1.setCredentials("00: 01100100 d 100\n01: 00000000 \000 0\n", "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        java.lang.String str7 = connectMessage1.getPassword();
        boolean boolean8 = connectMessage1.hasWill();
        java.lang.String str9 = connectMessage1.getClientId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str7, "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test13059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13059");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
    }

    @Test
    public void test13060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13060");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("00: 00000000 \000 0\n01: 00000000 \000 0\n");
        nettyClient1.connect("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n", 2);
        nettyClient1.connect("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", (int) 'a');
        nettyClient1.disconnect();
    }

    @Test
    public void test13061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13061");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage4 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type8 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage9.getGrantedQoSs();
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type8.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(qoSList10);
    }

    @Test
    public void test13062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13062");
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str10 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS14 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage("", qoS14);
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList18 = subscribeMessage17.getTopics();
        org.meqantt.message.QoS qoS19 = subscribeMessage17.getQos();
        subscribeMessage15.addTopic("", qoS19);
        connectMessage9.setWill("", "\000d\000\001\001d", qoS19, true);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("hi!", qoS19);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS19);
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage("", qoS19);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS19);
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList29 = subscribeMessage28.getTopics();
        org.meqantt.message.ConnectMessage connectMessage34 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str35 = connectMessage34.getProtocolId();
        org.meqantt.message.QoS qoS36 = connectMessage34.getQos();
        subscribeMessage28.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS36);
        subscribeMessage26.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS36);
        org.meqantt.message.ConnectMessage connectMessage43 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str44 = connectMessage43.getProtocolId();
        org.meqantt.message.QoS qoS45 = connectMessage43.getQos();
        subscribeMessage26.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS45);
        int int47 = subscribeMessage26.getMessageId();
        org.meqantt.message.ConnectMessage connectMessage56 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str57 = connectMessage56.getUsername();
        org.meqantt.message.QoS qoS61 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage62 = new org.meqantt.message.SubscribeMessage("", qoS61);
        org.meqantt.message.SubscribeMessage subscribeMessage64 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList65 = subscribeMessage64.getTopics();
        org.meqantt.message.QoS qoS66 = subscribeMessage64.getQos();
        subscribeMessage62.addTopic("", qoS66);
        connectMessage56.setWill("", "\000d\000\001\001d", qoS66, true);
        org.meqantt.message.SubscribeMessage subscribeMessage70 = new org.meqantt.message.SubscribeMessage("hi!", qoS66);
        org.meqantt.message.SubscribeMessage subscribeMessage71 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS66);
        org.meqantt.message.SubscribeMessage subscribeMessage72 = new org.meqantt.message.SubscribeMessage("", qoS66);
        org.meqantt.message.SubscribeMessage subscribeMessage73 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS66);
        org.meqantt.message.SubscribeMessage subscribeMessage75 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList76 = subscribeMessage75.getTopics();
        org.meqantt.message.ConnectMessage connectMessage81 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str82 = connectMessage81.getProtocolId();
        org.meqantt.message.QoS qoS83 = connectMessage81.getQos();
        subscribeMessage75.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS83);
        subscribeMessage73.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS83);
        subscribeMessage26.addTopic("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS83);
        org.meqantt.message.SubscribeMessage subscribeMessage87 = new org.meqantt.message.SubscribeMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", qoS83);
        org.meqantt.message.SubscribeMessage subscribeMessage88 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS83);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage88.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE can't set the DUP flag.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "MQIsdp" + "'", str35, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MQIsdp" + "'", str44, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS45 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS45.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + qoS66 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS66.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "MQIsdp" + "'", str82, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS83 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS83.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13063");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList9 = subAckMessage8.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage8.getGrantedQoSs();
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage();
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList14 = subscribeMessage13.getTopics();
        org.meqantt.message.QoS qoS15 = subscribeMessage13.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage("", qoS15);
        subAckMessage11.addQoS(qoS15);
        subAckMessage8.addQoS(qoS15);
        subAckMessage8.setMessageId(10);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage8.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(qoSList9);
        org.junit.Assert.assertNull(qoSList10);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13064");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str11 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str13 = connectMessage12.getClientId();
        boolean boolean14 = connectMessage12.isWillRetained();
        connectMessage12.setWill("\000\000", "\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str11, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test13065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13065");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        java.lang.String str8 = connectMessage1.getClientId();
        java.lang.String str9 = connectMessage1.getWill();
        java.lang.String str10 = connectMessage1.getPassword();
        boolean boolean11 = connectMessage1.isWillRetained();
        byte byte12 = connectMessage1.getProtocolVersion();
        boolean boolean13 = connectMessage1.hasWill();
        byte byte14 = connectMessage1.getProtocolVersion();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 3 + "'", byte12 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 3 + "'", byte14 == (byte) 3);
    }

    @Test
    public void test13066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13066");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage13 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage14 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage15 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage20 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        java.lang.String str21 = connectMessage20.getPassword();
        boolean boolean22 = connectMessage20.hasUsername();
        int int23 = connectMessage20.getKeepAlive();
        org.meqantt.message.Message.Header header28 = null;
        org.meqantt.message.ConnectMessage connectMessage29 = new org.meqantt.message.ConnectMessage(header28);
        boolean boolean30 = connectMessage29.isWillRetained();
        boolean boolean31 = connectMessage29.isWillRetained();
        java.lang.String str32 = connectMessage29.getUsername();
        boolean boolean33 = connectMessage29.isCleanSession();
        java.lang.String str34 = connectMessage29.getWill();
        boolean boolean35 = connectMessage29.hasUsername();
        java.lang.String str36 = connectMessage29.getProtocolId();
        org.meqantt.message.Message.Header header39 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage(header39);
        org.meqantt.message.QoS qoS42 = null;
        subscribeMessage40.addTopic("hi!", qoS42);
        java.util.List<org.meqantt.message.QoS> qoSList44 = subscribeMessage40.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage50 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str51 = connectMessage50.getUsername();
        org.meqantt.message.QoS qoS55 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage56 = new org.meqantt.message.SubscribeMessage("", qoS55);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList59 = subscribeMessage58.getTopics();
        org.meqantt.message.QoS qoS60 = subscribeMessage58.getQos();
        subscribeMessage56.addTopic("", qoS60);
        connectMessage50.setWill("", "\000d\000\001\001d", qoS60, true);
        org.meqantt.message.SubscribeMessage subscribeMessage64 = new org.meqantt.message.SubscribeMessage("hi!", qoS60);
        subscribeMessage40.addTopic("\000d\000\001\001d", qoS60);
        connectMessage29.setWill("\000d\000\001\001d", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS60, false);
        org.meqantt.message.SubscribeMessage subscribeMessage68 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS60);
        org.meqantt.message.SubscribeMessage subscribeMessage69 = new org.meqantt.message.SubscribeMessage("00: 00010000 \020 16\n01: 00001110 \016 14\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n", qoS60);
        connectMessage20.setWill("00: 10000000 \200 128\n01: 00001011 \013 11\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000110 \006 6\n06: 01001101 M 77\n07: 01010001 Q 81\n08: 01001001 I 73\n09: 01110011 s 115\n10: 01100100 d 100\n11: 01110000 p 112\n12: 00000000 \000 0\n", "\000<Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS60, true);
        publishMessage16.setQos(qoS60);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "MQIsdp" + "'", str36, "MQIsdp");
        org.junit.Assert.assertNotNull(qoSList44);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13067");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("hi!");
        org.meqantt.MqttListener mqttListener2 = null;
        nettyClient1.setListener(mqttListener2);
        // The following exception was thrown during execution in test generation
        try {
            nettyClient1.subscribe("00: 00100000   32\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00000010 \002 2\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13068");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        java.lang.String str8 = connectMessage1.getClientId();
        java.lang.String str9 = connectMessage1.getWill();
        byte byte10 = connectMessage1.getProtocolVersion();
        java.lang.String str11 = connectMessage1.getPassword();
        boolean boolean12 = connectMessage1.hasPassword();
        org.meqantt.message.QoS qoS13 = connectMessage1.getWillQoS();
        java.lang.String str14 = connectMessage1.getClientId();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 3 + "'", byte10 == (byte) 3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test13069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13069");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.subscribe("\000d\000\001\001d");
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.ping();
        nettyClient1.connect("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", (int) (byte) 3);
        nettyClient1.publish("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", "\000\000");
        nettyClient1.disconnect();
    }

    @Test
    public void test13070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13070");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage8 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.QoS qoS10 = subscribeMessage9.getQos();
        subscribeMessage9.setMessageId((int) '\001');
        org.meqantt.message.ConnectMessage connectMessage17 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean18 = connectMessage17.hasWill();
        java.lang.String str19 = connectMessage17.getWill();
        boolean boolean20 = connectMessage17.hasUsername();
        connectMessage17.setCredentials("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage26 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS27 = unsubscribeMessage26.getQos();
        connectMessage17.setWill("00: 01100100 d 100\n01: 00000000 \000 0\n", "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", qoS27, true);
        subscribeMessage9.addTopic("00: 00000011 \003 3\n01: 00000000 \000 0\n", qoS27);
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13071");
        org.meqantt.message.Message.Header header2 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage3 = new org.meqantt.message.PingReqMessage(header2);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage(header2);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header2);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header2);
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean13 = connectMessage12.hasWill();
        java.lang.String str14 = connectMessage12.getWill();
        org.meqantt.message.Message.Header header17 = null;
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage(header17);
        boolean boolean19 = connectMessage18.isWillRetained();
        boolean boolean20 = connectMessage18.isWillRetained();
        java.lang.String str21 = connectMessage18.getUsername();
        org.meqantt.message.QoS qoS25 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("", qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList29 = subscribeMessage28.getTopics();
        org.meqantt.message.QoS qoS30 = subscribeMessage28.getQos();
        subscribeMessage26.addTopic("", qoS30);
        connectMessage18.setWill("hi!", "", qoS30, false);
        connectMessage12.setWill("MQIsdp", "hi!", qoS30, false);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS30);
        subscribeMessage6.addTopic("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS30);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("00: 10000000 \200 128\n01: 00001011 \013 11\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000110 \006 6\n06: 01001101 M 77\n07: 01010001 Q 81\n08: 01001001 I 73\n09: 01110011 s 115\n10: 01100100 d 100\n11: 01110000 p 112\n12: 00000000 \000 0\n", qoS30);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + qoS30 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS30.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13072");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        org.meqantt.message.Message.Type type3 = unsubscribeMessage1.getType();
        java.util.List<java.lang.String> strList4 = unsubscribeMessage1.getTopics();
        org.meqantt.message.QoS qoS5 = unsubscribeMessage1.getQos();
        unsubscribeMessage1.addTopic("MQIsdp");
        unsubscribeMessage1.setDup(false);
        int int10 = unsubscribeMessage1.getMessageId();
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type3.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + qoS5 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS5.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test13073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13073");
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str8 = connectMessage7.getUsername();
        org.meqantt.message.QoS qoS12 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage("", qoS12);
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList16 = subscribeMessage15.getTopics();
        org.meqantt.message.QoS qoS17 = subscribeMessage15.getQos();
        subscribeMessage13.addTopic("", qoS17);
        connectMessage7.setWill("", "\000d\000\001\001d", qoS17, true);
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage("hi!", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList27 = subscribeMessage26.getTopics();
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str33 = connectMessage32.getProtocolId();
        org.meqantt.message.QoS qoS34 = connectMessage32.getQos();
        subscribeMessage26.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS34);
        subscribeMessage24.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS34);
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str42 = connectMessage41.getProtocolId();
        org.meqantt.message.QoS qoS43 = connectMessage41.getQos();
        subscribeMessage24.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS43);
        org.meqantt.message.ConnectMessage connectMessage53 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str54 = connectMessage53.getUsername();
        org.meqantt.message.QoS qoS58 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage59 = new org.meqantt.message.SubscribeMessage("", qoS58);
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList62 = subscribeMessage61.getTopics();
        org.meqantt.message.QoS qoS63 = subscribeMessage61.getQos();
        subscribeMessage59.addTopic("", qoS63);
        connectMessage53.setWill("", "\000d\000\001\001d", qoS63, true);
        org.meqantt.message.SubscribeMessage subscribeMessage67 = new org.meqantt.message.SubscribeMessage("hi!", qoS63);
        org.meqantt.message.SubscribeMessage subscribeMessage68 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS63);
        org.meqantt.message.SubscribeMessage subscribeMessage69 = new org.meqantt.message.SubscribeMessage("", qoS63);
        org.meqantt.message.SubscribeMessage subscribeMessage70 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS63);
        subscribeMessage24.addTopic("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS63);
        boolean boolean72 = subscribeMessage24.isDup();
        java.util.List<org.meqantt.message.QoS> qoSList73 = subscribeMessage24.getTopicQoSs();
        org.meqantt.message.Message.Type type74 = subscribeMessage24.getType();
        subscribeMessage24.setDup(false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQIsdp" + "'", str33, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQIsdp" + "'", str42, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS43 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS43.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + qoS63 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS63.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(qoSList73);
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type74.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
    }

    @Test
    public void test13074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13074");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 10);
        org.meqantt.message.Message.Header header13 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage(header13);
        org.meqantt.message.QoS qoS16 = null;
        subscribeMessage14.addTopic("hi!", qoS16);
        java.util.List<org.meqantt.message.QoS> qoSList18 = subscribeMessage14.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage24 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str25 = connectMessage24.getUsername();
        org.meqantt.message.QoS qoS29 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("", qoS29);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList33 = subscribeMessage32.getTopics();
        org.meqantt.message.QoS qoS34 = subscribeMessage32.getQos();
        subscribeMessage30.addTopic("", qoS34);
        connectMessage24.setWill("", "\000d\000\001\001d", qoS34, true);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("hi!", qoS34);
        subscribeMessage14.addTopic("\000d\000\001\001d", qoS34);
        connectMessage10.setWill("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", "\000\000", qoS34, true);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage6.setQos(qoS34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type4.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNotNull(qoSList18);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13075");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage9.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test13076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13076");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        connectMessage1.setCredentials("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList15 = subscribeMessage14.getTopics();
        org.meqantt.message.QoS qoS16 = subscribeMessage14.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS16);
        org.meqantt.message.QoS qoS19 = subscribeMessage18.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList24 = subscribeMessage23.getTopics();
        org.meqantt.message.QoS qoS25 = subscribeMessage23.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("", qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS25);
        org.meqantt.message.QoS qoS28 = subscribeMessage27.getQos();
        subscribeMessage18.addTopic("", qoS28);
        org.meqantt.message.PublishMessage publishMessage33 = new org.meqantt.message.PublishMessage("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "MQIsdp");
        org.meqantt.message.QoS qoS34 = publishMessage33.getQos();
        subscribeMessage18.addTopic("", qoS34);
        connectMessage1.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "hi!", qoS34, false);
        boolean boolean38 = connectMessage1.isWillRetained();
        boolean boolean39 = connectMessage1.isCleanSession();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = connectMessage1.isRetained();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test13077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13077");
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", true, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Client id cannot be null and must be at most 23 characters long: ?D00: 00000001 ? 1?01: 00000011 ? 3?02: 00000011 ? 3?03: 00000001 ? 1?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13078");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        boolean boolean6 = connectMessage3.hasWill();
        boolean boolean7 = connectMessage3.hasPassword();
        connectMessage3.setCredentials("00: 00000011 \003 3\n01: 00000000 \000 0\n", "\000<Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13079");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        int int5 = unsubscribeMessage4.getMessageId();
        int int6 = unsubscribeMessage4.getMessageId();
        unsubscribeMessage4.addTopic("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean13 = connectMessage12.hasWill();
        java.lang.String str14 = connectMessage12.getWill();
        org.meqantt.message.Message.Header header17 = null;
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage(header17);
        boolean boolean19 = connectMessage18.isWillRetained();
        boolean boolean20 = connectMessage18.isWillRetained();
        java.lang.String str21 = connectMessage18.getUsername();
        org.meqantt.message.QoS qoS25 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("", qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList29 = subscribeMessage28.getTopics();
        org.meqantt.message.QoS qoS30 = subscribeMessage28.getQos();
        subscribeMessage26.addTopic("", qoS30);
        connectMessage18.setWill("hi!", "", qoS30, false);
        connectMessage12.setWill("MQIsdp", "hi!", qoS30, false);
        connectMessage12.setCredentials("\000d\000\001\001d");
        java.lang.String str38 = connectMessage12.getWill();
        boolean boolean39 = connectMessage12.isWillRetained();
        org.meqantt.message.Message.Header header43 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage44 = new org.meqantt.message.PingReqMessage(header43);
        org.meqantt.message.PubCompMessage pubCompMessage45 = new org.meqantt.message.PubCompMessage(header43);
        org.meqantt.message.SubAckMessage subAckMessage46 = new org.meqantt.message.SubAckMessage(header43);
        org.meqantt.message.SubAckMessage subAckMessage47 = new org.meqantt.message.SubAckMessage(header43);
        org.meqantt.message.ConnectMessage connectMessage48 = new org.meqantt.message.ConnectMessage(header43);
        org.meqantt.message.SubAckMessage subAckMessage49 = new org.meqantt.message.SubAckMessage(header43);
        org.meqantt.message.ConnectMessage connectMessage53 = new org.meqantt.message.ConnectMessage("MQIsdp", true, (int) 'a');
        boolean boolean54 = connectMessage53.hasPassword();
        org.meqantt.message.QoS qoS55 = connectMessage53.getQos();
        subAckMessage49.addQoS(qoS55);
        connectMessage12.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS55, true);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage4.setQos(qoS55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + qoS30 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS30.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + qoS55 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS55.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13080");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        java.lang.String str10 = header1.toString();
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage12 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage13 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage14 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage15 = new org.meqantt.message.SubAckMessage(header1);
        int int16 = subAckMessage15.getMessageId();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str10, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test13081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13081");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage8 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage12.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13082");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        boolean boolean6 = connectMessage3.hasUsername();
        connectMessage3.setCredentials("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage12 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS13 = unsubscribeMessage12.getQos();
        connectMessage3.setWill("00: 01100100 d 100\n01: 00000000 \000 0\n", "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", qoS13, true);
        boolean boolean16 = connectMessage3.hasWill();
        java.lang.String str17 = connectMessage3.getClientId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MQIsdp" + "'", str17, "MQIsdp");
    }

    @Test
    public void test13083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13083");
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 11000000 \300 192\n05: 10000000 \200 128\n", "00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n");
        byte[] byteArray4 = publishMessage3.getData();
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage("00: 00000000 \000 0\n01: 00000000 \000 0\n", byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 72, 48, 48, 58, 32, 48, 49, 49, 48, 48, 48, 48, 48, 32, 96, 32, 57, 54, 10, 48, 49, 58, 32, 48, 48, 48, 48, 48, 48, 49, 48, 32, 2, 32, 50, 10, 48, 50, 58, 32, 48, 48, 48, 48, 48, 48, 48, 48, 32, -64, -128, 32, 48, 10, 48, 51, 58, 32, 48, 49, 49, 48, 48, 49, 48, 48, 32, 100, 32, 49, 48, 48, 10]");
    }

    @Test
    public void test13084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13084");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        java.lang.String str6 = header1.toString();
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage7.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13085");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage10 = new org.meqantt.message.PingRespMessage(header1);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13086");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage10 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage12 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage13 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13087");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("\000\003hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        org.meqantt.message.Message.Header header5 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type6 = header5.getType();
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header5);
        org.meqantt.message.Message.Header header9 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str10 = header9.toString();
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header9);
        org.meqantt.message.PublishMessage publishMessage12 = new org.meqantt.message.PublishMessage(header9);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage15 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS16 = unsubscribeMessage15.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        publishMessage12.setQos(qoS16);
        subAckMessage7.addQoS(qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS16);
        unsubscribeMessage1.setQos(qoS16);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type6.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str10, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13088");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 10);
        boolean boolean4 = connectMessage3.hasPassword();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getPassword();
        java.lang.String str7 = connectMessage3.getWillTopic();
        java.lang.String str8 = connectMessage3.getUsername();
        boolean boolean9 = connectMessage3.isWillRetained();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13089");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage11 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.QoS qoS13 = subAckMessage12.getQos();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13090");
        org.meqantt.SocketClient socketClient1 = new org.meqantt.SocketClient("\000=Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]");
        // The following exception was thrown during execution in test generation
        try {
            socketClient1.connect("p\002\000\n", (int) '\001');
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: p???");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13091");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage8 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage11.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13092");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str7 = publishMessage6.getTopic();
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type10 = subscribeMessage9.getType();
        org.meqantt.message.QoS qoS13 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage("", qoS13);
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList17 = subscribeMessage16.getTopics();
        org.meqantt.message.QoS qoS18 = subscribeMessage16.getQos();
        subscribeMessage14.addTopic("", qoS18);
        subscribeMessage9.addTopic("MQIsdp", qoS18);
        java.util.List<org.meqantt.message.QoS> qoSList21 = subscribeMessage9.getTopicQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList24 = subscribeMessage23.getTopics();
        org.meqantt.message.QoS qoS25 = subscribeMessage23.getQos();
        org.meqantt.message.QoS qoS27 = null;
        subscribeMessage23.addTopic("", qoS27);
        org.meqantt.message.ConnectMessage connectMessage37 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str38 = connectMessage37.getUsername();
        org.meqantt.message.QoS qoS42 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage("", qoS42);
        org.meqantt.message.SubscribeMessage subscribeMessage45 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList46 = subscribeMessage45.getTopics();
        org.meqantt.message.QoS qoS47 = subscribeMessage45.getQos();
        subscribeMessage43.addTopic("", qoS47);
        connectMessage37.setWill("", "\000d\000\001\001d", qoS47, true);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage("hi!", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage54 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS47);
        subscribeMessage23.addTopic("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS47);
        subscribeMessage9.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS47);
        subscribeMessage9.setMessageId((int) (short) 10);
        org.meqantt.message.ConnectMessage connectMessage63 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean64 = connectMessage63.hasWill();
        java.lang.String str65 = connectMessage63.getWill();
        org.meqantt.message.Message.Header header68 = null;
        org.meqantt.message.ConnectMessage connectMessage69 = new org.meqantt.message.ConnectMessage(header68);
        boolean boolean70 = connectMessage69.isWillRetained();
        boolean boolean71 = connectMessage69.isWillRetained();
        java.lang.String str72 = connectMessage69.getUsername();
        org.meqantt.message.QoS qoS76 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage77 = new org.meqantt.message.SubscribeMessage("", qoS76);
        org.meqantt.message.SubscribeMessage subscribeMessage79 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList80 = subscribeMessage79.getTopics();
        org.meqantt.message.QoS qoS81 = subscribeMessage79.getQos();
        subscribeMessage77.addTopic("", qoS81);
        connectMessage69.setWill("hi!", "", qoS81, false);
        connectMessage63.setWill("MQIsdp", "hi!", qoS81, false);
        connectMessage63.setCredentials("\000d\000\001\001d");
        org.meqantt.message.QoS qoS89 = connectMessage63.getWillQoS();
        subscribeMessage9.addTopic("00: 00000000 \000 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", qoS89);
        org.meqantt.message.SubscribeMessage subscribeMessage91 = new org.meqantt.message.SubscribeMessage("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS89);
        publishMessage6.setQos(qoS89);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type10.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList21);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + qoS47 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS47.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertTrue("'" + qoS81 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS81.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS89 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS89.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13093");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage6 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage12 = new org.meqantt.message.ConnAckMessage(header1);
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test13094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13094");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList6 = subscribeMessage5.getTopicQoSs();
        subscribeMessage5.setDup(false);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(qoSList6);
    }

    @Test
    public void test13095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13095");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        byte[] byteArray7 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str8 = org.meqantt.util.FormatUtil.toString(byteArray7);
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage("hi!", byteArray7);
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type11 = subscribeMessage10.getType();
        org.meqantt.message.ConnectMessage connectMessage17 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean18 = connectMessage17.hasWill();
        java.lang.String str19 = connectMessage17.getWill();
        org.meqantt.message.Message.Header header22 = null;
        org.meqantt.message.ConnectMessage connectMessage23 = new org.meqantt.message.ConnectMessage(header22);
        boolean boolean24 = connectMessage23.isWillRetained();
        boolean boolean25 = connectMessage23.isWillRetained();
        java.lang.String str26 = connectMessage23.getUsername();
        org.meqantt.message.QoS qoS30 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage("", qoS30);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList34 = subscribeMessage33.getTopics();
        org.meqantt.message.QoS qoS35 = subscribeMessage33.getQos();
        subscribeMessage31.addTopic("", qoS35);
        connectMessage23.setWill("hi!", "", qoS35, false);
        connectMessage17.setWill("MQIsdp", "hi!", qoS35, false);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS35);
        subscribeMessage10.addTopic("\001\003\003\001", qoS35);
        publishMessage9.setQos(qoS35);
        subAckMessage4.addQoS(qoS35);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage46 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList47 = unsubscribeMessage46.getTopics();
        org.meqantt.message.Message.Type type48 = unsubscribeMessage46.getType();
        java.util.List<java.lang.String> strList49 = unsubscribeMessage46.getTopics();
        org.meqantt.message.QoS qoS50 = unsubscribeMessage46.getQos();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage4.setQos(qoS50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type11.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + qoS35 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS35.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type48.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + qoS50 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS50.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13096");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage8 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage9 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage10 = new org.meqantt.message.PingRespMessage(header1);
        java.lang.String str11 = header1.toString();
        org.meqantt.message.UnsubAckMessage unsubAckMessage12 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage12.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str11, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13097");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        connectMessage1.setWill("MQIsdp", "");
        java.lang.String str6 = connectMessage1.getWillTopic();
        org.meqantt.message.ConnectMessage connectMessage16 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str17 = connectMessage16.getUsername();
        org.meqantt.message.QoS qoS21 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("", qoS21);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList25 = subscribeMessage24.getTopics();
        org.meqantt.message.QoS qoS26 = subscribeMessage24.getQos();
        subscribeMessage22.addTopic("", qoS26);
        connectMessage16.setWill("", "\000d\000\001\001d", qoS26, true);
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("hi!", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList36 = subscribeMessage35.getTopics();
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str42 = connectMessage41.getProtocolId();
        org.meqantt.message.QoS qoS43 = connectMessage41.getQos();
        subscribeMessage35.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS43);
        subscribeMessage33.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS43);
        org.meqantt.message.ConnectMessage connectMessage50 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str51 = connectMessage50.getProtocolId();
        org.meqantt.message.QoS qoS52 = connectMessage50.getQos();
        subscribeMessage33.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS52);
        connectMessage1.setWill("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS52, false);
        connectMessage1.setCredentials("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n");
        connectMessage1.setCredentials("00: 00010000 \020 16\n01: 00001110 \016 14\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n");
        java.lang.String str60 = connectMessage1.getWillTopic();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MQIsdp" + "'", str6, "MQIsdp");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + qoS26 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS26.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQIsdp" + "'", str42, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS43 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS43.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "MQIsdp" + "'", str51, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n" + "'", str60, "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
    }

    @Test
    public void test13098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13098");
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        byte[] byteArray4 = publishMessage3.getData();
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage("00: 01100100 d 100\n01: 00000000 \000 0\n", byteArray4);
        int int6 = publishMessage5.getMessageId();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test13099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13099");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getWillTopic();
        boolean boolean7 = connectMessage3.isCleanSession();
        boolean boolean8 = connectMessage3.hasPassword();
        boolean boolean9 = connectMessage3.isCleanSession();
        java.lang.String str10 = connectMessage3.getClientId();
        java.lang.String str11 = connectMessage3.getUsername();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test13100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13100");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("0\b\000\000\000d\000\001\001d", true, (int) (byte) -1);
    }

    @Test
    public void test13101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13101");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("00: 00000000 \000 0\n01: 00001101 \r 13\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00000110 \006 6\n05: 11101111 \357 239\n06: 10111111 \277 191\n07: 10111101 \275 189\n08: 11101111 \357 239\n09: 10111111 \277 191\n10: 10111101 \275 189\n11: 00000011 \003 3\n12: 01101000 h 104\n13: 01101001 i 105\n14: 00100001 ! 33\n");
    }

    @Test
    public void test13102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13102");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getWillTopic();
        boolean boolean7 = connectMessage3.isCleanSession();
        java.lang.String str8 = connectMessage3.getUsername();
        connectMessage3.setWill("00: 00000000 \000 0\n01: 00000000 \000 0\n", "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test13103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13103");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("00: 10100010 \242 162\n01: 00001111 \017 15\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000011 \003 3\n06: 01101000 h 104\n07: 01101001 i 105\n08: 00100001 ! 33\n09: 00000000 \000 0\n10: 00000110 \006 6\n11: 01001101 M 77\n12: 01010001 Q 81\n13: 01001001 I 73\n14: 01110011 s 115\n15: 01100100 d 100\n16: 01110000 p 112\n");
    }

    @Test
    public void test13104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13104");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage5.addTopic("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage5.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE can't set the DUP flag.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13105");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.SubAckMessage subAckMessage2 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage3.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13106");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, 2);
        int int4 = connectMessage3.getKeepAlive();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test13107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13107");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        int int6 = subscribeMessage5.getMessageId();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str2, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test13108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13108");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        boolean boolean3 = connectMessage1.hasPassword();
        int int4 = connectMessage1.getKeepAlive();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = connectMessage1.isDup();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test13109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13109");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        boolean boolean8 = connectMessage1.hasPassword();
        java.lang.String str9 = connectMessage1.getClientId();
        connectMessage1.setCredentials("\000d\000\001\001d");
        boolean boolean12 = connectMessage1.hasPassword();
        java.lang.String str13 = connectMessage1.getWill();
        boolean boolean14 = connectMessage1.isWillRetained();
        java.lang.String str15 = connectMessage1.getClientId();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MQIsdp" + "'", str13, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test13110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13110");
        org.meqantt.message.Message.Header header1 = null;
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str3 = connectMessage2.getClientId();
        connectMessage2.setWill("hi!", "");
        org.meqantt.message.QoS qoS7 = connectMessage2.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS7);
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList11 = subscribeMessage10.getTopics();
        org.meqantt.message.QoS qoS12 = subscribeMessage10.getQos();
        org.meqantt.message.QoS qoS14 = null;
        subscribeMessage10.addTopic("", qoS14);
        org.meqantt.message.ConnectMessage connectMessage24 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str25 = connectMessage24.getUsername();
        org.meqantt.message.QoS qoS29 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("", qoS29);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList33 = subscribeMessage32.getTopics();
        org.meqantt.message.QoS qoS34 = subscribeMessage32.getQos();
        subscribeMessage30.addTopic("", qoS34);
        connectMessage24.setWill("", "\000d\000\001\001d", qoS34, true);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("hi!", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage39 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS34);
        subscribeMessage10.addTopic("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS34);
        subscribeMessage8.addTopic("", qoS34);
        int int44 = subscribeMessage8.getMessageId();
        org.meqantt.message.Message.Type type45 = subscribeMessage8.getType();
        subscribeMessage8.setMessageId(15);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + qoS7 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS7.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + qoS12 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS12.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type45.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
    }

    @Test
    public void test13111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13111");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage6.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13112");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage7.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test13113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13113");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage9 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage14 = new org.meqantt.message.SubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage14.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13114");
        byte[] byteArray2 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str3 = org.meqantt.util.FormatUtil.toString(byteArray2);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage("hi!", byteArray2);
        publishMessage4.setMessageId((int) '\001');
        publishMessage4.setRetained(true);
        java.lang.String str9 = publishMessage4.getDataAsString();
        org.meqantt.message.QoS qoS10 = publishMessage4.getQos();
        java.lang.String str11 = publishMessage4.getTopic();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\000\000" + "'", str9, "\000\000");
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test13115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13115");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        byte byte27 = connectMessage3.getProtocolVersion();
        connectMessage3.setCredentials("\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        int int31 = connectMessage3.getKeepAlive();
        boolean boolean32 = connectMessage3.isRetained();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 3 + "'", byte27 == (byte) 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test13116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13116");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        boolean boolean9 = disconnectMessage8.isRetained();
        org.meqantt.message.QoS qoS10 = disconnectMessage8.getQos();
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage8.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13117");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", false, (-1));
        boolean boolean4 = connectMessage3.hasUsername();
        int int5 = connectMessage3.getKeepAlive();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test13118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13118");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage10 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage12 = new org.meqantt.message.UnsubscribeMessage("hi!");
        unsubscribeMessage12.setDup(false);
        org.meqantt.message.Message.Header header16 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type17 = header16.getType();
        org.meqantt.message.Message.Type type18 = header16.getType();
        org.meqantt.message.SubAckMessage subAckMessage19 = new org.meqantt.message.SubAckMessage(header16);
        org.meqantt.message.PingReqMessage pingReqMessage20 = new org.meqantt.message.PingReqMessage(header16);
        org.meqantt.message.PingReqMessage pingReqMessage21 = new org.meqantt.message.PingReqMessage(header16);
        org.meqantt.message.DisconnectMessage disconnectMessage22 = new org.meqantt.message.DisconnectMessage(header16);
        org.meqantt.message.SubAckMessage subAckMessage23 = new org.meqantt.message.SubAckMessage(header16);
        org.meqantt.message.UnsubAckMessage unsubAckMessage24 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS25 = unsubAckMessage24.getQos();
        subAckMessage23.addQoS(qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type28 = subscribeMessage27.getType();
        subscribeMessage27.setDup(false);
        subscribeMessage27.setMessageId((int) (short) 0);
        java.util.List<java.lang.String> strList33 = subscribeMessage27.getTopics();
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList35 = subscribeMessage34.getTopics();
        org.meqantt.message.QoS qoS36 = subscribeMessage34.getQos();
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str42 = connectMessage41.getProtocolId();
        org.meqantt.message.QoS qoS43 = connectMessage41.getQos();
        subscribeMessage34.addTopic("", qoS43);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage46 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList47 = unsubscribeMessage46.getTopics();
        org.meqantt.message.Message.Type type48 = unsubscribeMessage46.getType();
        java.util.List<java.lang.String> strList49 = unsubscribeMessage46.getTopics();
        org.meqantt.message.QoS qoS50 = unsubscribeMessage46.getQos();
        subscribeMessage34.setQos(qoS50);
        subscribeMessage27.setQos(qoS50);
        subAckMessage23.addQoS(qoS50);
        unsubscribeMessage12.setQos(qoS50);
        java.util.List<java.lang.String> strList55 = unsubscribeMessage12.getTopics();
        unsubscribeMessage12.setDup(false);
        org.meqantt.message.QoS qoS58 = unsubscribeMessage12.getQos();
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage10.setQos(qoS58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type28.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQIsdp" + "'", str42, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS43 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS43.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type48.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + qoS50 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS50.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + qoS58 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS58.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13119");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage11 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage12 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage13 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage15 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage16 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage17 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage17.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13120");
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str8 = connectMessage7.getUsername();
        org.meqantt.message.QoS qoS12 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage("", qoS12);
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList16 = subscribeMessage15.getTopics();
        org.meqantt.message.QoS qoS17 = subscribeMessage15.getQos();
        subscribeMessage13.addTopic("", qoS17);
        connectMessage7.setWill("", "\000d\000\001\001d", qoS17, true);
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage("hi!", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList27 = subscribeMessage26.getTopics();
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str33 = connectMessage32.getProtocolId();
        org.meqantt.message.QoS qoS34 = connectMessage32.getQos();
        subscribeMessage26.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS34);
        subscribeMessage24.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS34);
        java.util.List<org.meqantt.message.QoS> qoSList37 = subscribeMessage24.getTopicQoSs();
        org.meqantt.message.Message.Type type38 = subscribeMessage24.getType();
        java.util.List<org.meqantt.message.QoS> qoSList39 = subscribeMessage24.getTopicQoSs();
        java.lang.Class<?> wildcardClass40 = qoSList39.getClass();
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQIsdp" + "'", str33, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type38.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(qoSList39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test13121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13121");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage7.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void test13122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13122");
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\020\ufffd\001\000\006MQIsdp\003\ufffd\000d\000\006MQIsdp\000\000\000\006MQIsdp\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]\000\ufffd\ufffd?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", true, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Client id cannot be null and must be at most 23 characters long: ?????MQIsdp???d??MQIsdp????MQIsdp?=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]?B???Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13123");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\000d\000\001\001d", false, (int) (byte) 0);
        connectMessage3.setCredentials("");
        java.lang.String str6 = connectMessage3.getWill();
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test13124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13124");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage7.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13125");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.subscribe("");
        nettyClient1.connect("MQIsdp", 35);
    }

    @Test
    public void test13126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13126");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        java.lang.String str7 = header1.toString();
        org.meqantt.message.PubAckMessage pubAckMessage8 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage10.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str7, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13127");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header1);
    }

    @Test
    public void test13128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13128");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        java.lang.String str11 = header1.toString();
        org.meqantt.message.PubRelMessage pubRelMessage12 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage13 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage14 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage14.setDup(false);
        unsubscribeMessage14.addTopic("\000\023\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str11, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13129");
        org.meqantt.SocketClient socketClient1 = new org.meqantt.SocketClient("00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n");
        // The following exception was thrown during execution in test generation
        try {
            socketClient1.connect("\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: ??00: 00110000 0 48?01: 00001000 ? 8?02: 00000000 ?? 0?03: 00000000 ?? 0?04: 00000000 ?? 0?05: 01100100 d 100?06: 00000000 ?? 0?07: 00000001 ? 1?08: 00000001 ? 1?09: 01100100 d 100?");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13130");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("MQIsdp", "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
        publishMessage2.setDup(false);
    }

    @Test
    public void test13131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13131");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void test13132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13132");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", false, (int) (byte) 1);
        org.meqantt.message.Message.Header header5 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header5);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage(header5);
        org.meqantt.message.PubRelMessage pubRelMessage8 = new org.meqantt.message.PubRelMessage(header5);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header5);
        org.meqantt.message.SubAckMessage subAckMessage10 = new org.meqantt.message.SubAckMessage(header5);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList13 = subscribeMessage12.getTopics();
        org.meqantt.message.QoS qoS14 = subscribeMessage12.getQos();
        org.meqantt.message.ConnectMessage connectMessage19 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str20 = connectMessage19.getProtocolId();
        org.meqantt.message.QoS qoS21 = connectMessage19.getQos();
        subscribeMessage12.addTopic("", qoS21);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage24 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList25 = unsubscribeMessage24.getTopics();
        org.meqantt.message.Message.Type type26 = unsubscribeMessage24.getType();
        java.util.List<java.lang.String> strList27 = unsubscribeMessage24.getTopics();
        org.meqantt.message.QoS qoS28 = unsubscribeMessage24.getQos();
        subscribeMessage12.setQos(qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS28);
        subAckMessage10.addQoS(qoS28);
        org.meqantt.message.Message.Header header32 = null;
        org.meqantt.message.ConnectMessage connectMessage33 = new org.meqantt.message.ConnectMessage(header32);
        boolean boolean34 = connectMessage33.isWillRetained();
        boolean boolean35 = connectMessage33.isWillRetained();
        connectMessage33.setWill("", "MQIsdp");
        boolean boolean39 = connectMessage33.isWillRetained();
        java.lang.String str40 = connectMessage33.getClientId();
        java.lang.String str41 = connectMessage33.getWill();
        boolean boolean42 = connectMessage33.hasUsername();
        java.lang.String str43 = connectMessage33.getWillTopic();
        org.meqantt.message.QoS qoS44 = connectMessage33.getWillQoS();
        subAckMessage10.addQoS(qoS44);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setQos(qoS44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MQIsdp" + "'", str20, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type26.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "MQIsdp" + "'", str41, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + qoS44 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS44.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13133");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        java.lang.String str3 = connectMessage1.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = connectMessage1.isDup();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test13134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13134");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getWillTopic();
        boolean boolean7 = connectMessage3.hasPassword();
        connectMessage3.setWill("", "MQIsdp");
        java.lang.String str11 = connectMessage3.getWill();
        java.lang.String str12 = connectMessage3.getClientId();
        org.meqantt.message.Message.Type type13 = connectMessage3.getType();
        org.meqantt.message.Message.Header header19 = new org.meqantt.message.Message.Header((byte) 10);
        org.meqantt.message.Message.Type type20 = header19.getType();
        org.meqantt.message.SubAckMessage subAckMessage21 = new org.meqantt.message.SubAckMessage(header19);
        org.meqantt.message.PublishMessage publishMessage24 = new org.meqantt.message.PublishMessage("MQIsdp", "\000d\000\001\001d");
        java.lang.String str25 = publishMessage24.getDataAsString();
        byte[] byteArray26 = publishMessage24.getData();
        org.meqantt.message.QoS qoS27 = publishMessage24.getQos();
        subAckMessage21.addQoS(qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage("", qoS27);
        boolean boolean30 = subscribeMessage29.isRetained();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage33 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList34 = unsubscribeMessage33.getTopics();
        org.meqantt.message.Message.Type type35 = unsubscribeMessage33.getType();
        java.util.List<java.lang.String> strList36 = unsubscribeMessage33.getTopics();
        org.meqantt.message.QoS qoS37 = unsubscribeMessage33.getQos();
        unsubscribeMessage33.addTopic("MQIsdp");
        unsubscribeMessage33.setDup(false);
        unsubscribeMessage33.addTopic("\000d\000\001\001d");
        org.meqantt.message.Message.Header header44 = null;
        org.meqantt.message.ConnectMessage connectMessage45 = new org.meqantt.message.ConnectMessage(header44);
        int int46 = connectMessage45.getKeepAlive();
        java.lang.String str47 = connectMessage45.getWill();
        org.meqantt.message.QoS qoS48 = connectMessage45.getWillQoS();
        boolean boolean49 = connectMessage45.hasPassword();
        org.meqantt.message.Message.Header header54 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type55 = header54.getType();
        org.meqantt.message.Message.Type type56 = header54.getType();
        org.meqantt.message.SubAckMessage subAckMessage57 = new org.meqantt.message.SubAckMessage(header54);
        org.meqantt.message.PingReqMessage pingReqMessage58 = new org.meqantt.message.PingReqMessage(header54);
        org.meqantt.message.SubscribeMessage subscribeMessage59 = new org.meqantt.message.SubscribeMessage(header54);
        org.meqantt.message.ConnectMessage connectMessage60 = new org.meqantt.message.ConnectMessage(header54);
        org.meqantt.message.PingReqMessage pingReqMessage61 = new org.meqantt.message.PingReqMessage(header54);
        org.meqantt.message.SubscribeMessage subscribeMessage62 = new org.meqantt.message.SubscribeMessage(header54);
        org.meqantt.message.SubAckMessage subAckMessage63 = new org.meqantt.message.SubAckMessage(header54);
        org.meqantt.message.SubscribeMessage subscribeMessage64 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList65 = subscribeMessage64.getTopics();
        org.meqantt.message.QoS qoS66 = subscribeMessage64.getQos();
        org.meqantt.message.ConnectMessage connectMessage71 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str72 = connectMessage71.getProtocolId();
        org.meqantt.message.QoS qoS73 = connectMessage71.getQos();
        subscribeMessage64.addTopic("", qoS73);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage76 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList77 = unsubscribeMessage76.getTopics();
        org.meqantt.message.Message.Type type78 = unsubscribeMessage76.getType();
        java.util.List<java.lang.String> strList79 = unsubscribeMessage76.getTopics();
        org.meqantt.message.QoS qoS80 = unsubscribeMessage76.getQos();
        subscribeMessage64.setQos(qoS80);
        subAckMessage63.addQoS(qoS80);
        org.meqantt.message.SubscribeMessage subscribeMessage83 = new org.meqantt.message.SubscribeMessage("", qoS80);
        connectMessage45.setWill("", "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS80, false);
        unsubscribeMessage33.setQos(qoS80);
        subscribeMessage29.addTopic("00: 00110000 0 48\n01: 00010010 \022 18\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000000 \000 0\n11: 00001000 \b 8\n12: 11000000 \300 192\n13: 10000000 \200 128\n14: 01100100 d 100\n15: 11000000 \300 192\n16: 10000000 \200 128\n17: 00000001 \001 1\n18: 00000001 \001 1\n19: 01100100 d 100\n", qoS80);
        org.meqantt.message.SubscribeMessage subscribeMessage88 = new org.meqantt.message.SubscribeMessage("\020\ufffd\001\000\006MQIsdp\003&\000d\000\006MQIsdp\000\006MQIsdp\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n", qoS80);
        connectMessage3.setWill("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "00: 00100000   32\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00000010 \002 2\n", qoS80, true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MQIsdp" + "'", str11, "MQIsdp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.meqantt.message.Message.Type.CONNECT + "'", type13.equals(org.meqantt.message.Message.Type.CONNECT));
        org.junit.Assert.assertNull(type20);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d" + "'", str25, "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type35.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + qoS37 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS37.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(qoS48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(type55);
        org.junit.Assert.assertNull(type56);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + qoS66 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS66.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "MQIsdp" + "'", str72, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS73 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS73.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + type78 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type78.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + qoS80 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS80.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13135");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getPassword();
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean12 = connectMessage11.hasWill();
        java.lang.String str13 = connectMessage11.getWill();
        org.meqantt.message.Message.Header header16 = null;
        org.meqantt.message.ConnectMessage connectMessage17 = new org.meqantt.message.ConnectMessage(header16);
        boolean boolean18 = connectMessage17.isWillRetained();
        boolean boolean19 = connectMessage17.isWillRetained();
        java.lang.String str20 = connectMessage17.getUsername();
        org.meqantt.message.QoS qoS24 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage("", qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList28 = subscribeMessage27.getTopics();
        org.meqantt.message.QoS qoS29 = subscribeMessage27.getQos();
        subscribeMessage25.addTopic("", qoS29);
        connectMessage17.setWill("hi!", "", qoS29, false);
        connectMessage11.setWill("MQIsdp", "hi!", qoS29, false);
        byte byte35 = connectMessage11.getProtocolVersion();
        org.meqantt.message.ConnectMessage connectMessage42 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean43 = connectMessage42.hasWill();
        java.lang.String str44 = connectMessage42.getWill();
        org.meqantt.message.Message.Header header47 = null;
        org.meqantt.message.ConnectMessage connectMessage48 = new org.meqantt.message.ConnectMessage(header47);
        boolean boolean49 = connectMessage48.isWillRetained();
        boolean boolean50 = connectMessage48.isWillRetained();
        java.lang.String str51 = connectMessage48.getUsername();
        org.meqantt.message.QoS qoS55 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage56 = new org.meqantt.message.SubscribeMessage("", qoS55);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList59 = subscribeMessage58.getTopics();
        org.meqantt.message.QoS qoS60 = subscribeMessage58.getQos();
        subscribeMessage56.addTopic("", qoS60);
        connectMessage48.setWill("hi!", "", qoS60, false);
        connectMessage42.setWill("MQIsdp", "hi!", qoS60, false);
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS60);
        connectMessage11.setWill("", "MQIsdp", qoS60, false);
        connectMessage3.setWill("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "\000\000", qoS60, true);
        boolean boolean71 = connectMessage3.isCleanSession();
        boolean boolean72 = connectMessage3.hasWill();
        connectMessage3.setWill("00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n", "00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n");
        byte byte76 = connectMessage3.getProtocolVersion();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + qoS29 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS29.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 3 + "'", byte35 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + byte76 + "' != '" + (byte) 3 + "'", byte76 == (byte) 3);
    }

    @Test
    public void test13136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13136");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
    }

    @Test
    public void test13137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13137");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        java.lang.String str8 = connectMessage1.getClientId();
        java.lang.String str9 = connectMessage1.getWill();
        byte byte10 = connectMessage1.getProtocolVersion();
        boolean boolean11 = connectMessage1.hasUsername();
        boolean boolean12 = connectMessage1.hasUsername();
        connectMessage1.setCredentials("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 3 + "'", byte10 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13138");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage8 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str9 = header1.toString();
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Header header11 = null;
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header11);
        boolean boolean13 = connectMessage12.isWillRetained();
        boolean boolean14 = connectMessage12.isWillRetained();
        connectMessage12.setWill("", "MQIsdp");
        boolean boolean18 = connectMessage12.isWillRetained();
        boolean boolean19 = connectMessage12.hasPassword();
        java.lang.String str20 = connectMessage12.getClientId();
        connectMessage12.setCredentials("\000d\000\001\001d");
        boolean boolean23 = connectMessage12.hasPassword();
        connectMessage12.setWill("MQIsdp", "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        org.meqantt.message.QoS qoS27 = connectMessage12.getWillQoS();
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage10.setQos(qoS27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type6.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str9, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13139");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage10 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList12 = subAckMessage11.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList13 = subAckMessage11.getGrantedQoSs();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage11.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(qoSList12);
        org.junit.Assert.assertNull(qoSList13);
    }

    @Test
    public void test13140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13140");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage11 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage12 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage13 = new org.meqantt.message.PingReqMessage(header1);
        java.lang.String str14 = header1.toString();
        org.meqantt.message.ConnAckMessage connAckMessage15 = new org.meqantt.message.ConnAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage15.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str14, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13141");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.Message.Header header3 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type4 = header3.getType();
        org.meqantt.message.Message.Type type5 = header3.getType();
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header3);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header3);
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage(header3);
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header3);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header3);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage(header3);
        java.lang.String str12 = header3.toString();
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage(header3);
        org.meqantt.message.PubAckMessage pubAckMessage14 = new org.meqantt.message.PubAckMessage(header3);
        org.meqantt.message.PubCompMessage pubCompMessage15 = new org.meqantt.message.PubCompMessage(header3);
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage(header3);
        org.meqantt.message.Message.Header header19 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type20 = header19.getType();
        org.meqantt.message.Message.Type type21 = header19.getType();
        org.meqantt.message.SubAckMessage subAckMessage22 = new org.meqantt.message.SubAckMessage(header19);
        org.meqantt.message.PingReqMessage pingReqMessage23 = new org.meqantt.message.PingReqMessage(header19);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage(header19);
        org.meqantt.message.ConnectMessage connectMessage25 = new org.meqantt.message.ConnectMessage(header19);
        org.meqantt.message.PingReqMessage pingReqMessage26 = new org.meqantt.message.PingReqMessage(header19);
        org.meqantt.message.DisconnectMessage disconnectMessage27 = new org.meqantt.message.DisconnectMessage(header19);
        org.meqantt.message.PubCompMessage pubCompMessage28 = new org.meqantt.message.PubCompMessage(header19);
        org.meqantt.message.PublishMessage publishMessage29 = new org.meqantt.message.PublishMessage(header19);
        java.lang.String str30 = publishMessage29.getTopic();
        org.meqantt.message.ConnectMessage connectMessage34 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean35 = connectMessage34.hasWill();
        java.lang.String str36 = connectMessage34.getWill();
        org.meqantt.message.Message.Header header39 = null;
        org.meqantt.message.ConnectMessage connectMessage40 = new org.meqantt.message.ConnectMessage(header39);
        boolean boolean41 = connectMessage40.isWillRetained();
        boolean boolean42 = connectMessage40.isWillRetained();
        java.lang.String str43 = connectMessage40.getUsername();
        org.meqantt.message.QoS qoS47 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage48 = new org.meqantt.message.SubscribeMessage("", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList51 = subscribeMessage50.getTopics();
        org.meqantt.message.QoS qoS52 = subscribeMessage50.getQos();
        subscribeMessage48.addTopic("", qoS52);
        connectMessage40.setWill("hi!", "", qoS52, false);
        connectMessage34.setWill("MQIsdp", "hi!", qoS52, false);
        org.meqantt.message.SubAckMessage subAckMessage60 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList61 = subAckMessage60.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList62 = subAckMessage60.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList63 = subAckMessage60.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage65 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList66 = subscribeMessage65.getTopics();
        org.meqantt.message.QoS qoS67 = subscribeMessage65.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage68 = new org.meqantt.message.SubscribeMessage("", qoS67);
        subAckMessage60.addQoS(qoS67);
        connectMessage34.setWill("hi!", "MQIsdp", qoS67, true);
        java.lang.String str72 = connectMessage34.getPassword();
        org.meqantt.message.QoS qoS73 = connectMessage34.getQos();
        publishMessage29.setQos(qoS73);
        subscribeMessage16.addTopic("hi!", qoS73);
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) subscribeMessage16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str12, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList61);
        org.junit.Assert.assertNull(qoSList62);
        org.junit.Assert.assertNull(qoSList63);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + qoS67 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS67.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + qoS73 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS73.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13142");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage7 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage(header1);
    }

    @Test
    public void test13143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13143");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage12 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage15 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage16 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage17 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage18 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage18.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13144");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage4 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage10 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage10.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13145");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        unsubscribeMessage1.addTopic("MQIsdp");
        unsubscribeMessage1.addTopic("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        java.util.List<java.lang.String> strList7 = unsubscribeMessage1.getTopics();
        org.meqantt.message.Message.Header header9 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type10 = header9.getType();
        org.meqantt.message.Message.Type type11 = header9.getType();
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header9);
        org.meqantt.message.PingReqMessage pingReqMessage13 = new org.meqantt.message.PingReqMessage(header9);
        org.meqantt.message.PingReqMessage pingReqMessage14 = new org.meqantt.message.PingReqMessage(header9);
        org.meqantt.message.DisconnectMessage disconnectMessage15 = new org.meqantt.message.DisconnectMessage(header9);
        org.meqantt.message.DisconnectMessage disconnectMessage16 = new org.meqantt.message.DisconnectMessage(header9);
        org.meqantt.message.PubAckMessage pubAckMessage17 = new org.meqantt.message.PubAckMessage(header9);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage18 = new org.meqantt.message.UnsubscribeMessage(header9);
        java.util.List<java.lang.String> strList19 = unsubscribeMessage18.getTopics();
        java.util.List<java.lang.String> strList20 = unsubscribeMessage18.getTopics();
        org.meqantt.message.Message.Type type21 = unsubscribeMessage18.getType();
        org.meqantt.message.Message.Header header23 = new org.meqantt.message.Message.Header((byte) 3);
        org.meqantt.message.SubAckMessage subAckMessage24 = new org.meqantt.message.SubAckMessage(header23);
        org.meqantt.message.ConnAckMessage connAckMessage25 = new org.meqantt.message.ConnAckMessage(header23);
        org.meqantt.message.PubAckMessage pubAckMessage26 = new org.meqantt.message.PubAckMessage(header23);
        org.meqantt.message.QoS qoS27 = pubAckMessage26.getQos();
        unsubscribeMessage18.setQos(qoS27);
        unsubscribeMessage1.setQos(qoS27);
        org.meqantt.message.ConnectMessage connectMessage33 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 0);
        java.lang.String str34 = connectMessage33.getClientId();
        java.lang.String str35 = connectMessage33.getPassword();
        connectMessage33.setWill("\001\003\003\001", "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.meqantt.message.QoS qoS39 = connectMessage33.getWillQoS();
        boolean boolean40 = connectMessage33.isWillRetained();
        org.meqantt.message.ConnectMessage connectMessage46 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str47 = connectMessage46.getUsername();
        org.meqantt.message.QoS qoS51 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage("", qoS51);
        org.meqantt.message.SubscribeMessage subscribeMessage54 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList55 = subscribeMessage54.getTopics();
        org.meqantt.message.QoS qoS56 = subscribeMessage54.getQos();
        subscribeMessage52.addTopic("", qoS56);
        connectMessage46.setWill("", "\000d\000\001\001d", qoS56, true);
        boolean boolean60 = connectMessage46.isCleanSession();
        java.lang.String str61 = connectMessage46.getClientId();
        byte byte62 = connectMessage46.getProtocolVersion();
        java.lang.String str63 = connectMessage46.getPassword();
        boolean boolean64 = connectMessage46.isCleanSession();
        int int65 = connectMessage46.getKeepAlive();
        org.meqantt.message.QoS qoS66 = connectMessage46.getWillQoS();
        connectMessage33.setWill("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "\000\000", qoS66, false);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setQos(qoS66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "MQIsdp" + "'", str34, "MQIsdp");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + qoS39 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS39.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + qoS56 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS56.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) 3 + "'", byte62 == (byte) 3);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + qoS66 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS66.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13146");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage(header1);
        connectMessage5.setCredentials("\000\003hi!", "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        boolean boolean9 = connectMessage5.hasWill();
        boolean boolean10 = connectMessage5.hasPassword();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test13147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13147");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        java.util.List<java.lang.String> strList6 = subscribeMessage5.getTopics();
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test13148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13148");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage8.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13149");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str5 = header1.toString();
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage9 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Header header11 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header11);
        org.meqantt.message.Message.Type type13 = header11.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage14 = new org.meqantt.message.UnsubscribeMessage(header11);
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage(header11);
        org.meqantt.message.DisconnectMessage disconnectMessage16 = new org.meqantt.message.DisconnectMessage(header11);
        org.meqantt.message.DisconnectMessage disconnectMessage17 = new org.meqantt.message.DisconnectMessage(header11);
        org.meqantt.message.SubAckMessage subAckMessage18 = new org.meqantt.message.SubAckMessage(header11);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList23 = subscribeMessage22.getTopics();
        org.meqantt.message.QoS qoS24 = subscribeMessage22.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage("", qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("\000\000", qoS24);
        subAckMessage18.addQoS(qoS24);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage9.setQos(qoS24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13150");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.addTopic("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        java.util.List<java.lang.String> strList6 = unsubscribeMessage1.getTopics();
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE can't set the DUP flag.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test13151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13151");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        java.lang.String str5 = header1.toString();
        java.lang.String str6 = header1.toString();
        java.lang.String str7 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean13 = connectMessage12.hasWill();
        java.lang.String str14 = connectMessage12.getWill();
        org.meqantt.message.Message.Header header17 = null;
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage(header17);
        boolean boolean19 = connectMessage18.isWillRetained();
        boolean boolean20 = connectMessage18.isWillRetained();
        java.lang.String str21 = connectMessage18.getUsername();
        org.meqantt.message.QoS qoS25 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("", qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList29 = subscribeMessage28.getTopics();
        org.meqantt.message.QoS qoS30 = subscribeMessage28.getQos();
        subscribeMessage26.addTopic("", qoS30);
        connectMessage18.setWill("hi!", "", qoS30, false);
        connectMessage12.setWill("MQIsdp", "hi!", qoS30, false);
        byte byte36 = connectMessage12.getProtocolVersion();
        connectMessage12.setWill("hi!", "MQIsdp");
        org.meqantt.message.PublishMessage publishMessage44 = new org.meqantt.message.PublishMessage("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", "\001\003\003\001");
        org.meqantt.message.QoS qoS45 = publishMessage44.getQos();
        connectMessage12.setWill("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "\ufffd\ufffd\001\000\000\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\000", qoS45, true);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage8.setQos(qoS45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str5, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str6, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str7, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + qoS30 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS30.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 3 + "'", byte36 == (byte) 3);
        org.junit.Assert.assertTrue("'" + qoS45 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS45.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13152");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage5 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
    }

    @Test
    public void test13153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13153");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        int int2 = unsubscribeMessage1.getMessageId();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        org.meqantt.message.QoS qoS6 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage7 = new org.meqantt.message.SubscribeMessage("", qoS6);
        int int8 = subscribeMessage7.getMessageId();
        subscribeMessage7.setMessageId((int) (short) 10);
        java.util.List<java.lang.String> strList11 = subscribeMessage7.getTopics();
        java.util.List<org.meqantt.message.QoS> qoSList12 = subscribeMessage7.getTopicQoSs();
        subscribeMessage7.setMessageId(32);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage16 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS17 = unsubscribeMessage16.getQos();
        subscribeMessage7.setQos(qoS17);
        unsubscribeMessage4.setQos(qoS17);
        unsubscribeMessage1.setQos(qoS17);
        java.util.List<java.lang.String> strList21 = unsubscribeMessage1.getTopics();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(qoSList12);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test13154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13154");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        java.lang.String str8 = header1.toString();
        java.lang.String str9 = header1.toString();
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str9, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13155");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        connectMessage2.setWill("\000\000", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList9 = subscribeMessage8.getTopics();
        org.meqantt.message.QoS qoS10 = subscribeMessage8.getQos();
        org.meqantt.message.ConnectMessage connectMessage15 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str16 = connectMessage15.getProtocolId();
        org.meqantt.message.QoS qoS17 = connectMessage15.getQos();
        subscribeMessage8.addTopic("", qoS17);
        connectMessage2.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS17, true);
        boolean boolean21 = connectMessage2.hasPassword();
        java.lang.String str22 = connectMessage2.getWill();
        connectMessage2.setWill("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "\000H00: 01110000 p 112\n01: 00000010 \002 2\n\ufffd\ufffd 0\n03: 00001010 \n 10\n");
        connectMessage2.setCredentials("00: 00010000 \020 16\n01: 00010100 \024 20\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000110 \006 6\n16: 01001101 M 77\n17: 01010001 Q 81\n18: 01001001 I 73\n19: 01110011 s 115\n20: 01100100 d 100\n21: 01110000 p 112\n");
        boolean boolean28 = connectMessage2.isDup();
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MQIsdp" + "'", str16, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str22, "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test13156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13156");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        byte[] byteArray7 = publishMessage6.getData();
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(byteArray7);
    }

    @Test
    public void test13157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13157");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.subscribe("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener9 = null;
        nettyClient1.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.disconnect();
        nettyClient1.publish("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        nettyClient1.disconnect();
        org.meqantt.MqttListener mqttListener18 = null;
        nettyClient1.setListener(mqttListener18);
        nettyClient1.connect("00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n", (int) (short) 100);
    }

    @Test
    public void test13158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13158");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus7 = connAckMessage6.getStatus();
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage6.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(connectionStatus7);
    }

    @Test
    public void test13159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13159");
        org.meqantt.netty.MqttMessageHandler mqttMessageHandler0 = new org.meqantt.netty.MqttMessageHandler();
        org.meqantt.MqttListener mqttListener1 = null;
        mqttMessageHandler0.setListener(mqttListener1);
        org.meqantt.MqttListener mqttListener3 = null;
        mqttMessageHandler0.setListener(mqttListener3);
        org.meqantt.MqttListener mqttListener5 = null;
        mqttMessageHandler0.setListener(mqttListener5);
        org.meqantt.MqttListener mqttListener7 = null;
        mqttMessageHandler0.setListener(mqttListener7);
        org.meqantt.MqttListener mqttListener9 = null;
        mqttMessageHandler0.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        mqttMessageHandler0.setListener(mqttListener11);
        org.meqantt.MqttListener mqttListener13 = null;
        mqttMessageHandler0.setListener(mqttListener13);
        org.meqantt.MqttListener mqttListener15 = null;
        mqttMessageHandler0.setListener(mqttListener15);
        org.meqantt.MqttListener mqttListener17 = null;
        mqttMessageHandler0.setListener(mqttListener17);
        org.meqantt.MqttListener mqttListener19 = null;
        mqttMessageHandler0.setListener(mqttListener19);
        org.meqantt.MqttListener mqttListener21 = null;
        mqttMessageHandler0.setListener(mqttListener21);
        org.meqantt.MqttListener mqttListener23 = null;
        mqttMessageHandler0.setListener(mqttListener23);
        org.meqantt.MqttListener mqttListener25 = null;
        mqttMessageHandler0.setListener(mqttListener25);
        org.meqantt.MqttListener mqttListener27 = null;
        mqttMessageHandler0.setListener(mqttListener27);
        org.meqantt.MqttListener mqttListener29 = null;
        mqttMessageHandler0.setListener(mqttListener29);
        org.meqantt.MqttListener mqttListener31 = null;
        mqttMessageHandler0.setListener(mqttListener31);
        org.meqantt.MqttListener mqttListener33 = null;
        mqttMessageHandler0.setListener(mqttListener33);
        org.meqantt.MqttListener mqttListener35 = null;
        mqttMessageHandler0.setListener(mqttListener35);
        org.meqantt.MqttListener mqttListener37 = null;
        mqttMessageHandler0.setListener(mqttListener37);
        org.jboss.netty.channel.ChannelHandlerContext channelHandlerContext39 = null;
        org.jboss.netty.channel.ChannelStateEvent channelStateEvent40 = null;
        // The following exception was thrown during execution in test generation
        try {
            mqttMessageHandler0.unbindRequested(channelHandlerContext39, channelStateEvent40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13160");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Type type5 = pubAckMessage4.getType();
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage4.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test13161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13161");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.DisconnectMessage disconnectMessage4 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage4.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test13162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13162");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("00: 10000000 \200 128\n01: 00001011 \013 11\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000110 \006 6\n06: 01001101 M 77\n07: 01010001 Q 81\n08: 01001001 I 73\n09: 01110011 s 115\n10: 01100100 d 100\n11: 01110000 p 112\n12: 00000000 \000 0\n", "\020\032\000\006MQIsdp\003&\000\001\000\000\000\000\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
    }

    @Test
    public void test13163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13163");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        java.lang.String str8 = connectMessage1.getClientId();
        java.lang.String str9 = connectMessage1.getWill();
        boolean boolean10 = connectMessage1.hasUsername();
        boolean boolean11 = connectMessage1.hasWill();
        boolean boolean12 = connectMessage1.hasWill();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test13164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13164");
        org.meqantt.message.PubRelMessage pubRelMessage1 = new org.meqantt.message.PubRelMessage((int) (short) 0);
        pubRelMessage1.setMessageId(100);
        byte[] byteArray4 = pubRelMessage1.toBytes();
        java.lang.String str5 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray4);
        java.lang.String str6 = org.meqantt.util.FormatUtil.toString(byteArray4);
        java.lang.String str7 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[96, 2, 0, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n" + "'", str5, "00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n" + "'", str7, "00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n");
    }

    @Test
    public void test13165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13165");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header1);
        java.lang.String str7 = header1.toString();
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage8.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str7, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13166");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, (int) 'a');
        org.meqantt.message.QoS qoS4 = connectMessage3.getWillQoS();
        java.lang.String str5 = connectMessage3.getProtocolId();
        org.meqantt.message.QoS qoS6 = connectMessage3.getWillQoS();
        boolean boolean7 = connectMessage3.isCleanSession();
        org.meqantt.message.Message.Type type8 = connectMessage3.getType();
        org.junit.Assert.assertNull(qoS4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MQIsdp" + "'", str5, "MQIsdp");
        org.junit.Assert.assertNull(qoS6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.meqantt.message.Message.Type.CONNECT + "'", type8.equals(org.meqantt.message.Message.Type.CONNECT));
    }

    @Test
    public void test13167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13167");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.hasUsername();
        java.lang.String str6 = connectMessage1.getPassword();
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        byte[] byteArray10 = publishMessage9.getData();
        byte[] byteArray11 = publishMessage9.getData();
        org.meqantt.message.QoS qoS12 = publishMessage9.getQos();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setQos(qoS12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
        org.junit.Assert.assertTrue("'" + qoS12 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS12.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13168");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList1 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage((int) ' ');
        org.meqantt.message.QoS qoS5 = pubRelMessage4.getQos();
        subAckMessage0.addQoS(qoS5);
        org.meqantt.message.Message.Header header8 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type9 = header8.getType();
        org.meqantt.message.Message.Type type10 = header8.getType();
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header8);
        org.meqantt.message.PingReqMessage pingReqMessage12 = new org.meqantt.message.PingReqMessage(header8);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage(header8);
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage(header8);
        java.lang.String str15 = header8.toString();
        org.meqantt.message.PingReqMessage pingReqMessage16 = new org.meqantt.message.PingReqMessage(header8);
        org.meqantt.message.DisconnectMessage disconnectMessage17 = new org.meqantt.message.DisconnectMessage(header8);
        org.meqantt.message.PubRelMessage pubRelMessage18 = new org.meqantt.message.PubRelMessage(header8);
        org.meqantt.message.PubAckMessage pubAckMessage19 = new org.meqantt.message.PubAckMessage(header8);
        org.meqantt.message.PubCompMessage pubCompMessage20 = new org.meqantt.message.PubCompMessage(header8);
        int int21 = pubCompMessage20.getMessageId();
        org.meqantt.message.QoS qoS22 = pubCompMessage20.getQos();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage0.setQos(qoS22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList1);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertTrue("'" + qoS5 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS5.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(type9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str15, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + qoS22 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS22.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13169");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus12 = connAckMessage11.getStatus();
        org.meqantt.message.Message.Header header14 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage(header14);
        java.util.List<java.lang.String> strList16 = subscribeMessage15.getTopics();
        java.util.List<java.lang.String> strList17 = subscribeMessage15.getTopics();
        java.util.List<org.meqantt.message.QoS> qoSList18 = subscribeMessage15.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage23 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean24 = connectMessage23.hasWill();
        java.lang.String str25 = connectMessage23.getWill();
        org.meqantt.message.Message.Header header28 = null;
        org.meqantt.message.ConnectMessage connectMessage29 = new org.meqantt.message.ConnectMessage(header28);
        boolean boolean30 = connectMessage29.isWillRetained();
        boolean boolean31 = connectMessage29.isWillRetained();
        java.lang.String str32 = connectMessage29.getUsername();
        org.meqantt.message.QoS qoS36 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage("", qoS36);
        org.meqantt.message.SubscribeMessage subscribeMessage39 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList40 = subscribeMessage39.getTopics();
        org.meqantt.message.QoS qoS41 = subscribeMessage39.getQos();
        subscribeMessage37.addTopic("", qoS41);
        connectMessage29.setWill("hi!", "", qoS41, false);
        connectMessage23.setWill("MQIsdp", "hi!", qoS41, false);
        subscribeMessage15.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS41);
        org.meqantt.message.SubscribeMessage subscribeMessage48 = new org.meqantt.message.SubscribeMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS41);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage11.setQos(qoS41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(connectionStatus12);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(qoSList18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + qoS41 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS41.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13170");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage12 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage14 = new org.meqantt.message.PingRespMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13171");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.DisconnectMessage disconnectMessage4 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList6 = subAckMessage5.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList7 = subAckMessage5.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList8 = subAckMessage5.getGrantedQoSs();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage5.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(qoSList6);
        org.junit.Assert.assertNull(qoSList7);
        org.junit.Assert.assertNull(qoSList8);
    }

    @Test
    public void test13172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13172");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList9 = subAckMessage8.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage8.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str15 = connectMessage14.getProtocolId();
        org.meqantt.message.QoS qoS16 = connectMessage14.getQos();
        subAckMessage8.addQoS(qoS16);
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean22 = connectMessage21.hasWill();
        java.lang.String str23 = connectMessage21.getWill();
        org.meqantt.message.Message.Header header26 = null;
        org.meqantt.message.ConnectMessage connectMessage27 = new org.meqantt.message.ConnectMessage(header26);
        boolean boolean28 = connectMessage27.isWillRetained();
        boolean boolean29 = connectMessage27.isWillRetained();
        java.lang.String str30 = connectMessage27.getUsername();
        org.meqantt.message.QoS qoS34 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage("", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList38 = subscribeMessage37.getTopics();
        org.meqantt.message.QoS qoS39 = subscribeMessage37.getQos();
        subscribeMessage35.addTopic("", qoS39);
        connectMessage27.setWill("hi!", "", qoS39, false);
        connectMessage21.setWill("MQIsdp", "hi!", qoS39, false);
        org.meqantt.message.SubAckMessage subAckMessage47 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList48 = subAckMessage47.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList49 = subAckMessage47.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList50 = subAckMessage47.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList53 = subscribeMessage52.getTopics();
        org.meqantt.message.QoS qoS54 = subscribeMessage52.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage("", qoS54);
        subAckMessage47.addQoS(qoS54);
        connectMessage21.setWill("hi!", "MQIsdp", qoS54, true);
        subAckMessage8.addQoS(qoS54);
        org.meqantt.message.SubAckMessage subAckMessage60 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList61 = subAckMessage60.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList62 = subAckMessage60.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage66 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str67 = connectMessage66.getProtocolId();
        org.meqantt.message.QoS qoS68 = connectMessage66.getQos();
        subAckMessage60.addQoS(qoS68);
        subAckMessage8.addQoS(qoS68);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage7.setQos(qoS68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type6);
        org.junit.Assert.assertNull(qoSList9);
        org.junit.Assert.assertNull(qoSList10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MQIsdp" + "'", str15, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + qoS39 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS39.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList48);
        org.junit.Assert.assertNull(qoSList49);
        org.junit.Assert.assertNull(qoSList50);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + qoS54 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS54.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList61);
        org.junit.Assert.assertNull(qoSList62);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "MQIsdp" + "'", str67, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS68 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS68.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13173");
        org.meqantt.message.PubAckMessage pubAckMessage1 = new org.meqantt.message.PubAckMessage(3);
        byte[] byteArray2 = pubAckMessage1.toBytes();
        java.lang.Class<?> wildcardClass3 = pubAckMessage1.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[64, 2, 0, 3]");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test13174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13174");
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", true, (int) (byte) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Client id cannot be null and must be at most 23 characters long: 00: 00110000 0 48?01: 00001000 ? 8?02: 00000000 ? 0?03: 00000000 ? 0?04: 00000000 ? 0?05: 01100100 d 100?06: 00000000 ? 0?07: 00000001 ? 1?08: 00000001 ? 1?09: 01100100 d 100?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13175");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        connectMessage1.setCredentials("\000d\000\001\001d");
        java.lang.String str4 = connectMessage1.getProtocolId();
        boolean boolean5 = connectMessage1.isCleanSession();
        java.lang.String str6 = connectMessage1.getProtocolId();
        org.meqantt.message.QoS qoS7 = connectMessage1.getWillQoS();
        boolean boolean8 = connectMessage1.isCleanSession();
        boolean boolean9 = connectMessage1.hasWill();
        int int10 = connectMessage1.getKeepAlive();
        java.lang.String str11 = connectMessage1.getWillTopic();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MQIsdp" + "'", str6, "MQIsdp");
        org.junit.Assert.assertNull(qoS7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test13176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13176");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        java.util.List<java.lang.String> strList3 = unsubscribeMessage1.getTopics();
        unsubscribeMessage1.addTopic("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd");
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.addTopic("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        java.util.List<java.lang.String> strList10 = unsubscribeMessage1.getTopics();
        unsubscribeMessage1.setDup(false);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test13177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13177");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage7 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage10.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13178");
        org.meqantt.message.SubscribeMessage subscribeMessage1 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList2 = subscribeMessage1.getTopics();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList4 = subAckMessage3.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList5 = subAckMessage3.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str10 = connectMessage9.getProtocolId();
        org.meqantt.message.QoS qoS11 = connectMessage9.getQos();
        subAckMessage3.addQoS(qoS11);
        org.meqantt.message.ConnectMessage connectMessage16 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean17 = connectMessage16.hasWill();
        java.lang.String str18 = connectMessage16.getWill();
        org.meqantt.message.Message.Header header21 = null;
        org.meqantt.message.ConnectMessage connectMessage22 = new org.meqantt.message.ConnectMessage(header21);
        boolean boolean23 = connectMessage22.isWillRetained();
        boolean boolean24 = connectMessage22.isWillRetained();
        java.lang.String str25 = connectMessage22.getUsername();
        org.meqantt.message.QoS qoS29 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("", qoS29);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList33 = subscribeMessage32.getTopics();
        org.meqantt.message.QoS qoS34 = subscribeMessage32.getQos();
        subscribeMessage30.addTopic("", qoS34);
        connectMessage22.setWill("hi!", "", qoS34, false);
        connectMessage16.setWill("MQIsdp", "hi!", qoS34, false);
        org.meqantt.message.SubAckMessage subAckMessage42 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList43 = subAckMessage42.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList44 = subAckMessage42.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList45 = subAckMessage42.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage47 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList48 = subscribeMessage47.getTopics();
        org.meqantt.message.QoS qoS49 = subscribeMessage47.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage("", qoS49);
        subAckMessage42.addQoS(qoS49);
        connectMessage16.setWill("hi!", "MQIsdp", qoS49, true);
        subAckMessage3.addQoS(qoS49);
        org.meqantt.message.SubAckMessage subAckMessage55 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList56 = subAckMessage55.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList57 = subAckMessage55.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage61 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str62 = connectMessage61.getProtocolId();
        org.meqantt.message.QoS qoS63 = connectMessage61.getQos();
        subAckMessage55.addQoS(qoS63);
        subAckMessage3.addQoS(qoS63);
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList67 = subscribeMessage66.getTopics();
        org.meqantt.message.QoS qoS68 = subscribeMessage66.getQos();
        org.meqantt.message.ConnectMessage connectMessage73 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str74 = connectMessage73.getProtocolId();
        org.meqantt.message.QoS qoS75 = connectMessage73.getQos();
        subscribeMessage66.addTopic("", qoS75);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage78 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList79 = unsubscribeMessage78.getTopics();
        org.meqantt.message.Message.Type type80 = unsubscribeMessage78.getType();
        java.util.List<java.lang.String> strList81 = unsubscribeMessage78.getTopics();
        org.meqantt.message.QoS qoS82 = unsubscribeMessage78.getQos();
        subscribeMessage66.setQos(qoS82);
        subAckMessage3.addQoS(qoS82);
        subscribeMessage1.setQos(qoS82);
        org.meqantt.message.SubscribeMessage subscribeMessage86 = new org.meqantt.message.SubscribeMessage("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS82);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNull(qoSList4);
        org.junit.Assert.assertNull(qoSList5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MQIsdp" + "'", str10, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList43);
        org.junit.Assert.assertNull(qoSList44);
        org.junit.Assert.assertNull(qoSList45);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + qoS49 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS49.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList56);
        org.junit.Assert.assertNull(qoSList57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "MQIsdp" + "'", str62, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS63 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS63.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + qoS68 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS68.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "MQIsdp" + "'", str74, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS75 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS75.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + type80 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type80.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertTrue("'" + qoS82 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS82.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13179");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage4 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage5 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage9.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13180");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header1);
    }

    @Test
    public void test13181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13181");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage();
        int int12 = subAckMessage11.getMessageId();
        java.util.List<org.meqantt.message.QoS> qoSList13 = subAckMessage11.getGrantedQoSs();
        subAckMessage11.setMessageId((int) (byte) 10);
        org.meqantt.message.PubRelMessage pubRelMessage17 = new org.meqantt.message.PubRelMessage((int) ' ');
        org.meqantt.message.QoS qoS18 = pubRelMessage17.getQos();
        subAckMessage11.addQoS(qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS18);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage9.setQos(qoS18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(qoSList13);
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13182");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        java.lang.String str6 = connectMessage3.getWill();
        java.lang.String str7 = connectMessage3.getProtocolId();
        byte byte8 = connectMessage3.getProtocolVersion();
        boolean boolean9 = connectMessage3.isWillRetained();
        byte byte10 = connectMessage3.getProtocolVersion();
        java.lang.String str11 = connectMessage3.getPassword();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 3 + "'", byte8 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 3 + "'", byte10 == (byte) 3);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test13183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13183");
        byte[] byteArray2 = org.meqantt.util.FormatUtil.toMQttString("\001\003\003\001");
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage("00: 00000000 \000 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", byteArray2);
        byte[] byteArray4 = publishMessage3.getData();
        int int5 = publishMessage3.getMessageId();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 4, 1, 3, 3, 1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 4, 1, 3, 3, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test13184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13184");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 0);
        java.lang.String str4 = connectMessage3.getClientId();
        org.meqantt.message.Message.Type type5 = connectMessage3.getType();
        org.meqantt.message.QoS qoS6 = connectMessage3.getWillQoS();
        java.lang.String str7 = connectMessage3.getWillTopic();
        boolean boolean8 = connectMessage3.isCleanSession();
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList12 = subAckMessage11.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList13 = subAckMessage11.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList14 = subAckMessage11.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList17 = subscribeMessage16.getTopics();
        org.meqantt.message.QoS qoS18 = subscribeMessage16.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage("", qoS18);
        subAckMessage11.addQoS(qoS18);
        org.meqantt.message.QoS qoS21 = subAckMessage11.getQos();
        connectMessage3.setWill("Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]", "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS21, false);
        java.lang.String str24 = connectMessage3.getWill();
        boolean boolean25 = connectMessage3.isWillRetained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.meqantt.message.Message.Type.CONNECT + "'", type5.equals(org.meqantt.message.Message.Type.CONNECT));
        org.junit.Assert.assertNull(qoS6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(qoSList12);
        org.junit.Assert.assertNull(qoSList13);
        org.junit.Assert.assertNull(qoSList14);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n" + "'", str24, "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test13185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13185");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage7.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13186");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage5.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE));
    }

    @Test
    public void test13187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13187");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00000011 \003 3\n05: 01101000 h 104\n06: 01101001 i 105\n07: 00100001 ! 33\n");
    }

    @Test
    public void test13188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13188");
        org.meqantt.message.Message.Header header1 = null;
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean3 = connectMessage2.isWillRetained();
        boolean boolean4 = connectMessage2.isWillRetained();
        connectMessage2.setWill("", "MQIsdp");
        connectMessage2.setCredentials("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        connectMessage2.setCredentials("MQIsdp");
        boolean boolean13 = connectMessage2.hasPassword();
        boolean boolean14 = connectMessage2.isCleanSession();
        org.meqantt.message.QoS qoS15 = connectMessage2.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS15);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13189");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage12 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage13 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage13.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test13190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13190");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus6 = connAckMessage5.getStatus();
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(connectionStatus6);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(connectionStatus6);
        org.meqantt.message.Message.Header header10 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type11 = header10.getType();
        org.meqantt.message.Message.Type type12 = header10.getType();
        org.meqantt.message.SubAckMessage subAckMessage13 = new org.meqantt.message.SubAckMessage(header10);
        org.meqantt.message.PingReqMessage pingReqMessage14 = new org.meqantt.message.PingReqMessage(header10);
        org.meqantt.message.PingReqMessage pingReqMessage15 = new org.meqantt.message.PingReqMessage(header10);
        org.meqantt.message.DisconnectMessage disconnectMessage16 = new org.meqantt.message.DisconnectMessage(header10);
        org.meqantt.message.SubAckMessage subAckMessage17 = new org.meqantt.message.SubAckMessage(header10);
        org.meqantt.message.SubAckMessage subAckMessage18 = new org.meqantt.message.SubAckMessage(header10);
        org.meqantt.message.PubCompMessage pubCompMessage19 = new org.meqantt.message.PubCompMessage(header10);
        org.meqantt.message.QoS qoS20 = pubCompMessage19.getQos();
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage8.setQos(qoS20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus6 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus6.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(type12);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13191");
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage("", byteArray8);
        java.lang.String str10 = publishMessage9.getDataAsString();
        byte[] byteArray11 = publishMessage9.getData();
        java.lang.String str12 = org.meqantt.util.FormatUtil.toString(byteArray11);
        java.lang.String str13 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray11);
        java.lang.String str14 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray11);
        org.meqantt.message.PublishMessage publishMessage15 = new org.meqantt.message.PublishMessage("\000\000", byteArray11);
        java.lang.String str16 = publishMessage15.getTopic();
        int int17 = publishMessage15.getMessageId();
        java.lang.String str18 = publishMessage15.getTopic();
        java.lang.String str19 = publishMessage15.getDataAsString();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000d\000\001\001d" + "'", str10, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str13, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str14, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\000\000" + "'", str16, "\000\000");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\000\000" + "'", str18, "\000\000");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\000d\000\001\001d" + "'", str19, "\000d\000\001\001d");
    }

    @Test
    public void test13192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13192");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
    }

    @Test
    public void test13193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13193");
        org.meqantt.message.Message.Header header1 = null;
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str3 = connectMessage2.getPassword();
        java.lang.String str4 = connectMessage2.getWillTopic();
        boolean boolean5 = connectMessage2.isCleanSession();
        boolean boolean6 = connectMessage2.hasPassword();
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage((int) ' ');
        org.meqantt.message.QoS qoS11 = pubRelMessage10.getQos();
        connectMessage2.setWill("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS11, false);
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00000001 \001 1\n", qoS11);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage14.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13194");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.BAD_USERNAME_OR_PASSWORD;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus5 = connAckMessage4.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus6 = connAckMessage4.getStatus();
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage4.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.BAD_USERNAME_OR_PASSWORD + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.BAD_USERNAME_OR_PASSWORD));
        org.junit.Assert.assertTrue("'" + connectionStatus5 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.BAD_USERNAME_OR_PASSWORD + "'", connectionStatus5.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.BAD_USERNAME_OR_PASSWORD));
        org.junit.Assert.assertTrue("'" + connectionStatus6 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.BAD_USERNAME_OR_PASSWORD + "'", connectionStatus6.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.BAD_USERNAME_OR_PASSWORD));
    }

    @Test
    public void test13195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13195");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        java.lang.String str6 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage7 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage8 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Header header10 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage11 = new org.meqantt.message.PubCompMessage(header10);
        org.meqantt.message.ConnAckMessage connAckMessage12 = new org.meqantt.message.ConnAckMessage(header10);
        org.meqantt.message.PubCompMessage pubCompMessage13 = new org.meqantt.message.PubCompMessage(header10);
        org.meqantt.message.PubRecMessage pubRecMessage14 = new org.meqantt.message.PubRecMessage(header10);
        java.lang.String str15 = header10.toString();
        org.meqantt.message.PingReqMessage pingReqMessage16 = new org.meqantt.message.PingReqMessage(header10);
        org.meqantt.message.QoS qoS17 = pingReqMessage16.getQos();
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage8.setQos(qoS17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str15, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13196");
        org.meqantt.message.PubRelMessage pubRelMessage1 = new org.meqantt.message.PubRelMessage(8);
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage1.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13197");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        java.lang.String str3 = connectMessage1.getWillTopic();
        boolean boolean4 = connectMessage1.isCleanSession();
        boolean boolean5 = connectMessage1.isCleanSession();
        connectMessage1.setWill("\000\000", "\000d\000\001\001d");
        boolean boolean9 = connectMessage1.hasWill();
        java.lang.String str10 = connectMessage1.getWillTopic();
        org.meqantt.message.QoS qoS11 = connectMessage1.getWillQoS();
        connectMessage1.setCredentials("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        connectMessage1.setWill("\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        boolean boolean17 = connectMessage1.isCleanSession();
        java.lang.String str18 = connectMessage1.getUsername();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000\000" + "'", str10, "\000\000");
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n" + "'", str18, "\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
    }

    @Test
    public void test13198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13198");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 10);
        boolean boolean4 = connectMessage3.hasPassword();
        int int5 = connectMessage3.getKeepAlive();
        byte byte6 = connectMessage3.getProtocolVersion();
        org.meqantt.message.QoS qoS7 = connectMessage3.getWillQoS();
        java.lang.String str8 = connectMessage3.getClientId();
        byte byte9 = connectMessage3.getProtocolVersion();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 3 + "'", byte6 == (byte) 3);
        org.junit.Assert.assertNull(qoS7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MQIsdp" + "'", str8, "MQIsdp");
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 3 + "'", byte9 == (byte) 3);
    }

    @Test
    public void test13199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13199");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean15 = connectMessage14.hasWill();
        java.lang.String str16 = connectMessage14.getWill();
        org.meqantt.message.Message.Header header19 = null;
        org.meqantt.message.ConnectMessage connectMessage20 = new org.meqantt.message.ConnectMessage(header19);
        boolean boolean21 = connectMessage20.isWillRetained();
        boolean boolean22 = connectMessage20.isWillRetained();
        java.lang.String str23 = connectMessage20.getUsername();
        org.meqantt.message.QoS qoS27 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage("", qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList31 = subscribeMessage30.getTopics();
        org.meqantt.message.QoS qoS32 = subscribeMessage30.getQos();
        subscribeMessage28.addTopic("", qoS32);
        connectMessage20.setWill("hi!", "", qoS32, false);
        connectMessage14.setWill("MQIsdp", "hi!", qoS32, false);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS32);
        connectMessage7.setWill("hi!", "\000\000", qoS32, true);
        java.lang.String str41 = connectMessage7.getClientId();
        boolean boolean42 = connectMessage7.isWillRetained();
        java.lang.String str43 = connectMessage7.getUsername();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test13200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13200");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("MQIsdp", (int) (byte) 0);
        nettyClient1.subscribe("");
        nettyClient1.publish("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        nettyClient1.publish("\001\ufffd00: 00010000 \020 16\n01: 00011010 \032 26\n\ufffd\ufffd 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n\ufffd\ufffd 0\n13: 00000001 \001 1\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n19: 00001000 \b 8\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n22: 01100100 d 100\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", "\000=Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13201");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList1 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str7 = connectMessage6.getProtocolId();
        org.meqantt.message.QoS qoS8 = connectMessage6.getQos();
        subAckMessage0.addQoS(qoS8);
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList11 = subscribeMessage10.getTopics();
        org.meqantt.message.QoS qoS12 = subscribeMessage10.getQos();
        subAckMessage0.addQoS(qoS12);
        org.meqantt.message.Message.Header header15 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage16 = new org.meqantt.message.PingReqMessage(header15);
        org.meqantt.message.PublishMessage publishMessage17 = new org.meqantt.message.PublishMessage(header15);
        org.meqantt.message.PubAckMessage pubAckMessage18 = new org.meqantt.message.PubAckMessage(header15);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage(header15);
        org.meqantt.message.ConnectMessage connectMessage23 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str24 = connectMessage23.getClientId();
        boolean boolean25 = connectMessage23.hasUsername();
        boolean boolean26 = connectMessage23.isCleanSession();
        org.meqantt.message.SubAckMessage subAckMessage29 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList30 = subAckMessage29.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList31 = subAckMessage29.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList32 = subAckMessage29.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList35 = subscribeMessage34.getTopics();
        org.meqantt.message.QoS qoS36 = subscribeMessage34.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage("", qoS36);
        subAckMessage29.addQoS(qoS36);
        org.meqantt.message.SubscribeMessage subscribeMessage39 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList40 = subscribeMessage39.getTopics();
        org.meqantt.message.ConnectMessage connectMessage45 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str46 = connectMessage45.getProtocolId();
        org.meqantt.message.QoS qoS47 = connectMessage45.getQos();
        subscribeMessage39.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS47);
        subAckMessage29.addQoS(qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList54 = subscribeMessage53.getTopics();
        org.meqantt.message.QoS qoS55 = subscribeMessage53.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage56 = new org.meqantt.message.SubscribeMessage("", qoS55);
        org.meqantt.message.SubscribeMessage subscribeMessage57 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS55);
        org.meqantt.message.QoS qoS58 = subscribeMessage57.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage62 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList63 = subscribeMessage62.getTopics();
        org.meqantt.message.QoS qoS64 = subscribeMessage62.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage65 = new org.meqantt.message.SubscribeMessage("", qoS64);
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS64);
        org.meqantt.message.QoS qoS67 = subscribeMessage66.getQos();
        subscribeMessage57.addTopic("", qoS67);
        org.meqantt.message.SubscribeMessage subscribeMessage69 = new org.meqantt.message.SubscribeMessage("", qoS67);
        subAckMessage29.addQoS(qoS67);
        connectMessage23.setWill("\001\003\003\001", "", qoS67, true);
        subscribeMessage19.setQos(qoS67);
        org.meqantt.message.ConnectMessage connectMessage80 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str81 = connectMessage80.getUsername();
        org.meqantt.message.QoS qoS85 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage86 = new org.meqantt.message.SubscribeMessage("", qoS85);
        org.meqantt.message.SubscribeMessage subscribeMessage88 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList89 = subscribeMessage88.getTopics();
        org.meqantt.message.QoS qoS90 = subscribeMessage88.getQos();
        subscribeMessage86.addTopic("", qoS90);
        connectMessage80.setWill("", "\000d\000\001\001d", qoS90, true);
        org.meqantt.message.SubscribeMessage subscribeMessage94 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS90);
        org.meqantt.message.SubscribeMessage subscribeMessage95 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS90);
        subscribeMessage19.addTopic("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS90);
        subAckMessage0.addQoS(qoS90);
        org.junit.Assert.assertNull(qoSList1);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS8 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS8.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + qoS12 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS12.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(qoSList30);
        org.junit.Assert.assertNull(qoSList31);
        org.junit.Assert.assertNull(qoSList32);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "MQIsdp" + "'", str46, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS47 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS47.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + qoS55 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS55.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS58 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS58.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + qoS64 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS64.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS67 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS67.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + qoS90 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS90.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13202");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", "\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        java.lang.String str3 = publishMessage2.getDataAsString();
        java.lang.String str4 = publishMessage2.getDataAsString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str3, "\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str4, "\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
    }

    @Test
    public void test13203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13203");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        boolean boolean3 = unsubscribeMessage1.isDup();
        unsubscribeMessage1.addTopic("\ufffd\003\000\000\000");
        java.util.List<java.lang.String> strList6 = unsubscribeMessage1.getTopics();
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test13204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13204");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.connect("", (int) '\001');
        nettyClient1.connect("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", (int) '4');
        nettyClient1.connect("\001\003\003\001", (int) (short) 100);
        nettyClient1.disconnect();
        nettyClient1.disconnect();
        nettyClient1.ping();
        org.meqantt.MqttListener mqttListener23 = null;
        nettyClient1.setListener(mqttListener23);
    }

    @Test
    public void test13205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13205");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        connectMessage2.setWill("\000\000", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList9 = subscribeMessage8.getTopics();
        org.meqantt.message.QoS qoS10 = subscribeMessage8.getQos();
        org.meqantt.message.ConnectMessage connectMessage15 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str16 = connectMessage15.getProtocolId();
        org.meqantt.message.QoS qoS17 = connectMessage15.getQos();
        subscribeMessage8.addTopic("", qoS17);
        connectMessage2.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS17, true);
        boolean boolean21 = connectMessage2.hasPassword();
        java.lang.String str22 = connectMessage2.getWill();
        java.lang.String str23 = connectMessage2.getPassword();
        connectMessage2.setWill("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "");
        java.lang.String str27 = connectMessage2.getWill();
        int int28 = connectMessage2.getKeepAlive();
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MQIsdp" + "'", str16, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str22, "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test13206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13206");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.SubscribeMessage subscribeMessage2 = new org.meqantt.message.SubscribeMessage(header1);
        java.util.List<java.lang.String> strList3 = subscribeMessage2.getTopics();
        subscribeMessage2.setDup(false);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage2.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test13207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13207");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getProtocolId();
        byte[] byteArray5 = connectMessage3.toBytes();
        org.meqantt.message.QoS qoS6 = connectMessage3.getQos();
        boolean boolean7 = connectMessage3.isRetained();
        connectMessage3.setCredentials("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", "\000d\000\001\001d");
        byte[] byteArray11 = connectMessage3.toBytes();
        java.lang.String str12 = connectMessage3.getPassword();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[16, -122, 1, 0, 6, 77, 81, 73, 115, 100, 112, 3, -62, 0, 1, 0, 0, 0, 108, 48, 48, 58, 32, 48, 48, 48, 48, 48, 48, 48, 48, 32, -64, -128, 32, 48, 10, 48, 49, 58, 32, 48, 49, 49, 48, 48, 49, 48, 48, 32, 100, 32, 49, 48, 48, 10, 48, 50, 58, 32, 48, 48, 48, 48, 48, 48, 48, 48, 32, -64, -128, 32, 48, 10, 48, 51, 58, 32, 48, 48, 48, 48, 48, 48, 48, 49, 32, 1, 32, 49, 10, 48, 52, 58, 32, 48, 48, 48, 48, 48, 48, 48, 49, 32, 1, 32, 49, 10, 48, 53, 58, 32, 48, 49, 49, 48, 48, 49, 48, 48, 32, 100, 32, 49, 48, 48, 10, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\000d\000\001\001d" + "'", str12, "\000d\000\001\001d");
    }

    @Test
    public void test13208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13208");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.hasUsername();
        boolean boolean6 = connectMessage1.hasUsername();
        connectMessage1.setWill("MQIsdp", "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        boolean boolean10 = connectMessage1.hasPassword();
        connectMessage1.setWill("00: 00000000 \000 0\n01: 00000000 \000 0\n", "hi!");
        java.lang.String str14 = connectMessage1.getUsername();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test13209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13209");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        java.lang.String str8 = connectMessage1.getClientId();
        java.lang.String str9 = connectMessage1.getWill();
        byte byte10 = connectMessage1.getProtocolVersion();
        java.lang.String str11 = connectMessage1.getPassword();
        connectMessage1.setWill("\000\000", "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        org.meqantt.message.SubAckMessage subAckMessage17 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList18 = subAckMessage17.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList19 = subAckMessage17.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage23 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str24 = connectMessage23.getProtocolId();
        org.meqantt.message.QoS qoS25 = connectMessage23.getQos();
        subAckMessage17.addQoS(qoS25);
        org.meqantt.message.ConnectMessage connectMessage30 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean31 = connectMessage30.hasWill();
        java.lang.String str32 = connectMessage30.getWill();
        org.meqantt.message.Message.Header header35 = null;
        org.meqantt.message.ConnectMessage connectMessage36 = new org.meqantt.message.ConnectMessage(header35);
        boolean boolean37 = connectMessage36.isWillRetained();
        boolean boolean38 = connectMessage36.isWillRetained();
        java.lang.String str39 = connectMessage36.getUsername();
        org.meqantt.message.QoS qoS43 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage44 = new org.meqantt.message.SubscribeMessage("", qoS43);
        org.meqantt.message.SubscribeMessage subscribeMessage46 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList47 = subscribeMessage46.getTopics();
        org.meqantt.message.QoS qoS48 = subscribeMessage46.getQos();
        subscribeMessage44.addTopic("", qoS48);
        connectMessage36.setWill("hi!", "", qoS48, false);
        connectMessage30.setWill("MQIsdp", "hi!", qoS48, false);
        org.meqantt.message.SubAckMessage subAckMessage56 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList57 = subAckMessage56.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList58 = subAckMessage56.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList59 = subAckMessage56.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList62 = subscribeMessage61.getTopics();
        org.meqantt.message.QoS qoS63 = subscribeMessage61.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage64 = new org.meqantt.message.SubscribeMessage("", qoS63);
        subAckMessage56.addQoS(qoS63);
        connectMessage30.setWill("hi!", "MQIsdp", qoS63, true);
        subAckMessage17.addQoS(qoS63);
        org.meqantt.message.SubAckMessage subAckMessage69 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList70 = subAckMessage69.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList71 = subAckMessage69.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage75 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str76 = connectMessage75.getProtocolId();
        org.meqantt.message.QoS qoS77 = connectMessage75.getQos();
        subAckMessage69.addQoS(qoS77);
        subAckMessage17.addQoS(qoS77);
        connectMessage1.setWill("", "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS77, true);
        org.meqantt.message.QoS qoS82 = connectMessage1.getWillQoS();
        java.lang.String str83 = connectMessage1.getPassword();
        java.lang.String str84 = connectMessage1.getProtocolId();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 3 + "'", byte10 == (byte) 3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(qoSList18);
        org.junit.Assert.assertNull(qoSList19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MQIsdp" + "'", str24, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + qoS48 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS48.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList57);
        org.junit.Assert.assertNull(qoSList58);
        org.junit.Assert.assertNull(qoSList59);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + qoS63 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS63.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList70);
        org.junit.Assert.assertNull(qoSList71);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "MQIsdp" + "'", str76, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS77 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS77.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS82 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS82.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "MQIsdp" + "'", str84, "MQIsdp");
    }

    @Test
    public void test13210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13210");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        org.meqantt.message.Message.Type type3 = unsubscribeMessage1.getType();
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.addTopic("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        unsubscribeMessage1.setMessageId((-1));
        unsubscribeMessage1.addTopic("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd");
        unsubscribeMessage1.addTopic("00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n");
        unsubscribeMessage1.setMessageId((int) (short) 10);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type3.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
    }

    @Test
    public void test13211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13211");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getWillTopic();
        boolean boolean7 = connectMessage3.isCleanSession();
        java.lang.String str8 = connectMessage3.getWillTopic();
        connectMessage3.setWill("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", "00: 00010000 \020 16\n01: 00010100 \024 20\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000110 \006 6\n16: 01001101 M 77\n17: 01010001 Q 81\n18: 01001001 I 73\n19: 01110011 s 115\n20: 01100100 d 100\n21: 01110000 p 112\n");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test13212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13212");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage(header1);
        boolean boolean6 = publishMessage5.isDup();
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13213");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", "");
        int int3 = publishMessage2.getMessageId();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test13214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13214");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        boolean boolean3 = connectMessage1.hasUsername();
        java.lang.String str4 = connectMessage1.getProtocolId();
        connectMessage1.setWill("00: 00000000 \000 0\n01: 00010011 \023 19\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00001000 \b 8\n05: 11101111 \357 239\n06: 10111111 \277 191\n07: 10111101 \275 189\n08: 11101111 \357 239\n09: 10111111 \277 191\n10: 10111101 \275 189\n11: 01100100 d 100\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 11101111 \357 239\n16: 10111111 \277 191\n17: 10111101 \275 189\n18: 00000001 \001 1\n19: 00000001 \001 1\n20: 01100100 d 100\n", "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        connectMessage1.setCredentials("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n");
        java.lang.String str10 = connectMessage1.getPassword();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test13215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13215");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.DisconnectMessage disconnectMessage4 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage4.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test13216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13216");
        org.meqantt.message.UnsubAckMessage unsubAckMessage0 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.Message.Header header2 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage3 = new org.meqantt.message.PingReqMessage(header2);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header2);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header2);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header2);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header2);
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage(header2);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header2);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage11 = new org.meqantt.message.UnsubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage13 = new org.meqantt.message.UnsubscribeMessage("\000d\000\001\001d");
        unsubscribeMessage13.addTopic("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.message.SubAckMessage subAckMessage16 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList17 = subAckMessage16.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList18 = subAckMessage16.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList19 = subAckMessage16.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList22 = subscribeMessage21.getTopics();
        org.meqantt.message.QoS qoS23 = subscribeMessage21.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("", qoS23);
        subAckMessage16.addQoS(qoS23);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList27 = subscribeMessage26.getTopics();
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str33 = connectMessage32.getProtocolId();
        org.meqantt.message.QoS qoS34 = connectMessage32.getQos();
        subscribeMessage26.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS34);
        subAckMessage16.addQoS(qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList41 = subscribeMessage40.getTopics();
        org.meqantt.message.QoS qoS42 = subscribeMessage40.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage("", qoS42);
        org.meqantt.message.SubscribeMessage subscribeMessage44 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS42);
        org.meqantt.message.QoS qoS45 = subscribeMessage44.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList50 = subscribeMessage49.getTopics();
        org.meqantt.message.QoS qoS51 = subscribeMessage49.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage("", qoS51);
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS51);
        org.meqantt.message.QoS qoS54 = subscribeMessage53.getQos();
        subscribeMessage44.addTopic("", qoS54);
        org.meqantt.message.SubscribeMessage subscribeMessage56 = new org.meqantt.message.SubscribeMessage("", qoS54);
        subAckMessage16.addQoS(qoS54);
        unsubscribeMessage13.setQos(qoS54);
        unsubscribeMessage11.setQos(qoS54);
        java.util.List<java.lang.String> strList60 = unsubscribeMessage11.getTopics();
        org.meqantt.message.QoS qoS61 = unsubscribeMessage11.getQos();
        subscribeMessage9.setQos(qoS61);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage0.setQos(qoS61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList17);
        org.junit.Assert.assertNull(qoSList18);
        org.junit.Assert.assertNull(qoSList19);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + qoS23 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS23.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQIsdp" + "'", str33, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + qoS42 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS42.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS45 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS45.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + qoS51 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS51.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS54 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS54.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + qoS61 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS61.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13217");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList1 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList6 = subscribeMessage5.getTopics();
        org.meqantt.message.QoS qoS7 = subscribeMessage5.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage("", qoS7);
        subAckMessage0.addQoS(qoS7);
        org.meqantt.message.QoS qoS10 = subAckMessage0.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList14 = subscribeMessage13.getTopics();
        org.meqantt.message.QoS qoS15 = subscribeMessage13.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage("", qoS15);
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS15);
        org.meqantt.message.QoS qoS18 = subscribeMessage17.getQos();
        subAckMessage0.addQoS(qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList23 = subscribeMessage22.getTopics();
        org.meqantt.message.QoS qoS24 = subscribeMessage22.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage("", qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS24);
        org.meqantt.message.QoS qoS27 = subscribeMessage26.getQos();
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage("\000\000", false, (int) (short) -1);
        org.meqantt.message.ConnectMessage connectMessage43 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str44 = connectMessage43.getUsername();
        org.meqantt.message.QoS qoS48 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage("", qoS48);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList52 = subscribeMessage51.getTopics();
        org.meqantt.message.QoS qoS53 = subscribeMessage51.getQos();
        subscribeMessage49.addTopic("", qoS53);
        connectMessage43.setWill("", "\000d\000\001\001d", qoS53, true);
        org.meqantt.message.SubscribeMessage subscribeMessage57 = new org.meqantt.message.SubscribeMessage("hi!", qoS53);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS53);
        org.meqantt.message.SubscribeMessage subscribeMessage59 = new org.meqantt.message.SubscribeMessage("", qoS53);
        org.meqantt.message.SubscribeMessage subscribeMessage60 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS53);
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS53);
        connectMessage32.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS53, false);
        subscribeMessage26.addTopic("00: 01100100 d 100\n01: 00000000 \000 0\n", qoS53);
        subAckMessage0.addQoS(qoS53);
        java.util.List<org.meqantt.message.QoS> qoSList66 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList67 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList68 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList69 = subAckMessage0.getGrantedQoSs();
        java.io.OutputStream outputStream70 = null;
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage0.write(outputStream70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList1);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + qoS7 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS7.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + qoS53 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS53.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList66);
        org.junit.Assert.assertNotNull(qoSList67);
        org.junit.Assert.assertNotNull(qoSList68);
        org.junit.Assert.assertNotNull(qoSList69);
    }

    @Test
    public void test13218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13218");
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage("", byteArray10);
        org.meqantt.message.PublishMessage publishMessage12 = new org.meqantt.message.PublishMessage("", byteArray10);
        java.lang.String str13 = org.meqantt.util.FormatUtil.toString(byteArray10);
        java.lang.String str14 = org.meqantt.util.FormatUtil.toString(byteArray10);
        org.meqantt.message.PublishMessage publishMessage15 = new org.meqantt.message.PublishMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", byteArray10);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", byteArray10);
        byte[] byteArray17 = publishMessage16.getData();
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100, 0, 1, 1, 100]");
    }

    @Test
    public void test13219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13219");
        byte[] byteArray4 = org.meqantt.util.FormatUtil.toMQttString("\000d\000\001\001d");
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage("hi!", byteArray4);
        java.lang.String str6 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray4);
        java.lang.String str7 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray4);
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", byteArray4);
        byte[] byteArray9 = publishMessage8.getData();
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage("\ufffd\003\000\000\000", byteArray9);
        publishMessage10.setMessageId(97);
        java.lang.String str13 = publishMessage10.getTopic();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str6, "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str7, "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ufffd\003\000\000\000" + "'", str13, "\ufffd\003\000\000\000");
    }

    @Test
    public void test13220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13220");
        org.meqantt.message.ConnectMessage connectMessage0 = new org.meqantt.message.ConnectMessage();
        boolean boolean1 = connectMessage0.hasWill();
        java.lang.String str2 = connectMessage0.getProtocolId();
        org.meqantt.message.QoS qoS3 = connectMessage0.getWillQoS();
        java.lang.String str4 = connectMessage0.getPassword();
        connectMessage0.setCredentials("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MQIsdp" + "'", str2, "MQIsdp");
        org.junit.Assert.assertNull(qoS3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test13221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13221");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\020\016\000\006MQIsdp\003\002\000\001\000\000", false, (int) (byte) 0);
    }

    @Test
    public void test13222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13222");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage8.setMessageId(0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test13223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13223");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("00: 00110000 0 48\n01: 00000111 \007 7\n02: 00000000 \000 0\n03: 00000011 \003 3\n04: 01101000 h 104\n05: 01101001 i 105\n06: 00100001 ! 33\n07: 00000000 \000 0\n08: 00000000 \000 0\n", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13224");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage7.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13225");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
    }

    @Test
    public void test13226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13226");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage4.addTopic("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00000011 \003 3\n05: 01101000 h 104\n06: 01101001 i 105\n07: 00100001 ! 33\n");
    }

    @Test
    public void test13227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13227");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean3 = connectMessage2.isWillRetained();
        boolean boolean4 = connectMessage2.hasWill();
        byte byte5 = connectMessage2.getProtocolVersion();
        java.lang.String str6 = connectMessage2.getProtocolId();
        connectMessage2.setCredentials("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 3 + "'", byte5 == (byte) 3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MQIsdp" + "'", str6, "MQIsdp");
    }

    @Test
    public void test13228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13228");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage10 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Type type11 = header1.getType();
        org.meqantt.message.DisconnectMessage disconnectMessage12 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage12.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type11);
    }

    @Test
    public void test13229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13229");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getWillTopic();
        boolean boolean7 = connectMessage3.isCleanSession();
        boolean boolean8 = connectMessage3.hasPassword();
        boolean boolean9 = connectMessage3.isDup();
        connectMessage3.setWill("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", "\000\003hi!");
        org.meqantt.message.Message.Header header16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage(header16);
        org.meqantt.message.QoS qoS19 = null;
        subscribeMessage17.addTopic("hi!", qoS19);
        org.meqantt.message.ConnectMessage connectMessage25 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str26 = connectMessage25.getUsername();
        int int27 = connectMessage25.getKeepAlive();
        org.meqantt.message.ConnectMessage connectMessage33 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean34 = connectMessage33.hasWill();
        java.lang.String str35 = connectMessage33.getWill();
        org.meqantt.message.Message.Header header38 = null;
        org.meqantt.message.ConnectMessage connectMessage39 = new org.meqantt.message.ConnectMessage(header38);
        boolean boolean40 = connectMessage39.isWillRetained();
        boolean boolean41 = connectMessage39.isWillRetained();
        java.lang.String str42 = connectMessage39.getUsername();
        org.meqantt.message.QoS qoS46 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage47 = new org.meqantt.message.SubscribeMessage("", qoS46);
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList50 = subscribeMessage49.getTopics();
        org.meqantt.message.QoS qoS51 = subscribeMessage49.getQos();
        subscribeMessage47.addTopic("", qoS51);
        connectMessage39.setWill("hi!", "", qoS51, false);
        connectMessage33.setWill("MQIsdp", "hi!", qoS51, false);
        connectMessage25.setWill("\000\000", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS51, false);
        subscribeMessage17.addTopic("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS51);
        org.meqantt.message.SubscribeMessage subscribeMessage60 = new org.meqantt.message.SubscribeMessage("", qoS51);
        connectMessage3.setWill("\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", qoS51, true);
        java.lang.String str63 = connectMessage3.getWillTopic();
        org.meqantt.message.ConnectMessage connectMessage67 = new org.meqantt.message.ConnectMessage("\000\003hi!", true, 97);
        boolean boolean68 = connectMessage67.hasWill();
        org.meqantt.message.ConnectMessage connectMessage74 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 10);
        boolean boolean75 = connectMessage74.hasPassword();
        int int76 = connectMessage74.getKeepAlive();
        java.lang.String str77 = connectMessage74.getPassword();
        org.meqantt.message.QoS qoS78 = connectMessage74.getQos();
        connectMessage67.setWill("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "\000\003hi!", qoS78, false);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setQos(qoS78);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + qoS51 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS51.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str63, "\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + qoS78 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS78.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13230");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        byte byte3 = connectMessage2.getProtocolVersion();
        java.lang.String str4 = connectMessage2.getProtocolId();
        boolean boolean5 = connectMessage2.isDup();
        boolean boolean6 = connectMessage2.hasUsername();
        boolean boolean7 = connectMessage2.hasUsername();
        int int8 = connectMessage2.getKeepAlive();
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 3 + "'", byte3 == (byte) 3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test13231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13231");
        org.meqantt.message.PubCompMessage pubCompMessage1 = new org.meqantt.message.PubCompMessage((int) '#');
        org.meqantt.message.Message.Header header3 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header3);
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header3);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header3);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header3);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header3);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header3);
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage(header3);
        java.util.List<org.meqantt.message.QoS> qoSList11 = subscribeMessage10.getTopicQoSs();
        org.meqantt.message.SubAckMessage subAckMessage13 = new org.meqantt.message.SubAckMessage();
        int int14 = subAckMessage13.getMessageId();
        java.util.List<org.meqantt.message.QoS> qoSList15 = subAckMessage13.getGrantedQoSs();
        org.meqantt.message.Message.Header header16 = null;
        org.meqantt.message.ConnectMessage connectMessage17 = new org.meqantt.message.ConnectMessage(header16);
        boolean boolean18 = connectMessage17.isWillRetained();
        boolean boolean19 = connectMessage17.isWillRetained();
        connectMessage17.setWill("", "MQIsdp");
        boolean boolean23 = connectMessage17.isWillRetained();
        java.lang.String str24 = connectMessage17.getClientId();
        byte byte25 = connectMessage17.getProtocolVersion();
        org.meqantt.message.QoS qoS26 = connectMessage17.getWillQoS();
        subAckMessage13.addQoS(qoS26);
        subscribeMessage10.addTopic("\000\ufffd\ufffd 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", qoS26);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage1.setQos(qoS26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(qoSList11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(qoSList15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 3 + "'", byte25 == (byte) 3);
        org.junit.Assert.assertTrue("'" + qoS26 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS26.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13232");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage12 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Header header13 = null;
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage(header13);
        java.lang.String str15 = connectMessage14.getClientId();
        connectMessage14.setWill("hi!", "");
        boolean boolean19 = connectMessage14.isCleanSession();
        org.meqantt.message.QoS qoS20 = connectMessage14.getWillQoS();
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage12.setQos(qoS20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13233");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, (int) (short) 1);
        org.meqantt.message.QoS qoS4 = connectMessage3.getWillQoS();
        java.lang.String str5 = connectMessage3.getWill();
        java.lang.String str6 = connectMessage3.getClientId();
        java.lang.String str7 = connectMessage3.getPassword();
        java.lang.String str8 = connectMessage3.getWill();
        boolean boolean9 = connectMessage3.isCleanSession();
        org.junit.Assert.assertNull(qoS4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MQIsdp" + "'", str6, "MQIsdp");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test13234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13234");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.UnsubAckMessage unsubAckMessage2 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage6 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList8 = subAckMessage7.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList9 = subAckMessage7.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage7.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList13 = subscribeMessage12.getTopics();
        org.meqantt.message.QoS qoS14 = subscribeMessage12.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage("", qoS14);
        subAckMessage7.addQoS(qoS14);
        java.util.List<org.meqantt.message.QoS> qoSList17 = subAckMessage7.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList19 = subscribeMessage18.getTopics();
        org.meqantt.message.QoS qoS20 = subscribeMessage18.getQos();
        org.meqantt.message.QoS qoS22 = null;
        subscribeMessage18.addTopic("", qoS22);
        java.util.List<org.meqantt.message.QoS> qoSList24 = subscribeMessage18.getTopicQoSs();
        subscribeMessage18.setDup(false);
        java.util.List<org.meqantt.message.QoS> qoSList27 = subscribeMessage18.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str33 = connectMessage32.getUsername();
        org.meqantt.message.QoS qoS37 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("", qoS37);
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList41 = subscribeMessage40.getTopics();
        org.meqantt.message.QoS qoS42 = subscribeMessage40.getQos();
        subscribeMessage38.addTopic("", qoS42);
        connectMessage32.setWill("", "\000d\000\001\001d", qoS42, true);
        subscribeMessage18.addTopic("\000\000", qoS42);
        subAckMessage7.addQoS(qoS42);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage6.setQos(qoS42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(qoSList8);
        org.junit.Assert.assertNull(qoSList9);
        org.junit.Assert.assertNull(qoSList10);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList24);
        org.junit.Assert.assertNotNull(qoSList27);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + qoS42 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS42.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13235");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str3 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage6 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Header header8 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header8);
        org.meqantt.message.Message.Header header12 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage13 = new org.meqantt.message.ConnectMessage(header12);
        java.lang.String str14 = connectMessage13.getProtocolId();
        connectMessage13.setCredentials("hi!", "");
        boolean boolean18 = connectMessage13.hasWill();
        org.meqantt.message.QoS qoS19 = connectMessage13.getWillQoS();
        java.lang.String str20 = connectMessage13.getProtocolId();
        org.meqantt.message.QoS qoS21 = connectMessage13.getQos();
        subscribeMessage9.addTopic("\000\023\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d", qoS21);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage6.setQos(qoS21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str3, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MQIsdp" + "'", str14, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(qoS19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MQIsdp" + "'", str20, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13236");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage5 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage6 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage8 = new org.meqantt.message.PubRecMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage8.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type7.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test13237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13237");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        unsubscribeMessage1.addTopic("\000d\000\001\001d");
        unsubscribeMessage1.setMessageId(100);
        unsubscribeMessage1.addTopic("MQIsdp");
        boolean boolean9 = unsubscribeMessage1.isDup();
        unsubscribeMessage1.addTopic("");
        unsubscribeMessage1.setDup(false);
        java.util.List<java.lang.String> strList14 = unsubscribeMessage1.getTopics();
        org.meqantt.message.Message.Type type15 = unsubscribeMessage1.getType();
        org.meqantt.message.Message.Header header18 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage19 = new org.meqantt.message.PingReqMessage(header18);
        org.meqantt.message.PublishMessage publishMessage20 = new org.meqantt.message.PublishMessage(header18);
        org.meqantt.message.PingRespMessage pingRespMessage21 = new org.meqantt.message.PingRespMessage(header18);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage(header18);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList27 = subscribeMessage26.getTopics();
        org.meqantt.message.QoS qoS28 = subscribeMessage26.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage("", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS28);
        org.meqantt.message.QoS qoS31 = subscribeMessage30.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList36 = subscribeMessage35.getTopics();
        org.meqantt.message.QoS qoS37 = subscribeMessage35.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("", qoS37);
        org.meqantt.message.SubscribeMessage subscribeMessage39 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS37);
        org.meqantt.message.QoS qoS40 = subscribeMessage39.getQos();
        subscribeMessage30.addTopic("", qoS40);
        org.meqantt.message.PublishMessage publishMessage45 = new org.meqantt.message.PublishMessage("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "MQIsdp");
        org.meqantt.message.QoS qoS46 = publishMessage45.getQos();
        subscribeMessage30.addTopic("", qoS46);
        subscribeMessage30.setDup(false);
        java.util.List<org.meqantt.message.QoS> qoSList50 = subscribeMessage30.getTopicQoSs();
        org.meqantt.message.Message.Header header53 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type54 = header53.getType();
        org.meqantt.message.Message.Type type55 = header53.getType();
        org.meqantt.message.SubAckMessage subAckMessage56 = new org.meqantt.message.SubAckMessage(header53);
        org.meqantt.message.PingReqMessage pingReqMessage57 = new org.meqantt.message.PingReqMessage(header53);
        org.meqantt.message.PingReqMessage pingReqMessage58 = new org.meqantt.message.PingReqMessage(header53);
        org.meqantt.message.DisconnectMessage disconnectMessage59 = new org.meqantt.message.DisconnectMessage(header53);
        org.meqantt.message.SubAckMessage subAckMessage60 = new org.meqantt.message.SubAckMessage(header53);
        org.meqantt.message.UnsubAckMessage unsubAckMessage61 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS62 = unsubAckMessage61.getQos();
        subAckMessage60.addQoS(qoS62);
        org.meqantt.message.ConnectMessage connectMessage68 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean69 = connectMessage68.hasWill();
        java.lang.String str70 = connectMessage68.getWill();
        org.meqantt.message.Message.Header header73 = null;
        org.meqantt.message.ConnectMessage connectMessage74 = new org.meqantt.message.ConnectMessage(header73);
        boolean boolean75 = connectMessage74.isWillRetained();
        boolean boolean76 = connectMessage74.isWillRetained();
        java.lang.String str77 = connectMessage74.getUsername();
        org.meqantt.message.QoS qoS81 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage82 = new org.meqantt.message.SubscribeMessage("", qoS81);
        org.meqantt.message.SubscribeMessage subscribeMessage84 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList85 = subscribeMessage84.getTopics();
        org.meqantt.message.QoS qoS86 = subscribeMessage84.getQos();
        subscribeMessage82.addTopic("", qoS86);
        connectMessage74.setWill("hi!", "", qoS86, false);
        connectMessage68.setWill("MQIsdp", "hi!", qoS86, false);
        org.meqantt.message.SubscribeMessage subscribeMessage92 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS86);
        subAckMessage60.addQoS(qoS86);
        subscribeMessage30.addTopic("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS86);
        subscribeMessage22.addTopic("\ufffd\ufffd\001\000\000\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\000", qoS86);
        org.meqantt.message.SubscribeMessage subscribeMessage96 = new org.meqantt.message.SubscribeMessage("00: 00000011 \003 3\n01: 00000000 \000 0\n", qoS86);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setQos(qoS86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type15.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + qoS37 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS37.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS40 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS40.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS46 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS46.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList50);
        org.junit.Assert.assertNull(type54);
        org.junit.Assert.assertNull(type55);
        org.junit.Assert.assertTrue("'" + qoS62 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS62.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + qoS86 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS86.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13238");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.Message.Header header3 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header3);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage(header3);
        java.lang.String str6 = header3.toString();
        org.meqantt.message.Message.Type type7 = header3.getType();
        org.meqantt.message.PubRelMessage pubRelMessage8 = new org.meqantt.message.PubRelMessage(header3);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header3);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header3);
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) pubRelMessage10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test13239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13239");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage9 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage12 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage13 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str15 = publishMessage14.getTopic();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test13240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13240");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type12 = header1.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage14 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.QoS qoS15 = null;
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage14.setQos(qoS15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type12);
    }

    @Test
    public void test13241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13241");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        boolean boolean3 = connectMessage1.isWillRetained();
        int int4 = connectMessage1.getKeepAlive();
        java.lang.String str5 = connectMessage1.getWill();
        java.lang.String str6 = connectMessage1.getUsername();
        boolean boolean7 = connectMessage1.hasWill();
        java.lang.String str8 = connectMessage1.getWillTopic();
        byte byte9 = connectMessage1.getProtocolVersion();
        java.lang.String str10 = connectMessage1.getProtocolId();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 3 + "'", byte9 == (byte) 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MQIsdp" + "'", str10, "MQIsdp");
    }

    @Test
    public void test13242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13242");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        java.lang.String str6 = connectMessage3.getWill();
        java.lang.String str7 = connectMessage3.getProtocolId();
        byte byte8 = connectMessage3.getProtocolVersion();
        boolean boolean9 = connectMessage3.isWillRetained();
        int int10 = connectMessage3.getKeepAlive();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 3 + "'", byte8 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test13243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13243");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        java.lang.String str6 = header1.toString();
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str6, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
    }

    @Test
    public void test13244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13244");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage7.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13245");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str11 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str13 = connectMessage12.getClientId();
        org.meqantt.message.QoS qoS14 = connectMessage12.getWillQoS();
        connectMessage12.setCredentials("\000H00: 01110000 p 112\n01: 00000010 \002 2\n\ufffd\ufffd 0\n03: 00001010 \n 10\n");
        connectMessage12.setCredentials("Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str11, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(qoS14);
    }

    @Test
    public void test13246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13246");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
    }

    @Test
    public void test13247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13247");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage10 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str11 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage12.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str11, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13248");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        java.lang.String str7 = header1.toString();
        org.meqantt.message.PubAckMessage pubAckMessage8 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.Message.Header header12 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage13 = new org.meqantt.message.ConnectMessage(header12);
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage(header12);
        java.util.List<org.meqantt.message.QoS> qoSList15 = subscribeMessage14.getTopicQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList16 = subscribeMessage14.getTopicQoSs();
        org.meqantt.message.PubRecMessage pubRecMessage19 = new org.meqantt.message.PubRecMessage((-1));
        org.meqantt.message.QoS qoS20 = pubRecMessage19.getQos();
        subscribeMessage14.addTopic("MQIsdp", qoS20);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage10.setQos(qoS20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str7, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNotNull(qoSList15);
        org.junit.Assert.assertNotNull(qoSList16);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13249");
        org.meqantt.message.Message.Header header2 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header2);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage(header2);
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header2);
        org.meqantt.message.Message.Type type6 = header2.getType();
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header2);
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        boolean boolean13 = connectMessage9.isCleanSession();
        java.lang.String str14 = connectMessage9.getWill();
        boolean boolean15 = connectMessage9.hasUsername();
        java.lang.String str16 = connectMessage9.getProtocolId();
        org.meqantt.message.Message.Header header19 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage(header19);
        org.meqantt.message.QoS qoS22 = null;
        subscribeMessage20.addTopic("hi!", qoS22);
        java.util.List<org.meqantt.message.QoS> qoSList24 = subscribeMessage20.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage30 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str31 = connectMessage30.getUsername();
        org.meqantt.message.QoS qoS35 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("", qoS35);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList39 = subscribeMessage38.getTopics();
        org.meqantt.message.QoS qoS40 = subscribeMessage38.getQos();
        subscribeMessage36.addTopic("", qoS40);
        connectMessage30.setWill("", "\000d\000\001\001d", qoS40, true);
        org.meqantt.message.SubscribeMessage subscribeMessage44 = new org.meqantt.message.SubscribeMessage("hi!", qoS40);
        subscribeMessage20.addTopic("\000d\000\001\001d", qoS40);
        connectMessage9.setWill("\000d\000\001\001d", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS40, false);
        subAckMessage7.addQoS(qoS40);
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage("00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n", qoS40);
        org.junit.Assert.assertNull(type6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MQIsdp" + "'", str16, "MQIsdp");
        org.junit.Assert.assertNotNull(qoSList24);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + qoS40 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS40.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13250");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        unsubscribeMessage1.addTopic("\000d\000\001\001d");
        unsubscribeMessage1.addTopic("MQIsdp");
        java.util.List<java.lang.String> strList7 = unsubscribeMessage1.getTopics();
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.setDup(false);
        boolean boolean12 = unsubscribeMessage1.isRetained();
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13251");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
        java.lang.String str3 = publishMessage2.getDataAsString();
        java.lang.String str4 = publishMessage2.getDataAsString();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n" + "'", str3, "\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n" + "'", str4, "\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n");
    }

    @Test
    public void test13252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13252");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("MQIsdp", "\000d\000\001\001d");
        java.lang.String str3 = publishMessage2.getDataAsString();
        java.lang.String str4 = publishMessage2.getTopic();
        java.lang.String str5 = publishMessage2.getDataAsString();
        byte[] byteArray6 = publishMessage2.getData();
        java.lang.String str7 = publishMessage2.getTopic();
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type9 = subscribeMessage8.getType();
        org.meqantt.message.QoS qoS12 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage("", qoS12);
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList16 = subscribeMessage15.getTopics();
        org.meqantt.message.QoS qoS17 = subscribeMessage15.getQos();
        subscribeMessage13.addTopic("", qoS17);
        subscribeMessage8.addTopic("MQIsdp", qoS17);
        org.meqantt.message.UnsubAckMessage unsubAckMessage21 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS22 = unsubAckMessage21.getQos();
        subscribeMessage8.addTopic("", qoS22);
        java.util.List<org.meqantt.message.QoS> qoSList24 = subscribeMessage8.getTopicQoSs();
        java.util.List<java.lang.String> strList25 = subscribeMessage8.getTopics();
        org.meqantt.message.SubAckMessage subAckMessage27 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList28 = subAckMessage27.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList29 = subAckMessage27.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList30 = subAckMessage27.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList32 = subscribeMessage31.getTopics();
        org.meqantt.message.QoS qoS33 = subscribeMessage31.getQos();
        org.meqantt.message.ConnectMessage connectMessage38 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str39 = connectMessage38.getProtocolId();
        org.meqantt.message.QoS qoS40 = connectMessage38.getQos();
        subscribeMessage31.addTopic("", qoS40);
        subAckMessage27.addQoS(qoS40);
        org.meqantt.message.SubscribeMessage subscribeMessage45 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList46 = subscribeMessage45.getTopics();
        org.meqantt.message.QoS qoS47 = subscribeMessage45.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage48 = new org.meqantt.message.SubscribeMessage("", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS47);
        subAckMessage27.addQoS(qoS47);
        subscribeMessage8.addTopic("00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n", qoS47);
        publishMessage2.setQos(qoS47);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d" + "'", str3, "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d" + "'", str5, "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type9.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS22 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS22.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNull(qoSList28);
        org.junit.Assert.assertNull(qoSList29);
        org.junit.Assert.assertNull(qoSList30);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + qoS33 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS33.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "MQIsdp" + "'", str39, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS40 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS40.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + qoS47 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS47.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13253");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList1 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str7 = connectMessage6.getProtocolId();
        org.meqantt.message.QoS qoS8 = connectMessage6.getQos();
        subAckMessage0.addQoS(qoS8);
        byte[] byteArray10 = subAckMessage0.toBytes();
        java.util.List<org.meqantt.message.QoS> qoSList11 = subAckMessage0.getGrantedQoSs();
        org.junit.Assert.assertNull(qoSList1);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS8 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS8.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-112, 3, 0, 0, 0]");
        org.junit.Assert.assertNotNull(qoSList11);
    }

    @Test
    public void test13254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13254");
        org.meqantt.message.PubAckMessage pubAckMessage1 = new org.meqantt.message.PubAckMessage(16);
    }

    @Test
    public void test13255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13255");
        org.meqantt.message.PubAckMessage pubAckMessage1 = new org.meqantt.message.PubAckMessage(1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage1.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13256");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        org.meqantt.MqttListener mqttListener13 = null;
        nettyClient1.setListener(mqttListener13);
        nettyClient1.disconnect();
        nettyClient1.connect("00: 10000000 \200 128\n01: 00001011 \013 11\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000110 \006 6\n06: 01001101 M 77\n07: 01010001 Q 81\n08: 01001001 I 73\n09: 01110011 s 115\n10: 01100100 d 100\n11: 01110000 p 112\n12: 00000000 \000 0\n", 6);
        nettyClient1.subscribe("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
    }

    @Test
    public void test13257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13257");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.SubAckMessage subAckMessage2 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage2.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList4 = subAckMessage2.getGrantedQoSs();
        boolean boolean5 = subAckMessage2.isRetained();
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertNull(qoSList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test13258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13258");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getProtocolId();
        byte[] byteArray5 = connectMessage3.toBytes();
        org.meqantt.message.QoS qoS6 = connectMessage3.getWillQoS();
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str13 = connectMessage12.getProtocolId();
        byte[] byteArray14 = connectMessage12.toBytes();
        org.meqantt.message.QoS qoS15 = connectMessage12.getQos();
        connectMessage3.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS15, true);
        java.lang.String str18 = connectMessage3.getPassword();
        org.meqantt.message.Message.Type type19 = connectMessage3.getType();
        connectMessage3.setCredentials("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        boolean boolean22 = connectMessage3.isWillRetained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(qoS6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MQIsdp" + "'", str13, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.meqantt.message.Message.Type.CONNECT + "'", type19.equals(org.meqantt.message.Message.Type.CONNECT));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test13259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13259");
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage("", byteArray9);
        java.lang.String str11 = publishMessage10.getDataAsString();
        byte[] byteArray12 = publishMessage10.getData();
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage("MQIsdp", byteArray12);
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage("MQIsdp", byteArray12);
        java.lang.String str15 = publishMessage14.getTopic();
        java.lang.String str16 = publishMessage14.getDataAsString();
        byte[] byteArray17 = publishMessage14.getData();
        publishMessage14.setRetained(false);
        publishMessage14.setRetained(false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\000d\000\001\001d" + "'", str11, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MQIsdp" + "'", str15, "MQIsdp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\000d\000\001\001d" + "'", str16, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100, 0, 1, 1, 100]");
    }

    @Test
    public void test13260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13260");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage4.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str2, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13261");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage8 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage8.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test13262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13262");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        boolean boolean6 = connectMessage3.hasUsername();
        boolean boolean7 = connectMessage3.hasWill();
        boolean boolean8 = connectMessage3.hasPassword();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13263");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        java.lang.Class<?> wildcardClass8 = header1.getClass();
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type4.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test13264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13264");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\001\003\003\001", true, 1);
        byte byte4 = connectMessage3.getProtocolVersion();
        byte[] byteArray5 = connectMessage3.toBytes();
        boolean boolean6 = connectMessage3.hasPassword();
        connectMessage3.setCredentials("\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n", "00: 10100010 \242 162\n01: 00010111 \027 23\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00010011 \023 19\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 00001000 \b 8\n09: 11101111 \357 239\n10: 10111111 \277 191\n11: 10111101 \275 189\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 01100100 d 100\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 00000001 \001 1\n23: 00000001 \001 1\n24: 01100100 d 100\n");
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 3 + "'", byte4 == (byte) 3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[16, 18, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 4, 1, 3, 3, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13265");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage8.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13266");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.subscribe("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener9 = null;
        nettyClient1.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.subscribe("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        nettyClient1.connect("\001\003\003\001", (int) (short) 10);
        nettyClient1.disconnect();
        nettyClient1.connect("00: 00010000 \020 16\n01: 00001110 \016 14\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n", (int) ' ');
    }

    @Test
    public void test13267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13267");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        java.lang.String str8 = connectMessage1.getClientId();
        java.lang.String str9 = connectMessage1.getWill();
        connectMessage1.setCredentials("\000\003hi!");
        connectMessage1.setCredentials("\000\r\ufffd\ufffd\006\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\003hi!");
        boolean boolean14 = connectMessage1.isCleanSession();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test13268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13268");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage12 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type15 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage16 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage17 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Header header19 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage20 = new org.meqantt.message.PingReqMessage(header19);
        org.meqantt.message.PubCompMessage pubCompMessage21 = new org.meqantt.message.PubCompMessage(header19);
        org.meqantt.message.SubAckMessage subAckMessage22 = new org.meqantt.message.SubAckMessage(header19);
        org.meqantt.message.SubAckMessage subAckMessage23 = new org.meqantt.message.SubAckMessage(header19);
        org.meqantt.message.SubAckMessage subAckMessage24 = new org.meqantt.message.SubAckMessage(header19);
        org.meqantt.message.SubAckMessage subAckMessage26 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList27 = subAckMessage26.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList28 = subAckMessage26.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str33 = connectMessage32.getProtocolId();
        org.meqantt.message.QoS qoS34 = connectMessage32.getQos();
        subAckMessage26.addQoS(qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("hi!", qoS34);
        subAckMessage24.addQoS(qoS34);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage17.setQos(qoS34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(qoSList27);
        org.junit.Assert.assertNull(qoSList28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQIsdp" + "'", str33, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13269");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        pubRecMessage5.setMessageId((int) (short) 0);
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        int int10 = connectMessage9.getKeepAlive();
        connectMessage9.setWill("MQIsdp", "");
        java.lang.String str14 = connectMessage9.getWillTopic();
        org.meqantt.message.ConnectMessage connectMessage24 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str25 = connectMessage24.getUsername();
        org.meqantt.message.QoS qoS29 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("", qoS29);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList33 = subscribeMessage32.getTopics();
        org.meqantt.message.QoS qoS34 = subscribeMessage32.getQos();
        subscribeMessage30.addTopic("", qoS34);
        connectMessage24.setWill("", "\000d\000\001\001d", qoS34, true);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("hi!", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage39 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList44 = subscribeMessage43.getTopics();
        org.meqantt.message.ConnectMessage connectMessage49 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str50 = connectMessage49.getProtocolId();
        org.meqantt.message.QoS qoS51 = connectMessage49.getQos();
        subscribeMessage43.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS51);
        subscribeMessage41.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS51);
        org.meqantt.message.ConnectMessage connectMessage58 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str59 = connectMessage58.getProtocolId();
        org.meqantt.message.QoS qoS60 = connectMessage58.getQos();
        subscribeMessage41.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS60);
        connectMessage9.setWill("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS60, false);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage5.setQos(qoS60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MQIsdp" + "'", str14, "MQIsdp");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MQIsdp" + "'", str50, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS51 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS51.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "MQIsdp" + "'", str59, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13270");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage9 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage10 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage13 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList17 = subscribeMessage16.getTopics();
        org.meqantt.message.QoS qoS18 = subscribeMessage16.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage("", qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS18);
        org.meqantt.message.QoS qoS21 = subscribeMessage20.getQos();
        org.meqantt.message.ConnectMessage connectMessage26 = new org.meqantt.message.ConnectMessage("\000\000", false, (int) (short) -1);
        org.meqantt.message.ConnectMessage connectMessage37 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str38 = connectMessage37.getUsername();
        org.meqantt.message.QoS qoS42 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage("", qoS42);
        org.meqantt.message.SubscribeMessage subscribeMessage45 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList46 = subscribeMessage45.getTopics();
        org.meqantt.message.QoS qoS47 = subscribeMessage45.getQos();
        subscribeMessage43.addTopic("", qoS47);
        connectMessage37.setWill("", "\000d\000\001\001d", qoS47, true);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage("hi!", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage54 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS47);
        connectMessage26.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS47, false);
        subscribeMessage20.addTopic("00: 01100100 d 100\n01: 00000000 \000 0\n", qoS47);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage13.setQos(qoS47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + qoS47 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS47.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13271");
        org.meqantt.SocketClient socketClient1 = new org.meqantt.SocketClient("hi!");
        // The following exception was thrown during execution in test generation
        try {
            socketClient1.connect("\000\000", 32);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: ??");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13272");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        org.meqantt.message.QoS qoS8 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage("", qoS8);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList12 = subscribeMessage11.getTopics();
        org.meqantt.message.QoS qoS13 = subscribeMessage11.getQos();
        subscribeMessage9.addTopic("", qoS13);
        connectMessage1.setWill("hi!", "", qoS13, false);
        boolean boolean17 = connectMessage1.hasUsername();
        org.meqantt.message.QoS qoS18 = connectMessage1.getWillQoS();
        java.lang.String str19 = connectMessage1.getUsername();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test13273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13273");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        java.lang.String str4 = connectMessage3.getWillTopic();
        boolean boolean5 = connectMessage3.isWillRetained();
        org.meqantt.message.Message.Header header7 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header7);
        int int9 = connectMessage8.getKeepAlive();
        java.lang.String str10 = connectMessage8.getPassword();
        java.lang.String str11 = connectMessage8.getUsername();
        org.meqantt.message.ConnectMessage connectMessage17 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean18 = connectMessage17.hasWill();
        java.lang.String str19 = connectMessage17.getWill();
        org.meqantt.message.Message.Header header22 = null;
        org.meqantt.message.ConnectMessage connectMessage23 = new org.meqantt.message.ConnectMessage(header22);
        boolean boolean24 = connectMessage23.isWillRetained();
        boolean boolean25 = connectMessage23.isWillRetained();
        java.lang.String str26 = connectMessage23.getUsername();
        org.meqantt.message.QoS qoS30 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage("", qoS30);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList34 = subscribeMessage33.getTopics();
        org.meqantt.message.QoS qoS35 = subscribeMessage33.getQos();
        subscribeMessage31.addTopic("", qoS35);
        connectMessage23.setWill("hi!", "", qoS35, false);
        connectMessage17.setWill("MQIsdp", "hi!", qoS35, false);
        connectMessage17.setCredentials("\000d\000\001\001d");
        org.meqantt.message.QoS qoS43 = connectMessage17.getWillQoS();
        connectMessage8.setWill("\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS43, false);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setQos(qoS43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + qoS35 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS35.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS43 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS43.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13274");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Header header11 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header11);
        org.meqantt.message.PubAckMessage pubAckMessage13 = new org.meqantt.message.PubAckMessage(header11);
        java.lang.String str14 = header11.toString();
        org.meqantt.message.ConnectMessage connectMessage15 = new org.meqantt.message.ConnectMessage(header11);
        connectMessage15.setCredentials("\000\003hi!", "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        boolean boolean19 = connectMessage15.hasWill();
        org.meqantt.message.QoS qoS20 = connectMessage15.getWillQoS();
        org.meqantt.message.PublishMessage publishMessage25 = new org.meqantt.message.PublishMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        byte[] byteArray26 = publishMessage25.getData();
        byte[] byteArray27 = publishMessage25.getData();
        org.meqantt.message.QoS qoS28 = publishMessage25.getQos();
        connectMessage15.setWill("\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n", "00: 00000000 \000 0\n01: 00000100 \004 4\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 11000000 \300 192\n05: 10000000 \200 128\n", qoS28, true);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage9.setQos(qoS28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str14, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(qoS20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13275");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("MQIsdp", (int) (byte) 0);
        org.meqantt.MqttListener mqttListener12 = null;
        nettyClient1.setListener(mqttListener12);
        nettyClient1.ping();
        nettyClient1.ping();
        nettyClient1.unsubscribe("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        nettyClient1.ping();
    }

    @Test
    public void test13276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13276");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage7 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage9.getGrantedQoSs();
        int int11 = subAckMessage9.getMessageId();
        java.util.List<org.meqantt.message.QoS> qoSList12 = subAckMessage9.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage17 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str18 = connectMessage17.getUsername();
        org.meqantt.message.QoS qoS22 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("", qoS22);
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList26 = subscribeMessage25.getTopics();
        org.meqantt.message.QoS qoS27 = subscribeMessage25.getQos();
        subscribeMessage23.addTopic("", qoS27);
        connectMessage17.setWill("", "\000d\000\001\001d", qoS27, true);
        boolean boolean31 = connectMessage17.isCleanSession();
        java.lang.String str32 = connectMessage17.getClientId();
        byte byte33 = connectMessage17.getProtocolVersion();
        java.lang.String str34 = connectMessage17.getPassword();
        org.meqantt.message.QoS qoS35 = connectMessage17.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS35);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage9.setQos(qoS35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(qoSList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(qoSList12);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) 3 + "'", byte33 == (byte) 3);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + qoS35 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS35.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13277");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.addTopic("\ufffd(\000\000\000\ufffd\ufffd 0\n\ufffd\ufffd 0\n");
        unsubscribeMessage1.setDup(false);
    }

    @Test
    public void test13278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13278");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.Message.Header header3 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header3);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header3);
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header3);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header3);
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) pubCompMessage7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13279");
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00000011 \003 3\n05: 01101000 h 104\n06: 01101001 i 105\n07: 00100001 ! 33\n", false, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Client id cannot be null and must be at most 23 characters long: 00: 00000000 ? 0?01: 00000110 ? 6?02: 11000000 A? 192?03: 10000000 ? 128?04: 00000011 ? 3?05: 01101000 h 104?06: 01101001 i 105?07: 00100001 ! 33?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13280");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        java.lang.String str6 = connectMessage3.getWill();
        java.lang.String str7 = connectMessage3.getProtocolId();
        byte byte8 = connectMessage3.getProtocolVersion();
        org.meqantt.message.QoS qoS9 = connectMessage3.getWillQoS();
        org.meqantt.message.QoS qoS10 = connectMessage3.getWillQoS();
        java.lang.String str11 = connectMessage3.getWillTopic();
        boolean boolean12 = connectMessage3.hasPassword();
        boolean boolean13 = connectMessage3.hasPassword();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 3 + "'", byte8 == (byte) 3);
        org.junit.Assert.assertNull(qoS9);
        org.junit.Assert.assertNull(qoS10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test13281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13281");
        org.meqantt.message.Message.Header header1 = null;
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        connectMessage2.setCredentials("\000d\000\001\001d");
        java.lang.String str5 = connectMessage2.getProtocolId();
        boolean boolean6 = connectMessage2.isCleanSession();
        connectMessage2.setWill("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.meqantt.message.Message.Header header13 = null;
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage(header13);
        java.lang.String str15 = connectMessage14.getClientId();
        connectMessage14.setWill("hi!", "");
        org.meqantt.message.QoS qoS19 = connectMessage14.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS19);
        connectMessage2.setWill("00: 00000000 \000 0\n01: 00000000 \000 0\n", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS19, false);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS19);
        int int24 = subscribeMessage23.getMessageId();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MQIsdp" + "'", str5, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test13282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13282");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage12 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage15 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str16 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage17 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage18 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage18.addTopic("hi!");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str16, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13283");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage7 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus9 = connAckMessage8.getStatus();
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage8.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type5.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(connectionStatus9);
    }

    @Test
    public void test13284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13284");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        boolean boolean9 = connAckMessage8.isRetained();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus10 = connAckMessage8.getStatus();
        org.meqantt.message.ConnectMessage connectMessage20 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str21 = connectMessage20.getUsername();
        org.meqantt.message.QoS qoS25 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("", qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList29 = subscribeMessage28.getTopics();
        org.meqantt.message.QoS qoS30 = subscribeMessage28.getQos();
        subscribeMessage26.addTopic("", qoS30);
        connectMessage20.setWill("", "\000d\000\001\001d", qoS30, true);
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("hi!", qoS30);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS30);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("", qoS30);
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS30);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS30);
        org.meqantt.message.SubscribeMessage subscribeMessage39 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 00000000 \000 0\n", qoS30);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage8.setQos(qoS30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(connectionStatus10);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + qoS30 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS30.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13285");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 10);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage3.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str2, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
    }

    @Test
    public void test13286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13286");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        connectMessage3.setCredentials("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        boolean boolean7 = connectMessage3.isRetained();
        java.lang.String str8 = connectMessage3.getWillTopic();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test13287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13287");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("hi!");
        org.meqantt.MqttListener mqttListener2 = null;
        nettyClient1.setListener(mqttListener2);
        org.meqantt.MqttListener mqttListener4 = null;
        nettyClient1.setListener(mqttListener4);
        nettyClient1.connect("hi!", (int) (short) 0);
        nettyClient1.connect("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.publish("00: 10100010 \242 162\n01: 00010111 \027 23\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00010011 \023 19\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 00001000 \b 8\n09: 11101111 \357 239\n10: 10111111 \277 191\n11: 10111101 \275 189\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 01100100 d 100\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 00000001 \001 1\n23: 00000001 \001 1\n24: 01100100 d 100\n", "00: 00010000 \020 16\n01: 00001110 \016 14\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n");
        nettyClient1.unsubscribe("00: 10100010 \242 162\n01: 00001111 \017 15\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000011 \003 3\n06: 01101000 h 104\n07: 01101001 i 105\n08: 00100001 ! 33\n09: 00000000 \000 0\n10: 00000110 \006 6\n11: 01001101 M 77\n12: 01010001 Q 81\n13: 01001001 I 73\n14: 01110011 s 115\n15: 01100100 d 100\n16: 01110000 p 112\n");
    }

    @Test
    public void test13288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13288");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("MQIsdp", (int) (byte) 0);
        org.meqantt.MqttListener mqttListener12 = null;
        nettyClient1.setListener(mqttListener12);
        nettyClient1.ping();
        nettyClient1.connect("", 2);
        nettyClient1.ping();
        nettyClient1.disconnect();
        org.meqantt.MqttListener mqttListener20 = null;
        nettyClient1.setListener(mqttListener20);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.publish("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "\001\ufffd00: 00010000 \020 16\n01: 00011010 \032 26\n\ufffd\ufffd 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n\ufffd\ufffd 0\n13: 00000001 \001 1\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n19: 00001000 \b 8\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n22: 01100100 d 100\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
    }

    @Test
    public void test13289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13289");
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage("", byteArray8);
        java.lang.String str10 = publishMessage9.getDataAsString();
        byte[] byteArray11 = publishMessage9.getData();
        java.lang.String str12 = org.meqantt.util.FormatUtil.toString(byteArray11);
        java.lang.String str13 = org.meqantt.util.FormatUtil.toString(byteArray11);
        java.lang.String str14 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray11);
        java.lang.String str15 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray11);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", byteArray11);
        java.lang.String str17 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray11);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000d\000\001\001d" + "'", str10, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str14, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str15, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str17, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
    }

    @Test
    public void test13290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13290");
        org.meqantt.message.SubAckMessage subAckMessage1 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage1.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage1.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList4 = subAckMessage1.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList7 = subscribeMessage6.getTopics();
        org.meqantt.message.QoS qoS8 = subscribeMessage6.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage("", qoS8);
        subAckMessage1.addQoS(qoS8);
        byte[] byteArray11 = subAckMessage1.toBytes();
        org.meqantt.message.PublishMessage publishMessage12 = new org.meqantt.message.PublishMessage("\000\000", byteArray11);
        java.lang.String str13 = publishMessage12.getDataAsString();
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertNull(qoSList4);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + qoS8 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS8.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-112, 3, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ufffd\003\000\000\000" + "'", str13, "\ufffd\003\000\000\000");
    }

    @Test
    public void test13291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13291");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, 1);
        byte byte4 = connectMessage3.getProtocolVersion();
        org.meqantt.message.SubscribeMessage subscribeMessage7 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList8 = subscribeMessage7.getTopics();
        org.meqantt.message.QoS qoS9 = subscribeMessage7.getQos();
        org.meqantt.message.QoS qoS11 = null;
        subscribeMessage7.addTopic("", qoS11);
        java.util.List<org.meqantt.message.QoS> qoSList13 = subscribeMessage7.getTopicQoSs();
        subscribeMessage7.setDup(false);
        java.util.List<org.meqantt.message.QoS> qoSList16 = subscribeMessage7.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str22 = connectMessage21.getUsername();
        org.meqantt.message.QoS qoS26 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList30 = subscribeMessage29.getTopics();
        org.meqantt.message.QoS qoS31 = subscribeMessage29.getQos();
        subscribeMessage27.addTopic("", qoS31);
        connectMessage21.setWill("", "\000d\000\001\001d", qoS31, true);
        subscribeMessage7.addTopic("\000\000", qoS31);
        connectMessage3.setWill("", "\000\003hi!", qoS31, true);
        org.meqantt.message.Message.Header header40 = null;
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage(header40);
        boolean boolean42 = connectMessage41.isWillRetained();
        boolean boolean43 = connectMessage41.isWillRetained();
        java.lang.String str44 = connectMessage41.getUsername();
        org.meqantt.message.QoS qoS48 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage("", qoS48);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList52 = subscribeMessage51.getTopics();
        org.meqantt.message.QoS qoS53 = subscribeMessage51.getQos();
        subscribeMessage49.addTopic("", qoS53);
        connectMessage41.setWill("hi!", "", qoS53, false);
        boolean boolean57 = connectMessage41.hasUsername();
        org.meqantt.message.QoS qoS58 = connectMessage41.getWillQoS();
        connectMessage3.setWill("hi!", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS58, true);
        org.meqantt.message.QoS qoS61 = connectMessage3.getQos();
        byte byte62 = connectMessage3.getProtocolVersion();
        java.lang.String str63 = connectMessage3.getWill();
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 3 + "'", byte4 == (byte) 3);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + qoS9 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS9.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList13);
        org.junit.Assert.assertNotNull(qoSList16);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + qoS53 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS53.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + qoS58 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS58.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS61 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS61.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) 3 + "'", byte62 == (byte) 3);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str63, "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
    }

    @Test
    public void test13292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13292");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage7.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13293");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        unsubscribeMessage1.setDup(false);
        org.meqantt.message.Message.Header header5 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type6 = header5.getType();
        org.meqantt.message.Message.Type type7 = header5.getType();
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header5);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header5);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header5);
        org.meqantt.message.DisconnectMessage disconnectMessage11 = new org.meqantt.message.DisconnectMessage(header5);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header5);
        org.meqantt.message.UnsubAckMessage unsubAckMessage13 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS14 = unsubAckMessage13.getQos();
        subAckMessage12.addQoS(qoS14);
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type17 = subscribeMessage16.getType();
        subscribeMessage16.setDup(false);
        subscribeMessage16.setMessageId((int) (short) 0);
        java.util.List<java.lang.String> strList22 = subscribeMessage16.getTopics();
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList24 = subscribeMessage23.getTopics();
        org.meqantt.message.QoS qoS25 = subscribeMessage23.getQos();
        org.meqantt.message.ConnectMessage connectMessage30 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str31 = connectMessage30.getProtocolId();
        org.meqantt.message.QoS qoS32 = connectMessage30.getQos();
        subscribeMessage23.addTopic("", qoS32);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage35 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList36 = unsubscribeMessage35.getTopics();
        org.meqantt.message.Message.Type type37 = unsubscribeMessage35.getType();
        java.util.List<java.lang.String> strList38 = unsubscribeMessage35.getTopics();
        org.meqantt.message.QoS qoS39 = unsubscribeMessage35.getQos();
        subscribeMessage23.setQos(qoS39);
        subscribeMessage16.setQos(qoS39);
        subAckMessage12.addQoS(qoS39);
        unsubscribeMessage1.setQos(qoS39);
        unsubscribeMessage1.setDup(false);
        org.junit.Assert.assertNull(type6);
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type17.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MQIsdp" + "'", str31, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type37.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + qoS39 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS39.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13294");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        java.lang.String str3 = connectMessage1.getWill();
        java.lang.String str4 = connectMessage1.getWillTopic();
        connectMessage1.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "\000\000");
        java.lang.String str8 = connectMessage1.getWillTopic();
        java.lang.String str9 = connectMessage1.getWill();
        java.lang.String str10 = connectMessage1.getPassword();
        java.lang.String str11 = connectMessage1.getPassword();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str8, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\000\000" + "'", str9, "\000\000");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test13295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13295");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage8 = new org.meqantt.message.PubRelMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage8.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13296");
        org.meqantt.message.SubscribeMessage subscribeMessage3 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList4 = subscribeMessage3.getTopics();
        org.meqantt.message.QoS qoS5 = subscribeMessage3.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage("", qoS5);
        org.meqantt.message.SubscribeMessage subscribeMessage7 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS5);
        org.meqantt.message.QoS qoS8 = subscribeMessage7.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage("\000\003hi!", qoS8);
        subscribeMessage9.setDup(false);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + qoS5 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS5.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS8 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS8.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13297");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage10.addTopic("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00000011 \003 3\n05: 01101000 h 104\n06: 01101001 i 105\n07: 00100001 ! 33\n");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13298");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList13 = subscribeMessage12.getTopics();
        org.meqantt.message.QoS qoS14 = subscribeMessage12.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage("", qoS14);
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS14);
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("\000\000", qoS14);
        subAckMessage8.addQoS(qoS14);
        java.util.List<org.meqantt.message.QoS> qoSList19 = subAckMessage8.getGrantedQoSs();
        int int20 = subAckMessage8.getMessageId();
        java.util.List<org.meqantt.message.QoS> qoSList21 = subAckMessage8.getGrantedQoSs();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage8.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(qoSList21);
    }

    @Test
    public void test13299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13299");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("\020\ufffd\001\000\006MQIsdp\003&\000d\000\006MQIsdp\000\006MQIsdp\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n");
    }

    @Test
    public void test13300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13300");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        connectMessage1.setCredentials("\000d\000\001\001d");
        java.lang.String str4 = connectMessage1.getProtocolId();
        boolean boolean5 = connectMessage1.isCleanSession();
        connectMessage1.setWill("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        connectMessage1.setCredentials("");
        connectMessage1.setCredentials("00: 00000000 \000 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", "\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        boolean boolean14 = connectMessage1.hasUsername();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test13301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13301");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 3);
        org.meqantt.message.SubAckMessage subAckMessage2 = new org.meqantt.message.SubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage2.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13302");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        connectMessage3.setCredentials("\000d\000\001\001d");
        connectMessage3.setCredentials("\000\000", "\000\003hi!");
        boolean boolean32 = connectMessage3.isRetained();
        int int33 = connectMessage3.getKeepAlive();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
    }

    @Test
    public void test13303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13303");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubRelMessage pubRelMessage2 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage3 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str5 = header1.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13304");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 3, (byte) 3, (byte) 1 };
        java.lang.String str6 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray5);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", byteArray5);
        byte[] byteArray8 = publishMessage7.getData();
        java.lang.String str9 = publishMessage7.getDataAsString();
        publishMessage7.setDup(false);
        boolean boolean12 = publishMessage7.isDup();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n" + "'", str6, "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\001\003\003\001" + "'", str9, "\001\003\003\001");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13305");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, 1);
        byte byte4 = connectMessage3.getProtocolVersion();
        org.meqantt.message.SubscribeMessage subscribeMessage7 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList8 = subscribeMessage7.getTopics();
        org.meqantt.message.QoS qoS9 = subscribeMessage7.getQos();
        org.meqantt.message.QoS qoS11 = null;
        subscribeMessage7.addTopic("", qoS11);
        java.util.List<org.meqantt.message.QoS> qoSList13 = subscribeMessage7.getTopicQoSs();
        subscribeMessage7.setDup(false);
        java.util.List<org.meqantt.message.QoS> qoSList16 = subscribeMessage7.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str22 = connectMessage21.getUsername();
        org.meqantt.message.QoS qoS26 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList30 = subscribeMessage29.getTopics();
        org.meqantt.message.QoS qoS31 = subscribeMessage29.getQos();
        subscribeMessage27.addTopic("", qoS31);
        connectMessage21.setWill("", "\000d\000\001\001d", qoS31, true);
        subscribeMessage7.addTopic("\000\000", qoS31);
        connectMessage3.setWill("", "\000\003hi!", qoS31, true);
        org.meqantt.message.Message.Header header40 = null;
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage(header40);
        boolean boolean42 = connectMessage41.isWillRetained();
        boolean boolean43 = connectMessage41.isWillRetained();
        java.lang.String str44 = connectMessage41.getUsername();
        org.meqantt.message.QoS qoS48 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage("", qoS48);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList52 = subscribeMessage51.getTopics();
        org.meqantt.message.QoS qoS53 = subscribeMessage51.getQos();
        subscribeMessage49.addTopic("", qoS53);
        connectMessage41.setWill("hi!", "", qoS53, false);
        boolean boolean57 = connectMessage41.hasUsername();
        org.meqantt.message.QoS qoS58 = connectMessage41.getWillQoS();
        connectMessage3.setWill("hi!", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS58, true);
        java.lang.String str61 = connectMessage3.getClientId();
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 3 + "'", byte4 == (byte) 3);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + qoS9 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS9.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList13);
        org.junit.Assert.assertNotNull(qoSList16);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + qoS53 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS53.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + qoS58 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS58.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test13306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13306");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage11 = new org.meqantt.message.PubRecMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage11.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void test13307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13307");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str7 = connectMessage6.getWill();
        connectMessage6.setWill("\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
        boolean boolean11 = connectMessage6.isDup();
        java.lang.String str12 = connectMessage6.getPassword();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test13308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13308");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.unsubscribe("\000\003hi!");
        nettyClient1.subscribe("");
        nettyClient1.connect("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", (int) (short) 100);
        nettyClient1.disconnect();
        nettyClient1.connect("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", 0);
        nettyClient1.publish("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
        nettyClient1.ping();
        nettyClient1.subscribe("\001\003\003\001");
    }

    @Test
    public void test13309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13309");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage9 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Header header11 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage12 = new org.meqantt.message.PingReqMessage(header11);
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage(header11);
        org.meqantt.message.PubAckMessage pubAckMessage14 = new org.meqantt.message.PubAckMessage(header11);
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage(header11);
        org.meqantt.message.ConnectMessage connectMessage19 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str20 = connectMessage19.getClientId();
        boolean boolean21 = connectMessage19.hasUsername();
        boolean boolean22 = connectMessage19.isCleanSession();
        org.meqantt.message.SubAckMessage subAckMessage25 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList26 = subAckMessage25.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList27 = subAckMessage25.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList28 = subAckMessage25.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList31 = subscribeMessage30.getTopics();
        org.meqantt.message.QoS qoS32 = subscribeMessage30.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("", qoS32);
        subAckMessage25.addQoS(qoS32);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList36 = subscribeMessage35.getTopics();
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str42 = connectMessage41.getProtocolId();
        org.meqantt.message.QoS qoS43 = connectMessage41.getQos();
        subscribeMessage35.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS43);
        subAckMessage25.addQoS(qoS43);
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList50 = subscribeMessage49.getTopics();
        org.meqantt.message.QoS qoS51 = subscribeMessage49.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage("", qoS51);
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS51);
        org.meqantt.message.QoS qoS54 = subscribeMessage53.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList59 = subscribeMessage58.getTopics();
        org.meqantt.message.QoS qoS60 = subscribeMessage58.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("", qoS60);
        org.meqantt.message.SubscribeMessage subscribeMessage62 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS60);
        org.meqantt.message.QoS qoS63 = subscribeMessage62.getQos();
        subscribeMessage53.addTopic("", qoS63);
        org.meqantt.message.SubscribeMessage subscribeMessage65 = new org.meqantt.message.SubscribeMessage("", qoS63);
        subAckMessage25.addQoS(qoS63);
        connectMessage19.setWill("\001\003\003\001", "", qoS63, true);
        subscribeMessage15.setQos(qoS63);
        org.meqantt.message.ConnectMessage connectMessage76 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str77 = connectMessage76.getUsername();
        org.meqantt.message.QoS qoS81 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage82 = new org.meqantt.message.SubscribeMessage("", qoS81);
        org.meqantt.message.SubscribeMessage subscribeMessage84 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList85 = subscribeMessage84.getTopics();
        org.meqantt.message.QoS qoS86 = subscribeMessage84.getQos();
        subscribeMessage82.addTopic("", qoS86);
        connectMessage76.setWill("", "\000d\000\001\001d", qoS86, true);
        org.meqantt.message.SubscribeMessage subscribeMessage90 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS86);
        org.meqantt.message.SubscribeMessage subscribeMessage91 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS86);
        subscribeMessage15.addTopic("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS86);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage9.setQos(qoS86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(qoSList26);
        org.junit.Assert.assertNull(qoSList27);
        org.junit.Assert.assertNull(qoSList28);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQIsdp" + "'", str42, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS43 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS43.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + qoS51 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS51.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS54 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS54.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS63 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS63.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + qoS86 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS86.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13310");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList9 = subscribeMessage8.getTopics();
        org.meqantt.message.QoS qoS10 = subscribeMessage8.getQos();
        org.meqantt.message.ConnectMessage connectMessage15 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str16 = connectMessage15.getProtocolId();
        org.meqantt.message.QoS qoS17 = connectMessage15.getQos();
        subscribeMessage8.addTopic("", qoS17);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage20 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList21 = unsubscribeMessage20.getTopics();
        org.meqantt.message.Message.Type type22 = unsubscribeMessage20.getType();
        java.util.List<java.lang.String> strList23 = unsubscribeMessage20.getTopics();
        org.meqantt.message.QoS qoS24 = unsubscribeMessage20.getQos();
        subscribeMessage8.setQos(qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS24);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage6.setQos(qoS24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MQIsdp" + "'", str16, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type22.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13311");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage11 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage12 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage13 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage14 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage14.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13312");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test13313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13313");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", false, (-1));
        boolean boolean4 = connectMessage3.isCleanSession();
        connectMessage3.setWill("00: 00000000 \000 0\n01: 00000000 \000 0\n", "\000\023\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d");
        connectMessage3.setWill("\000\006\ufffd\ufffd\003hi!", "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        org.meqantt.message.Message.Header header14 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage15 = new org.meqantt.message.PubCompMessage(header14);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage(header14);
        org.meqantt.message.PubRelMessage pubRelMessage17 = new org.meqantt.message.PubRelMessage(header14);
        org.meqantt.message.Message.Type type18 = header14.getType();
        org.meqantt.message.SubAckMessage subAckMessage19 = new org.meqantt.message.SubAckMessage(header14);
        java.util.List<org.meqantt.message.QoS> qoSList20 = subAckMessage19.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList21 = subAckMessage19.getGrantedQoSs();
        org.meqantt.message.QoS qoS22 = null;
        subAckMessage19.addQoS(qoS22);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList25 = subscribeMessage24.getTopics();
        org.meqantt.message.QoS qoS26 = subscribeMessage24.getQos();
        org.meqantt.message.QoS qoS28 = null;
        subscribeMessage24.addTopic("", qoS28);
        java.util.List<org.meqantt.message.QoS> qoSList30 = subscribeMessage24.getTopicQoSs();
        subscribeMessage24.setDup(false);
        java.util.List<java.lang.String> strList33 = subscribeMessage24.getTopics();
        org.meqantt.message.Message.Header header36 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type37 = header36.getType();
        org.meqantt.message.Message.Type type38 = header36.getType();
        org.meqantt.message.SubAckMessage subAckMessage39 = new org.meqantt.message.SubAckMessage(header36);
        org.meqantt.message.PingReqMessage pingReqMessage40 = new org.meqantt.message.PingReqMessage(header36);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage(header36);
        org.meqantt.message.ConnectMessage connectMessage42 = new org.meqantt.message.ConnectMessage(header36);
        org.meqantt.message.ConnectMessage connectMessage49 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean50 = connectMessage49.hasWill();
        java.lang.String str51 = connectMessage49.getWill();
        org.meqantt.message.Message.Header header54 = null;
        org.meqantt.message.ConnectMessage connectMessage55 = new org.meqantt.message.ConnectMessage(header54);
        boolean boolean56 = connectMessage55.isWillRetained();
        boolean boolean57 = connectMessage55.isWillRetained();
        java.lang.String str58 = connectMessage55.getUsername();
        org.meqantt.message.QoS qoS62 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage63 = new org.meqantt.message.SubscribeMessage("", qoS62);
        org.meqantt.message.SubscribeMessage subscribeMessage65 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList66 = subscribeMessage65.getTopics();
        org.meqantt.message.QoS qoS67 = subscribeMessage65.getQos();
        subscribeMessage63.addTopic("", qoS67);
        connectMessage55.setWill("hi!", "", qoS67, false);
        connectMessage49.setWill("MQIsdp", "hi!", qoS67, false);
        org.meqantt.message.SubscribeMessage subscribeMessage73 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS67);
        connectMessage42.setWill("hi!", "\000\000", qoS67, true);
        subscribeMessage24.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS67);
        java.util.List<java.lang.String> strList77 = subscribeMessage24.getTopics();
        subscribeMessage24.setMessageId((int) 'a');
        org.meqantt.message.QoS qoS80 = subscribeMessage24.getQos();
        subAckMessage19.addQoS(qoS80);
        connectMessage3.setWill("00: 00110000 0 48\n01: 00000111 \007 7\n02: 00000000 \000 0\n03: 00000011 \003 3\n04: 01101000 h 104\n05: 01101001 i 105\n06: 00100001 ! 33\n07: 00000000 \000 0\n08: 00000000 \000 0\n", "\000\ufffd\ufffd 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", qoS80, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNull(qoSList20);
        org.junit.Assert.assertNull(qoSList21);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + qoS26 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS26.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList30);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertNull(type38);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + qoS67 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS67.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + qoS80 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS80.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13314");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("MQIsdp", (int) (byte) 0);
        org.meqantt.MqttListener mqttListener12 = null;
        nettyClient1.setListener(mqttListener12);
        nettyClient1.ping();
        nettyClient1.disconnect();
        nettyClient1.subscribe("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener18 = null;
        nettyClient1.setListener(mqttListener18);
    }

    @Test
    public void test13315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13315");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage4.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13316");
        org.meqantt.message.ConnectMessage connectMessage0 = new org.meqantt.message.ConnectMessage();
        java.lang.String str1 = connectMessage0.getUsername();
        connectMessage0.setCredentials("hi!");
        connectMessage0.setWill("hi!", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        byte byte7 = connectMessage0.getProtocolVersion();
        connectMessage0.setCredentials("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd");
        byte byte10 = connectMessage0.getProtocolVersion();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 3 + "'", byte7 == (byte) 3);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 3 + "'", byte10 == (byte) 3);
    }

    @Test
    public void test13317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13317");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage13 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage14 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage15 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage16 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean22 = connectMessage21.hasWill();
        java.lang.String str23 = connectMessage21.getWill();
        org.meqantt.message.Message.Header header26 = null;
        org.meqantt.message.ConnectMessage connectMessage27 = new org.meqantt.message.ConnectMessage(header26);
        boolean boolean28 = connectMessage27.isWillRetained();
        boolean boolean29 = connectMessage27.isWillRetained();
        java.lang.String str30 = connectMessage27.getUsername();
        org.meqantt.message.QoS qoS34 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage("", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList38 = subscribeMessage37.getTopics();
        org.meqantt.message.QoS qoS39 = subscribeMessage37.getQos();
        subscribeMessage35.addTopic("", qoS39);
        connectMessage27.setWill("hi!", "", qoS39, false);
        connectMessage21.setWill("MQIsdp", "hi!", qoS39, false);
        byte byte45 = connectMessage21.getProtocolVersion();
        org.meqantt.message.ConnectMessage connectMessage52 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean53 = connectMessage52.hasWill();
        java.lang.String str54 = connectMessage52.getWill();
        org.meqantt.message.Message.Header header57 = null;
        org.meqantt.message.ConnectMessage connectMessage58 = new org.meqantt.message.ConnectMessage(header57);
        boolean boolean59 = connectMessage58.isWillRetained();
        boolean boolean60 = connectMessage58.isWillRetained();
        java.lang.String str61 = connectMessage58.getUsername();
        org.meqantt.message.QoS qoS65 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage("", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage68 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList69 = subscribeMessage68.getTopics();
        org.meqantt.message.QoS qoS70 = subscribeMessage68.getQos();
        subscribeMessage66.addTopic("", qoS70);
        connectMessage58.setWill("hi!", "", qoS70, false);
        connectMessage52.setWill("MQIsdp", "hi!", qoS70, false);
        org.meqantt.message.SubscribeMessage subscribeMessage76 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS70);
        connectMessage21.setWill("", "MQIsdp", qoS70, false);
        org.meqantt.message.SubscribeMessage subscribeMessage79 = new org.meqantt.message.SubscribeMessage("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS70);
        java.util.List<org.meqantt.message.QoS> qoSList80 = subscribeMessage79.getTopicQoSs();
        java.util.List<java.lang.String> strList81 = subscribeMessage79.getTopics();
        org.meqantt.message.Message.Header header84 = null;
        org.meqantt.message.ConnectMessage connectMessage85 = new org.meqantt.message.ConnectMessage(header84);
        java.lang.String str86 = connectMessage85.getClientId();
        connectMessage85.setWill("hi!", "");
        boolean boolean90 = connectMessage85.hasPassword();
        boolean boolean91 = connectMessage85.isCleanSession();
        boolean boolean92 = connectMessage85.hasWill();
        org.meqantt.message.QoS qoS93 = connectMessage85.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage94 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS93);
        subscribeMessage79.addTopic("", qoS93);
        subAckMessage16.addQoS(qoS93);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + qoS39 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS39.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 3 + "'", byte45 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + qoS70 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS70.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList80);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + qoS93 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS93.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13318");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage7.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void test13319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13319");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage6 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str8 = header1.toString();
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13320");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        org.meqantt.message.Message.Type type3 = unsubscribeMessage1.getType();
        java.util.List<java.lang.String> strList4 = unsubscribeMessage1.getTopics();
        org.meqantt.message.QoS qoS5 = unsubscribeMessage1.getQos();
        unsubscribeMessage1.addTopic("\000\000");
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList9 = subAckMessage8.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage8.getGrantedQoSs();
        org.meqantt.message.PubRelMessage pubRelMessage12 = new org.meqantt.message.PubRelMessage((int) ' ');
        org.meqantt.message.QoS qoS13 = pubRelMessage12.getQos();
        subAckMessage8.addQoS(qoS13);
        org.meqantt.message.SubAckMessage subAckMessage15 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList16 = subAckMessage15.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList17 = subAckMessage15.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList18 = subAckMessage15.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList21 = subscribeMessage20.getTopics();
        org.meqantt.message.QoS qoS22 = subscribeMessage20.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("", qoS22);
        subAckMessage15.addQoS(qoS22);
        org.meqantt.message.QoS qoS25 = subAckMessage15.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList29 = subscribeMessage28.getTopics();
        org.meqantt.message.QoS qoS30 = subscribeMessage28.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage("", qoS30);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS30);
        org.meqantt.message.QoS qoS33 = subscribeMessage32.getQos();
        subAckMessage15.addQoS(qoS33);
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList38 = subscribeMessage37.getTopics();
        org.meqantt.message.QoS qoS39 = subscribeMessage37.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("", qoS39);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS39);
        org.meqantt.message.QoS qoS42 = subscribeMessage41.getQos();
        org.meqantt.message.ConnectMessage connectMessage47 = new org.meqantt.message.ConnectMessage("\000\000", false, (int) (short) -1);
        org.meqantt.message.ConnectMessage connectMessage58 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str59 = connectMessage58.getUsername();
        org.meqantt.message.QoS qoS63 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage64 = new org.meqantt.message.SubscribeMessage("", qoS63);
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList67 = subscribeMessage66.getTopics();
        org.meqantt.message.QoS qoS68 = subscribeMessage66.getQos();
        subscribeMessage64.addTopic("", qoS68);
        connectMessage58.setWill("", "\000d\000\001\001d", qoS68, true);
        org.meqantt.message.SubscribeMessage subscribeMessage72 = new org.meqantt.message.SubscribeMessage("hi!", qoS68);
        org.meqantt.message.SubscribeMessage subscribeMessage73 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS68);
        org.meqantt.message.SubscribeMessage subscribeMessage74 = new org.meqantt.message.SubscribeMessage("", qoS68);
        org.meqantt.message.SubscribeMessage subscribeMessage75 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS68);
        org.meqantt.message.SubscribeMessage subscribeMessage76 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS68);
        connectMessage47.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS68, false);
        subscribeMessage41.addTopic("00: 01100100 d 100\n01: 00000000 \000 0\n", qoS68);
        subAckMessage15.addQoS(qoS68);
        subAckMessage8.addQoS(qoS68);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setQos(qoS68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type3.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + qoS5 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS5.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNull(qoSList9);
        org.junit.Assert.assertNull(qoSList10);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList16);
        org.junit.Assert.assertNull(qoSList17);
        org.junit.Assert.assertNull(qoSList18);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + qoS22 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS22.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + qoS30 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS30.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS33 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS33.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + qoS39 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS39.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS42 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS42.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + qoS68 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS68.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13321");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean8 = connectMessage7.hasPassword();
        java.lang.String str9 = connectMessage7.getProtocolId();
        connectMessage7.setWill("\000\003hi!", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        int int13 = connectMessage7.getKeepAlive();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test13322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13322");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.util.List<java.lang.String> strList11 = unsubscribeMessage10.getTopics();
        unsubscribeMessage10.setDup(false);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage10.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test13323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13323");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getClientId();
        boolean boolean5 = connectMessage3.isDup();
        java.lang.String str6 = connectMessage3.getWillTopic();
        java.lang.String str7 = connectMessage3.getWillTopic();
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type11 = subscribeMessage10.getType();
        subscribeMessage10.setDup(false);
        subscribeMessage10.setMessageId((int) (short) 0);
        java.util.List<org.meqantt.message.QoS> qoSList16 = subscribeMessage10.getTopicQoSs();
        subscribeMessage10.setDup(false);
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type21 = subscribeMessage20.getType();
        org.meqantt.message.ConnectMessage connectMessage27 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean28 = connectMessage27.hasWill();
        java.lang.String str29 = connectMessage27.getWill();
        org.meqantt.message.Message.Header header32 = null;
        org.meqantt.message.ConnectMessage connectMessage33 = new org.meqantt.message.ConnectMessage(header32);
        boolean boolean34 = connectMessage33.isWillRetained();
        boolean boolean35 = connectMessage33.isWillRetained();
        java.lang.String str36 = connectMessage33.getUsername();
        org.meqantt.message.QoS qoS40 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("", qoS40);
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList44 = subscribeMessage43.getTopics();
        org.meqantt.message.QoS qoS45 = subscribeMessage43.getQos();
        subscribeMessage41.addTopic("", qoS45);
        connectMessage33.setWill("hi!", "", qoS45, false);
        connectMessage27.setWill("MQIsdp", "hi!", qoS45, false);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS45);
        subscribeMessage20.addTopic("\001\003\003\001", qoS45);
        subscribeMessage10.addTopic("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS45);
        java.util.List<java.lang.String> strList54 = subscribeMessage10.getTopics();
        org.meqantt.message.ConnectMessage connectMessage59 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str60 = connectMessage59.getUsername();
        org.meqantt.message.QoS qoS64 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage65 = new org.meqantt.message.SubscribeMessage("", qoS64);
        org.meqantt.message.SubscribeMessage subscribeMessage67 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList68 = subscribeMessage67.getTopics();
        org.meqantt.message.QoS qoS69 = subscribeMessage67.getQos();
        subscribeMessage65.addTopic("", qoS69);
        connectMessage59.setWill("", "\000d\000\001\001d", qoS69, true);
        java.lang.String str73 = connectMessage59.getPassword();
        boolean boolean74 = connectMessage59.isWillRetained();
        org.meqantt.message.QoS qoS75 = connectMessage59.getWillQoS();
        java.lang.String str76 = connectMessage59.getProtocolId();
        connectMessage59.setWill("", "\001\003\003\001");
        org.meqantt.message.SubAckMessage subAckMessage82 = new org.meqantt.message.SubAckMessage();
        org.meqantt.message.SubscribeMessage subscribeMessage84 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList85 = subscribeMessage84.getTopics();
        org.meqantt.message.QoS qoS86 = subscribeMessage84.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage87 = new org.meqantt.message.SubscribeMessage("", qoS86);
        subAckMessage82.addQoS(qoS86);
        connectMessage59.setWill("", "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", qoS86, false);
        subscribeMessage10.addTopic("00: 00000000 \000 0\n01: 00000000 \000 0\n", qoS86);
        connectMessage3.setWill("\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "\ufffd(\000\000\000\ufffd\ufffd 0\n\ufffd\ufffd 0\n", qoS86, false);
        boolean boolean94 = connectMessage3.hasUsername();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type11.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(qoSList16);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type21.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + qoS45 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS45.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + qoS69 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS69.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + qoS75 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS75.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "MQIsdp" + "'", str76, "MQIsdp");
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + qoS86 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS86.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test13324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13324");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13325");
        byte[] byteArray3 = org.meqantt.util.FormatUtil.toMQttString("");
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", byteArray3);
        java.lang.String str5 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray3);
        java.lang.String str6 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray3);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage("\000\023\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d", byteArray3);
        java.lang.String str8 = org.meqantt.util.FormatUtil.toString(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00: 00000000 \000 0\n01: 00000000 \000 0\n" + "'", str5, "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "00: 00000000 \000 0\n01: 00000000 \000 0\n" + "'", str6, "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test13326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13326");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        org.meqantt.message.SubscribeMessage subscribeMessage2 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList3 = subscribeMessage2.getTopics();
        org.meqantt.message.QoS qoS4 = subscribeMessage2.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage("", qoS4);
        subAckMessage0.addQoS(qoS4);
        java.util.List<org.meqantt.message.QoS> qoSList7 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList8 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean13 = connectMessage12.hasWill();
        java.lang.String str14 = connectMessage12.getWill();
        org.meqantt.message.Message.Header header17 = null;
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage(header17);
        boolean boolean19 = connectMessage18.isWillRetained();
        boolean boolean20 = connectMessage18.isWillRetained();
        java.lang.String str21 = connectMessage18.getUsername();
        org.meqantt.message.QoS qoS25 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("", qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList29 = subscribeMessage28.getTopics();
        org.meqantt.message.QoS qoS30 = subscribeMessage28.getQos();
        subscribeMessage26.addTopic("", qoS30);
        connectMessage18.setWill("hi!", "", qoS30, false);
        connectMessage12.setWill("MQIsdp", "hi!", qoS30, false);
        byte byte36 = connectMessage12.getProtocolVersion();
        connectMessage12.setCredentials("\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.meqantt.message.QoS qoS40 = connectMessage12.getWillQoS();
        subAckMessage0.addQoS(qoS40);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + qoS4 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS4.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList7);
        org.junit.Assert.assertNotNull(qoSList8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + qoS30 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS30.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 3 + "'", byte36 == (byte) 3);
        org.junit.Assert.assertTrue("'" + qoS40 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS40.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13327");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        int int8 = subAckMessage7.getMessageId();
        java.util.List<org.meqantt.message.QoS> qoSList9 = subAckMessage7.getGrantedQoSs();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(qoSList9);
    }

    @Test
    public void test13328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13328");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.QoS qoS4 = unsubAckMessage3.getQos();
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage3.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type2.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertTrue("'" + qoS4 + "' != '" + org.meqantt.message.QoS.EXACTLY_ONCE + "'", qoS4.equals(org.meqantt.message.QoS.EXACTLY_ONCE));
    }

    @Test
    public void test13329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13329");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000d\000\001\001d", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        byte[] byteArray3 = publishMessage2.getData();
        java.lang.String str4 = publishMessage2.getTopic();
        byte[] byteArray5 = publishMessage2.getData();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\000d\000\001\001d" + "'", str4, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
    }

    @Test
    public void test13330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13330");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 3);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str8 = connectMessage7.getProtocolId();
        byte[] byteArray9 = connectMessage7.toBytes();
        org.meqantt.message.QoS qoS10 = connectMessage7.getWillQoS();
        org.meqantt.message.ConnectMessage connectMessage16 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str17 = connectMessage16.getProtocolId();
        byte[] byteArray18 = connectMessage16.toBytes();
        org.meqantt.message.QoS qoS19 = connectMessage16.getQos();
        connectMessage7.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS19, true);
        java.lang.String str22 = connectMessage7.getPassword();
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type26 = subscribeMessage25.getType();
        subscribeMessage25.setDup(false);
        subscribeMessage25.setMessageId((int) (short) 0);
        java.util.List<org.meqantt.message.QoS> qoSList31 = subscribeMessage25.getTopicQoSs();
        subscribeMessage25.setDup(false);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type36 = subscribeMessage35.getType();
        org.meqantt.message.ConnectMessage connectMessage42 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean43 = connectMessage42.hasWill();
        java.lang.String str44 = connectMessage42.getWill();
        org.meqantt.message.Message.Header header47 = null;
        org.meqantt.message.ConnectMessage connectMessage48 = new org.meqantt.message.ConnectMessage(header47);
        boolean boolean49 = connectMessage48.isWillRetained();
        boolean boolean50 = connectMessage48.isWillRetained();
        java.lang.String str51 = connectMessage48.getUsername();
        org.meqantt.message.QoS qoS55 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage56 = new org.meqantt.message.SubscribeMessage("", qoS55);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList59 = subscribeMessage58.getTopics();
        org.meqantt.message.QoS qoS60 = subscribeMessage58.getQos();
        subscribeMessage56.addTopic("", qoS60);
        connectMessage48.setWill("hi!", "", qoS60, false);
        connectMessage42.setWill("MQIsdp", "hi!", qoS60, false);
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS60);
        subscribeMessage35.addTopic("\001\003\003\001", qoS60);
        subscribeMessage25.addTopic("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS60);
        connectMessage7.setWill("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", qoS60, true);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage3.setQos(qoS60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]" + "'", str2, "Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MQIsdp" + "'", str8, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(qoS10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MQIsdp" + "'", str17, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type26.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(qoSList31);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type36.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13331");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str7 = connectMessage6.getProtocolId();
        connectMessage6.setCredentials("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
    }

    @Test
    public void test13332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13332");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage7 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage8.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13333");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        connectMessage1.setCredentials("\000d\000\001\001d");
        java.lang.String str4 = connectMessage1.getProtocolId();
        boolean boolean5 = connectMessage1.isCleanSession();
        connectMessage1.setWill("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        connectMessage1.setCredentials("");
        connectMessage1.setCredentials("00: 00000000 \000 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", "\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.QoS qoS14 = connectMessage1.getQos();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test13334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13334");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage6.addTopic("\020\032\000\006MQIsdp\003&\000\001\000\000\000\000\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13335");
        org.meqantt.message.PubCompMessage pubCompMessage1 = new org.meqantt.message.PubCompMessage((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage1.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13336");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 10);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str6 = header1.toString();
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str6, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test13337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13337");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        connectMessage2.setWill("\000\000", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList9 = subscribeMessage8.getTopics();
        org.meqantt.message.QoS qoS10 = subscribeMessage8.getQos();
        org.meqantt.message.ConnectMessage connectMessage15 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str16 = connectMessage15.getProtocolId();
        org.meqantt.message.QoS qoS17 = connectMessage15.getQos();
        subscribeMessage8.addTopic("", qoS17);
        connectMessage2.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS17, true);
        boolean boolean21 = connectMessage2.hasPassword();
        java.lang.String str22 = connectMessage2.getWill();
        java.lang.String str23 = connectMessage2.getPassword();
        org.meqantt.message.QoS qoS24 = connectMessage2.getWillQoS();
        connectMessage2.setWill("00: 00110000 0 48\n01: 00000111 \007 7\n02: 00000000 \000 0\n03: 00000011 \003 3\n04: 01101000 h 104\n05: 01101001 i 105\n06: 00100001 ! 33\n07: 00000000 \000 0\n08: 00000000 \000 0\n", "\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n");
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MQIsdp" + "'", str16, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str22, "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13338");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage5.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13339");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        org.meqantt.message.Message.Header header3 = null;
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header3);
        boolean boolean5 = connectMessage4.isWillRetained();
        boolean boolean6 = connectMessage4.isWillRetained();
        connectMessage4.setWill("", "MQIsdp");
        boolean boolean10 = connectMessage4.isWillRetained();
        java.lang.String str11 = connectMessage4.getClientId();
        byte byte12 = connectMessage4.getProtocolVersion();
        connectMessage4.setWill("\001\003\003\001", "\000d\000\001\001d");
        connectMessage4.setCredentials("\000\000");
        org.meqantt.message.QoS qoS18 = connectMessage4.getWillQoS();
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setQos(qoS18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 3 + "'", byte12 == (byte) 3);
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13340");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        org.meqantt.message.QoS qoS8 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage("", qoS8);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList12 = subscribeMessage11.getTopics();
        org.meqantt.message.QoS qoS13 = subscribeMessage11.getQos();
        subscribeMessage9.addTopic("", qoS13);
        connectMessage3.setWill("", "\000d\000\001\001d", qoS13, true);
        boolean boolean17 = connectMessage3.isCleanSession();
        java.lang.String str18 = connectMessage3.getClientId();
        byte byte19 = connectMessage3.getProtocolVersion();
        java.lang.String str20 = connectMessage3.getPassword();
        java.lang.String str21 = connectMessage3.getClientId();
        connectMessage3.setCredentials("\000d\000\001\001d");
        boolean boolean24 = connectMessage3.isDup();
        boolean boolean25 = connectMessage3.isDup();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 3 + "'", byte19 == (byte) 3);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test13341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13341");
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str8 = connectMessage7.getUsername();
        org.meqantt.message.QoS qoS12 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage("", qoS12);
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList16 = subscribeMessage15.getTopics();
        org.meqantt.message.QoS qoS17 = subscribeMessage15.getQos();
        subscribeMessage13.addTopic("", qoS17);
        connectMessage7.setWill("", "\000d\000\001\001d", qoS17, true);
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage("hi!", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS17);
        java.util.List<org.meqantt.message.QoS> qoSList25 = subscribeMessage24.getTopicQoSs();
        org.meqantt.message.SubAckMessage subAckMessage26 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList27 = subAckMessage26.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList28 = subAckMessage26.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str33 = connectMessage32.getProtocolId();
        org.meqantt.message.QoS qoS34 = connectMessage32.getQos();
        subAckMessage26.addQoS(qoS34);
        byte[] byteArray36 = subAckMessage26.toBytes();
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str42 = connectMessage41.getUsername();
        org.meqantt.message.QoS qoS46 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage47 = new org.meqantt.message.SubscribeMessage("", qoS46);
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList50 = subscribeMessage49.getTopics();
        org.meqantt.message.QoS qoS51 = subscribeMessage49.getQos();
        subscribeMessage47.addTopic("", qoS51);
        connectMessage41.setWill("", "\000d\000\001\001d", qoS51, true);
        boolean boolean55 = connectMessage41.isCleanSession();
        java.lang.String str56 = connectMessage41.getClientId();
        java.lang.String str57 = connectMessage41.getPassword();
        java.lang.String str58 = connectMessage41.getWill();
        byte[] byteArray59 = connectMessage41.toBytes();
        org.meqantt.message.PublishMessage publishMessage60 = new org.meqantt.message.PublishMessage("\000\003hi!", byteArray59);
        org.meqantt.message.QoS qoS61 = publishMessage60.getQos();
        subAckMessage26.addQoS(qoS61);
        org.meqantt.message.QoS qoS64 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage65 = new org.meqantt.message.SubscribeMessage("", qoS64);
        subscribeMessage65.setDup(false);
        org.meqantt.message.QoS qoS68 = subscribeMessage65.getQos();
        subAckMessage26.addQoS(qoS68);
        subscribeMessage24.setQos(qoS68);
        subscribeMessage24.setDup(false);
        java.util.List<java.lang.String> strList73 = subscribeMessage24.getTopics();
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList25);
        org.junit.Assert.assertNull(qoSList27);
        org.junit.Assert.assertNull(qoSList28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQIsdp" + "'", str33, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-112, 3, 0, 0, 0]");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + qoS51 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS51.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\000d\000\001\001d" + "'", str58, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + qoS61 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS61.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS68 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS68.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test13342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13342");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type9 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage11.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void test13343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13343");
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        byte[] byteArray4 = publishMessage3.getData();
        java.lang.String str5 = org.meqantt.util.FormatUtil.toString(byteArray4);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str5, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
    }

    @Test
    public void test13344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13344");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\000d\000\001\001d", false, 0);
    }

    @Test
    public void test13345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13345");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        boolean boolean27 = connectMessage3.isCleanSession();
        java.lang.String str28 = connectMessage3.getProtocolId();
        java.lang.String str29 = connectMessage3.getPassword();
        org.meqantt.message.Message.Type type30 = connectMessage3.getType();
        boolean boolean31 = connectMessage3.isCleanSession();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "MQIsdp" + "'", str28, "MQIsdp");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.meqantt.message.Message.Type.CONNECT + "'", type30.equals(org.meqantt.message.Message.Type.CONNECT));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test13346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13346");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList7 = subAckMessage6.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList12 = subscribeMessage11.getTopics();
        org.meqantt.message.QoS qoS13 = subscribeMessage11.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage("", qoS13);
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS13);
        org.meqantt.message.QoS qoS16 = subscribeMessage15.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList21 = subscribeMessage20.getTopics();
        org.meqantt.message.QoS qoS22 = subscribeMessage20.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("", qoS22);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS22);
        org.meqantt.message.QoS qoS25 = subscribeMessage24.getQos();
        subscribeMessage15.addTopic("", qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS25);
        subAckMessage6.addQoS(qoS25);
        org.meqantt.message.QoS qoS30 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage("", qoS30);
        int int32 = subscribeMessage31.getMessageId();
        subscribeMessage31.setMessageId((int) (short) 10);
        java.util.List<java.lang.String> strList35 = subscribeMessage31.getTopics();
        java.util.List<org.meqantt.message.QoS> qoSList36 = subscribeMessage31.getTopicQoSs();
        org.meqantt.message.Message.Header header39 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type40 = header39.getType();
        org.meqantt.message.Message.Type type41 = header39.getType();
        org.meqantt.message.PubRelMessage pubRelMessage42 = new org.meqantt.message.PubRelMessage(header39);
        org.meqantt.message.SubAckMessage subAckMessage43 = new org.meqantt.message.SubAckMessage(header39);
        boolean boolean44 = subAckMessage43.isRetained();
        org.meqantt.message.QoS qoS45 = subAckMessage43.getQos();
        subscribeMessage31.addTopic("\000\003hi!", qoS45);
        subAckMessage6.addQoS(qoS45);
        java.util.List<org.meqantt.message.QoS> qoSList48 = subAckMessage6.getGrantedQoSs();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage6.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList7);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + qoS22 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS22.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(qoSList36);
        org.junit.Assert.assertNull(type40);
        org.junit.Assert.assertNull(type41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + qoS45 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS45.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList48);
    }

    @Test
    public void test13347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13347");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean11 = connectMessage10.hasUsername();
        boolean boolean12 = connectMessage10.hasPassword();
        connectMessage10.setCredentials("Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13348");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        org.meqantt.message.QoS qoS8 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage("", qoS8);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList12 = subscribeMessage11.getTopics();
        org.meqantt.message.QoS qoS13 = subscribeMessage11.getQos();
        subscribeMessage9.addTopic("", qoS13);
        connectMessage3.setWill("", "\000d\000\001\001d", qoS13, true);
        boolean boolean17 = connectMessage3.isCleanSession();
        java.lang.String str18 = connectMessage3.getClientId();
        java.lang.String str19 = connectMessage3.getPassword();
        java.lang.String str20 = connectMessage3.getWill();
        boolean boolean21 = connectMessage3.hasPassword();
        connectMessage3.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "");
        boolean boolean25 = connectMessage3.isRetained();
        java.lang.String str26 = connectMessage3.getWillTopic();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\000d\000\001\001d" + "'", str20, "\000d\000\001\001d");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str26, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
    }

    @Test
    public void test13349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13349");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage6 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage8 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Header header10 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage11 = new org.meqantt.message.PingReqMessage(header10);
        org.meqantt.message.PubCompMessage pubCompMessage12 = new org.meqantt.message.PubCompMessage(header10);
        org.meqantt.message.SubAckMessage subAckMessage13 = new org.meqantt.message.SubAckMessage(header10);
        org.meqantt.message.ConnAckMessage connAckMessage14 = new org.meqantt.message.ConnAckMessage(header10);
        org.meqantt.message.SubAckMessage subAckMessage15 = new org.meqantt.message.SubAckMessage(header10);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage(header10);
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage(header10);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage19 = new org.meqantt.message.UnsubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage21 = new org.meqantt.message.UnsubscribeMessage("\000d\000\001\001d");
        unsubscribeMessage21.addTopic("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.message.SubAckMessage subAckMessage24 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList25 = subAckMessage24.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList26 = subAckMessage24.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList27 = subAckMessage24.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList30 = subscribeMessage29.getTopics();
        org.meqantt.message.QoS qoS31 = subscribeMessage29.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("", qoS31);
        subAckMessage24.addQoS(qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList35 = subscribeMessage34.getTopics();
        org.meqantt.message.ConnectMessage connectMessage40 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str41 = connectMessage40.getProtocolId();
        org.meqantt.message.QoS qoS42 = connectMessage40.getQos();
        subscribeMessage34.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS42);
        subAckMessage24.addQoS(qoS42);
        org.meqantt.message.SubscribeMessage subscribeMessage48 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList49 = subscribeMessage48.getTopics();
        org.meqantt.message.QoS qoS50 = subscribeMessage48.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage("", qoS50);
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS50);
        org.meqantt.message.QoS qoS53 = subscribeMessage52.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage57 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList58 = subscribeMessage57.getTopics();
        org.meqantt.message.QoS qoS59 = subscribeMessage57.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage60 = new org.meqantt.message.SubscribeMessage("", qoS59);
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS59);
        org.meqantt.message.QoS qoS62 = subscribeMessage61.getQos();
        subscribeMessage52.addTopic("", qoS62);
        org.meqantt.message.SubscribeMessage subscribeMessage64 = new org.meqantt.message.SubscribeMessage("", qoS62);
        subAckMessage24.addQoS(qoS62);
        unsubscribeMessage21.setQos(qoS62);
        unsubscribeMessage19.setQos(qoS62);
        java.util.List<java.lang.String> strList68 = unsubscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS69 = unsubscribeMessage19.getQos();
        subscribeMessage17.setQos(qoS69);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage8.setQos(qoS69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(qoSList25);
        org.junit.Assert.assertNull(qoSList26);
        org.junit.Assert.assertNull(qoSList27);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "MQIsdp" + "'", str41, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS42 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS42.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + qoS50 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS50.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS53 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS53.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + qoS59 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS59.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS62 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS62.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + qoS69 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS69.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13350");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 10);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
    }

    @Test
    public void test13351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13351");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.util.List<java.lang.String> strList9 = unsubscribeMessage8.getTopics();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test13352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13352");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
        nettyClient1.connect("00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n", (int) (short) 10);
        nettyClient1.disconnect();
    }

    @Test
    public void test13353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13353");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        java.lang.String str3 = connectMessage1.getPassword();
        java.lang.String str4 = connectMessage1.getClientId();
        java.lang.String str5 = connectMessage1.getWillTopic();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test13354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13354");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage7 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Header header9 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type10 = header9.getType();
        org.meqantt.message.Message.Type type11 = header9.getType();
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header9);
        org.meqantt.message.PingReqMessage pingReqMessage13 = new org.meqantt.message.PingReqMessage(header9);
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage(header9);
        org.meqantt.message.ConnectMessage connectMessage15 = new org.meqantt.message.ConnectMessage(header9);
        org.meqantt.message.PingReqMessage pingReqMessage16 = new org.meqantt.message.PingReqMessage(header9);
        org.meqantt.message.PubRelMessage pubRelMessage17 = new org.meqantt.message.PubRelMessage(header9);
        org.meqantt.message.PingReqMessage pingReqMessage18 = new org.meqantt.message.PingReqMessage(header9);
        org.meqantt.message.ConnAckMessage connAckMessage19 = new org.meqantt.message.ConnAckMessage(header9);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage20 = new org.meqantt.message.UnsubscribeMessage(header9);
        java.util.List<java.lang.String> strList21 = unsubscribeMessage20.getTopics();
        org.meqantt.message.ConnectMessage connectMessage25 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str26 = connectMessage25.getClientId();
        boolean boolean27 = connectMessage25.hasUsername();
        boolean boolean28 = connectMessage25.isCleanSession();
        org.meqantt.message.SubAckMessage subAckMessage31 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList32 = subAckMessage31.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList33 = subAckMessage31.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList34 = subAckMessage31.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList37 = subscribeMessage36.getTopics();
        org.meqantt.message.QoS qoS38 = subscribeMessage36.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage39 = new org.meqantt.message.SubscribeMessage("", qoS38);
        subAckMessage31.addQoS(qoS38);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList42 = subscribeMessage41.getTopics();
        org.meqantt.message.ConnectMessage connectMessage47 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str48 = connectMessage47.getProtocolId();
        org.meqantt.message.QoS qoS49 = connectMessage47.getQos();
        subscribeMessage41.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS49);
        subAckMessage31.addQoS(qoS49);
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList56 = subscribeMessage55.getTopics();
        org.meqantt.message.QoS qoS57 = subscribeMessage55.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage("", qoS57);
        org.meqantt.message.SubscribeMessage subscribeMessage59 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS57);
        org.meqantt.message.QoS qoS60 = subscribeMessage59.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage64 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList65 = subscribeMessage64.getTopics();
        org.meqantt.message.QoS qoS66 = subscribeMessage64.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage67 = new org.meqantt.message.SubscribeMessage("", qoS66);
        org.meqantt.message.SubscribeMessage subscribeMessage68 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS66);
        org.meqantt.message.QoS qoS69 = subscribeMessage68.getQos();
        subscribeMessage59.addTopic("", qoS69);
        org.meqantt.message.SubscribeMessage subscribeMessage71 = new org.meqantt.message.SubscribeMessage("", qoS69);
        subAckMessage31.addQoS(qoS69);
        connectMessage25.setWill("\001\003\003\001", "", qoS69, true);
        unsubscribeMessage20.setQos(qoS69);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage7.setQos(qoS69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(qoSList32);
        org.junit.Assert.assertNull(qoSList33);
        org.junit.Assert.assertNull(qoSList34);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + qoS38 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS38.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "MQIsdp" + "'", str48, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS49 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS49.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + qoS57 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS57.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + qoS66 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS66.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS69 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS69.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13355");
        org.meqantt.netty.MqttMessageHandler mqttMessageHandler0 = new org.meqantt.netty.MqttMessageHandler();
        org.meqantt.MqttListener mqttListener1 = null;
        mqttMessageHandler0.setListener(mqttListener1);
        org.meqantt.MqttListener mqttListener3 = null;
        mqttMessageHandler0.setListener(mqttListener3);
        org.meqantt.MqttListener mqttListener5 = null;
        mqttMessageHandler0.setListener(mqttListener5);
        org.meqantt.MqttListener mqttListener7 = null;
        mqttMessageHandler0.setListener(mqttListener7);
        org.meqantt.MqttListener mqttListener9 = null;
        mqttMessageHandler0.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        mqttMessageHandler0.setListener(mqttListener11);
        org.meqantt.MqttListener mqttListener13 = null;
        mqttMessageHandler0.setListener(mqttListener13);
        org.meqantt.MqttListener mqttListener15 = null;
        mqttMessageHandler0.setListener(mqttListener15);
        org.meqantt.MqttListener mqttListener17 = null;
        mqttMessageHandler0.setListener(mqttListener17);
        org.meqantt.MqttListener mqttListener19 = null;
        mqttMessageHandler0.setListener(mqttListener19);
        org.meqantt.MqttListener mqttListener21 = null;
        mqttMessageHandler0.setListener(mqttListener21);
        org.meqantt.MqttListener mqttListener23 = null;
        mqttMessageHandler0.setListener(mqttListener23);
        org.meqantt.MqttListener mqttListener25 = null;
        mqttMessageHandler0.setListener(mqttListener25);
        org.meqantt.MqttListener mqttListener27 = null;
        mqttMessageHandler0.setListener(mqttListener27);
        org.meqantt.MqttListener mqttListener29 = null;
        mqttMessageHandler0.setListener(mqttListener29);
        org.meqantt.MqttListener mqttListener31 = null;
        mqttMessageHandler0.setListener(mqttListener31);
        org.meqantt.MqttListener mqttListener33 = null;
        mqttMessageHandler0.setListener(mqttListener33);
        org.meqantt.MqttListener mqttListener35 = null;
        mqttMessageHandler0.setListener(mqttListener35);
        org.meqantt.MqttListener mqttListener37 = null;
        mqttMessageHandler0.setListener(mqttListener37);
        org.meqantt.MqttListener mqttListener39 = null;
        mqttMessageHandler0.setListener(mqttListener39);
        org.meqantt.MqttListener mqttListener41 = null;
        mqttMessageHandler0.setListener(mqttListener41);
        org.jboss.netty.channel.ChannelHandlerContext channelHandlerContext43 = null;
        org.jboss.netty.channel.MessageEvent messageEvent44 = null;
        // The following exception was thrown during execution in test generation
        try {
            mqttMessageHandler0.writeRequested(channelHandlerContext43, messageEvent44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13356");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage();
        int int10 = subAckMessage9.getMessageId();
        java.util.List<org.meqantt.message.QoS> qoSList11 = subAckMessage9.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList12 = subAckMessage9.getGrantedQoSs();
        org.meqantt.message.Message.Header header13 = null;
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage(header13);
        java.lang.String str15 = connectMessage14.getPassword();
        boolean boolean16 = connectMessage14.isCleanSession();
        java.lang.String str17 = connectMessage14.getPassword();
        connectMessage14.setCredentials("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList23 = subscribeMessage22.getTopics();
        org.meqantt.message.QoS qoS24 = subscribeMessage22.getQos();
        org.meqantt.message.QoS qoS26 = null;
        subscribeMessage22.addTopic("", qoS26);
        java.util.List<org.meqantt.message.QoS> qoSList28 = subscribeMessage22.getTopicQoSs();
        subscribeMessage22.setMessageId((int) 'a');
        org.meqantt.message.Message.Type type31 = subscribeMessage22.getType();
        org.meqantt.message.QoS qoS32 = subscribeMessage22.getQos();
        connectMessage14.setWill("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS32, false);
        subAckMessage9.addQoS(qoS32);
        subAckMessage8.addQoS(qoS32);
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(qoSList11);
        org.junit.Assert.assertNull(qoSList12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList28);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type31.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13357");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        java.lang.String str6 = connectMessage1.getWill();
        connectMessage1.setWill("\000\000", "\000\000");
        java.lang.String str10 = connectMessage1.getClientId();
        boolean boolean11 = connectMessage1.hasWill();
        java.lang.String str12 = connectMessage1.getPassword();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test13358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13358");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage9 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage10 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage12 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage12.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13359");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        int int3 = unsubscribeMessage1.getMessageId();
        unsubscribeMessage1.setDup(false);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE can't set the DUP flag.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test13360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13360");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        org.meqantt.MqttListener mqttListener5 = null;
        nettyClient1.setListener(mqttListener5);
        nettyClient1.ping();
        nettyClient1.ping();
        nettyClient1.disconnect();
        org.meqantt.MqttListener mqttListener10 = null;
        nettyClient1.setListener(mqttListener10);
    }

    @Test
    public void test13361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13361");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage9 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage11 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage12 = new org.meqantt.message.PubCompMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13362");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage5 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header1);
    }

    @Test
    public void test13363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13363");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        boolean boolean3 = connectMessage1.isWillRetained();
        int int4 = connectMessage1.getKeepAlive();
        byte byte5 = connectMessage1.getProtocolVersion();
        boolean boolean6 = connectMessage1.hasWill();
        int int7 = connectMessage1.getKeepAlive();
        int int8 = connectMessage1.getKeepAlive();
        byte byte9 = connectMessage1.getProtocolVersion();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 3 + "'", byte5 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 3 + "'", byte9 == (byte) 3);
    }

    @Test
    public void test13364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13364");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type8 = header1.getType();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void test13365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13365");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage7 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.Message.Header header10 = new org.meqantt.message.Message.Header((byte) 3);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header10);
        org.meqantt.message.Message.Header header14 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str15 = header14.toString();
        org.meqantt.message.SubAckMessage subAckMessage16 = new org.meqantt.message.SubAckMessage(header14);
        org.meqantt.message.PublishMessage publishMessage17 = new org.meqantt.message.PublishMessage(header14);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage20 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS21 = unsubscribeMessage20.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("", qoS21);
        publishMessage17.setQos(qoS21);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS21);
        subAckMessage11.addQoS(qoS21);
        org.meqantt.message.Message.Header header28 = null;
        org.meqantt.message.ConnectMessage connectMessage29 = new org.meqantt.message.ConnectMessage(header28);
        java.lang.String str30 = connectMessage29.getPassword();
        java.lang.String str31 = connectMessage29.getWillTopic();
        boolean boolean32 = connectMessage29.isCleanSession();
        boolean boolean33 = connectMessage29.hasPassword();
        org.meqantt.message.PubRelMessage pubRelMessage37 = new org.meqantt.message.PubRelMessage((int) ' ');
        org.meqantt.message.QoS qoS38 = pubRelMessage37.getQos();
        connectMessage29.setWill("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS38, false);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS38);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage("00: 00010000 \020 16\n01: 00001110 \016 14\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n", qoS38);
        subAckMessage11.addQoS(qoS38);
        byte[] byteArray46 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str47 = org.meqantt.util.FormatUtil.toString(byteArray46);
        org.meqantt.message.PublishMessage publishMessage48 = new org.meqantt.message.PublishMessage("hi!", byteArray46);
        publishMessage48.setMessageId((int) '\001');
        publishMessage48.setRetained(true);
        java.lang.String str53 = publishMessage48.getDataAsString();
        org.meqantt.message.QoS qoS54 = publishMessage48.getQos();
        subAckMessage11.addQoS(qoS54);
        org.meqantt.message.SubAckMessage subAckMessage56 = new org.meqantt.message.SubAckMessage();
        int int57 = subAckMessage56.getMessageId();
        java.util.List<org.meqantt.message.QoS> qoSList58 = subAckMessage56.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList59 = subAckMessage56.getGrantedQoSs();
        org.meqantt.message.Message.Header header60 = null;
        org.meqantt.message.ConnectMessage connectMessage61 = new org.meqantt.message.ConnectMessage(header60);
        java.lang.String str62 = connectMessage61.getPassword();
        boolean boolean63 = connectMessage61.isCleanSession();
        java.lang.String str64 = connectMessage61.getPassword();
        connectMessage61.setCredentials("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        org.meqantt.message.SubscribeMessage subscribeMessage69 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList70 = subscribeMessage69.getTopics();
        org.meqantt.message.QoS qoS71 = subscribeMessage69.getQos();
        org.meqantt.message.QoS qoS73 = null;
        subscribeMessage69.addTopic("", qoS73);
        java.util.List<org.meqantt.message.QoS> qoSList75 = subscribeMessage69.getTopicQoSs();
        subscribeMessage69.setMessageId((int) 'a');
        org.meqantt.message.Message.Type type78 = subscribeMessage69.getType();
        org.meqantt.message.QoS qoS79 = subscribeMessage69.getQos();
        connectMessage61.setWill("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS79, false);
        subAckMessage56.addQoS(qoS79);
        subAckMessage11.addQoS(qoS79);
        subscribeMessage7.addTopic("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS79);
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type2.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str4, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str15, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + qoS38 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS38.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\000\000" + "'", str53, "\000\000");
        org.junit.Assert.assertTrue("'" + qoS54 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS54.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(qoSList58);
        org.junit.Assert.assertNull(qoSList59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertTrue("'" + qoS71 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS71.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList75);
        org.junit.Assert.assertTrue("'" + type78 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type78.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertTrue("'" + qoS79 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS79.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13366");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList7 = subAckMessage6.getGrantedQoSs();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage6.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList7);
    }

    @Test
    public void test13367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13367");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus3 = connAckMessage2.getStatus();
        org.junit.Assert.assertNull(connectionStatus3);
    }

    @Test
    public void test13368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13368");
        org.meqantt.message.PubCompMessage pubCompMessage1 = new org.meqantt.message.PubCompMessage((int) (short) 1);
        org.meqantt.message.QoS qoS2 = null;
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage1.setQos(qoS2);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13369");
        byte[] byteArray1 = org.meqantt.util.FormatUtil.toMQttString("\000\ufffd\ufffd\023\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertNotNull(byteArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, -115, -64, -128, 50, -17, -65, -67, -17, -65, -67, 19, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, 8, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, 100, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67, 1, 1, 100]");
    }

    @Test
    public void test13370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13370");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage12 = new org.meqantt.message.PingRespMessage(header1);
        java.lang.String str13 = header1.toString();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage14 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage15 = new org.meqantt.message.PingRespMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str13, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13371");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage7 = new org.meqantt.message.PingRespMessage(header1);
    }

    @Test
    public void test13372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13372");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        connectMessage1.setCredentials("");
        java.lang.String str8 = connectMessage1.getClientId();
        org.meqantt.message.QoS qoS9 = connectMessage1.getWillQoS();
        connectMessage1.setCredentials("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        boolean boolean12 = connectMessage1.hasPassword();
        boolean boolean13 = connectMessage1.isWillRetained();
        java.lang.String str14 = connectMessage1.getWillTopic();
        connectMessage1.setCredentials("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        boolean boolean17 = connectMessage1.hasWill();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(qoS9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test13373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13373");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList1 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage4 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList5 = subscribeMessage4.getTopics();
        org.meqantt.message.QoS qoS6 = subscribeMessage4.getQos();
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str12 = connectMessage11.getProtocolId();
        org.meqantt.message.QoS qoS13 = connectMessage11.getQos();
        subscribeMessage4.addTopic("", qoS13);
        subAckMessage0.addQoS(qoS13);
        int int16 = subAckMessage0.getMessageId();
        org.meqantt.message.Message.Header header18 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type19 = header18.getType();
        org.meqantt.message.SubAckMessage subAckMessage20 = new org.meqantt.message.SubAckMessage(header18);
        java.util.List<org.meqantt.message.QoS> qoSList21 = subAckMessage20.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList22 = subAckMessage20.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList24 = subscribeMessage23.getTopics();
        org.meqantt.message.QoS qoS25 = subscribeMessage23.getQos();
        java.util.List<org.meqantt.message.QoS> qoSList26 = subscribeMessage23.getTopicQoSs();
        org.meqantt.message.Message.Header header28 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage29 = new org.meqantt.message.PingReqMessage(header28);
        org.meqantt.message.PubCompMessage pubCompMessage30 = new org.meqantt.message.PubCompMessage(header28);
        org.meqantt.message.PubAckMessage pubAckMessage31 = new org.meqantt.message.PubAckMessage(header28);
        org.meqantt.message.PublishMessage publishMessage32 = new org.meqantt.message.PublishMessage(header28);
        org.meqantt.message.ConnAckMessage connAckMessage33 = new org.meqantt.message.ConnAckMessage(header28);
        org.meqantt.message.SubAckMessage subAckMessage34 = new org.meqantt.message.SubAckMessage(header28);
        org.meqantt.message.Message.Header header36 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type37 = header36.getType();
        org.meqantt.message.Message.Type type38 = header36.getType();
        org.meqantt.message.SubAckMessage subAckMessage39 = new org.meqantt.message.SubAckMessage(header36);
        org.meqantt.message.PingReqMessage pingReqMessage40 = new org.meqantt.message.PingReqMessage(header36);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage(header36);
        org.meqantt.message.ConnectMessage connectMessage42 = new org.meqantt.message.ConnectMessage(header36);
        org.meqantt.message.PingReqMessage pingReqMessage43 = new org.meqantt.message.PingReqMessage(header36);
        org.meqantt.message.SubscribeMessage subscribeMessage44 = new org.meqantt.message.SubscribeMessage(header36);
        java.util.List<java.lang.String> strList45 = subscribeMessage44.getTopics();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage47 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList48 = unsubscribeMessage47.getTopics();
        org.meqantt.message.Message.Type type49 = unsubscribeMessage47.getType();
        java.util.List<java.lang.String> strList50 = unsubscribeMessage47.getTopics();
        org.meqantt.message.QoS qoS51 = unsubscribeMessage47.getQos();
        subscribeMessage44.setQos(qoS51);
        subAckMessage34.addQoS(qoS51);
        subscribeMessage23.setQos(qoS51);
        byte[] byteArray58 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str59 = org.meqantt.util.FormatUtil.toString(byteArray58);
        org.meqantt.message.PublishMessage publishMessage60 = new org.meqantt.message.PublishMessage("hi!", byteArray58);
        publishMessage60.setMessageId((int) '\001');
        byte[] byteArray63 = publishMessage60.getData();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage65 = new org.meqantt.message.UnsubscribeMessage("\000\000");
        org.meqantt.message.Message.Header header67 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type68 = header67.getType();
        org.meqantt.message.Message.Type type69 = header67.getType();
        org.meqantt.message.SubAckMessage subAckMessage70 = new org.meqantt.message.SubAckMessage(header67);
        org.meqantt.message.PingReqMessage pingReqMessage71 = new org.meqantt.message.PingReqMessage(header67);
        org.meqantt.message.SubscribeMessage subscribeMessage72 = new org.meqantt.message.SubscribeMessage(header67);
        org.meqantt.message.ConnectMessage connectMessage73 = new org.meqantt.message.ConnectMessage(header67);
        org.meqantt.message.PingReqMessage pingReqMessage74 = new org.meqantt.message.PingReqMessage(header67);
        org.meqantt.message.SubscribeMessage subscribeMessage75 = new org.meqantt.message.SubscribeMessage(header67);
        java.util.List<java.lang.String> strList76 = subscribeMessage75.getTopics();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage78 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList79 = unsubscribeMessage78.getTopics();
        org.meqantt.message.Message.Type type80 = unsubscribeMessage78.getType();
        java.util.List<java.lang.String> strList81 = unsubscribeMessage78.getTopics();
        org.meqantt.message.QoS qoS82 = unsubscribeMessage78.getQos();
        subscribeMessage75.setQos(qoS82);
        unsubscribeMessage65.setQos(qoS82);
        publishMessage60.setQos(qoS82);
        subscribeMessage23.addTopic("\000\000", qoS82);
        subAckMessage20.addQoS(qoS82);
        subAckMessage0.addQoS(qoS82);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage0.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList1);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MQIsdp" + "'", str12, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type19.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(qoSList21);
        org.junit.Assert.assertNull(qoSList22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList26);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertNull(type38);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type49.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + qoS51 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS51.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0]");
        org.junit.Assert.assertNull(type68);
        org.junit.Assert.assertNull(type69);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + type80 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type80.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertTrue("'" + qoS82 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS82.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13374");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        boolean boolean3 = connectMessage1.hasUsername();
        connectMessage1.setCredentials("00: 00110000 0 48\n01: 00010010 \022 18\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000000 \000 0\n11: 00001000 \b 8\n12: 11000000 \300 192\n13: 10000000 \200 128\n14: 01100100 d 100\n15: 11000000 \300 192\n16: 10000000 \200 128\n17: 00000001 \001 1\n18: 00000001 \001 1\n19: 01100100 d 100\n");
        java.lang.String str6 = connectMessage1.getPassword();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test13375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13375");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Header header9 = null;
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage(header9);
        java.lang.String str11 = connectMessage10.getPassword();
        boolean boolean12 = connectMessage10.isCleanSession();
        java.lang.String str13 = connectMessage10.getWill();
        org.meqantt.message.SubAckMessage subAckMessage16 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList17 = subAckMessage16.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList18 = subAckMessage16.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList19 = subAckMessage16.getGrantedQoSs();
        subAckMessage16.setMessageId((int) '#');
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList23 = subscribeMessage22.getTopics();
        org.meqantt.message.ConnectMessage connectMessage28 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str29 = connectMessage28.getProtocolId();
        org.meqantt.message.QoS qoS30 = connectMessage28.getQos();
        subscribeMessage22.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS30);
        subAckMessage16.addQoS(qoS30);
        org.meqantt.message.ConnectMessage connectMessage40 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str41 = connectMessage40.getUsername();
        org.meqantt.message.QoS qoS45 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage46 = new org.meqantt.message.SubscribeMessage("", qoS45);
        org.meqantt.message.SubscribeMessage subscribeMessage48 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList49 = subscribeMessage48.getTopics();
        org.meqantt.message.QoS qoS50 = subscribeMessage48.getQos();
        subscribeMessage46.addTopic("", qoS50);
        connectMessage40.setWill("", "\000d\000\001\001d", qoS50, true);
        org.meqantt.message.SubscribeMessage subscribeMessage54 = new org.meqantt.message.SubscribeMessage("hi!", qoS50);
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS50);
        org.meqantt.message.SubscribeMessage subscribeMessage56 = new org.meqantt.message.SubscribeMessage("", qoS50);
        org.meqantt.message.SubscribeMessage subscribeMessage57 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS50);
        subAckMessage16.addQoS(qoS50);
        connectMessage10.setWill("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS50, true);
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", qoS50);
        org.meqantt.message.QoS qoS62 = subscribeMessage61.getQos();
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage7.setQos(qoS62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(qoSList17);
        org.junit.Assert.assertNull(qoSList18);
        org.junit.Assert.assertNull(qoSList19);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "MQIsdp" + "'", str29, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS30 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS30.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + qoS50 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS50.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS62 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS62.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13376");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str5 = header1.toString();
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage8 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage9 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.util.List<java.lang.String> strList10 = unsubscribeMessage9.getTopics();
        java.lang.Class<?> wildcardClass11 = strList10.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test13377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13377");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("", "\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        byte[] byteArray3 = publishMessage2.getData();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 66, -64, -128, 63, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 80, 85, 66, 82, 69, 76, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 69, 88, 65, 67, 84, 76, 89, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 102, 97, 108, 115, 101, 93]");
    }

    @Test
    public void test13378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13378");
        org.meqantt.message.SubscribeMessage subscribeMessage3 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList4 = subscribeMessage3.getTopics();
        org.meqantt.message.QoS qoS5 = subscribeMessage3.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage("", qoS5);
        org.meqantt.message.SubscribeMessage subscribeMessage7 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS5);
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage("\000\000", qoS5);
        java.util.List<org.meqantt.message.QoS> qoSList9 = subscribeMessage8.getTopicQoSs();
        java.util.List<java.lang.String> strList10 = subscribeMessage8.getTopics();
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage8.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + qoS5 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS5.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test13379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13379");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingRespMessage pingRespMessage2 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage5.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13380");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage9 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus10 = connAckMessage9.getStatus();
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertNull(connectionStatus10);
    }

    @Test
    public void test13381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13381");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = connectMessage7.getPassword();
        java.lang.String str9 = connectMessage7.getWillTopic();
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test13382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13382");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getClientId();
        connectMessage1.setWill("hi!", "");
        org.meqantt.message.QoS qoS6 = connectMessage1.getWillQoS();
        connectMessage1.setWill("\000d\000\001\001d", "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        byte byte10 = connectMessage1.getProtocolVersion();
        boolean boolean11 = connectMessage1.hasWill();
        java.lang.String str12 = connectMessage1.getWillTopic();
        java.lang.String str13 = connectMessage1.getPassword();
        boolean boolean14 = connectMessage1.hasWill();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 3 + "'", byte10 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\000d\000\001\001d" + "'", str12, "\000d\000\001\001d");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test13383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13383");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage(header1);
        byte[] byteArray8 = publishMessage7.getData();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(byteArray8);
    }

    @Test
    public void test13384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13384");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str3 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header1);
        int int5 = connectMessage4.getKeepAlive();
        int int6 = connectMessage4.getKeepAlive();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str3, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test13385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13385");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList7 = subAckMessage6.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList8 = subAckMessage6.getGrantedQoSs();
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage((int) ' ');
        org.meqantt.message.QoS qoS11 = pubRelMessage10.getQos();
        subAckMessage6.addQoS(qoS11);
        subAckMessage5.addQoS(qoS11);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage5.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type4.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(qoSList7);
        org.junit.Assert.assertNull(qoSList8);
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13386");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.util.List<java.lang.String> strList7 = unsubscribeMessage6.getTopics();
        unsubscribeMessage6.addTopic("MQIsdp");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test13387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13387");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str3 = connectMessage2.getProtocolId();
        connectMessage2.setCredentials("hi!", "");
        connectMessage2.setCredentials("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.message.QoS qoS9 = connectMessage2.getWillQoS();
        boolean boolean10 = connectMessage2.isDup();
        connectMessage2.setCredentials("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.message.QoS qoS14 = connectMessage2.getWillQoS();
        boolean boolean15 = connectMessage2.isWillRetained();
        java.lang.String str16 = connectMessage2.getWillTopic();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MQIsdp" + "'", str3, "MQIsdp");
        org.junit.Assert.assertNull(qoS9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(qoS14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test13388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13388");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        org.meqantt.message.QoS qoS8 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage("", qoS8);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList12 = subscribeMessage11.getTopics();
        org.meqantt.message.QoS qoS13 = subscribeMessage11.getQos();
        subscribeMessage9.addTopic("", qoS13);
        connectMessage3.setWill("", "\000d\000\001\001d", qoS13, true);
        boolean boolean17 = connectMessage3.isCleanSession();
        java.lang.String str18 = connectMessage3.getClientId();
        java.lang.String str19 = connectMessage3.getPassword();
        java.lang.String str20 = connectMessage3.getWill();
        byte[] byteArray21 = connectMessage3.toBytes();
        byte[] byteArray22 = connectMessage3.toBytes();
        boolean boolean23 = connectMessage3.isCleanSession();
        boolean boolean24 = connectMessage3.isDup();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\000d\000\001\001d" + "'", str20, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test13389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13389");
        byte[] byteArray4 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str5 = org.meqantt.util.FormatUtil.toString(byteArray4);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage("hi!", byteArray4);
        publishMessage6.setMessageId((int) '\001');
        java.lang.String str9 = publishMessage6.getDataAsString();
        byte[] byteArray10 = publishMessage6.getData();
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage("\000d\000\001\001d", byteArray10);
        java.lang.String str12 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray10);
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage("\001\003\003\001", byteArray10);
        byte[] byteArray14 = publishMessage13.getData();
        byte[] byteArray15 = publishMessage13.getData();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\000\000" + "'", str9, "\000\000");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "00: 00000000 \000 0\n01: 00000000 \000 0\n" + "'", str12, "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0]");
    }

    @Test
    public void test13390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13390");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        java.lang.String str10 = header1.toString();
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage12 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage13 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str10, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13391");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.Message.Type type9 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage10 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage12 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage13 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage13.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void test13392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13392");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener9 = null;
        nettyClient1.setListener(mqttListener9);
        nettyClient1.subscribe("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        nettyClient1.connect("\000\000", (int) (short) 100);
        nettyClient1.unsubscribe("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        nettyClient1.subscribe("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        nettyClient1.publish("", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        nettyClient1.unsubscribe("\000\023\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d");
        nettyClient1.publish("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        nettyClient1.unsubscribe("\000\004\001\003\003\001");
    }

    @Test
    public void test13393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13393");
        org.meqantt.message.PubRecMessage pubRecMessage1 = new org.meqantt.message.PubRecMessage(0);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage1.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13394");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getClientId();
        boolean boolean5 = connectMessage3.isDup();
        java.lang.String str6 = connectMessage3.getWillTopic();
        java.lang.String str7 = connectMessage3.getWillTopic();
        boolean boolean8 = connectMessage3.hasPassword();
        boolean boolean9 = connectMessage3.isDup();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13395");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str7 = connectMessage6.getPassword();
        int int8 = connectMessage6.getKeepAlive();
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test13396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13396");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("MQIsdp", (int) (byte) 0);
        nettyClient1.disconnect();
        nettyClient1.publish("00: 11111111 \377 255\n01: 01100100 d 100\n02: 00000001 \001 1\n", "\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
    }

    @Test
    public void test13397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13397");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList9 = subscribeMessage8.getTopicQoSs();
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertNotNull(qoSList9);
    }

    @Test
    public void test13398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13398");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.unsubscribe("\000\003hi!");
        nettyClient1.subscribe("");
        nettyClient1.connect("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", (int) (short) 100);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.unsubscribe("hi!");
        org.meqantt.MqttListener mqttListener24 = null;
        nettyClient1.setListener(mqttListener24);
        nettyClient1.subscribe("\000\006\ufffd\ufffd\003hi!");
        org.meqantt.MqttListener mqttListener28 = null;
        nettyClient1.setListener(mqttListener28);
    }

    @Test
    public void test13399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13399");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000\003hi!", "\000\004\001\003\003\001");
        byte[] byteArray3 = publishMessage2.getData();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 7, -64, -128, 4, 1, 3, 3, 1]");
    }

    @Test
    public void test13400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13400");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList9 = subscribeMessage8.getTopics();
        org.meqantt.message.QoS qoS10 = subscribeMessage8.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage("", qoS10);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS10);
        org.meqantt.message.QoS qoS13 = subscribeMessage12.getQos();
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage5.setQos(qoS13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type2.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str4, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13401");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage10 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage(header1);
        connectMessage11.setCredentials("00: 11111111 \377 255\n01: 01100100 d 100\n02: 00000001 \001 1\n");
        org.meqantt.message.QoS qoS14 = connectMessage11.getWillQoS();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(qoS14);
    }

    @Test
    public void test13402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13402");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, (int) 'a');
        org.meqantt.message.QoS qoS4 = connectMessage3.getWillQoS();
        java.lang.String str5 = connectMessage3.getProtocolId();
        org.meqantt.message.QoS qoS6 = connectMessage3.getWillQoS();
        boolean boolean7 = connectMessage3.isCleanSession();
        connectMessage3.setWill("00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n", "");
        java.lang.String str11 = connectMessage3.getClientId();
        org.junit.Assert.assertNull(qoS4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MQIsdp" + "'", str5, "MQIsdp");
        org.junit.Assert.assertNull(qoS6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MQIsdp" + "'", str11, "MQIsdp");
    }

    @Test
    public void test13403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13403");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000d\000\001\001d", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        byte[] byteArray3 = publishMessage2.getData();
        java.lang.String str4 = publishMessage2.getDataAsString();
        org.meqantt.message.Message.Header header5 = null;
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header5);
        boolean boolean7 = connectMessage6.isWillRetained();
        boolean boolean8 = connectMessage6.isWillRetained();
        connectMessage6.setWill("", "MQIsdp");
        boolean boolean12 = connectMessage6.isWillRetained();
        boolean boolean13 = connectMessage6.hasPassword();
        java.lang.String str14 = connectMessage6.getClientId();
        connectMessage6.setCredentials("\000d\000\001\001d");
        java.lang.String str17 = connectMessage6.getProtocolId();
        connectMessage6.setWill("", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        boolean boolean21 = connectMessage6.isCleanSession();
        org.meqantt.message.ConnectMessage connectMessage28 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 0);
        java.lang.String str29 = connectMessage28.getProtocolId();
        org.meqantt.message.QoS qoS33 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("", qoS33);
        int int35 = subscribeMessage34.getMessageId();
        subscribeMessage34.setMessageId((int) (short) 10);
        org.meqantt.message.Message.Header header39 = null;
        org.meqantt.message.ConnectMessage connectMessage40 = new org.meqantt.message.ConnectMessage(header39);
        int int41 = connectMessage40.getKeepAlive();
        connectMessage40.setWill("MQIsdp", "");
        org.meqantt.message.QoS qoS45 = connectMessage40.getWillQoS();
        subscribeMessage34.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS45);
        connectMessage28.setWill("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS45, true);
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS45);
        connectMessage6.setWill("00: 01100100 d 100\n01: 00000000 \000 0\n", "MQIsdp", qoS45, false);
        publishMessage2.setQos(qoS45);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, -77, 48, 48, 58, 32, 48, 48, 49, 49, 48, 48, 48, 48, 32, 48, 32, 52, 56, 10, 48, 49, 58, 32, 48, 48, 48, 48, 49, 48, 48, 48, 32, 8, 32, 56, 10, 48, 50, 58, 32, 48, 48, 48, 48, 48, 48, 48, 48, 32, -64, -128, 32, 48, 10, 48, 51, 58, 32, 48, 48, 48, 48, 48, 48, 48, 48, 32, -64, -128, 32, 48, 10, 48, 52, 58, 32, 48, 48, 48, 48, 48, 48, 48, 48, 32, -64, -128, 32, 48, 10, 48, 53, 58, 32, 48, 49, 49, 48, 48, 49, 48, 48, 32, 100, 32, 49, 48, 48, 10, 48, 54, 58, 32, 48, 48, 48, 48, 48, 48, 48, 48, 32, -64, -128, 32, 48, 10, 48, 55, 58, 32, 48, 48, 48, 48, 48, 48, 48, 49, 32, 1, 32, 49, 10, 48, 56, 58, 32, 48, 48, 48, 48, 48, 48, 48, 49, 32, 1, 32, 49, 10, 48, 57, 58, 32, 48, 49, 49, 48, 48, 49, 48, 48, 32, 100, 32, 49, 48, 48, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str4, "\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MQIsdp" + "'", str17, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "MQIsdp" + "'", str29, "MQIsdp");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + qoS45 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS45.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13404");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        connectMessage3.setCredentials("\000d\000\001\001d");
        connectMessage3.setWill("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        byte byte32 = connectMessage3.getProtocolVersion();
        boolean boolean33 = connectMessage3.isWillRetained();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 3 + "'", byte32 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test13405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13405");
        org.meqantt.netty.MqttMessageHandler mqttMessageHandler0 = new org.meqantt.netty.MqttMessageHandler();
        org.meqantt.MqttListener mqttListener1 = null;
        mqttMessageHandler0.setListener(mqttListener1);
        org.meqantt.MqttListener mqttListener3 = null;
        mqttMessageHandler0.setListener(mqttListener3);
        org.meqantt.MqttListener mqttListener5 = null;
        mqttMessageHandler0.setListener(mqttListener5);
        org.meqantt.MqttListener mqttListener7 = null;
        mqttMessageHandler0.setListener(mqttListener7);
        org.meqantt.MqttListener mqttListener9 = null;
        mqttMessageHandler0.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        mqttMessageHandler0.setListener(mqttListener11);
        org.meqantt.MqttListener mqttListener13 = null;
        mqttMessageHandler0.setListener(mqttListener13);
        org.meqantt.MqttListener mqttListener15 = null;
        mqttMessageHandler0.setListener(mqttListener15);
        org.meqantt.MqttListener mqttListener17 = null;
        mqttMessageHandler0.setListener(mqttListener17);
        org.meqantt.MqttListener mqttListener19 = null;
        mqttMessageHandler0.setListener(mqttListener19);
        org.meqantt.MqttListener mqttListener21 = null;
        mqttMessageHandler0.setListener(mqttListener21);
        org.meqantt.MqttListener mqttListener23 = null;
        mqttMessageHandler0.setListener(mqttListener23);
        org.meqantt.MqttListener mqttListener25 = null;
        mqttMessageHandler0.setListener(mqttListener25);
        org.meqantt.MqttListener mqttListener27 = null;
        mqttMessageHandler0.setListener(mqttListener27);
        org.meqantt.MqttListener mqttListener29 = null;
        mqttMessageHandler0.setListener(mqttListener29);
        org.meqantt.MqttListener mqttListener31 = null;
        mqttMessageHandler0.setListener(mqttListener31);
        org.meqantt.MqttListener mqttListener33 = null;
        mqttMessageHandler0.setListener(mqttListener33);
        org.meqantt.MqttListener mqttListener35 = null;
        mqttMessageHandler0.setListener(mqttListener35);
        org.meqantt.MqttListener mqttListener37 = null;
        mqttMessageHandler0.setListener(mqttListener37);
        org.jboss.netty.channel.ChannelHandlerContext channelHandlerContext39 = null;
        org.jboss.netty.channel.ChannelStateEvent channelStateEvent40 = null;
        // The following exception was thrown during execution in test generation
        try {
            mqttMessageHandler0.channelClosed(channelHandlerContext39, channelStateEvent40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13406");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        int int10 = subscribeMessage9.getMessageId();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test13407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13407");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getClientId();
        connectMessage1.setWill("hi!", "");
        boolean boolean6 = connectMessage1.hasWill();
        org.meqantt.message.QoS qoS7 = connectMessage1.getWillQoS();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + qoS7 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS7.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13408");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage6.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type4.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test13409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13409");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean8 = connectMessage7.isCleanSession();
        java.lang.String str9 = connectMessage7.getClientId();
        connectMessage7.setCredentials("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.meqantt.message.Message.Type type12 = connectMessage7.getType();
        org.meqantt.message.Message.Type type13 = connectMessage7.getType();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type12);
        org.junit.Assert.assertNull(type13);
    }

    @Test
    public void test13410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13410");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = connectMessage7.getPassword();
        byte byte9 = connectMessage7.getProtocolVersion();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 3 + "'", byte9 == (byte) 3);
    }

    @Test
    public void test13411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13411");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage9 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage10.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13412");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        boolean boolean3 = connectMessage1.isWillRetained();
        int int4 = connectMessage1.getKeepAlive();
        java.lang.String str5 = connectMessage1.getWill();
        connectMessage1.setCredentials("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        java.lang.String str8 = connectMessage1.getUsername();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13413");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        boolean boolean10 = subAckMessage9.isDup();
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList13 = subscribeMessage12.getTopics();
        org.meqantt.message.QoS qoS14 = subscribeMessage12.getQos();
        org.meqantt.message.QoS qoS16 = null;
        subscribeMessage12.addTopic("", qoS16);
        java.util.List<org.meqantt.message.QoS> qoSList18 = subscribeMessage12.getTopicQoSs();
        subscribeMessage12.setDup(false);
        java.util.List<org.meqantt.message.QoS> qoSList21 = subscribeMessage12.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage26 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str27 = connectMessage26.getUsername();
        org.meqantt.message.QoS qoS31 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("", qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList35 = subscribeMessage34.getTopics();
        org.meqantt.message.QoS qoS36 = subscribeMessage34.getQos();
        subscribeMessage32.addTopic("", qoS36);
        connectMessage26.setWill("", "\000d\000\001\001d", qoS36, true);
        subscribeMessage12.addTopic("\000\000", qoS36);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("\000\023\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d", qoS36);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage9.setQos(qoS36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList18);
        org.junit.Assert.assertNotNull(qoSList21);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13414");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.UNACCEPTABLE_PROTOCOL_VERSION;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus3 = connAckMessage2.getStatus();
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(connectionStatus3);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(connectionStatus3);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(connectionStatus3);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(connectionStatus3);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus8 = connAckMessage7.getStatus();
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.UNACCEPTABLE_PROTOCOL_VERSION + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.UNACCEPTABLE_PROTOCOL_VERSION));
        org.junit.Assert.assertTrue("'" + connectionStatus3 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.UNACCEPTABLE_PROTOCOL_VERSION + "'", connectionStatus3.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.UNACCEPTABLE_PROTOCOL_VERSION));
        org.junit.Assert.assertTrue("'" + connectionStatus8 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.UNACCEPTABLE_PROTOCOL_VERSION + "'", connectionStatus8.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.UNACCEPTABLE_PROTOCOL_VERSION));
    }

    @Test
    public void test13415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13415");
        org.meqantt.message.PubAckMessage pubAckMessage1 = new org.meqantt.message.PubAckMessage(100);
        pubAckMessage1.setMessageId((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage1.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13416");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 3);
        org.meqantt.message.SubAckMessage subAckMessage2 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Header header5 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header5);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header5);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header5);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header5);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header5);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header5);
        org.meqantt.message.PingReqMessage pingReqMessage12 = new org.meqantt.message.PingReqMessage(header5);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage(header5);
        java.util.List<java.lang.String> strList14 = subscribeMessage13.getTopics();
        java.util.List<java.lang.String> strList15 = subscribeMessage13.getTopics();
        org.meqantt.message.Message.Header header18 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage19 = new org.meqantt.message.ConnectMessage(header18);
        org.meqantt.message.Message.Type type20 = header18.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage21 = new org.meqantt.message.UnsubscribeMessage(header18);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage(header18);
        java.lang.String str23 = header18.toString();
        org.meqantt.message.PubCompMessage pubCompMessage24 = new org.meqantt.message.PubCompMessage(header18);
        org.meqantt.message.PubRecMessage pubRecMessage25 = new org.meqantt.message.PubRecMessage(header18);
        org.meqantt.message.QoS qoS26 = pubRecMessage25.getQos();
        subscribeMessage13.addTopic("00: 00110000 0 48\n01: 00000111 \007 7\n02: 00000000 \000 0\n03: 00000011 \003 3\n04: 01101000 h 104\n05: 01101001 i 105\n06: 00100001 ! 33\n07: 00000000 \000 0\n08: 00000000 \000 0\n", qoS26);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage3.setQos(qoS26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str23, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS26 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS26.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13417");
        byte[] byteArray2 = org.meqantt.util.FormatUtil.toMQttString("\000d\000\001\001d");
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage("hi!", byteArray2);
        java.lang.String str4 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray2);
        java.lang.String str5 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray2);
        java.lang.String str6 = org.meqantt.util.FormatUtil.toString(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str4, "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n" + "'", str5, "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\000d\000\001\001d" + "'", str6, "\000d\000\001\001d");
    }

    @Test
    public void test13418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13418");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList10 = subscribeMessage9.getTopics();
        org.meqantt.message.QoS qoS11 = subscribeMessage9.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage("", qoS11);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS11);
        org.meqantt.message.QoS qoS14 = subscribeMessage13.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList19 = subscribeMessage18.getTopics();
        org.meqantt.message.QoS qoS20 = subscribeMessage18.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage("", qoS20);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS20);
        org.meqantt.message.QoS qoS23 = subscribeMessage22.getQos();
        subscribeMessage13.addTopic("", qoS23);
        org.meqantt.message.PublishMessage publishMessage28 = new org.meqantt.message.PublishMessage("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "MQIsdp");
        org.meqantt.message.QoS qoS29 = publishMessage28.getQos();
        subscribeMessage13.addTopic("", qoS29);
        org.meqantt.message.Message.Header header32 = null;
        org.meqantt.message.ConnectMessage connectMessage33 = new org.meqantt.message.ConnectMessage(header32);
        int int34 = connectMessage33.getKeepAlive();
        connectMessage33.setWill("MQIsdp", "");
        org.meqantt.message.QoS qoS38 = connectMessage33.getWillQoS();
        byte byte39 = connectMessage33.getProtocolVersion();
        org.meqantt.message.SubAckMessage subAckMessage42 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList43 = subAckMessage42.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList44 = subAckMessage42.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList45 = subAckMessage42.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage46 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList47 = subscribeMessage46.getTopics();
        org.meqantt.message.QoS qoS48 = subscribeMessage46.getQos();
        org.meqantt.message.ConnectMessage connectMessage53 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str54 = connectMessage53.getProtocolId();
        org.meqantt.message.QoS qoS55 = connectMessage53.getQos();
        subscribeMessage46.addTopic("", qoS55);
        subAckMessage42.addQoS(qoS55);
        connectMessage33.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 01100100 d 100\n01: 00000000 \000 0\n", qoS55, false);
        subscribeMessage13.addTopic("\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS55);
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n", qoS55);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage5.setQos(qoS55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS23 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS23.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS29 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS29.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + qoS38 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS38.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 3 + "'", byte39 == (byte) 3);
        org.junit.Assert.assertNull(qoSList43);
        org.junit.Assert.assertNull(qoSList44);
        org.junit.Assert.assertNull(qoSList45);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + qoS48 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS48.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MQIsdp" + "'", str54, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS55 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS55.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13419");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage9 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Header header14 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type15 = header14.getType();
        org.meqantt.message.Message.Type type16 = header14.getType();
        org.meqantt.message.SubAckMessage subAckMessage17 = new org.meqantt.message.SubAckMessage(header14);
        org.meqantt.message.PingReqMessage pingReqMessage18 = new org.meqantt.message.PingReqMessage(header14);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage(header14);
        org.meqantt.message.ConnectMessage connectMessage20 = new org.meqantt.message.ConnectMessage(header14);
        org.meqantt.message.PingReqMessage pingReqMessage21 = new org.meqantt.message.PingReqMessage(header14);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage(header14);
        boolean boolean23 = subscribeMessage22.isDup();
        org.meqantt.message.QoS qoS24 = subscribeMessage22.getQos();
        org.meqantt.message.Message.Type type25 = subscribeMessage22.getType();
        subscribeMessage22.setMessageId((int) (byte) 1);
        org.meqantt.message.Message.Header header29 = null;
        org.meqantt.message.ConnectMessage connectMessage30 = new org.meqantt.message.ConnectMessage(header29);
        int int31 = connectMessage30.getKeepAlive();
        connectMessage30.setWill("MQIsdp", "");
        java.lang.String str35 = connectMessage30.getWillTopic();
        org.meqantt.message.QoS qoS36 = connectMessage30.getWillQoS();
        subscribeMessage22.addTopic("\ufffd\003\000\000\000", qoS36);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("hi!", qoS36);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage11.setQos(qoS36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(type25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "MQIsdp" + "'", str35, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13420");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage8 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage13 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage14 = new org.meqantt.message.PubCompMessage(header1);
        int int15 = pubCompMessage14.getMessageId();
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage14.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test13421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13421");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean5 = connectMessage4.isRetained();
        boolean boolean6 = connectMessage4.hasWill();
        java.lang.String str7 = connectMessage4.getWill();
        boolean boolean8 = connectMessage4.hasWill();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13422");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage5 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage8 = new org.meqantt.message.PubRecMessage(header1);
    }

    @Test
    public void test13423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13423");
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage12 = new org.meqantt.message.PublishMessage("", byteArray11);
        java.lang.String str13 = publishMessage12.getDataAsString();
        byte[] byteArray14 = publishMessage12.getData();
        org.meqantt.message.PublishMessage publishMessage15 = new org.meqantt.message.PublishMessage("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", byteArray14);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", byteArray14);
        java.lang.String str17 = publishMessage16.getTopic();
        org.meqantt.message.QoS qoS18 = publishMessage16.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", qoS18);
        java.util.List<org.meqantt.message.QoS> qoSList21 = subscribeMessage20.getTopicQoSs();
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\000d\000\001\001d" + "'", str13, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str17, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList21);
    }

    @Test
    public void test13424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13424");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage6 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage8 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage9 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.util.List<java.lang.String> strList10 = unsubscribeMessage9.getTopics();
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test13425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13425");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getProtocolId();
        int int5 = connectMessage3.getKeepAlive();
        byte byte6 = connectMessage3.getProtocolVersion();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 3 + "'", byte6 == (byte) 3);
    }

    @Test
    public void test13426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13426");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.lang.String str9 = header1.toString();
        org.meqantt.message.ConnAckMessage connAckMessage10 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus11 = connAckMessage10.getStatus();
        org.meqantt.message.QoS qoS12 = connAckMessage10.getQos();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str9, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(connectionStatus11);
        org.junit.Assert.assertTrue("'" + qoS12 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS12.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13427");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        java.lang.String str3 = connectMessage1.getClientId();
        org.meqantt.message.QoS qoS4 = connectMessage1.getWillQoS();
        boolean boolean5 = connectMessage1.isCleanSession();
        boolean boolean6 = connectMessage1.hasPassword();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(qoS4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13428");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage4 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage11 = new org.meqantt.message.UnsubscribeMessage("\000\000");
        byte[] byteArray12 = unsubscribeMessage11.toBytes();
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage("hi!", byteArray12);
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", byteArray12);
        publishMessage14.setMessageId((int) (byte) -1);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage28 = new org.meqantt.message.PublishMessage("", byteArray27);
        java.lang.String str29 = publishMessage28.getDataAsString();
        byte[] byteArray30 = publishMessage28.getData();
        org.meqantt.message.PublishMessage publishMessage31 = new org.meqantt.message.PublishMessage("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", byteArray30);
        org.meqantt.message.PublishMessage publishMessage32 = new org.meqantt.message.PublishMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", byteArray30);
        java.lang.String str33 = publishMessage32.getTopic();
        org.meqantt.message.QoS qoS34 = publishMessage32.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", qoS34);
        org.meqantt.message.Message.Header header39 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type40 = header39.getType();
        org.meqantt.message.Message.Type type41 = header39.getType();
        org.meqantt.message.SubAckMessage subAckMessage42 = new org.meqantt.message.SubAckMessage(header39);
        org.meqantt.message.PingReqMessage pingReqMessage43 = new org.meqantt.message.PingReqMessage(header39);
        org.meqantt.message.PingReqMessage pingReqMessage44 = new org.meqantt.message.PingReqMessage(header39);
        org.meqantt.message.DisconnectMessage disconnectMessage45 = new org.meqantt.message.DisconnectMessage(header39);
        org.meqantt.message.SubAckMessage subAckMessage46 = new org.meqantt.message.SubAckMessage(header39);
        org.meqantt.message.UnsubAckMessage unsubAckMessage47 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS48 = unsubAckMessage47.getQos();
        subAckMessage46.addQoS(qoS48);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type51 = subscribeMessage50.getType();
        subscribeMessage50.setDup(false);
        subscribeMessage50.setMessageId((int) (short) 0);
        java.util.List<java.lang.String> strList56 = subscribeMessage50.getTopics();
        org.meqantt.message.SubscribeMessage subscribeMessage57 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList58 = subscribeMessage57.getTopics();
        org.meqantt.message.QoS qoS59 = subscribeMessage57.getQos();
        org.meqantt.message.ConnectMessage connectMessage64 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str65 = connectMessage64.getProtocolId();
        org.meqantt.message.QoS qoS66 = connectMessage64.getQos();
        subscribeMessage57.addTopic("", qoS66);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage69 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList70 = unsubscribeMessage69.getTopics();
        org.meqantt.message.Message.Type type71 = unsubscribeMessage69.getType();
        java.util.List<java.lang.String> strList72 = unsubscribeMessage69.getTopics();
        org.meqantt.message.QoS qoS73 = unsubscribeMessage69.getQos();
        subscribeMessage57.setQos(qoS73);
        subscribeMessage50.setQos(qoS73);
        subAckMessage46.addQoS(qoS73);
        org.meqantt.message.SubscribeMessage subscribeMessage77 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS73);
        subscribeMessage35.addTopic("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n", qoS73);
        publishMessage14.setQos(qoS73);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage7.setQos(qoS73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-94, 8, 0, 0, 0, 4, -64, -128, -64, -128]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\000d\000\001\001d" + "'", str29, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str33, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(type40);
        org.junit.Assert.assertNull(type41);
        org.junit.Assert.assertTrue("'" + qoS48 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS48.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type51.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + qoS59 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS59.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "MQIsdp" + "'", str65, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS66 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS66.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type71.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + qoS73 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS73.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13429");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.UnsubAckMessage unsubAckMessage2 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage3 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        java.lang.String str6 = header1.toString();
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type5.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str6, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
    }

    @Test
    public void test13430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13430");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        org.meqantt.MqttListener mqttListener5 = null;
        nettyClient1.setListener(mqttListener5);
        nettyClient1.disconnect();
        org.meqantt.MqttListener mqttListener8 = null;
        nettyClient1.setListener(mqttListener8);
        org.meqantt.MqttListener mqttListener10 = null;
        nettyClient1.setListener(mqttListener10);
        nettyClient1.connect("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", (int) (byte) 10);
        nettyClient1.connect("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", (int) (short) 10);
    }

    @Test
    public void test13431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13431");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage8 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage9.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test13432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13432");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage9 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Type type10 = pubRecMessage9.getType();
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage9.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type10);
    }

    @Test
    public void test13433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13433");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.subscribe("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener9 = null;
        nettyClient1.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        org.meqantt.MqttListener mqttListener13 = null;
        nettyClient1.setListener(mqttListener13);
        nettyClient1.subscribe("\000d\000\001\001d");
        nettyClient1.disconnect();
        nettyClient1.connect("00: 00000000 \000 0\n01: 00000000 \000 0\n", 1);
        nettyClient1.unsubscribe("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
    }

    @Test
    public void test13434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13434");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.QoS qoS5 = pubRecMessage4.getQos();
        boolean boolean6 = pubRecMessage4.isRetained();
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage4.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + qoS5 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS5.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test13435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13435");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("\000\ufffd\ufffd\023\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d");
    }

    @Test
    public void test13436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13436");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage11 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage12 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage13 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Header header15 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage16 = new org.meqantt.message.PingReqMessage(header15);
        org.meqantt.message.PubCompMessage pubCompMessage17 = new org.meqantt.message.PubCompMessage(header15);
        org.meqantt.message.UnsubAckMessage unsubAckMessage18 = new org.meqantt.message.UnsubAckMessage(header15);
        org.meqantt.message.PingRespMessage pingRespMessage19 = new org.meqantt.message.PingRespMessage(header15);
        org.meqantt.message.PubCompMessage pubCompMessage20 = new org.meqantt.message.PubCompMessage(header15);
        org.meqantt.message.ConnAckMessage connAckMessage21 = new org.meqantt.message.ConnAckMessage(header15);
        org.meqantt.message.PingReqMessage pingReqMessage22 = new org.meqantt.message.PingReqMessage(header15);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage(header15);
        java.util.List<java.lang.String> strList24 = subscribeMessage23.getTopics();
        java.util.List<java.lang.String> strList25 = subscribeMessage23.getTopics();
        org.meqantt.message.Message.Header header28 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage29 = new org.meqantt.message.ConnectMessage(header28);
        org.meqantt.message.Message.Type type30 = header28.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage31 = new org.meqantt.message.UnsubscribeMessage(header28);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage(header28);
        java.lang.String str33 = header28.toString();
        org.meqantt.message.PubCompMessage pubCompMessage34 = new org.meqantt.message.PubCompMessage(header28);
        org.meqantt.message.PubRecMessage pubRecMessage35 = new org.meqantt.message.PubRecMessage(header28);
        org.meqantt.message.QoS qoS36 = pubRecMessage35.getQos();
        subscribeMessage23.addTopic("00: 00110000 0 48\n01: 00000111 \007 7\n02: 00000000 \000 0\n03: 00000011 \003 3\n04: 01101000 h 104\n05: 01101001 i 105\n06: 00100001 ! 33\n07: 00000000 \000 0\n08: 00000000 \000 0\n", qoS36);
        subAckMessage13.addQoS(qoS36);
        org.meqantt.message.QoS qoS39 = null;
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage13.setQos(qoS39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNull(type30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str33, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13437");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.setDup(false);
        java.util.List<java.lang.String> strList7 = unsubscribeMessage1.getTopics();
        java.util.List<java.lang.String> strList8 = unsubscribeMessage1.getTopics();
        java.util.List<java.lang.String> strList9 = unsubscribeMessage1.getTopics();
        boolean boolean10 = unsubscribeMessage1.isDup();
        unsubscribeMessage1.addTopic("\000\ufffd\ufffd 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n");
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13438");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        byte[] byteArray3 = publishMessage2.getData();
        java.lang.String str4 = publishMessage2.getDataAsString();
        byte[] byteArray5 = publishMessage2.getData();
        java.lang.String str6 = org.meqantt.util.FormatUtil.toString(byteArray5);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str4, "\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str6, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
    }

    @Test
    public void test13439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13439");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str9 = header1.toString();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type12 = subscribeMessage11.getType();
        org.meqantt.message.QoS qoS15 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage("", qoS15);
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList19 = subscribeMessage18.getTopics();
        org.meqantt.message.QoS qoS20 = subscribeMessage18.getQos();
        subscribeMessage16.addTopic("", qoS20);
        subscribeMessage11.addTopic("MQIsdp", qoS20);
        org.meqantt.message.UnsubAckMessage unsubAckMessage24 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS25 = unsubAckMessage24.getQos();
        subscribeMessage11.addTopic("", qoS25);
        java.util.List<org.meqantt.message.QoS> qoSList27 = subscribeMessage11.getTopicQoSs();
        java.util.List<java.lang.String> strList28 = subscribeMessage11.getTopics();
        org.meqantt.message.Message.Header header31 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage(header31);
        byte byte33 = connectMessage32.getProtocolVersion();
        boolean boolean34 = connectMessage32.hasUsername();
        java.lang.String str35 = connectMessage32.getWill();
        boolean boolean36 = connectMessage32.isRetained();
        org.meqantt.message.SubscribeMessage subscribeMessage39 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList40 = subscribeMessage39.getTopics();
        org.meqantt.message.QoS qoS41 = subscribeMessage39.getQos();
        connectMessage32.setWill("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", qoS41, false);
        org.meqantt.message.QoS qoS44 = connectMessage32.getWillQoS();
        subscribeMessage11.addTopic("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS44);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage10.setQos(qoS44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str9, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type12.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) 3 + "'", byte33 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + qoS41 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS41.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS44 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS44.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13440");
        org.meqantt.message.SubscribeMessage subscribeMessage0 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList1 = subscribeMessage0.getTopics();
        org.meqantt.message.QoS qoS2 = subscribeMessage0.getQos();
        org.meqantt.message.QoS qoS4 = null;
        subscribeMessage0.addTopic("", qoS4);
        java.util.List<java.lang.String> strList6 = subscribeMessage0.getTopics();
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage();
        boolean boolean8 = connectMessage7.hasWill();
        connectMessage7.setWill("", "\000\003hi!");
        boolean boolean12 = connectMessage7.isCleanSession();
        org.meqantt.message.QoS qoS13 = connectMessage7.getWillQoS();
        org.meqantt.message.Message.Header header17 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type18 = header17.getType();
        org.meqantt.message.Message.Type type19 = header17.getType();
        org.meqantt.message.SubAckMessage subAckMessage20 = new org.meqantt.message.SubAckMessage(header17);
        org.meqantt.message.PingReqMessage pingReqMessage21 = new org.meqantt.message.PingReqMessage(header17);
        org.meqantt.message.PingReqMessage pingReqMessage22 = new org.meqantt.message.PingReqMessage(header17);
        org.meqantt.message.DisconnectMessage disconnectMessage23 = new org.meqantt.message.DisconnectMessage(header17);
        org.meqantt.message.SubAckMessage subAckMessage24 = new org.meqantt.message.SubAckMessage(header17);
        java.util.List<org.meqantt.message.QoS> qoSList25 = subAckMessage24.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList26 = subAckMessage24.getGrantedQoSs();
        org.meqantt.message.Message.Header header27 = null;
        org.meqantt.message.ConnectMessage connectMessage28 = new org.meqantt.message.ConnectMessage(header27);
        boolean boolean29 = connectMessage28.isWillRetained();
        boolean boolean30 = connectMessage28.isWillRetained();
        connectMessage28.setWill("", "MQIsdp");
        boolean boolean34 = connectMessage28.isWillRetained();
        java.lang.String str35 = connectMessage28.getClientId();
        java.lang.String str36 = connectMessage28.getWill();
        java.lang.String str37 = connectMessage28.getUsername();
        boolean boolean38 = connectMessage28.isCleanSession();
        org.meqantt.message.QoS qoS39 = connectMessage28.getWillQoS();
        subAckMessage24.addQoS(qoS39);
        org.meqantt.message.ConnectMessage connectMessage44 = new org.meqantt.message.ConnectMessage("\000\000", false, (int) (short) -1);
        org.meqantt.message.ConnectMessage connectMessage55 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str56 = connectMessage55.getUsername();
        org.meqantt.message.QoS qoS60 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("", qoS60);
        org.meqantt.message.SubscribeMessage subscribeMessage63 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList64 = subscribeMessage63.getTopics();
        org.meqantt.message.QoS qoS65 = subscribeMessage63.getQos();
        subscribeMessage61.addTopic("", qoS65);
        connectMessage55.setWill("", "\000d\000\001\001d", qoS65, true);
        org.meqantt.message.SubscribeMessage subscribeMessage69 = new org.meqantt.message.SubscribeMessage("hi!", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage70 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage71 = new org.meqantt.message.SubscribeMessage("", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage72 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage73 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS65);
        connectMessage44.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS65, false);
        subAckMessage24.addQoS(qoS65);
        connectMessage7.setWill("", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS65, false);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage0.setQos(qoS65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + qoS2 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS2.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNull(qoSList25);
        org.junit.Assert.assertNull(qoSList26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "MQIsdp" + "'", str36, "MQIsdp");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + qoS39 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS39.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + qoS65 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS65.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13441");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str5 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage8.setDup(false);
        java.util.List<java.lang.String> strList11 = unsubscribeMessage8.getTopics();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test13442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13442");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 0);
        org.meqantt.message.Message.Header header13 = null;
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage(header13);
        java.lang.String str15 = connectMessage14.getClientId();
        connectMessage14.setWill("hi!", "");
        org.meqantt.message.QoS qoS19 = connectMessage14.getWillQoS();
        connectMessage10.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "", qoS19, true);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage6.setQos(qoS19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13443");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage6.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13444");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage9 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS10 = unsubAckMessage9.getQos();
        subAckMessage8.addQoS(qoS10);
        org.meqantt.message.ConnectMessage connectMessage16 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean17 = connectMessage16.hasWill();
        java.lang.String str18 = connectMessage16.getWill();
        org.meqantt.message.Message.Header header21 = null;
        org.meqantt.message.ConnectMessage connectMessage22 = new org.meqantt.message.ConnectMessage(header21);
        boolean boolean23 = connectMessage22.isWillRetained();
        boolean boolean24 = connectMessage22.isWillRetained();
        java.lang.String str25 = connectMessage22.getUsername();
        org.meqantt.message.QoS qoS29 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("", qoS29);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList33 = subscribeMessage32.getTopics();
        org.meqantt.message.QoS qoS34 = subscribeMessage32.getQos();
        subscribeMessage30.addTopic("", qoS34);
        connectMessage22.setWill("hi!", "", qoS34, false);
        connectMessage16.setWill("MQIsdp", "hi!", qoS34, false);
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS34);
        subAckMessage8.addQoS(qoS34);
        org.meqantt.message.Message.Type type42 = subAckMessage8.getType();
        org.meqantt.message.Message.Header header44 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage45 = new org.meqantt.message.PingReqMessage(header44);
        org.meqantt.message.PubCompMessage pubCompMessage46 = new org.meqantt.message.PubCompMessage(header44);
        org.meqantt.message.PingReqMessage pingReqMessage47 = new org.meqantt.message.PingReqMessage(header44);
        org.meqantt.message.PingReqMessage pingReqMessage48 = new org.meqantt.message.PingReqMessage(header44);
        org.meqantt.message.PingReqMessage pingReqMessage49 = new org.meqantt.message.PingReqMessage(header44);
        java.lang.String str50 = header44.toString();
        org.meqantt.message.SubAckMessage subAckMessage51 = new org.meqantt.message.SubAckMessage(header44);
        org.meqantt.message.QoS qoS52 = null;
        subAckMessage51.addQoS(qoS52);
        org.meqantt.message.ConnectMessage connectMessage57 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean58 = connectMessage57.hasWill();
        java.lang.String str59 = connectMessage57.getWill();
        org.meqantt.message.Message.Header header62 = null;
        org.meqantt.message.ConnectMessage connectMessage63 = new org.meqantt.message.ConnectMessage(header62);
        boolean boolean64 = connectMessage63.isWillRetained();
        boolean boolean65 = connectMessage63.isWillRetained();
        java.lang.String str66 = connectMessage63.getUsername();
        org.meqantt.message.QoS qoS70 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage71 = new org.meqantt.message.SubscribeMessage("", qoS70);
        org.meqantt.message.SubscribeMessage subscribeMessage73 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList74 = subscribeMessage73.getTopics();
        org.meqantt.message.QoS qoS75 = subscribeMessage73.getQos();
        subscribeMessage71.addTopic("", qoS75);
        connectMessage63.setWill("hi!", "", qoS75, false);
        connectMessage57.setWill("MQIsdp", "hi!", qoS75, false);
        subAckMessage51.addQoS(qoS75);
        subAckMessage8.addQoS(qoS75);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage8.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(type42);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str50, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + qoS75 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS75.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13445");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        boolean boolean3 = connectMessage1.isCleanSession();
        connectMessage1.setWill("00: 00000000 \000 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", "\000\003hi!");
        java.lang.String str7 = connectMessage1.getPassword();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.write(outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test13446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13446");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        java.lang.String str7 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean9 = connectMessage8.isRetained();
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type2.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str4, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str7, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13447");
        org.meqantt.SocketClient socketClient1 = new org.meqantt.SocketClient("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        // The following exception was thrown during execution in test generation
        try {
            socketClient1.connect("\000<Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: ?<Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13448");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("MQIsdp", (int) (byte) 0);
        org.meqantt.MqttListener mqttListener12 = null;
        nettyClient1.setListener(mqttListener12);
        nettyClient1.ping();
        nettyClient1.disconnect();
        nettyClient1.publish("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "MQIsdp");
        nettyClient1.ping();
        nettyClient1.disconnect();
    }

    @Test
    public void test13449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13449");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        boolean boolean3 = connectMessage1.isWillRetained();
        int int4 = connectMessage1.getKeepAlive();
        java.lang.String str5 = connectMessage1.getWill();
        boolean boolean6 = connectMessage1.hasWill();
        byte byte7 = connectMessage1.getProtocolVersion();
        boolean boolean8 = connectMessage1.isCleanSession();
        java.lang.String str9 = connectMessage1.getWill();
        org.meqantt.message.Message.Header header13 = null;
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage(header13);
        boolean boolean15 = connectMessage14.isWillRetained();
        boolean boolean16 = connectMessage14.isWillRetained();
        connectMessage14.setWill("", "MQIsdp");
        boolean boolean20 = connectMessage14.isWillRetained();
        java.lang.String str21 = connectMessage14.getClientId();
        java.lang.String str22 = connectMessage14.getWill();
        java.lang.String str23 = connectMessage14.getUsername();
        boolean boolean24 = connectMessage14.isCleanSession();
        org.meqantt.message.QoS qoS25 = connectMessage14.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("\ufffd\ufffd\001\000\000\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\000", qoS25);
        connectMessage1.setWill("\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "00: 00110000 0 48\n01: 00010010 \022 18\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000000 \000 0\n11: 00001000 \b 8\n12: 11000000 \300 192\n13: 10000000 \200 128\n14: 01100100 d 100\n15: 11000000 \300 192\n16: 10000000 \200 128\n17: 00000001 \001 1\n18: 00000001 \001 1\n19: 01100100 d 100\n", qoS25, true);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 3 + "'", byte7 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MQIsdp" + "'", str22, "MQIsdp");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13450");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
    }

    @Test
    public void test13451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13451");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage3 = new org.meqantt.message.UnsubscribeMessage("\000\000");
        byte[] byteArray4 = unsubscribeMessage3.toBytes();
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage("hi!", byteArray4);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", byteArray4);
        publishMessage6.setMessageId((int) (byte) -1);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage20 = new org.meqantt.message.PublishMessage("", byteArray19);
        java.lang.String str21 = publishMessage20.getDataAsString();
        byte[] byteArray22 = publishMessage20.getData();
        org.meqantt.message.PublishMessage publishMessage23 = new org.meqantt.message.PublishMessage("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", byteArray22);
        org.meqantt.message.PublishMessage publishMessage24 = new org.meqantt.message.PublishMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", byteArray22);
        java.lang.String str25 = publishMessage24.getTopic();
        org.meqantt.message.QoS qoS26 = publishMessage24.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", qoS26);
        org.meqantt.message.Message.Header header31 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type32 = header31.getType();
        org.meqantt.message.Message.Type type33 = header31.getType();
        org.meqantt.message.SubAckMessage subAckMessage34 = new org.meqantt.message.SubAckMessage(header31);
        org.meqantt.message.PingReqMessage pingReqMessage35 = new org.meqantt.message.PingReqMessage(header31);
        org.meqantt.message.PingReqMessage pingReqMessage36 = new org.meqantt.message.PingReqMessage(header31);
        org.meqantt.message.DisconnectMessage disconnectMessage37 = new org.meqantt.message.DisconnectMessage(header31);
        org.meqantt.message.SubAckMessage subAckMessage38 = new org.meqantt.message.SubAckMessage(header31);
        org.meqantt.message.UnsubAckMessage unsubAckMessage39 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS40 = unsubAckMessage39.getQos();
        subAckMessage38.addQoS(qoS40);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type43 = subscribeMessage42.getType();
        subscribeMessage42.setDup(false);
        subscribeMessage42.setMessageId((int) (short) 0);
        java.util.List<java.lang.String> strList48 = subscribeMessage42.getTopics();
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList50 = subscribeMessage49.getTopics();
        org.meqantt.message.QoS qoS51 = subscribeMessage49.getQos();
        org.meqantt.message.ConnectMessage connectMessage56 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str57 = connectMessage56.getProtocolId();
        org.meqantt.message.QoS qoS58 = connectMessage56.getQos();
        subscribeMessage49.addTopic("", qoS58);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage61 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList62 = unsubscribeMessage61.getTopics();
        org.meqantt.message.Message.Type type63 = unsubscribeMessage61.getType();
        java.util.List<java.lang.String> strList64 = unsubscribeMessage61.getTopics();
        org.meqantt.message.QoS qoS65 = unsubscribeMessage61.getQos();
        subscribeMessage49.setQos(qoS65);
        subscribeMessage42.setQos(qoS65);
        subAckMessage38.addQoS(qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage69 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS65);
        subscribeMessage27.addTopic("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n", qoS65);
        publishMessage6.setQos(qoS65);
        publishMessage6.setMessageId(97);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-94, 8, 0, 0, 0, 4, -64, -128, -64, -128]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\000d\000\001\001d" + "'", str21, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str25, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS26 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS26.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(type32);
        org.junit.Assert.assertNull(type33);
        org.junit.Assert.assertTrue("'" + qoS40 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS40.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type43.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + qoS51 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS51.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "MQIsdp" + "'", str57, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS58 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS58.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type63.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + qoS65 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS65.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13452");
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("00: 10000000 \200 128\n01: 00001011 \013 11\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000110 \006 6\n06: 01001101 M 77\n07: 01010001 Q 81\n08: 01001001 I 73\n09: 01110011 s 115\n10: 01100100 d 100\n11: 01110000 p 112\n12: 00000000 \000 0\n", true, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Client id cannot be null and must be at most 23 characters long: 00: 10000000 ? 128?01: 00001011 ? 11?02: 00000000 ? 0?03: 00000000 ? 0?04: 00000000 ? 0?05: 00000110 ? 6?06: 01001101 M 77?07: 01010001 Q 81?08: 01001001 I 73?09: 01110011 s 115?10: 01100100 d 100?11: 01110000 p 112?12: 00000000 ? 0?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13453");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage6 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
    }

    @Test
    public void test13454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13454");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        connectMessage3.setCredentials("\000d\000\001\001d");
        connectMessage3.setWill("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        byte byte32 = connectMessage3.getProtocolVersion();
        boolean boolean33 = connectMessage3.hasWill();
        java.lang.String str34 = connectMessage3.getPassword();
        java.lang.String str35 = connectMessage3.getWillTopic();
        boolean boolean36 = connectMessage3.isWillRetained();
        boolean boolean37 = connectMessage3.hasWill();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 3 + "'", byte32 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd" + "'", str35, "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test13455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13455");
        org.meqantt.message.PubAckMessage pubAckMessage1 = new org.meqantt.message.PubAckMessage((int) (short) 10);
        int int2 = pubAckMessage1.getMessageId();
        int int3 = pubAckMessage1.getMessageId();
        pubAckMessage1.setMessageId((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage1.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test13456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13456");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        boolean boolean3 = connectMessage1.hasUsername();
        java.lang.String str4 = connectMessage1.getProtocolId();
        boolean boolean5 = connectMessage1.hasWill();
        boolean boolean6 = connectMessage1.hasWill();
        boolean boolean7 = connectMessage1.hasWill();
        java.lang.String str8 = connectMessage1.getPassword();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test13457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13457");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 0);
        java.lang.String str4 = connectMessage3.getProtocolId();
        java.lang.String str5 = connectMessage3.getUsername();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test13458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13458");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("00: 00010000 \020 16\n01: 00010100 \024 20\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000110 \006 6\n16: 01001101 M 77\n17: 01010001 Q 81\n18: 01001001 I 73\n19: 01110011 s 115\n20: 01100100 d 100\n21: 01110000 p 112\n");
    }

    @Test
    public void test13459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13459");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage7.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13460");
        org.meqantt.message.SubscribeMessage subscribeMessage0 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList1 = subscribeMessage0.getTopics();
        org.meqantt.message.QoS qoS2 = subscribeMessage0.getQos();
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str8 = connectMessage7.getProtocolId();
        org.meqantt.message.QoS qoS9 = connectMessage7.getQos();
        subscribeMessage0.addTopic("", qoS9);
        java.util.List<java.lang.String> strList11 = subscribeMessage0.getTopics();
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str22 = connectMessage21.getUsername();
        org.meqantt.message.QoS qoS26 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList30 = subscribeMessage29.getTopics();
        org.meqantt.message.QoS qoS31 = subscribeMessage29.getQos();
        subscribeMessage27.addTopic("", qoS31);
        connectMessage21.setWill("", "\000d\000\001\001d", qoS31, true);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage("hi!", qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage("", qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList41 = subscribeMessage40.getTopics();
        org.meqantt.message.ConnectMessage connectMessage46 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str47 = connectMessage46.getProtocolId();
        org.meqantt.message.QoS qoS48 = connectMessage46.getQos();
        subscribeMessage40.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS48);
        subscribeMessage38.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS48);
        org.meqantt.message.ConnectMessage connectMessage55 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str56 = connectMessage55.getProtocolId();
        org.meqantt.message.QoS qoS57 = connectMessage55.getQos();
        subscribeMessage38.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS57);
        org.meqantt.message.SubscribeMessage subscribeMessage59 = new org.meqantt.message.SubscribeMessage("00: 00010000 \020 16\n01: 00001110 \016 14\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n", qoS57);
        subscribeMessage0.addTopic("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", qoS57);
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + qoS2 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS2.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MQIsdp" + "'", str8, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS9 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS9.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "MQIsdp" + "'", str47, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS48 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS48.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "MQIsdp" + "'", str56, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS57 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS57.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13461");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        connectMessage2.setWill("\000\000", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        boolean boolean6 = connectMessage2.isCleanSession();
        byte byte7 = connectMessage2.getProtocolVersion();
        connectMessage2.setCredentials("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        byte byte10 = connectMessage2.getProtocolVersion();
        connectMessage2.setCredentials("\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "");
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectMessage2.write(outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 3 + "'", byte7 == (byte) 3);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 3 + "'", byte10 == (byte) 3);
    }

    @Test
    public void test13462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13462");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000\004\001\003\003\001", "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd");
        byte[] byteArray3 = publishMessage2.getData();
        java.lang.String str4 = org.meqantt.util.FormatUtil.toString(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 23, -17, -65, -67, 8, -64, -128, -64, -128, -64, -128, 4, -17, -65, -67, -17, -65, -67, -17, -65, -67, -17, -65, -67]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd" + "'", str4, "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd");
    }

    @Test
    public void test13463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13463");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList11 = subscribeMessage10.getTopics();
        org.meqantt.message.QoS qoS12 = subscribeMessage10.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage("", qoS12);
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS12);
        org.meqantt.message.QoS qoS15 = subscribeMessage14.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("", qoS21);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS21);
        org.meqantt.message.QoS qoS24 = subscribeMessage23.getQos();
        subscribeMessage14.addTopic("", qoS24);
        org.meqantt.message.Message.Type type26 = subscribeMessage14.getType();
        java.util.List<org.meqantt.message.QoS> qoSList27 = subscribeMessage14.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str33 = connectMessage32.getUsername();
        org.meqantt.message.QoS qoS37 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("", qoS37);
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList41 = subscribeMessage40.getTopics();
        org.meqantt.message.QoS qoS42 = subscribeMessage40.getQos();
        subscribeMessage38.addTopic("", qoS42);
        connectMessage32.setWill("", "\000d\000\001\001d", qoS42, true);
        java.lang.String str46 = connectMessage32.getPassword();
        boolean boolean47 = connectMessage32.isWillRetained();
        org.meqantt.message.QoS qoS48 = connectMessage32.getWillQoS();
        subscribeMessage14.addTopic("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS48);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage7.setQos(qoS48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + qoS12 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS12.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type26.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(qoSList27);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + qoS42 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS42.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + qoS48 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS48.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13464");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage10 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage12 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage13 = new org.meqantt.message.PubRecMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13465");
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage("", byteArray10);
        java.lang.String str12 = publishMessage11.getDataAsString();
        byte[] byteArray13 = publishMessage11.getData();
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", byteArray13);
        org.meqantt.message.PublishMessage publishMessage15 = new org.meqantt.message.PublishMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", byteArray13);
        java.lang.String str16 = publishMessage15.getTopic();
        org.meqantt.message.QoS qoS17 = publishMessage15.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", qoS17);
        org.meqantt.message.Message.Header header22 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type23 = header22.getType();
        org.meqantt.message.Message.Type type24 = header22.getType();
        org.meqantt.message.SubAckMessage subAckMessage25 = new org.meqantt.message.SubAckMessage(header22);
        org.meqantt.message.PingReqMessage pingReqMessage26 = new org.meqantt.message.PingReqMessage(header22);
        org.meqantt.message.PingReqMessage pingReqMessage27 = new org.meqantt.message.PingReqMessage(header22);
        org.meqantt.message.DisconnectMessage disconnectMessage28 = new org.meqantt.message.DisconnectMessage(header22);
        org.meqantt.message.SubAckMessage subAckMessage29 = new org.meqantt.message.SubAckMessage(header22);
        org.meqantt.message.UnsubAckMessage unsubAckMessage30 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS31 = unsubAckMessage30.getQos();
        subAckMessage29.addQoS(qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type34 = subscribeMessage33.getType();
        subscribeMessage33.setDup(false);
        subscribeMessage33.setMessageId((int) (short) 0);
        java.util.List<java.lang.String> strList39 = subscribeMessage33.getTopics();
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList41 = subscribeMessage40.getTopics();
        org.meqantt.message.QoS qoS42 = subscribeMessage40.getQos();
        org.meqantt.message.ConnectMessage connectMessage47 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str48 = connectMessage47.getProtocolId();
        org.meqantt.message.QoS qoS49 = connectMessage47.getQos();
        subscribeMessage40.addTopic("", qoS49);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage52 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList53 = unsubscribeMessage52.getTopics();
        org.meqantt.message.Message.Type type54 = unsubscribeMessage52.getType();
        java.util.List<java.lang.String> strList55 = unsubscribeMessage52.getTopics();
        org.meqantt.message.QoS qoS56 = unsubscribeMessage52.getQos();
        subscribeMessage40.setQos(qoS56);
        subscribeMessage33.setQos(qoS56);
        subAckMessage29.addQoS(qoS56);
        org.meqantt.message.SubscribeMessage subscribeMessage60 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS56);
        subscribeMessage18.addTopic("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n", qoS56);
        org.meqantt.message.ConnectMessage connectMessage65 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean66 = connectMessage65.hasWill();
        java.lang.String str67 = connectMessage65.getWill();
        org.meqantt.message.Message.Header header70 = null;
        org.meqantt.message.ConnectMessage connectMessage71 = new org.meqantt.message.ConnectMessage(header70);
        boolean boolean72 = connectMessage71.isWillRetained();
        boolean boolean73 = connectMessage71.isWillRetained();
        java.lang.String str74 = connectMessage71.getUsername();
        org.meqantt.message.QoS qoS78 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage79 = new org.meqantt.message.SubscribeMessage("", qoS78);
        org.meqantt.message.SubscribeMessage subscribeMessage81 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList82 = subscribeMessage81.getTopics();
        org.meqantt.message.QoS qoS83 = subscribeMessage81.getQos();
        subscribeMessage79.addTopic("", qoS83);
        connectMessage71.setWill("hi!", "", qoS83, false);
        connectMessage65.setWill("MQIsdp", "hi!", qoS83, false);
        byte byte89 = connectMessage65.getProtocolVersion();
        boolean boolean90 = connectMessage65.hasWill();
        int int91 = connectMessage65.getKeepAlive();
        java.lang.String str92 = connectMessage65.getPassword();
        boolean boolean93 = connectMessage65.hasUsername();
        org.meqantt.message.QoS qoS94 = connectMessage65.getQos();
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage18.setQos(qoS94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\000d\000\001\001d" + "'", str12, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str16, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(type23);
        org.junit.Assert.assertNull(type24);
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type34.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + qoS42 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS42.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "MQIsdp" + "'", str48, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS49 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS49.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type54.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + qoS56 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS56.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertTrue("'" + qoS83 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS83.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte89 + "' != '" + (byte) 3 + "'", byte89 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + qoS94 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS94.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13466");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        nettyClient1.unsubscribe("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        nettyClient1.disconnect();
        nettyClient1.subscribe("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        nettyClient1.connect("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", (int) (short) 1);
        nettyClient1.disconnect();
    }

    @Test
    public void test13467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13467");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage6.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13468");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        connectMessage1.setCredentials("");
        java.lang.String str8 = connectMessage1.getClientId();
        org.meqantt.message.QoS qoS9 = connectMessage1.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList15 = subscribeMessage14.getTopics();
        org.meqantt.message.QoS qoS16 = subscribeMessage14.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS16);
        org.meqantt.message.QoS qoS19 = subscribeMessage18.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList24 = subscribeMessage23.getTopics();
        org.meqantt.message.QoS qoS25 = subscribeMessage23.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("", qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS25);
        org.meqantt.message.QoS qoS28 = subscribeMessage27.getQos();
        subscribeMessage18.addTopic("", qoS28);
        connectMessage1.setWill("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS28, false);
        java.lang.String str32 = connectMessage1.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(qoS9);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test13469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13469");
        byte[] byteArray4 = org.meqantt.util.FormatUtil.toMQttString("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", byteArray4);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", byteArray4);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage("", byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 77, 79, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 102, 97, 108, 115, 101, 93]");
    }

    @Test
    public void test13470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13470");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage10 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean12 = connectMessage11.hasUsername();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13471");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("\000\000");
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.subscribe("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        nettyClient1.ping();
        nettyClient1.unsubscribe("");
    }

    @Test
    public void test13472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13472");
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str8 = connectMessage7.getUsername();
        org.meqantt.message.QoS qoS12 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage("", qoS12);
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList16 = subscribeMessage15.getTopics();
        org.meqantt.message.QoS qoS17 = subscribeMessage15.getQos();
        subscribeMessage13.addTopic("", qoS17);
        connectMessage7.setWill("", "\000d\000\001\001d", qoS17, true);
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage("hi!", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList27 = subscribeMessage26.getTopics();
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str33 = connectMessage32.getProtocolId();
        org.meqantt.message.QoS qoS34 = connectMessage32.getQos();
        subscribeMessage26.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS34);
        subscribeMessage24.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS34);
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str42 = connectMessage41.getProtocolId();
        org.meqantt.message.QoS qoS43 = connectMessage41.getQos();
        subscribeMessage24.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS43);
        org.meqantt.message.ConnectMessage connectMessage53 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str54 = connectMessage53.getUsername();
        org.meqantt.message.QoS qoS58 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage59 = new org.meqantt.message.SubscribeMessage("", qoS58);
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList62 = subscribeMessage61.getTopics();
        org.meqantt.message.QoS qoS63 = subscribeMessage61.getQos();
        subscribeMessage59.addTopic("", qoS63);
        connectMessage53.setWill("", "\000d\000\001\001d", qoS63, true);
        org.meqantt.message.SubscribeMessage subscribeMessage67 = new org.meqantt.message.SubscribeMessage("hi!", qoS63);
        org.meqantt.message.SubscribeMessage subscribeMessage68 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS63);
        org.meqantt.message.SubscribeMessage subscribeMessage69 = new org.meqantt.message.SubscribeMessage("", qoS63);
        org.meqantt.message.SubscribeMessage subscribeMessage70 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS63);
        subscribeMessage24.addTopic("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS63);
        boolean boolean72 = subscribeMessage24.isDup();
        java.util.List<org.meqantt.message.QoS> qoSList73 = subscribeMessage24.getTopicQoSs();
        org.meqantt.message.Message.Type type74 = subscribeMessage24.getType();
        java.util.List<org.meqantt.message.QoS> qoSList75 = subscribeMessage24.getTopicQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList76 = subscribeMessage24.getTopicQoSs();
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQIsdp" + "'", str33, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQIsdp" + "'", str42, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS43 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS43.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + qoS63 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS63.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(qoSList73);
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type74.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(qoSList75);
        org.junit.Assert.assertNotNull(qoSList76);
    }

    @Test
    public void test13473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13473");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean3 = connectMessage2.isWillRetained();
        java.lang.String str4 = connectMessage2.getWillTopic();
        java.lang.String str5 = connectMessage2.getProtocolId();
        connectMessage2.setCredentials("");
        org.meqantt.message.QoS qoS8 = connectMessage2.getWillQoS();
        int int9 = connectMessage2.getKeepAlive();
        boolean boolean10 = connectMessage2.isWillRetained();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MQIsdp" + "'", str5, "MQIsdp");
        org.junit.Assert.assertNull(qoS8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13474");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage10 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage10.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test13475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13475");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage10.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test13476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13476");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.Message.Type type9 = header1.getType();
        org.meqantt.message.PingRespMessage pingRespMessage10 = new org.meqantt.message.PingRespMessage(header1);
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void test13477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13477");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage12 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage13 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage13.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test13478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13478");
        org.meqantt.SocketClient socketClient1 = new org.meqantt.SocketClient("MQIsdp");
        // The following exception was thrown during execution in test generation
        try {
            socketClient1.connect("00: 00100000   32\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00000010 \002 2\n", 6);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: 00: 00100000   32?01: 00000010 ? 2?02: 00000000 ? 0?03: 00000010 ? 2?");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13479");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("p\002\000\n", false, 0);
    }

    @Test
    public void test13480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13480");
        org.meqantt.SocketClient socketClient1 = new org.meqantt.SocketClient("\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        // The following exception was thrown during execution in test generation
        try {
            socketClient1.connect("\020\ufffd\001\000\006MQIsdp\003&\000d\000\006MQIsdp\000\006MQIsdp\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n", (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: ?????MQIsdp?&?d??MQIsdp??MQIsdp??00: 10100010 ?? 162?01: 00001000 ? 8?02: 00000000 ?? 0?03: 00000000 ?? 0?04: 00000000 ?? 0?05: 00000100 ? 4?06: 11000000 ?? 192?07: 10000000 ?? 128?08: 11000000 ?? 192?09: 10000000 ?? 128?");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13481");
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage("", byteArray8);
        java.lang.String str10 = publishMessage9.getDataAsString();
        byte[] byteArray11 = publishMessage9.getData();
        java.lang.String str12 = org.meqantt.util.FormatUtil.toString(byteArray11);
        java.lang.String str13 = org.meqantt.util.FormatUtil.toString(byteArray11);
        java.lang.String str14 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray11);
        java.lang.String str15 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray11);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", byteArray11);
        java.lang.Class<?> wildcardClass17 = publishMessage16.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000d\000\001\001d" + "'", str10, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str14, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str15, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test13482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13482");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        byte byte3 = connectMessage2.getProtocolVersion();
        boolean boolean4 = connectMessage2.hasUsername();
        boolean boolean5 = connectMessage2.isWillRetained();
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 3 + "'", byte3 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test13483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13483");
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str6 = connectMessage5.getUsername();
        org.meqantt.message.QoS qoS10 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage("", qoS10);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList14 = subscribeMessage13.getTopics();
        org.meqantt.message.QoS qoS15 = subscribeMessage13.getQos();
        subscribeMessage11.addTopic("", qoS15);
        connectMessage5.setWill("", "\000d\000\001\001d", qoS15, true);
        boolean boolean19 = connectMessage5.isCleanSession();
        java.lang.String str20 = connectMessage5.getClientId();
        java.lang.String str21 = connectMessage5.getPassword();
        java.lang.String str22 = connectMessage5.getWill();
        byte[] byteArray23 = connectMessage5.toBytes();
        org.meqantt.message.PublishMessage publishMessage24 = new org.meqantt.message.PublishMessage("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", byteArray23);
        org.meqantt.message.PublishMessage publishMessage25 = new org.meqantt.message.PublishMessage("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", byteArray23);
        java.lang.String str26 = publishMessage25.getTopic();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\000d\000\001\001d" + "'", str22, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n" + "'", str26, "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
    }

    @Test
    public void test13484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13484");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage10 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage12 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage12.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13485");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage10 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage12 = new org.meqantt.message.UnsubscribeMessage("hi!");
        unsubscribeMessage12.setDup(false);
        java.util.List<java.lang.String> strList15 = unsubscribeMessage12.getTopics();
        java.util.List<java.lang.String> strList16 = unsubscribeMessage12.getTopics();
        int int17 = unsubscribeMessage12.getMessageId();
        unsubscribeMessage12.addTopic("");
        org.meqantt.message.QoS qoS20 = unsubscribeMessage12.getQos();
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage10.setQos(qoS20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13486");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "00: 00000000 \000 0\n01: 00000110 \006 6\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00000011 \003 3\n05: 01101000 h 104\n06: 01101001 i 105\n07: 00100001 ! 33\n");
        java.lang.String str3 = publishMessage2.getTopic();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n" + "'", str3, "\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
    }

    @Test
    public void test13487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13487");
        org.meqantt.message.Message.Header header1 = null;
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean3 = connectMessage2.isWillRetained();
        boolean boolean4 = connectMessage2.isWillRetained();
        java.lang.String str5 = connectMessage2.getUsername();
        boolean boolean6 = connectMessage2.isCleanSession();
        java.lang.String str7 = connectMessage2.getWill();
        boolean boolean8 = connectMessage2.hasUsername();
        java.lang.String str9 = connectMessage2.getProtocolId();
        org.meqantt.message.Message.Header header12 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage(header12);
        org.meqantt.message.QoS qoS15 = null;
        subscribeMessage13.addTopic("hi!", qoS15);
        java.util.List<org.meqantt.message.QoS> qoSList17 = subscribeMessage13.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage23 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str24 = connectMessage23.getUsername();
        org.meqantt.message.QoS qoS28 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage("", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList32 = subscribeMessage31.getTopics();
        org.meqantt.message.QoS qoS33 = subscribeMessage31.getQos();
        subscribeMessage29.addTopic("", qoS33);
        connectMessage23.setWill("", "\000d\000\001\001d", qoS33, true);
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage("hi!", qoS33);
        subscribeMessage13.addTopic("\000d\000\001\001d", qoS33);
        connectMessage2.setWill("\000d\000\001\001d", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS33, false);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS33);
        org.meqantt.message.ConnectMessage connectMessage47 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str48 = connectMessage47.getUsername();
        org.meqantt.message.QoS qoS52 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("", qoS52);
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList56 = subscribeMessage55.getTopics();
        org.meqantt.message.QoS qoS57 = subscribeMessage55.getQos();
        subscribeMessage53.addTopic("", qoS57);
        connectMessage47.setWill("", "\000d\000\001\001d", qoS57, true);
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS57);
        subscribeMessage41.addTopic("\000\003hi!", qoS57);
        subscribeMessage41.setMessageId((int) '4');
        subscribeMessage41.setDup(false);
        org.meqantt.message.QoS qoS68 = null;
        subscribeMessage41.addTopic("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS68);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertNotNull(qoSList17);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + qoS33 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS33.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + qoS57 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS57.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13488");
        org.meqantt.message.SubAckMessage subAckMessage2 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage2.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList4 = subAckMessage2.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList5 = subAckMessage2.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage7 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList8 = subscribeMessage7.getTopics();
        org.meqantt.message.QoS qoS9 = subscribeMessage7.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage("", qoS9);
        subAckMessage2.addQoS(qoS9);
        org.meqantt.message.QoS qoS12 = subAckMessage2.getQos();
        byte[] byteArray13 = subAckMessage2.toBytes();
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", byteArray13);
        org.meqantt.message.PublishMessage publishMessage15 = new org.meqantt.message.PublishMessage("00: 10000000 \200 128\n01: 00001011 \013 11\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000110 \006 6\n06: 01001101 M 77\n07: 01010001 Q 81\n08: 01001001 I 73\n09: 01110011 s 115\n10: 01100100 d 100\n11: 01110000 p 112\n12: 00000000 \000 0\n", byteArray13);
        java.lang.String str16 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray13);
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertNull(qoSList4);
        org.junit.Assert.assertNull(qoSList5);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + qoS9 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS9.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS12 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS12.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-112, 3, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n" + "'", str16, "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
    }

    @Test
    public void test13489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13489");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage8 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage13 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage14 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str19 = connectMessage18.getUsername();
        int int20 = connectMessage18.getKeepAlive();
        java.lang.String str21 = connectMessage18.getWillTopic();
        boolean boolean22 = connectMessage18.isCleanSession();
        boolean boolean23 = connectMessage18.hasPassword();
        boolean boolean24 = connectMessage18.isDup();
        boolean boolean25 = connectMessage18.isWillRetained();
        java.lang.String str26 = connectMessage18.getWill();
        org.meqantt.message.Message.Header header30 = null;
        org.meqantt.message.ConnectMessage connectMessage31 = new org.meqantt.message.ConnectMessage(header30);
        java.lang.String str32 = connectMessage31.getClientId();
        connectMessage31.setWill("hi!", "");
        org.meqantt.message.QoS qoS36 = connectMessage31.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS36);
        connectMessage18.setWill("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", "00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n", qoS36, true);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage14.setQos(qoS36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13490");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        java.lang.String str10 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage11 = new org.meqantt.message.PingRespMessage(header1);
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str10, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test13491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13491");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        org.meqantt.MqttListener mqttListener15 = null;
        nettyClient1.setListener(mqttListener15);
        nettyClient1.unsubscribe("\000\003hi!");
        org.meqantt.MqttListener mqttListener19 = null;
        nettyClient1.setListener(mqttListener19);
        nettyClient1.ping();
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("\000d\000\001\001d");
        nettyClient1.ping();
        org.meqantt.MqttListener mqttListener26 = null;
        nettyClient1.setListener(mqttListener26);
        nettyClient1.ping();
        nettyClient1.ping();
    }

    @Test
    public void test13492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13492");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.Message.Header header7 = null;
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header7);
        int int9 = connectMessage8.getKeepAlive();
        boolean boolean10 = connectMessage8.hasUsername();
        java.lang.String str11 = connectMessage8.getProtocolId();
        boolean boolean12 = connectMessage8.isCleanSession();
        org.meqantt.message.QoS qoS13 = connectMessage8.getWillQoS();
        int int14 = connectMessage8.getKeepAlive();
        boolean boolean15 = connectMessage8.isWillRetained();
        connectMessage8.setCredentials("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        connectMessage8.setCredentials("\000d\000\001\001d");
        org.meqantt.message.Message.Header header23 = null;
        org.meqantt.message.ConnectMessage connectMessage24 = new org.meqantt.message.ConnectMessage(header23);
        boolean boolean25 = connectMessage24.isWillRetained();
        boolean boolean26 = connectMessage24.isWillRetained();
        java.lang.String str27 = connectMessage24.getUsername();
        boolean boolean28 = connectMessage24.isCleanSession();
        boolean boolean29 = connectMessage24.isWillRetained();
        java.lang.String str30 = connectMessage24.getClientId();
        connectMessage24.setCredentials("\000d\000\001\001d");
        org.meqantt.message.Message.Header header36 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage37 = new org.meqantt.message.PubCompMessage(header36);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage(header36);
        org.meqantt.message.ConnectMessage connectMessage43 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str44 = connectMessage43.getProtocolId();
        byte[] byteArray45 = connectMessage43.toBytes();
        org.meqantt.message.QoS qoS46 = connectMessage43.getQos();
        subscribeMessage38.addTopic("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", qoS46);
        connectMessage24.setWill("MQIsdp", "00: 00000000 \000 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", qoS46, false);
        connectMessage8.setWill("\ufffd\003\000\000\000", "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", qoS46, false);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage6.setQos(qoS46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MQIsdp" + "'", str11, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(qoS13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MQIsdp" + "'", str44, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + qoS46 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS46.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13493");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        byte byte27 = connectMessage3.getProtocolVersion();
        org.meqantt.message.ConnectMessage connectMessage34 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean35 = connectMessage34.hasWill();
        java.lang.String str36 = connectMessage34.getWill();
        org.meqantt.message.Message.Header header39 = null;
        org.meqantt.message.ConnectMessage connectMessage40 = new org.meqantt.message.ConnectMessage(header39);
        boolean boolean41 = connectMessage40.isWillRetained();
        boolean boolean42 = connectMessage40.isWillRetained();
        java.lang.String str43 = connectMessage40.getUsername();
        org.meqantt.message.QoS qoS47 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage48 = new org.meqantt.message.SubscribeMessage("", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList51 = subscribeMessage50.getTopics();
        org.meqantt.message.QoS qoS52 = subscribeMessage50.getQos();
        subscribeMessage48.addTopic("", qoS52);
        connectMessage40.setWill("hi!", "", qoS52, false);
        connectMessage34.setWill("MQIsdp", "hi!", qoS52, false);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS52);
        connectMessage3.setWill("", "MQIsdp", qoS52, false);
        byte byte61 = connectMessage3.getProtocolVersion();
        java.lang.String str62 = connectMessage3.getWillTopic();
        int int63 = connectMessage3.getKeepAlive();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 3 + "'", byte27 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte61 + "' != '" + (byte) 3 + "'", byte61 == (byte) 3);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
    }

    @Test
    public void test13494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13494");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.addTopic("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        java.util.List<java.lang.String> strList6 = unsubscribeMessage1.getTopics();
        unsubscribeMessage1.addTopic("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        unsubscribeMessage1.addTopic("00: 01100100 d 100\n01: 00000000 \000 0\n");
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test13495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13495");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
    }

    @Test
    public void test13496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13496");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus6 = connAckMessage5.getStatus();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList9 = unsubscribeMessage8.getTopics();
        org.meqantt.message.Message.Type type10 = unsubscribeMessage8.getType();
        java.util.List<java.lang.String> strList11 = unsubscribeMessage8.getTopics();
        org.meqantt.message.QoS qoS12 = unsubscribeMessage8.getQos();
        unsubscribeMessage8.addTopic("MQIsdp");
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList18 = subscribeMessage17.getTopics();
        org.meqantt.message.QoS qoS19 = subscribeMessage17.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage("", qoS19);
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS19);
        org.meqantt.message.QoS qoS22 = subscribeMessage21.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList27 = subscribeMessage26.getTopics();
        org.meqantt.message.QoS qoS28 = subscribeMessage26.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage("", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS28);
        org.meqantt.message.QoS qoS31 = subscribeMessage30.getQos();
        subscribeMessage21.addTopic("", qoS31);
        unsubscribeMessage8.setQos(qoS31);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage5.setQos(qoS31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(connectionStatus6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type10.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + qoS12 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS12.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS22 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS22.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test13497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13497");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage10 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage12 = new org.meqantt.message.PingRespMessage(header1);
    }

    @Test
    public void test13498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13498");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage9 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS10 = unsubAckMessage9.getQos();
        subAckMessage8.addQoS(qoS10);
        org.meqantt.message.ConnectMessage connectMessage16 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean17 = connectMessage16.hasWill();
        java.lang.String str18 = connectMessage16.getWill();
        org.meqantt.message.Message.Header header21 = null;
        org.meqantt.message.ConnectMessage connectMessage22 = new org.meqantt.message.ConnectMessage(header21);
        boolean boolean23 = connectMessage22.isWillRetained();
        boolean boolean24 = connectMessage22.isWillRetained();
        java.lang.String str25 = connectMessage22.getUsername();
        org.meqantt.message.QoS qoS29 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("", qoS29);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList33 = subscribeMessage32.getTopics();
        org.meqantt.message.QoS qoS34 = subscribeMessage32.getQos();
        subscribeMessage30.addTopic("", qoS34);
        connectMessage22.setWill("hi!", "", qoS34, false);
        connectMessage16.setWill("MQIsdp", "hi!", qoS34, false);
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS34);
        subAckMessage8.addQoS(qoS34);
        org.meqantt.message.Message.Type type42 = subAckMessage8.getType();
        org.meqantt.message.Message.Header header44 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage45 = new org.meqantt.message.PingReqMessage(header44);
        org.meqantt.message.PubCompMessage pubCompMessage46 = new org.meqantt.message.PubCompMessage(header44);
        org.meqantt.message.PingReqMessage pingReqMessage47 = new org.meqantt.message.PingReqMessage(header44);
        org.meqantt.message.PingReqMessage pingReqMessage48 = new org.meqantt.message.PingReqMessage(header44);
        org.meqantt.message.PingReqMessage pingReqMessage49 = new org.meqantt.message.PingReqMessage(header44);
        java.lang.String str50 = header44.toString();
        org.meqantt.message.SubAckMessage subAckMessage51 = new org.meqantt.message.SubAckMessage(header44);
        org.meqantt.message.QoS qoS52 = null;
        subAckMessage51.addQoS(qoS52);
        org.meqantt.message.ConnectMessage connectMessage57 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean58 = connectMessage57.hasWill();
        java.lang.String str59 = connectMessage57.getWill();
        org.meqantt.message.Message.Header header62 = null;
        org.meqantt.message.ConnectMessage connectMessage63 = new org.meqantt.message.ConnectMessage(header62);
        boolean boolean64 = connectMessage63.isWillRetained();
        boolean boolean65 = connectMessage63.isWillRetained();
        java.lang.String str66 = connectMessage63.getUsername();
        org.meqantt.message.QoS qoS70 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage71 = new org.meqantt.message.SubscribeMessage("", qoS70);
        org.meqantt.message.SubscribeMessage subscribeMessage73 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList74 = subscribeMessage73.getTopics();
        org.meqantt.message.QoS qoS75 = subscribeMessage73.getQos();
        subscribeMessage71.addTopic("", qoS75);
        connectMessage63.setWill("hi!", "", qoS75, false);
        connectMessage57.setWill("MQIsdp", "hi!", qoS75, false);
        subAckMessage51.addQoS(qoS75);
        subAckMessage8.addQoS(qoS75);
        java.io.OutputStream outputStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage8.write(outputStream83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(type42);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str50, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + qoS75 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS75.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test13499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13499");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000\003hi!", "\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        byte[] byteArray3 = publishMessage2.getData();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 66, -64, -128, 63, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 80, 85, 66, 82, 69, 76, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 69, 88, 65, 67, 84, 76, 89, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 102, 97, 108, 115, 101, 93]");
    }

    @Test
    public void test13500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13500");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getProtocolId();
        boolean boolean5 = connectMessage3.hasUsername();
        int int6 = connectMessage3.getKeepAlive();
        boolean boolean7 = connectMessage3.isCleanSession();
        java.lang.String str8 = connectMessage3.getPassword();
        java.lang.Class<?> wildcardClass9 = connectMessage3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }
}
