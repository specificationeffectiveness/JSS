package org.meqantt;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest29 {

    public static boolean debug = false;

    @Test
    public void test14501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14501");
        org.meqantt.message.Message.Header header1 = null;
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        int int3 = connectMessage2.getKeepAlive();
        java.lang.String str4 = connectMessage2.getPassword();
        org.meqantt.message.Message.Header header8 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        connectMessage9.setWill("\000\000", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList16 = subscribeMessage15.getTopics();
        org.meqantt.message.QoS qoS17 = subscribeMessage15.getQos();
        org.meqantt.message.ConnectMessage connectMessage22 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str23 = connectMessage22.getProtocolId();
        org.meqantt.message.QoS qoS24 = connectMessage22.getQos();
        subscribeMessage15.addTopic("", qoS24);
        connectMessage9.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS24, true);
        connectMessage2.setWill("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS24, true);
        byte byte30 = connectMessage2.getProtocolVersion();
        connectMessage2.setCredentials("\ufffd\ufffd\001\000\000\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\000", "\001\003\003\001");
        org.meqantt.message.Message.Header header37 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage38 = new org.meqantt.message.PingReqMessage(header37);
        org.meqantt.message.PubCompMessage pubCompMessage39 = new org.meqantt.message.PubCompMessage(header37);
        org.meqantt.message.PubAckMessage pubAckMessage40 = new org.meqantt.message.PubAckMessage(header37);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage41 = new org.meqantt.message.UnsubscribeMessage(header37);
        org.meqantt.message.PublishMessage publishMessage42 = new org.meqantt.message.PublishMessage(header37);
        org.meqantt.message.Message.Type type43 = header37.getType();
        org.meqantt.message.PingReqMessage pingReqMessage44 = new org.meqantt.message.PingReqMessage(header37);
        org.meqantt.message.PingReqMessage pingReqMessage45 = new org.meqantt.message.PingReqMessage(header37);
        org.meqantt.message.SubAckMessage subAckMessage46 = new org.meqantt.message.SubAckMessage(header37);
        org.meqantt.message.QoS qoS47 = subAckMessage46.getQos();
        connectMessage2.setWill("\020\032\000\006MQIsdp\003&\000\001\000\000\000\000\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", "00: 10100010 \242 162\n01: 00010111 \027 23\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00010011 \023 19\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 00001000 \b 8\n09: 11101111 \357 239\n10: 10111111 \277 191\n11: 10111101 \275 189\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 01100100 d 100\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 00000001 \001 1\n23: 00000001 \001 1\n24: 01100100 d 100\n", qoS47, false);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage("\ufffd(\000\000\000\ufffd\ufffd 0\n\ufffd\ufffd 0\n", qoS47);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MQIsdp" + "'", str23, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 3 + "'", byte30 == (byte) 3);
        org.junit.Assert.assertNull(type43);
        org.junit.Assert.assertTrue("'" + qoS47 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS47.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14502");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage6.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14503");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.subscribe("\000d\000\001\001d");
        nettyClient1.connect("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", 32);
        nettyClient1.subscribe("\000d\000\001\001d");
        nettyClient1.ping();
        nettyClient1.subscribe("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
    }

    @Test
    public void test14504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14504");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        connectMessage1.setCredentials("\000d\000\001\001d");
        java.lang.String str4 = connectMessage1.getProtocolId();
        boolean boolean5 = connectMessage1.isCleanSession();
        java.lang.String str6 = connectMessage1.getProtocolId();
        org.meqantt.message.QoS qoS7 = connectMessage1.getWillQoS();
        boolean boolean8 = connectMessage1.isCleanSession();
        boolean boolean9 = connectMessage1.hasPassword();
        java.lang.String str10 = connectMessage1.getProtocolId();
        java.lang.String str11 = connectMessage1.getClientId();
        java.lang.String str12 = connectMessage1.getUsername();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MQIsdp" + "'", str6, "MQIsdp");
        org.junit.Assert.assertNull(qoS7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MQIsdp" + "'", str10, "MQIsdp");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\000d\000\001\001d" + "'", str12, "\000d\000\001\001d");
    }

    @Test
    public void test14505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14505");
        org.meqantt.message.Message.Header header1 = null;
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str3 = connectMessage2.getPassword();
        java.lang.String str4 = connectMessage2.getWillTopic();
        boolean boolean5 = connectMessage2.isCleanSession();
        boolean boolean6 = connectMessage2.hasPassword();
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage((int) ' ');
        org.meqantt.message.QoS qoS11 = pubRelMessage10.getQos();
        connectMessage2.setWill("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS11, false);
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00000001 \001 1\n", qoS11);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage14.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14506");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        java.lang.String str6 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage7 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage8 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage9 = new org.meqantt.message.ConnAckMessage(header1);
        java.lang.String str10 = header1.toString();
        org.meqantt.message.PubRelMessage pubRelMessage11 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage13 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str10, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14507");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 10);
        boolean boolean4 = connectMessage3.hasPassword();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getPassword();
        java.lang.String str7 = connectMessage3.getWillTopic();
        java.lang.String str8 = connectMessage3.getUsername();
        boolean boolean9 = connectMessage3.hasWill();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14508");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener8 = null;
        nettyClient1.setListener(mqttListener8);
        nettyClient1.ping();
        nettyClient1.unsubscribe("\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        nettyClient1.subscribe("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
        org.meqantt.MqttListener mqttListener15 = null;
        nettyClient1.setListener(mqttListener15);
    }

    @Test
    public void test14509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14509");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.DisconnectMessage disconnectMessage4 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str6 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage9.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList11 = subAckMessage9.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList12 = subAckMessage9.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList15 = subscribeMessage14.getTopics();
        org.meqantt.message.QoS qoS16 = subscribeMessage14.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        subAckMessage9.addQoS(qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS16);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage7.setQos(qoS16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str6, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertNull(qoSList10);
        org.junit.Assert.assertNull(qoSList11);
        org.junit.Assert.assertNull(qoSList12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14510");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("hi!");
        org.meqantt.MqttListener mqttListener2 = null;
        nettyClient1.setListener(mqttListener2);
        org.meqantt.MqttListener mqttListener4 = null;
        nettyClient1.setListener(mqttListener4);
        nettyClient1.connect("hi!", (int) (short) 0);
        nettyClient1.connect("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.publish("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", "00: 10100010 \242 162\n01: 00001111 \017 15\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000011 \003 3\n06: 01101000 h 104\n07: 01101001 i 105\n08: 00100001 ! 33\n09: 00000000 \000 0\n10: 00000110 \006 6\n11: 01001101 M 77\n12: 01010001 Q 81\n13: 01001001 I 73\n14: 01110011 s 115\n15: 01100100 d 100\n16: 01110000 p 112\n");
    }

    @Test
    public void test14511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14511");
        org.meqantt.message.Message.Header header2 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type3 = header2.getType();
        org.meqantt.message.Message.Type type4 = header2.getType();
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header2);
        java.lang.String str6 = header2.toString();
        org.meqantt.message.PingRespMessage pingRespMessage7 = new org.meqantt.message.PingRespMessage(header2);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header2);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage9 = new org.meqantt.message.UnsubscribeMessage(header2);
        org.meqantt.message.UnsubAckMessage unsubAckMessage10 = new org.meqantt.message.UnsubAckMessage(header2);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header2);
        org.meqantt.message.PubRelMessage pubRelMessage12 = new org.meqantt.message.PubRelMessage(header2);
        boolean boolean13 = pubRelMessage12.isDup();
        org.meqantt.message.Message.Header header15 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type16 = header15.getType();
        org.meqantt.message.Message.Type type17 = header15.getType();
        org.meqantt.message.SubAckMessage subAckMessage18 = new org.meqantt.message.SubAckMessage(header15);
        org.meqantt.message.PingReqMessage pingReqMessage19 = new org.meqantt.message.PingReqMessage(header15);
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage(header15);
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage(header15);
        org.meqantt.message.PingReqMessage pingReqMessage22 = new org.meqantt.message.PingReqMessage(header15);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage(header15);
        java.util.List<java.lang.String> strList24 = subscribeMessage23.getTopics();
        subscribeMessage23.setDup(false);
        org.meqantt.message.Message.Header header29 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type30 = header29.getType();
        org.meqantt.message.Message.Type type31 = header29.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage32 = new org.meqantt.message.UnsubAckMessage(header29);
        org.meqantt.message.QoS qoS33 = unsubAckMessage32.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS33);
        org.meqantt.message.QoS qoS35 = subscribeMessage34.getQos();
        subscribeMessage23.setQos(qoS35);
        pubRelMessage12.setQos(qoS35);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("\000=Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", qoS35);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(type30);
        org.junit.Assert.assertNull(type31);
        org.junit.Assert.assertTrue("'" + qoS33 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS33.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS35 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS35.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14512");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        boolean boolean11 = pubRelMessage10.isDup();
        org.meqantt.message.QoS qoS12 = pubRelMessage10.getQos();
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage10.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + qoS12 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS12.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14513");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        int int5 = subAckMessage4.getMessageId();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage4.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14514");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage5 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage6 = new org.meqantt.message.UnsubAckMessage(header1);
        boolean boolean7 = unsubAckMessage6.isRetained();
        org.meqantt.message.Message.Header header9 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type10 = header9.getType();
        org.meqantt.message.Message.Type type11 = header9.getType();
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header9);
        org.meqantt.message.PingReqMessage pingReqMessage13 = new org.meqantt.message.PingReqMessage(header9);
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage(header9);
        org.meqantt.message.ConnectMessage connectMessage15 = new org.meqantt.message.ConnectMessage(header9);
        org.meqantt.message.ConnectMessage connectMessage22 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean23 = connectMessage22.hasWill();
        java.lang.String str24 = connectMessage22.getWill();
        org.meqantt.message.Message.Header header27 = null;
        org.meqantt.message.ConnectMessage connectMessage28 = new org.meqantt.message.ConnectMessage(header27);
        boolean boolean29 = connectMessage28.isWillRetained();
        boolean boolean30 = connectMessage28.isWillRetained();
        java.lang.String str31 = connectMessage28.getUsername();
        org.meqantt.message.QoS qoS35 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("", qoS35);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList39 = subscribeMessage38.getTopics();
        org.meqantt.message.QoS qoS40 = subscribeMessage38.getQos();
        subscribeMessage36.addTopic("", qoS40);
        connectMessage28.setWill("hi!", "", qoS40, false);
        connectMessage22.setWill("MQIsdp", "hi!", qoS40, false);
        org.meqantt.message.SubscribeMessage subscribeMessage46 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS40);
        connectMessage15.setWill("hi!", "\000\000", qoS40, true);
        java.lang.String str49 = connectMessage15.getWillTopic();
        java.lang.String str50 = connectMessage15.getWillTopic();
        org.meqantt.message.PublishMessage publishMessage55 = new org.meqantt.message.PublishMessage("MQIsdp", "");
        org.meqantt.message.QoS qoS56 = publishMessage55.getQos();
        connectMessage15.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS56, false);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage6.setQos(qoS56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + qoS40 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS40.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + qoS56 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS56.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14515");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        org.meqantt.message.QoS qoS8 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage("", qoS8);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList12 = subscribeMessage11.getTopics();
        org.meqantt.message.QoS qoS13 = subscribeMessage11.getQos();
        subscribeMessage9.addTopic("", qoS13);
        connectMessage1.setWill("hi!", "", qoS13, false);
        boolean boolean17 = connectMessage1.hasUsername();
        connectMessage1.setWill("MQIsdp", "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        java.lang.String str21 = connectMessage1.getPassword();
        boolean boolean22 = connectMessage1.hasWill();
        connectMessage1.setWill("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test14516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14516");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        boolean boolean8 = connectMessage1.hasPassword();
        java.lang.String str9 = connectMessage1.getClientId();
        connectMessage1.setCredentials("\000d\000\001\001d");
        byte byte12 = connectMessage1.getProtocolVersion();
        java.lang.String str13 = connectMessage1.getProtocolId();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 3 + "'", byte12 == (byte) 3);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MQIsdp" + "'", str13, "MQIsdp");
    }

    @Test
    public void test14517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14517");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str11 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage12 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type13 = header1.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage15 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage15.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str11, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type13);
    }

    @Test
    public void test14518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14518");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        boolean boolean27 = connectMessage3.isCleanSession();
        boolean boolean28 = connectMessage3.hasWill();
        boolean boolean29 = connectMessage3.isCleanSession();
        org.meqantt.message.QoS qoS30 = connectMessage3.getWillQoS();
        boolean boolean31 = connectMessage3.isWillRetained();
        boolean boolean32 = connectMessage3.isWillRetained();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + qoS30 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS30.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test14519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14519");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        int int8 = subAckMessage7.getMessageId();
        java.util.List<org.meqantt.message.QoS> qoSList9 = subAckMessage7.getGrantedQoSs();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(qoSList9);
    }

    @Test
    public void test14520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14520");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList1 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str7 = connectMessage6.getProtocolId();
        org.meqantt.message.QoS qoS8 = connectMessage6.getQos();
        subAckMessage0.addQoS(qoS8);
        byte[] byteArray10 = subAckMessage0.toBytes();
        org.meqantt.message.Message.Header header12 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type13 = header12.getType();
        org.meqantt.message.Message.Type type14 = header12.getType();
        org.meqantt.message.PubRelMessage pubRelMessage15 = new org.meqantt.message.PubRelMessage(header12);
        org.meqantt.message.SubAckMessage subAckMessage16 = new org.meqantt.message.SubAckMessage(header12);
        boolean boolean17 = subAckMessage16.isRetained();
        org.meqantt.message.QoS qoS18 = subAckMessage16.getQos();
        org.meqantt.message.PublishMessage publishMessage21 = new org.meqantt.message.PublishMessage("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "MQIsdp");
        org.meqantt.message.QoS qoS22 = publishMessage21.getQos();
        subAckMessage16.addQoS(qoS22);
        java.util.List<org.meqantt.message.QoS> qoSList24 = subAckMessage16.getGrantedQoSs();
        org.meqantt.message.Message.Header header27 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type28 = header27.getType();
        org.meqantt.message.Message.Type type29 = header27.getType();
        org.meqantt.message.SubAckMessage subAckMessage30 = new org.meqantt.message.SubAckMessage(header27);
        org.meqantt.message.PingReqMessage pingReqMessage31 = new org.meqantt.message.PingReqMessage(header27);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage(header27);
        org.meqantt.message.ConnectMessage connectMessage33 = new org.meqantt.message.ConnectMessage(header27);
        org.meqantt.message.PingReqMessage pingReqMessage34 = new org.meqantt.message.PingReqMessage(header27);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage(header27);
        org.meqantt.message.SubAckMessage subAckMessage36 = new org.meqantt.message.SubAckMessage(header27);
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList38 = subscribeMessage37.getTopics();
        org.meqantt.message.QoS qoS39 = subscribeMessage37.getQos();
        org.meqantt.message.ConnectMessage connectMessage44 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str45 = connectMessage44.getProtocolId();
        org.meqantt.message.QoS qoS46 = connectMessage44.getQos();
        subscribeMessage37.addTopic("", qoS46);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage49 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList50 = unsubscribeMessage49.getTopics();
        org.meqantt.message.Message.Type type51 = unsubscribeMessage49.getType();
        java.util.List<java.lang.String> strList52 = unsubscribeMessage49.getTopics();
        org.meqantt.message.QoS qoS53 = unsubscribeMessage49.getQos();
        subscribeMessage37.setQos(qoS53);
        subAckMessage36.addQoS(qoS53);
        org.meqantt.message.SubscribeMessage subscribeMessage56 = new org.meqantt.message.SubscribeMessage("", qoS53);
        subAckMessage16.addQoS(qoS53);
        subAckMessage0.addQoS(qoS53);
        subAckMessage0.setMessageId((int) '\001');
        boolean boolean61 = subAckMessage0.isRetained();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage0.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList1);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS8 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS8.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-112, 3, 0, 0, 0]");
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(type14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS22 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS22.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList24);
        org.junit.Assert.assertNull(type28);
        org.junit.Assert.assertNull(type29);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + qoS39 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS39.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "MQIsdp" + "'", str45, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS46 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS46.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type51.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + qoS53 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS53.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test14521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14521");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str11 = header1.toString();
        org.meqantt.message.UnsubAckMessage unsubAckMessage12 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage14 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage14.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str11, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14522");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        java.lang.String str10 = header1.toString();
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage12 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage13 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage14 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage15 = new org.meqantt.message.PubRelMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage15.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str10, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14523");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage11 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage11.addTopic("00: 00000000 \000 0\n01: 00010011 \023 19\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00001000 \b 8\n05: 11101111 \357 239\n06: 10111111 \277 191\n07: 10111101 \275 189\n08: 11101111 \357 239\n09: 10111111 \277 191\n10: 10111101 \275 189\n11: 01100100 d 100\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 11101111 \357 239\n16: 10111111 \277 191\n17: 10111101 \275 189\n18: 00000001 \001 1\n19: 00000001 \001 1\n20: 01100100 d 100\n");
        unsubscribeMessage11.setMessageId(10);
        org.meqantt.message.ConnectMessage connectMessage16 = new org.meqantt.message.ConnectMessage();
        java.lang.String str17 = connectMessage16.getUsername();
        connectMessage16.setCredentials("hi!");
        connectMessage16.setWill("hi!", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        java.lang.String str23 = connectMessage16.getWillTopic();
        int int24 = connectMessage16.getKeepAlive();
        org.meqantt.message.SubAckMessage subAckMessage27 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList28 = subAckMessage27.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList29 = subAckMessage27.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage33 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str34 = connectMessage33.getProtocolId();
        org.meqantt.message.QoS qoS35 = connectMessage33.getQos();
        subAckMessage27.addQoS(qoS35);
        connectMessage16.setWill("00: 00010000 \020 16\n01: 00001110 \016 14\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n", "", qoS35, true);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage11.setQos(qoS35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(qoSList28);
        org.junit.Assert.assertNull(qoSList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "MQIsdp" + "'", str34, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS35 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS35.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14524");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage11 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage12 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage13 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage14 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage15 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage15.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14525");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage2 = new org.meqantt.message.UnsubscribeMessage("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        byte[] byteArray3 = unsubscribeMessage2.toBytes();
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n", byteArray3);
        java.lang.String str5 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray3);
        java.lang.String str6 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-94, 23, 0, 0, 0, 19, -64, -128, 8, -17, -65, -67, -17, -65, -67, 100, -17, -65, -67, -17, -65, -67, 1, 1, 100]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00: 10100010 \242 162\n01: 00010111 \027 23\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00010011 \023 19\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 00001000 \b 8\n09: 11101111 \357 239\n10: 10111111 \277 191\n11: 10111101 \275 189\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 01100100 d 100\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 00000001 \001 1\n23: 00000001 \001 1\n24: 01100100 d 100\n" + "'", str5, "00: 10100010 \242 162\n01: 00010111 \027 23\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00010011 \023 19\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 00001000 \b 8\n09: 11101111 \357 239\n10: 10111111 \277 191\n11: 10111101 \275 189\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 01100100 d 100\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 00000001 \001 1\n23: 00000001 \001 1\n24: 01100100 d 100\n");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "00: 10100010 \242 162\n01: 00010111 \027 23\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00010011 \023 19\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 00001000 \b 8\n09: 11101111 \357 239\n10: 10111111 \277 191\n11: 10111101 \275 189\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 01100100 d 100\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 00000001 \001 1\n23: 00000001 \001 1\n24: 01100100 d 100\n" + "'", str6, "00: 10100010 \242 162\n01: 00010111 \027 23\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00010011 \023 19\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 00001000 \b 8\n09: 11101111 \357 239\n10: 10111111 \277 191\n11: 10111101 \275 189\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 01100100 d 100\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 00000001 \001 1\n23: 00000001 \001 1\n24: 01100100 d 100\n");
    }

    @Test
    public void test14526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14526");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage4.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str2, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14527");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.QoS qoS11 = null;
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage10.setQos(qoS11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14528");
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean5 = connectMessage4.hasWill();
        java.lang.String str6 = connectMessage4.getWill();
        boolean boolean7 = connectMessage4.hasUsername();
        connectMessage4.setCredentials("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage13 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS14 = unsubscribeMessage13.getQos();
        connectMessage4.setWill("00: 01100100 d 100\n01: 00000000 \000 0\n", "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", qoS14, true);
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("00: 01100100 d 100\n01: 00000000 \000 0\n", qoS14);
        java.util.List<java.lang.String> strList18 = subscribeMessage17.getTopics();
        subscribeMessage17.setDup(false);
        java.util.List<java.lang.String> strList21 = subscribeMessage17.getTopics();
        org.meqantt.message.ConnectMessage connectMessage26 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean27 = connectMessage26.hasWill();
        java.lang.String str28 = connectMessage26.getWill();
        org.meqantt.message.Message.Header header31 = null;
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage(header31);
        boolean boolean33 = connectMessage32.isWillRetained();
        boolean boolean34 = connectMessage32.isWillRetained();
        java.lang.String str35 = connectMessage32.getUsername();
        org.meqantt.message.QoS qoS39 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("", qoS39);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList43 = subscribeMessage42.getTopics();
        org.meqantt.message.QoS qoS44 = subscribeMessage42.getQos();
        subscribeMessage40.addTopic("", qoS44);
        connectMessage32.setWill("hi!", "", qoS44, false);
        connectMessage26.setWill("MQIsdp", "hi!", qoS44, false);
        connectMessage26.setCredentials("\000d\000\001\001d");
        org.meqantt.message.QoS qoS52 = connectMessage26.getWillQoS();
        subscribeMessage17.addTopic("\000\ufffd\ufffd\023\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d", qoS52);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage17.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + qoS44 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS44.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14529");
        org.meqantt.message.Message.Header header1 = null;
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList6 = subscribeMessage5.getTopics();
        org.meqantt.message.QoS qoS7 = subscribeMessage5.getQos();
        java.util.List<java.lang.String> strList8 = subscribeMessage5.getTopics();
        org.meqantt.message.ConnectMessage connectMessage13 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean14 = connectMessage13.hasWill();
        java.lang.String str15 = connectMessage13.getWill();
        org.meqantt.message.Message.Header header18 = null;
        org.meqantt.message.ConnectMessage connectMessage19 = new org.meqantt.message.ConnectMessage(header18);
        boolean boolean20 = connectMessage19.isWillRetained();
        boolean boolean21 = connectMessage19.isWillRetained();
        java.lang.String str22 = connectMessage19.getUsername();
        org.meqantt.message.QoS qoS26 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList30 = subscribeMessage29.getTopics();
        org.meqantt.message.QoS qoS31 = subscribeMessage29.getQos();
        subscribeMessage27.addTopic("", qoS31);
        connectMessage19.setWill("hi!", "", qoS31, false);
        connectMessage13.setWill("MQIsdp", "hi!", qoS31, false);
        boolean boolean37 = connectMessage13.isCleanSession();
        org.meqantt.message.UnsubAckMessage unsubAckMessage40 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS41 = unsubAckMessage40.getQos();
        connectMessage13.setWill("\000\003hi!", "hi!", qoS41, false);
        subscribeMessage5.addTopic("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", qoS41);
        connectMessage2.setWill("\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", qoS41, false);
        org.meqantt.message.SubscribeMessage subscribeMessage47 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", qoS41);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + qoS7 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS7.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + qoS41 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS41.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14530");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        java.lang.String str6 = connectMessage3.getWill();
        byte byte7 = connectMessage3.getProtocolVersion();
        org.meqantt.message.QoS qoS8 = connectMessage3.getWillQoS();
        boolean boolean9 = connectMessage3.hasPassword();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 3 + "'", byte7 == (byte) 3);
        org.junit.Assert.assertNull(qoS8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14531");
        org.meqantt.message.ConnectMessage connectMessage0 = new org.meqantt.message.ConnectMessage();
        java.lang.String str1 = connectMessage0.getUsername();
        connectMessage0.setCredentials("hi!");
        connectMessage0.setWill("hi!", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        java.lang.String str7 = connectMessage0.getWillTopic();
        int int8 = connectMessage0.getKeepAlive();
        boolean boolean9 = connectMessage0.hasPassword();
        connectMessage0.setCredentials("\000\004\001\003\003\001", "\020\ufffd\001\000\006MQIsdp\003\ufffd\000d\000\006MQIsdp\000\000\000\006MQIsdp\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]\000\ufffd\ufffd?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14532");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        java.lang.String str7 = header1.toString();
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage9.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str7, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14533");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        connectMessage1.setCredentials("");
        java.lang.String str8 = connectMessage1.getClientId();
        org.meqantt.message.QoS qoS9 = connectMessage1.getWillQoS();
        java.lang.String str10 = connectMessage1.getUsername();
        connectMessage1.setWill("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        boolean boolean14 = connectMessage1.isWillRetained();
        boolean boolean15 = connectMessage1.isWillRetained();
        java.lang.String str16 = connectMessage1.getWillTopic();
        org.meqantt.message.Message.Header header18 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage19 = new org.meqantt.message.PingReqMessage(header18);
        org.meqantt.message.PubCompMessage pubCompMessage20 = new org.meqantt.message.PubCompMessage(header18);
        org.meqantt.message.UnsubAckMessage unsubAckMessage21 = new org.meqantt.message.UnsubAckMessage(header18);
        org.meqantt.message.ConnectMessage connectMessage22 = new org.meqantt.message.ConnectMessage(header18);
        org.meqantt.message.QoS qoS23 = connectMessage22.getWillQoS();
        org.meqantt.message.QoS qoS24 = connectMessage22.getQos();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setQos(qoS24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(qoS9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n" + "'", str16, "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        org.junit.Assert.assertNull(qoS23);
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14534");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        byte byte3 = connectMessage2.getProtocolVersion();
        java.lang.String str4 = connectMessage2.getProtocolId();
        boolean boolean5 = connectMessage2.hasWill();
        boolean boolean6 = connectMessage2.isRetained();
        byte byte7 = connectMessage2.getProtocolVersion();
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 3 + "'", byte3 == (byte) 3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 3 + "'", byte7 == (byte) 3);
    }

    @Test
    public void test14535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14535");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage11.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type2.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str4, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
    }

    @Test
    public void test14536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14536");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        java.lang.String str6 = connectMessage3.getWill();
        byte byte7 = connectMessage3.getProtocolVersion();
        boolean boolean8 = connectMessage3.hasWill();
        java.lang.String str9 = connectMessage3.getWillTopic();
        boolean boolean10 = connectMessage3.isWillRetained();
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str15 = connectMessage14.getClientId();
        boolean boolean16 = connectMessage14.hasUsername();
        int int17 = connectMessage14.getKeepAlive();
        org.meqantt.message.Message.Header header22 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage23 = new org.meqantt.message.PingReqMessage(header22);
        org.meqantt.message.PubCompMessage pubCompMessage24 = new org.meqantt.message.PubCompMessage(header22);
        org.meqantt.message.SubAckMessage subAckMessage25 = new org.meqantt.message.SubAckMessage(header22);
        org.meqantt.message.SubAckMessage subAckMessage26 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList27 = subAckMessage26.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList28 = subAckMessage26.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str33 = connectMessage32.getProtocolId();
        org.meqantt.message.QoS qoS34 = connectMessage32.getQos();
        subAckMessage26.addQoS(qoS34);
        org.meqantt.message.ConnectMessage connectMessage39 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean40 = connectMessage39.hasWill();
        java.lang.String str41 = connectMessage39.getWill();
        org.meqantt.message.Message.Header header44 = null;
        org.meqantt.message.ConnectMessage connectMessage45 = new org.meqantt.message.ConnectMessage(header44);
        boolean boolean46 = connectMessage45.isWillRetained();
        boolean boolean47 = connectMessage45.isWillRetained();
        java.lang.String str48 = connectMessage45.getUsername();
        org.meqantt.message.QoS qoS52 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("", qoS52);
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList56 = subscribeMessage55.getTopics();
        org.meqantt.message.QoS qoS57 = subscribeMessage55.getQos();
        subscribeMessage53.addTopic("", qoS57);
        connectMessage45.setWill("hi!", "", qoS57, false);
        connectMessage39.setWill("MQIsdp", "hi!", qoS57, false);
        org.meqantt.message.SubAckMessage subAckMessage65 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList66 = subAckMessage65.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList67 = subAckMessage65.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList68 = subAckMessage65.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage70 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList71 = subscribeMessage70.getTopics();
        org.meqantt.message.QoS qoS72 = subscribeMessage70.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage73 = new org.meqantt.message.SubscribeMessage("", qoS72);
        subAckMessage65.addQoS(qoS72);
        connectMessage39.setWill("hi!", "MQIsdp", qoS72, true);
        subAckMessage26.addQoS(qoS72);
        subAckMessage25.addQoS(qoS72);
        org.meqantt.message.SubscribeMessage subscribeMessage79 = new org.meqantt.message.SubscribeMessage("\000\003hi!", qoS72);
        connectMessage14.setWill("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", qoS72, true);
        java.lang.String str82 = connectMessage14.getPassword();
        java.lang.String str83 = connectMessage14.getProtocolId();
        java.lang.String str84 = connectMessage14.getWill();
        org.meqantt.message.QoS qoS85 = connectMessage14.getWillQoS();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setQos(qoS85);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 3 + "'", byte7 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(qoSList27);
        org.junit.Assert.assertNull(qoSList28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQIsdp" + "'", str33, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + qoS57 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS57.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList66);
        org.junit.Assert.assertNull(qoSList67);
        org.junit.Assert.assertNull(qoSList68);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + qoS72 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS72.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "MQIsdp" + "'", str83, "MQIsdp");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n" + "'", str84, "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
        org.junit.Assert.assertTrue("'" + qoS85 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS85.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14537");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 0);
        java.lang.String str4 = connectMessage3.getProtocolId();
        org.meqantt.message.QoS qoS8 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage("", qoS8);
        int int10 = subscribeMessage9.getMessageId();
        subscribeMessage9.setMessageId((int) (short) 10);
        org.meqantt.message.Message.Header header14 = null;
        org.meqantt.message.ConnectMessage connectMessage15 = new org.meqantt.message.ConnectMessage(header14);
        int int16 = connectMessage15.getKeepAlive();
        connectMessage15.setWill("MQIsdp", "");
        org.meqantt.message.QoS qoS20 = connectMessage15.getWillQoS();
        subscribeMessage9.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS20);
        connectMessage3.setWill("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS20, true);
        boolean boolean24 = connectMessage3.hasWill();
        java.lang.String str25 = connectMessage3.getPassword();
        byte byte26 = connectMessage3.getProtocolVersion();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) 3 + "'", byte26 == (byte) 3);
    }

    @Test
    public void test14538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14538");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
    }

    @Test
    public void test14539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14539");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        java.lang.String str6 = connectMessage1.getWill();
        boolean boolean7 = connectMessage1.hasUsername();
        java.lang.String str8 = connectMessage1.getProtocolId();
        org.meqantt.message.Message.Header header11 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage(header11);
        org.meqantt.message.QoS qoS14 = null;
        subscribeMessage12.addTopic("hi!", qoS14);
        java.util.List<org.meqantt.message.QoS> qoSList16 = subscribeMessage12.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage22 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str23 = connectMessage22.getUsername();
        org.meqantt.message.QoS qoS27 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage("", qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList31 = subscribeMessage30.getTopics();
        org.meqantt.message.QoS qoS32 = subscribeMessage30.getQos();
        subscribeMessage28.addTopic("", qoS32);
        connectMessage22.setWill("", "\000d\000\001\001d", qoS32, true);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("hi!", qoS32);
        subscribeMessage12.addTopic("\000d\000\001\001d", qoS32);
        connectMessage1.setWill("\000d\000\001\001d", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS32, false);
        boolean boolean40 = connectMessage1.isCleanSession();
        org.meqantt.message.QoS qoS41 = connectMessage1.getWillQoS();
        org.meqantt.message.Message.Header header44 = null;
        org.meqantt.message.ConnectMessage connectMessage45 = new org.meqantt.message.ConnectMessage(header44);
        connectMessage45.setCredentials("\000d\000\001\001d");
        int int48 = connectMessage45.getKeepAlive();
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList54 = subscribeMessage53.getTopics();
        org.meqantt.message.QoS qoS55 = subscribeMessage53.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage56 = new org.meqantt.message.SubscribeMessage("", qoS55);
        org.meqantt.message.SubscribeMessage subscribeMessage57 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS55);
        org.meqantt.message.QoS qoS58 = subscribeMessage57.getQos();
        connectMessage45.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS58, false);
        connectMessage1.setWill("\000d\000\001\001d", "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS58, true);
        int int63 = connectMessage1.getKeepAlive();
        org.meqantt.message.ConnectMessage connectMessage68 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 10);
        boolean boolean69 = connectMessage68.hasPassword();
        int int70 = connectMessage68.getKeepAlive();
        java.lang.String str71 = connectMessage68.getPassword();
        org.meqantt.message.QoS qoS72 = connectMessage68.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage73 = new org.meqantt.message.SubscribeMessage("\000<Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS72);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setQos(qoS72);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MQIsdp" + "'", str8, "MQIsdp");
        org.junit.Assert.assertNotNull(qoSList16);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + qoS41 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS41.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + qoS55 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS55.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS58 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS58.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + qoS72 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS72.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14540");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage1 = new org.meqantt.message.SubscribeMessage(header0);
        org.meqantt.message.QoS qoS3 = null;
        subscribeMessage1.addTopic("hi!", qoS3);
        org.meqantt.message.PubRelMessage pubRelMessage7 = new org.meqantt.message.PubRelMessage((int) ' ');
        org.meqantt.message.QoS qoS8 = pubRelMessage7.getQos();
        subscribeMessage1.addTopic("\000d\000\001\001d", qoS8);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage1.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE can't set the DUP flag.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + qoS8 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS8.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14541");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getClientId();
        connectMessage1.setWill("hi!", "");
        boolean boolean6 = connectMessage1.hasPassword();
        boolean boolean7 = connectMessage1.isCleanSession();
        boolean boolean8 = connectMessage1.hasWill();
        org.meqantt.message.QoS qoS9 = connectMessage1.getWillQoS();
        java.lang.String str10 = connectMessage1.getWill();
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.QoS qoS11 = connectMessage1.getQos();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + qoS9 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS9.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test14542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14542");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 10);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.PubRecMessage pubRecMessage3 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str2, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
    }

    @Test
    public void test14543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14543");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage12 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type15 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage16 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage17 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage18 = new org.meqantt.message.PubAckMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type15);
    }

    @Test
    public void test14544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14544");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage9 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage10.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14545");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getProtocolId();
        byte[] byteArray5 = connectMessage3.toBytes();
        org.meqantt.message.QoS qoS6 = connectMessage3.getQos();
        boolean boolean7 = connectMessage3.isRetained();
        boolean boolean8 = connectMessage3.hasUsername();
        boolean boolean9 = connectMessage3.isWillRetained();
        boolean boolean10 = connectMessage3.hasWill();
        connectMessage3.setCredentials("Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]");
        boolean boolean13 = connectMessage3.hasUsername();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test14546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14546");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        byte byte27 = connectMessage3.getProtocolVersion();
        org.meqantt.message.ConnectMessage connectMessage34 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean35 = connectMessage34.hasWill();
        java.lang.String str36 = connectMessage34.getWill();
        org.meqantt.message.Message.Header header39 = null;
        org.meqantt.message.ConnectMessage connectMessage40 = new org.meqantt.message.ConnectMessage(header39);
        boolean boolean41 = connectMessage40.isWillRetained();
        boolean boolean42 = connectMessage40.isWillRetained();
        java.lang.String str43 = connectMessage40.getUsername();
        org.meqantt.message.QoS qoS47 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage48 = new org.meqantt.message.SubscribeMessage("", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList51 = subscribeMessage50.getTopics();
        org.meqantt.message.QoS qoS52 = subscribeMessage50.getQos();
        subscribeMessage48.addTopic("", qoS52);
        connectMessage40.setWill("hi!", "", qoS52, false);
        connectMessage34.setWill("MQIsdp", "hi!", qoS52, false);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS52);
        connectMessage3.setWill("", "MQIsdp", qoS52, false);
        connectMessage3.setCredentials("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        boolean boolean64 = connectMessage3.hasWill();
        boolean boolean65 = connectMessage3.hasPassword();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 3 + "'", byte27 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test14547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14547");
        org.meqantt.SocketClient socketClient1 = new org.meqantt.SocketClient("00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n");
        // The following exception was thrown during execution in test generation
        try {
            socketClient1.connect("00: 00110000 0 48\n01: 00000111 \007 7\n02: 00000000 \000 0\n03: 00000011 \003 3\n04: 01101000 h 104\n05: 01101001 i 105\n06: 00100001 ! 33\n07: 00000000 \000 0\n08: 00000000 \000 0\n", (int) '4');
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: 00: 00110000 0 48?01: 00000111 ? 7?02: 00000000 ? 0?03: 00000011 ? 3?04: 01101000 h 104?05: 01101001 i 105?06: 00100001 ! 33?07: 00000000 ? 0?08: 00000000 ? 0?");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14548");
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean5 = connectMessage4.hasWill();
        java.lang.String str6 = connectMessage4.getWill();
        org.meqantt.message.Message.Header header9 = null;
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage(header9);
        boolean boolean11 = connectMessage10.isWillRetained();
        boolean boolean12 = connectMessage10.isWillRetained();
        java.lang.String str13 = connectMessage10.getUsername();
        org.meqantt.message.QoS qoS17 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage("", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList21 = subscribeMessage20.getTopics();
        org.meqantt.message.QoS qoS22 = subscribeMessage20.getQos();
        subscribeMessage18.addTopic("", qoS22);
        connectMessage10.setWill("hi!", "", qoS22, false);
        connectMessage4.setWill("MQIsdp", "hi!", qoS22, false);
        byte byte28 = connectMessage4.getProtocolVersion();
        org.meqantt.message.ConnectMessage connectMessage35 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean36 = connectMessage35.hasWill();
        java.lang.String str37 = connectMessage35.getWill();
        org.meqantt.message.Message.Header header40 = null;
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage(header40);
        boolean boolean42 = connectMessage41.isWillRetained();
        boolean boolean43 = connectMessage41.isWillRetained();
        java.lang.String str44 = connectMessage41.getUsername();
        org.meqantt.message.QoS qoS48 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage("", qoS48);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList52 = subscribeMessage51.getTopics();
        org.meqantt.message.QoS qoS53 = subscribeMessage51.getQos();
        subscribeMessage49.addTopic("", qoS53);
        connectMessage41.setWill("hi!", "", qoS53, false);
        connectMessage35.setWill("MQIsdp", "hi!", qoS53, false);
        org.meqantt.message.SubscribeMessage subscribeMessage59 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS53);
        connectMessage4.setWill("", "MQIsdp", qoS53, false);
        int int62 = connectMessage4.getKeepAlive();
        org.meqantt.message.Message.Header header65 = null;
        org.meqantt.message.ConnectMessage connectMessage66 = new org.meqantt.message.ConnectMessage(header65);
        boolean boolean67 = connectMessage66.isWillRetained();
        boolean boolean68 = connectMessage66.isWillRetained();
        connectMessage66.setWill("", "MQIsdp");
        boolean boolean72 = connectMessage66.isWillRetained();
        java.lang.String str73 = connectMessage66.getClientId();
        java.lang.String str74 = connectMessage66.getWill();
        byte byte75 = connectMessage66.getProtocolVersion();
        java.lang.String str76 = connectMessage66.getPassword();
        boolean boolean77 = connectMessage66.hasPassword();
        org.meqantt.message.QoS qoS78 = connectMessage66.getWillQoS();
        connectMessage4.setWill("\000\003hi!", "MQIsdp", qoS78, true);
        org.meqantt.message.SubscribeMessage subscribeMessage81 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS78);
        subscribeMessage81.setDup(false);
        java.util.List<java.lang.String> strList84 = subscribeMessage81.getTopics();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + qoS22 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS22.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 3 + "'", byte28 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + qoS53 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS53.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "MQIsdp" + "'", str74, "MQIsdp");
        org.junit.Assert.assertTrue("'" + byte75 + "' != '" + (byte) 3 + "'", byte75 == (byte) 3);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + qoS78 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS78.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList84);
    }

    @Test
    public void test14549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14549");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str3 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.Message.Header header7 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type8 = header7.getType();
        org.meqantt.message.PubRelMessage pubRelMessage9 = new org.meqantt.message.PubRelMessage(header7);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header7);
        org.meqantt.message.Message.Type type11 = header7.getType();
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header7);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage(header7);
        java.util.List<org.meqantt.message.QoS> qoSList14 = subscribeMessage13.getTopicQoSs();
        org.meqantt.message.Message.Header header17 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type18 = header17.getType();
        org.meqantt.message.Message.Type type19 = header17.getType();
        org.meqantt.message.SubAckMessage subAckMessage20 = new org.meqantt.message.SubAckMessage(header17);
        org.meqantt.message.PingReqMessage pingReqMessage21 = new org.meqantt.message.PingReqMessage(header17);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage(header17);
        org.meqantt.message.ConnectMessage connectMessage23 = new org.meqantt.message.ConnectMessage(header17);
        org.meqantt.message.PingReqMessage pingReqMessage24 = new org.meqantt.message.PingReqMessage(header17);
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage(header17);
        java.util.List<java.lang.String> strList26 = subscribeMessage25.getTopics();
        subscribeMessage25.setDup(false);
        org.meqantt.message.Message.Header header30 = null;
        org.meqantt.message.ConnectMessage connectMessage31 = new org.meqantt.message.ConnectMessage(header30);
        int int32 = connectMessage31.getKeepAlive();
        connectMessage31.setWill("MQIsdp", "");
        org.meqantt.message.QoS qoS36 = connectMessage31.getWillQoS();
        subscribeMessage25.addTopic("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS36);
        subscribeMessage13.addTopic("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", qoS36);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage5.setQos(qoS36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str3, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type8);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(qoSList14);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14550");
        org.meqantt.message.PubRecMessage pubRecMessage1 = new org.meqantt.message.PubRecMessage((int) '\001');
        org.meqantt.message.Message.Type type2 = pubRecMessage1.getType();
        int int3 = pubRecMessage1.getMessageId();
        org.meqantt.message.Message.Header header5 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type6 = header5.getType();
        org.meqantt.message.Message.Type type7 = header5.getType();
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header5);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header5);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header5);
        org.meqantt.message.DisconnectMessage disconnectMessage11 = new org.meqantt.message.DisconnectMessage(header5);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header5);
        org.meqantt.message.Message.Type type13 = header5.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage(header5);
        org.meqantt.message.SubAckMessage subAckMessage17 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList18 = subAckMessage17.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList19 = subAckMessage17.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList20 = subAckMessage17.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList23 = subscribeMessage22.getTopics();
        org.meqantt.message.QoS qoS24 = subscribeMessage22.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage("", qoS24);
        subAckMessage17.addQoS(qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList28 = subscribeMessage27.getTopics();
        org.meqantt.message.ConnectMessage connectMessage33 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str34 = connectMessage33.getProtocolId();
        org.meqantt.message.QoS qoS35 = connectMessage33.getQos();
        subscribeMessage27.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS35);
        subAckMessage17.addQoS(qoS35);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList42 = subscribeMessage41.getTopics();
        org.meqantt.message.QoS qoS43 = subscribeMessage41.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage44 = new org.meqantt.message.SubscribeMessage("", qoS43);
        org.meqantt.message.SubscribeMessage subscribeMessage45 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS43);
        org.meqantt.message.QoS qoS46 = subscribeMessage45.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList51 = subscribeMessage50.getTopics();
        org.meqantt.message.QoS qoS52 = subscribeMessage50.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("", qoS52);
        org.meqantt.message.SubscribeMessage subscribeMessage54 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS52);
        org.meqantt.message.QoS qoS55 = subscribeMessage54.getQos();
        subscribeMessage45.addTopic("", qoS55);
        org.meqantt.message.SubscribeMessage subscribeMessage57 = new org.meqantt.message.SubscribeMessage("", qoS55);
        subAckMessage17.addQoS(qoS55);
        org.meqantt.message.SubscribeMessage subscribeMessage59 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", qoS55);
        subscribeMessage14.addTopic("00: 00010000 \020 16\n01: 00001110 \016 14\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n", qoS55);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage1.setQos(qoS55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.meqantt.message.Message.Type.PUBREC + "'", type2.equals(org.meqantt.message.Message.Type.PUBREC));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(type6);
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(qoSList18);
        org.junit.Assert.assertNull(qoSList19);
        org.junit.Assert.assertNull(qoSList20);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "MQIsdp" + "'", str34, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS35 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS35.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + qoS43 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS43.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS46 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS46.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS55 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS55.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14551");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage8 = new org.meqantt.message.PubRelMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage8.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14552");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000\023\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d", "\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n");
        publishMessage2.setRetained(false);
    }

    @Test
    public void test14553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14553");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str11 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str13 = connectMessage12.getClientId();
        org.meqantt.message.QoS qoS14 = connectMessage12.getWillQoS();
        boolean boolean15 = connectMessage12.hasWill();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str11, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(qoS14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test14554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14554");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus7 = connAckMessage6.getStatus();
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage6.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(connectionStatus7);
    }

    @Test
    public void test14555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14555");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingRespMessage pingRespMessage2 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage("\000\000", false, (int) (short) -1);
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str19 = connectMessage18.getUsername();
        org.meqantt.message.QoS qoS23 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("", qoS23);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList27 = subscribeMessage26.getTopics();
        org.meqantt.message.QoS qoS28 = subscribeMessage26.getQos();
        subscribeMessage24.addTopic("", qoS28);
        connectMessage18.setWill("", "\000d\000\001\001d", qoS28, true);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("hi!", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS28);
        connectMessage7.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS28, false);
        org.meqantt.message.Message.Header header42 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage(header42);
        java.util.List<java.lang.String> strList44 = subscribeMessage43.getTopics();
        java.util.List<java.lang.String> strList45 = subscribeMessage43.getTopics();
        java.util.List<org.meqantt.message.QoS> qoSList46 = subscribeMessage43.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage51 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean52 = connectMessage51.hasWill();
        java.lang.String str53 = connectMessage51.getWill();
        org.meqantt.message.Message.Header header56 = null;
        org.meqantt.message.ConnectMessage connectMessage57 = new org.meqantt.message.ConnectMessage(header56);
        boolean boolean58 = connectMessage57.isWillRetained();
        boolean boolean59 = connectMessage57.isWillRetained();
        java.lang.String str60 = connectMessage57.getUsername();
        org.meqantt.message.QoS qoS64 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage65 = new org.meqantt.message.SubscribeMessage("", qoS64);
        org.meqantt.message.SubscribeMessage subscribeMessage67 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList68 = subscribeMessage67.getTopics();
        org.meqantt.message.QoS qoS69 = subscribeMessage67.getQos();
        subscribeMessage65.addTopic("", qoS69);
        connectMessage57.setWill("hi!", "", qoS69, false);
        connectMessage51.setWill("MQIsdp", "hi!", qoS69, false);
        subscribeMessage43.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS69);
        org.meqantt.message.SubscribeMessage subscribeMessage76 = new org.meqantt.message.SubscribeMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS69);
        connectMessage7.setWill("", "00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n", qoS69, false);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage3.setQos(qoS69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(qoSList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + qoS69 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS69.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14556");
        org.meqantt.message.SubAckMessage subAckMessage1 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage1.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage1.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str8 = connectMessage7.getProtocolId();
        org.meqantt.message.QoS qoS9 = connectMessage7.getQos();
        subAckMessage1.addQoS(qoS9);
        java.util.List<org.meqantt.message.QoS> qoSList11 = subAckMessage1.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str19 = connectMessage18.getUsername();
        org.meqantt.message.QoS qoS23 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("", qoS23);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList27 = subscribeMessage26.getTopics();
        org.meqantt.message.QoS qoS28 = subscribeMessage26.getQos();
        subscribeMessage24.addTopic("", qoS28);
        connectMessage18.setWill("", "\000d\000\001\001d", qoS28, true);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("hi!", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("", qoS28);
        subAckMessage1.addQoS(qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", qoS28);
        java.util.List<java.lang.String> strList37 = subscribeMessage36.getTopics();
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MQIsdp" + "'", str8, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS9 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS9.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList11);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList37);
    }

    @Test
    public void test14557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14557");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("00: 00000000 \000 0\n01: 00000000 \000 0\n", "\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
    }

    @Test
    public void test14558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14558");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str5 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage8.setDup(false);
        unsubscribeMessage8.setMessageId(100);
        unsubscribeMessage8.addTopic("\001\003\003\001");
        int int15 = unsubscribeMessage8.getMessageId();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test14559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14559");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("MQIsdp", (int) (byte) 0);
        org.meqantt.MqttListener mqttListener12 = null;
        nettyClient1.setListener(mqttListener12);
        nettyClient1.ping();
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.unsubscribe("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
    }

    @Test
    public void test14560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14560");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage11 = new org.meqantt.message.UnsubAckMessage(header1);
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void test14561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14561");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage7 = new org.meqantt.message.PubRecMessage(header1);
        pubRecMessage7.setMessageId((int) 'a');
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str4, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
    }

    @Test
    public void test14562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14562");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.Message.Header header3 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header3);
        boolean boolean5 = connectMessage4.isWillRetained();
        java.lang.String str6 = connectMessage4.getWillTopic();
        java.lang.String str7 = connectMessage4.getWill();
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) connectMessage4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test14563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14563");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.unsubscribe("\000\000");
        nettyClient1.disconnect();
        nettyClient1.publish("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener19 = null;
        nettyClient1.setListener(mqttListener19);
        nettyClient1.connect("hi!", 10);
        nettyClient1.subscribe("\000=Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14564");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        java.lang.String str6 = header1.toString();
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage8 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage9.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14565");
        org.meqantt.message.PubRecMessage pubRecMessage1 = new org.meqantt.message.PubRecMessage((int) '\001');
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage1.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14566");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
    }

    @Test
    public void test14567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14567");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        byte byte3 = connectMessage2.getProtocolVersion();
        org.meqantt.message.QoS qoS4 = connectMessage2.getWillQoS();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage("hi!");
        unsubscribeMessage8.setDup(false);
        org.meqantt.message.QoS qoS11 = unsubscribeMessage8.getQos();
        connectMessage2.setWill("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 11000000 \300 192\n05: 10000000 \200 128\n", "\000\004\001\003\003\001", qoS11, true);
        java.lang.String str14 = connectMessage2.getPassword();
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 3 + "'", byte3 == (byte) 3);
        org.junit.Assert.assertNull(qoS4);
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test14568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14568");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage("\000\000");
        byte[] byteArray5 = unsubscribeMessage4.toBytes();
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage("hi!", byteArray5);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", byteArray5);
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage("\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", byteArray5);
        java.lang.String str9 = org.meqantt.util.FormatUtil.toString(byteArray5);
        java.lang.String str10 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray5);
        java.lang.String str11 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-94, 8, 0, 0, 0, 4, -64, -128, -64, -128]");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n" + "'", str10, "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n" + "'", str11, "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
    }

    @Test
    public void test14569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14569");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        java.lang.String str6 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage7 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage(header1);
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14570");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.meqantt.MqttListener mqttListener2 = null;
        nettyClient1.setListener(mqttListener2);
        nettyClient1.connect("", (int) 'a');
        nettyClient1.unsubscribe("00: 00000000 \000 0\n01: 00000000 \000 0\n");
        nettyClient1.disconnect();
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n");
    }

    @Test
    public void test14571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14571");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        connectMessage1.setWill("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.meqantt.message.QoS qoS6 = connectMessage1.getWillQoS();
        java.lang.String str7 = connectMessage1.getWillTopic();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n" + "'", str7, "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
    }

    @Test
    public void test14572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14572");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 3);
        org.meqantt.message.SubAckMessage subAckMessage2 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test14573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14573");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage9 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage11 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList13 = subAckMessage12.getGrantedQoSs();
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(qoSList13);
    }

    @Test
    public void test14574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14574");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str11 = header1.toString();
        org.meqantt.message.UnsubAckMessage unsubAckMessage12 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage12.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str11, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14575");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        unsubscribeMessage1.addTopic("00: 00010000 \020 16\n01: 00001110 \016 14\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n");
        boolean boolean4 = unsubscribeMessage1.isDup();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test14576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14576");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getClientId();
        java.lang.String str7 = connectMessage3.getPassword();
        connectMessage3.setCredentials("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\ufffd\ufffd", "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test14577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14577");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        java.lang.String str6 = connectMessage3.getWill();
        java.lang.String str7 = connectMessage3.getProtocolId();
        byte byte8 = connectMessage3.getProtocolVersion();
        org.meqantt.message.QoS qoS9 = connectMessage3.getWillQoS();
        org.meqantt.message.QoS qoS10 = connectMessage3.getWillQoS();
        java.lang.String str11 = connectMessage3.getWillTopic();
        boolean boolean12 = connectMessage3.isWillRetained();
        boolean boolean13 = connectMessage3.isDup();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 3 + "'", byte8 == (byte) 3);
        org.junit.Assert.assertNull(qoS9);
        org.junit.Assert.assertNull(qoS10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test14578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14578");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type9 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Header header13 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage14 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.PubCompMessage pubCompMessage15 = new org.meqantt.message.PubCompMessage(header13);
        org.meqantt.message.PubAckMessage pubAckMessage16 = new org.meqantt.message.PubAckMessage(header13);
        org.meqantt.message.PingRespMessage pingRespMessage17 = new org.meqantt.message.PingRespMessage(header13);
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage(header13);
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage();
        java.lang.String str22 = connectMessage21.getProtocolId();
        java.lang.String str23 = connectMessage21.getClientId();
        org.meqantt.message.SubAckMessage subAckMessage26 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList27 = subAckMessage26.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList28 = subAckMessage26.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str33 = connectMessage32.getProtocolId();
        org.meqantt.message.QoS qoS34 = connectMessage32.getQos();
        subAckMessage26.addQoS(qoS34);
        org.meqantt.message.ConnectMessage connectMessage39 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean40 = connectMessage39.hasWill();
        java.lang.String str41 = connectMessage39.getWill();
        org.meqantt.message.Message.Header header44 = null;
        org.meqantt.message.ConnectMessage connectMessage45 = new org.meqantt.message.ConnectMessage(header44);
        boolean boolean46 = connectMessage45.isWillRetained();
        boolean boolean47 = connectMessage45.isWillRetained();
        java.lang.String str48 = connectMessage45.getUsername();
        org.meqantt.message.QoS qoS52 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("", qoS52);
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList56 = subscribeMessage55.getTopics();
        org.meqantt.message.QoS qoS57 = subscribeMessage55.getQos();
        subscribeMessage53.addTopic("", qoS57);
        connectMessage45.setWill("hi!", "", qoS57, false);
        connectMessage39.setWill("MQIsdp", "hi!", qoS57, false);
        org.meqantt.message.SubAckMessage subAckMessage65 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList66 = subAckMessage65.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList67 = subAckMessage65.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList68 = subAckMessage65.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage70 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList71 = subscribeMessage70.getTopics();
        org.meqantt.message.QoS qoS72 = subscribeMessage70.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage73 = new org.meqantt.message.SubscribeMessage("", qoS72);
        subAckMessage65.addQoS(qoS72);
        connectMessage39.setWill("hi!", "MQIsdp", qoS72, true);
        subAckMessage26.addQoS(qoS72);
        connectMessage21.setWill("\000d\000\001\001d", "hi!", qoS72, true);
        org.meqantt.message.SubscribeMessage subscribeMessage80 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS72);
        subscribeMessage18.addTopic("\ufffd\ufffd\001\000\000\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\000", qoS72);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage11.setQos(qoS72);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MQIsdp" + "'", str22, "MQIsdp");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(qoSList27);
        org.junit.Assert.assertNull(qoSList28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQIsdp" + "'", str33, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + qoS57 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS57.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList66);
        org.junit.Assert.assertNull(qoSList67);
        org.junit.Assert.assertNull(qoSList68);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + qoS72 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS72.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14579");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.subscribe("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener9 = null;
        nettyClient1.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.subscribe("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        nettyClient1.ping();
        nettyClient1.publish("00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n", "\000\000");
        org.meqantt.MqttListener mqttListener19 = null;
        nettyClient1.setListener(mqttListener19);
    }

    @Test
    public void test14580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14580");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage7.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14581");
        org.meqantt.message.PubAckMessage pubAckMessage1 = new org.meqantt.message.PubAckMessage(32);
        org.meqantt.message.Message.Header header2 = null;
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage(header2);
        int int4 = connectMessage3.getKeepAlive();
        java.lang.String str5 = connectMessage3.getPassword();
        org.meqantt.message.Message.Header header9 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage(header9);
        connectMessage10.setWill("\000\000", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList17 = subscribeMessage16.getTopics();
        org.meqantt.message.QoS qoS18 = subscribeMessage16.getQos();
        org.meqantt.message.ConnectMessage connectMessage23 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str24 = connectMessage23.getProtocolId();
        org.meqantt.message.QoS qoS25 = connectMessage23.getQos();
        subscribeMessage16.addTopic("", qoS25);
        connectMessage10.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS25, true);
        connectMessage3.setWill("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS25, true);
        connectMessage3.setWill("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        org.meqantt.message.QoS qoS34 = connectMessage3.getWillQoS();
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage1.setQos(qoS34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MQIsdp" + "'", str24, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14582");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage11 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Type type12 = pubRecMessage11.getType();
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage11.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(type12);
    }

    @Test
    public void test14583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14583");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        java.lang.String str6 = connectMessage1.getWill();
        boolean boolean7 = connectMessage1.hasUsername();
        java.lang.String str8 = connectMessage1.getProtocolId();
        int int9 = connectMessage1.getKeepAlive();
        connectMessage1.setWill("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", "\000d\000\001\001d");
        java.lang.String str13 = connectMessage1.getUsername();
        java.lang.String str14 = connectMessage1.getProtocolId();
        java.lang.String str15 = connectMessage1.getPassword();
        connectMessage1.setCredentials("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "00: 00110000 0 48\n01: 00010010 \022 18\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000000 \000 0\n11: 00001000 \b 8\n12: 11000000 \300 192\n13: 10000000 \200 128\n14: 01100100 d 100\n15: 11000000 \300 192\n16: 10000000 \200 128\n17: 00000001 \001 1\n18: 00000001 \001 1\n19: 01100100 d 100\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MQIsdp" + "'", str8, "MQIsdp");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MQIsdp" + "'", str14, "MQIsdp");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test14584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14584");
        org.meqantt.message.Message.Header header2 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage3 = new org.meqantt.message.PingReqMessage(header2);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header2);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header2);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header2);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage(header2);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header2);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header2);
        java.util.List<org.meqantt.message.QoS> qoSList10 = subscribeMessage9.getTopicQoSs();
        org.meqantt.message.Message.Header header12 = null;
        org.meqantt.message.SubAckMessage subAckMessage13 = new org.meqantt.message.SubAckMessage(header12);
        org.meqantt.message.Message.Header header15 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type16 = header15.getType();
        org.meqantt.message.Message.Type type17 = header15.getType();
        org.meqantt.message.SubAckMessage subAckMessage18 = new org.meqantt.message.SubAckMessage(header15);
        org.meqantt.message.PingReqMessage pingReqMessage19 = new org.meqantt.message.PingReqMessage(header15);
        org.meqantt.message.PingReqMessage pingReqMessage20 = new org.meqantt.message.PingReqMessage(header15);
        org.meqantt.message.DisconnectMessage disconnectMessage21 = new org.meqantt.message.DisconnectMessage(header15);
        org.meqantt.message.SubAckMessage subAckMessage22 = new org.meqantt.message.SubAckMessage(header15);
        java.util.List<org.meqantt.message.QoS> qoSList23 = subAckMessage22.getGrantedQoSs();
        org.meqantt.message.SubAckMessage subAckMessage24 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList25 = subAckMessage24.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList26 = subAckMessage24.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList27 = subAckMessage24.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList30 = subscribeMessage29.getTopics();
        org.meqantt.message.QoS qoS31 = subscribeMessage29.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("", qoS31);
        subAckMessage24.addQoS(qoS31);
        subAckMessage22.addQoS(qoS31);
        subAckMessage13.addQoS(qoS31);
        subscribeMessage9.addTopic("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type39 = subscribeMessage38.getType();
        org.meqantt.message.QoS qoS42 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage("", qoS42);
        org.meqantt.message.SubscribeMessage subscribeMessage45 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList46 = subscribeMessage45.getTopics();
        org.meqantt.message.QoS qoS47 = subscribeMessage45.getQos();
        subscribeMessage43.addTopic("", qoS47);
        subscribeMessage38.addTopic("MQIsdp", qoS47);
        subscribeMessage38.setDup(false);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage54 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS55 = unsubscribeMessage54.getQos();
        subscribeMessage38.addTopic("MQIsdp", qoS55);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList59 = subscribeMessage58.getTopics();
        org.meqantt.message.QoS qoS60 = subscribeMessage58.getQos();
        org.meqantt.message.ConnectMessage connectMessage65 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str66 = connectMessage65.getProtocolId();
        org.meqantt.message.QoS qoS67 = connectMessage65.getQos();
        subscribeMessage58.addTopic("", qoS67);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage70 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList71 = unsubscribeMessage70.getTopics();
        org.meqantt.message.Message.Type type72 = unsubscribeMessage70.getType();
        java.util.List<java.lang.String> strList73 = unsubscribeMessage70.getTopics();
        org.meqantt.message.QoS qoS74 = unsubscribeMessage70.getQos();
        subscribeMessage58.setQos(qoS74);
        subscribeMessage38.addTopic("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS74);
        subscribeMessage9.addTopic("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", qoS74);
        org.meqantt.message.SubscribeMessage subscribeMessage78 = new org.meqantt.message.SubscribeMessage("\000\ufffd\ufffd\023\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d", qoS74);
        org.junit.Assert.assertNotNull(qoSList10);
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNull(qoSList23);
        org.junit.Assert.assertNull(qoSList25);
        org.junit.Assert.assertNull(qoSList26);
        org.junit.Assert.assertNull(qoSList27);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type39.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + qoS47 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS47.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS55 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS55.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "MQIsdp" + "'", str66, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS67 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS67.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type72.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + qoS74 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS74.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14585");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.SubAckMessage subAckMessage2 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage2.getGrantedQoSs();
        boolean boolean4 = subAckMessage2.isDup();
        org.meqantt.message.Message.Type type5 = subAckMessage2.getType();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage2.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test14586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14586");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage(header1);
        java.util.List<java.lang.String> strList9 = subscribeMessage8.getTopics();
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test14587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14587");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getWillTopic();
        boolean boolean7 = connectMessage3.isCleanSession();
        boolean boolean8 = connectMessage3.hasPassword();
        boolean boolean9 = connectMessage3.isDup();
        org.meqantt.message.QoS qoS10 = connectMessage3.getWillQoS();
        java.lang.String str11 = connectMessage3.getUsername();
        org.meqantt.message.QoS qoS12 = connectMessage3.getWillQoS();
        java.lang.String str13 = connectMessage3.getUsername();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(qoS10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(qoS12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test14588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14588");
        org.meqantt.SocketClient socketClient1 = new org.meqantt.SocketClient("00: 00000000 \000 0\n01: 00001101 \r 13\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00000110 \006 6\n05: 11101111 \357 239\n06: 10111111 \277 191\n07: 10111101 \275 189\n08: 11101111 \357 239\n09: 10111111 \277 191\n10: 10111101 \275 189\n11: 00000011 \003 3\n12: 01101000 h 104\n13: 01101001 i 105\n14: 00100001 ! 33\n");
        // The following exception was thrown during execution in test generation
        try {
            socketClient1.connect("\ufffd\003\000\000\000", 6);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: ?????");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14589");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        org.meqantt.MqttListener mqttListener15 = null;
        nettyClient1.setListener(mqttListener15);
        nettyClient1.disconnect();
        org.meqantt.MqttListener mqttListener18 = null;
        nettyClient1.setListener(mqttListener18);
    }

    @Test
    public void test14590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14590");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage8 = new org.meqantt.message.PingRespMessage(header1);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14591");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        boolean boolean3 = connectMessage1.isCleanSession();
        java.lang.String str4 = connectMessage1.getPassword();
        connectMessage1.setCredentials("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        java.lang.String str7 = connectMessage1.getUsername();
        java.lang.String str8 = connectMessage1.getUsername();
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList12 = subAckMessage11.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList13 = subAckMessage11.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList14 = subAckMessage11.getGrantedQoSs();
        org.meqantt.message.Message.Header header16 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type17 = header16.getType();
        org.meqantt.message.SubAckMessage subAckMessage18 = new org.meqantt.message.SubAckMessage(header16);
        org.meqantt.message.Message.Header header20 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str21 = header20.toString();
        org.meqantt.message.SubAckMessage subAckMessage22 = new org.meqantt.message.SubAckMessage(header20);
        org.meqantt.message.PublishMessage publishMessage23 = new org.meqantt.message.PublishMessage(header20);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage26 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS27 = unsubscribeMessage26.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage("", qoS27);
        publishMessage23.setQos(qoS27);
        subAckMessage18.addQoS(qoS27);
        subAckMessage11.addQoS(qoS27);
        connectMessage1.setWill("\000\006MQIsdp", "00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n", qoS27, false);
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.Message.Type type34 = connectMessage1.getType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n" + "'", str7, "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n" + "'", str8, "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        org.junit.Assert.assertNull(qoSList12);
        org.junit.Assert.assertNull(qoSList13);
        org.junit.Assert.assertNull(qoSList14);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type17.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str21, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14592");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage3 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        boolean boolean6 = pubAckMessage5.isDup();
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage5.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test14593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14593");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage6 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage7.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14594");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus6 = connAckMessage5.getStatus();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(connectionStatus6);
    }

    @Test
    public void test14595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14595");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        boolean boolean6 = connectMessage3.hasWill();
        connectMessage3.setWill("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
        boolean boolean10 = connectMessage3.hasUsername();
        java.lang.String str11 = connectMessage3.getUsername();
        boolean boolean12 = connectMessage3.isCleanSession();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test14596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14596");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 0);
        java.lang.String str4 = connectMessage3.getPassword();
        java.lang.String str5 = connectMessage3.getProtocolId();
        byte byte6 = connectMessage3.getProtocolVersion();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MQIsdp" + "'", str5, "MQIsdp");
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 3 + "'", byte6 == (byte) 3);
    }

    @Test
    public void test14597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14597");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str5 = header1.toString();
        java.lang.String str6 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.Message.Type type9 = header1.getType();
        org.meqantt.message.Message.Type type10 = header1.getType();
        java.lang.String str11 = header1.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str11, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14598");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage5.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14599");
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("00: 00000000 \000 0\n01: 00010011 \023 19\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00001000 \b 8\n05: 11101111 \357 239\n06: 10111111 \277 191\n07: 10111101 \275 189\n08: 11101111 \357 239\n09: 10111111 \277 191\n10: 10111101 \275 189\n11: 01100100 d 100\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 11101111 \357 239\n16: 10111111 \277 191\n17: 10111101 \275 189\n18: 00000001 \001 1\n19: 00000001 \001 1\n20: 01100100 d 100\n", false, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Client id cannot be null and must be at most 23 characters long: 00: 00000000 ? 0?01: 00010011 ? 19?02: 11000000 A? 192?03: 10000000 ? 128?04: 00001000 ? 8?05: 11101111 i? 239?06: 10111111 ? 191?07: 10111101 ? 189?08: 11101111 i? 239?09: 10111111 ? 191?10: 10111101 ? 189?11: 01100100 d 100?12: 11101111 i? 239?13: 10111111 ? 191?14: 10111101 ? 189?15: 11101111 i? 239?16: 10111111 ? 191?17: 10111101 ? 189?18: 00000001 ? 1?19: 00000001 ? 1?20: 01100100 d 100?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14600");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage8 = new org.meqantt.message.PubRelMessage(header1);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type6);
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test14601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14601");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.Message.Header header3 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type4 = header3.getType();
        org.meqantt.message.Message.Type type5 = header3.getType();
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header3);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header3);
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage(header3);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header3);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header3);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header3);
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header3);
        boolean boolean13 = connectMessage12.isDup();
        int int14 = connectMessage12.getKeepAlive();
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) connectMessage12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test14602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14602");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Header header5 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header5);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header5);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header5);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage9.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList11 = subAckMessage9.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage15 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str16 = connectMessage15.getProtocolId();
        org.meqantt.message.QoS qoS17 = connectMessage15.getQos();
        subAckMessage9.addQoS(qoS17);
        org.meqantt.message.ConnectMessage connectMessage22 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean23 = connectMessage22.hasWill();
        java.lang.String str24 = connectMessage22.getWill();
        org.meqantt.message.Message.Header header27 = null;
        org.meqantt.message.ConnectMessage connectMessage28 = new org.meqantt.message.ConnectMessage(header27);
        boolean boolean29 = connectMessage28.isWillRetained();
        boolean boolean30 = connectMessage28.isWillRetained();
        java.lang.String str31 = connectMessage28.getUsername();
        org.meqantt.message.QoS qoS35 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("", qoS35);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList39 = subscribeMessage38.getTopics();
        org.meqantt.message.QoS qoS40 = subscribeMessage38.getQos();
        subscribeMessage36.addTopic("", qoS40);
        connectMessage28.setWill("hi!", "", qoS40, false);
        connectMessage22.setWill("MQIsdp", "hi!", qoS40, false);
        org.meqantt.message.SubAckMessage subAckMessage48 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList49 = subAckMessage48.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList50 = subAckMessage48.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList51 = subAckMessage48.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList54 = subscribeMessage53.getTopics();
        org.meqantt.message.QoS qoS55 = subscribeMessage53.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage56 = new org.meqantt.message.SubscribeMessage("", qoS55);
        subAckMessage48.addQoS(qoS55);
        connectMessage22.setWill("hi!", "MQIsdp", qoS55, true);
        subAckMessage9.addQoS(qoS55);
        subAckMessage8.addQoS(qoS55);
        subAckMessage3.addQoS(qoS55);
        subAckMessage3.setMessageId((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage3.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type2.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(qoSList10);
        org.junit.Assert.assertNull(qoSList11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MQIsdp" + "'", str16, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + qoS40 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS40.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList49);
        org.junit.Assert.assertNull(qoSList50);
        org.junit.Assert.assertNull(qoSList51);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + qoS55 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS55.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14603");
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str5 = connectMessage4.getUsername();
        org.meqantt.message.QoS qoS9 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage("", qoS9);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList13 = subscribeMessage12.getTopics();
        org.meqantt.message.QoS qoS14 = subscribeMessage12.getQos();
        subscribeMessage10.addTopic("", qoS14);
        connectMessage4.setWill("", "\000d\000\001\001d", qoS14, true);
        boolean boolean18 = connectMessage4.isCleanSession();
        java.lang.String str19 = connectMessage4.getClientId();
        java.lang.String str20 = connectMessage4.getPassword();
        java.lang.String str21 = connectMessage4.getWill();
        byte[] byteArray22 = connectMessage4.toBytes();
        org.meqantt.message.PublishMessage publishMessage23 = new org.meqantt.message.PublishMessage("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", byteArray22);
        byte[] byteArray24 = publishMessage23.getData();
        int int25 = publishMessage23.getMessageId();
        java.lang.String str26 = publishMessage23.getDataAsString();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\000d\000\001\001d" + "'", str21, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\020\032\000\006MQIsdp\003&\000\001\000\000\000\000\000\b\ufffd\ufffd\ufffd\ufffd\001\001d" + "'", str26, "\020\032\000\006MQIsdp\003&\000\001\000\000\000\000\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
    }

    @Test
    public void test14604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14604");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage10 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage11 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage12 = new org.meqantt.message.UnsubscribeMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage12.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14605");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        java.lang.String str8 = connectMessage1.getClientId();
        java.lang.String str9 = connectMessage1.getWill();
        java.lang.String str10 = connectMessage1.getPassword();
        int int11 = connectMessage1.getKeepAlive();
        boolean boolean12 = connectMessage1.isCleanSession();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14606");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage7 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage("00: 10000000 \200 128\n01: 00001011 \013 11\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000110 \006 6\n06: 01001101 M 77\n07: 01010001 Q 81\n08: 01001001 I 73\n09: 01110011 s 115\n10: 01100100 d 100\n11: 01110000 p 112\n12: 00000000 \000 0\n", "");
        org.meqantt.message.QoS qoS12 = publishMessage11.getQos();
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage8.setQos(qoS12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertTrue("'" + qoS12 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS12.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14607");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isCleanSession();
        java.lang.String str3 = connectMessage1.getUsername();
        java.lang.String str4 = connectMessage1.getUsername();
        org.meqantt.message.Message.Header header8 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type9 = header8.getType();
        org.meqantt.message.Message.Type type10 = header8.getType();
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header8);
        org.meqantt.message.PingReqMessage pingReqMessage12 = new org.meqantt.message.PingReqMessage(header8);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage(header8);
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage(header8);
        org.meqantt.message.PingReqMessage pingReqMessage15 = new org.meqantt.message.PingReqMessage(header8);
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage(header8);
        org.meqantt.message.ConnAckMessage connAckMessage17 = new org.meqantt.message.ConnAckMessage(header8);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus18 = connAckMessage17.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus19 = connAckMessage17.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus20 = connAckMessage17.getStatus();
        org.meqantt.message.QoS qoS21 = connAckMessage17.getQos();
        connectMessage1.setWill("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS21, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = connectMessage1.isDup();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(type9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(connectionStatus18);
        org.junit.Assert.assertNull(connectionStatus19);
        org.junit.Assert.assertNull(connectionStatus20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14608");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str5 = connectMessage4.getUsername();
        boolean boolean6 = connectMessage4.isDup();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage4.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test14609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14609");
        org.meqantt.message.ConnectMessage connectMessage0 = new org.meqantt.message.ConnectMessage();
        java.lang.String str1 = connectMessage0.getProtocolId();
        boolean boolean2 = connectMessage0.hasPassword();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage0.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MQIsdp" + "'", str1, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test14610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14610");
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\ufffd\ufffd\001\000\000\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\000", false, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Client id cannot be null and must be at most 23 characters long: ???????00: 00110000 0 48?01: 00001000 ? 8?02: 00000000 ?? 0?03: 00000000 ?? 0?04: 00000000 ?? 0?05: 01100100 d 100?06: 00000000 ?? 0?07: 00000001 ? 1?08: 00000001 ? 1?09: 01100100 d 100??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14611");
        org.meqantt.SocketClient socketClient1 = new org.meqantt.SocketClient("\000\r\ufffd\ufffd\006\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\003hi!");
    }

    @Test
    public void test14612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14612");
        org.meqantt.message.ConnectMessage connectMessage0 = new org.meqantt.message.ConnectMessage();
        boolean boolean1 = connectMessage0.hasWill();
        connectMessage0.setWill("", "\000\003hi!");
        boolean boolean5 = connectMessage0.isCleanSession();
        org.meqantt.message.QoS qoS6 = connectMessage0.getWillQoS();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage0.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14613");
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str6 = connectMessage5.getUsername();
        org.meqantt.message.QoS qoS10 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage("", qoS10);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList14 = subscribeMessage13.getTopics();
        org.meqantt.message.QoS qoS15 = subscribeMessage13.getQos();
        subscribeMessage11.addTopic("", qoS15);
        connectMessage5.setWill("", "\000d\000\001\001d", qoS15, true);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage("hi!", qoS15);
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        int int21 = subscribeMessage19.getMessageId();
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList25 = subscribeMessage24.getTopics();
        org.meqantt.message.QoS qoS26 = subscribeMessage24.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("", qoS26);
        subscribeMessage19.addTopic("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", qoS26);
        byte[] byteArray29 = subscribeMessage19.toBytes();
        java.lang.String str30 = org.meqantt.util.FormatUtil.toString(byteArray29);
        org.meqantt.message.PublishMessage publishMessage31 = new org.meqantt.message.PublishMessage("\000\ufffd\ufffd 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n", byteArray29);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + qoS26 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS26.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-126, 74, 0, 0, 0, 3, 104, 105, 33, 0, 0, 63, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 80, 85, 66, 82, 69, 76, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 69, 88, 65, 67, 84, 76, 89, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 102, 97, 108, 115, 101, 93, 0]");
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test14614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14614");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.subscribe("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener9 = null;
        nettyClient1.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.subscribe("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        nettyClient1.connect("\001\003\003\001", (int) (short) 10);
        nettyClient1.subscribe("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        nettyClient1.unsubscribe("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
        nettyClient1.unsubscribe("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14615");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.UnsubAckMessage unsubAckMessage2 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage6.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test14616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14616");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type11 = pubCompMessage10.getType();
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage10.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type11);
    }

    @Test
    public void test14617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14617");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        connectMessage1.setCredentials("\000d\000\001\001d");
        connectMessage1.setCredentials("00: 01100100 d 100\n01: 00000000 \000 0\n", "00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        java.lang.String str7 = connectMessage1.getWillTopic();
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test14618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14618");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("hi!");
        org.meqantt.MqttListener mqttListener2 = null;
        nettyClient1.setListener(mqttListener2);
        org.meqantt.MqttListener mqttListener4 = null;
        nettyClient1.setListener(mqttListener4);
        nettyClient1.connect("hi!", (int) (short) 0);
        nettyClient1.connect("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 11000000 \300 192\n05: 10000000 \200 128\n");
        nettyClient1.publish("00: 00000000 \000 0\n01: 00010111 \027 23\n02: 11101111 \357 239\n03: 10111111 \277 191\n04: 10111101 \275 189\n05: 00001000 \b 8\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n10: 11000000 \300 192\n11: 10000000 \200 128\n12: 00000100 \004 4\n13: 11101111 \357 239\n14: 10111111 \277 191\n15: 10111101 \275 189\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 11101111 \357 239\n23: 10111111 \277 191\n24: 10111101 \275 189\n", "\001\ufffd00: 00010000 \020 16\n01: 00011010 \032 26\n\ufffd\ufffd 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n\ufffd\ufffd 0\n13: 00000001 \001 1\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n19: 00001000 \b 8\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n22: 01100100 d 100\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
    }

    @Test
    public void test14619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14619");
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage("MQIsdp", "\000d\000\001\001d");
        java.lang.String str5 = publishMessage4.getDataAsString();
        byte[] byteArray6 = publishMessage4.getData();
        byte[] byteArray7 = publishMessage4.getData();
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage("hi!", byteArray7);
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage("", byteArray7);
        java.lang.String str10 = org.meqantt.util.FormatUtil.toString(byteArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d" + "'", str5, "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000d\000\001\001d" + "'", str10, "\000d\000\001\001d");
    }

    @Test
    public void test14620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14620");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.SubscribeMessage subscribeMessage4 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type5 = subscribeMessage4.getType();
        subscribeMessage4.setDup(false);
        subscribeMessage4.setMessageId((int) (short) 0);
        java.util.List<org.meqantt.message.QoS> qoSList10 = subscribeMessage4.getTopicQoSs();
        subscribeMessage4.setDup(false);
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type15 = subscribeMessage14.getType();
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean22 = connectMessage21.hasWill();
        java.lang.String str23 = connectMessage21.getWill();
        org.meqantt.message.Message.Header header26 = null;
        org.meqantt.message.ConnectMessage connectMessage27 = new org.meqantt.message.ConnectMessage(header26);
        boolean boolean28 = connectMessage27.isWillRetained();
        boolean boolean29 = connectMessage27.isWillRetained();
        java.lang.String str30 = connectMessage27.getUsername();
        org.meqantt.message.QoS qoS34 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage("", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList38 = subscribeMessage37.getTopics();
        org.meqantt.message.QoS qoS39 = subscribeMessage37.getQos();
        subscribeMessage35.addTopic("", qoS39);
        connectMessage27.setWill("hi!", "", qoS39, false);
        connectMessage21.setWill("MQIsdp", "hi!", qoS39, false);
        org.meqantt.message.SubscribeMessage subscribeMessage45 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS39);
        subscribeMessage14.addTopic("\001\003\003\001", qoS39);
        subscribeMessage4.addTopic("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS39);
        org.meqantt.message.SubscribeMessage subscribeMessage48 = new org.meqantt.message.SubscribeMessage("\000=Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]", qoS39);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage2.setQos(qoS39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE));
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type5.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(qoSList10);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type15.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + qoS39 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS39.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14621");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage7 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage9.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList11 = subAckMessage9.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList12 = subAckMessage9.getGrantedQoSs();
        org.meqantt.message.Message.Header header14 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type15 = header14.getType();
        org.meqantt.message.SubAckMessage subAckMessage16 = new org.meqantt.message.SubAckMessage(header14);
        org.meqantt.message.Message.Header header18 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str19 = header18.toString();
        org.meqantt.message.SubAckMessage subAckMessage20 = new org.meqantt.message.SubAckMessage(header18);
        org.meqantt.message.PublishMessage publishMessage21 = new org.meqantt.message.PublishMessage(header18);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage24 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS25 = unsubscribeMessage24.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("", qoS25);
        publishMessage21.setQos(qoS25);
        subAckMessage16.addQoS(qoS25);
        subAckMessage9.addQoS(qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList31 = subscribeMessage30.getTopics();
        org.meqantt.message.QoS qoS32 = subscribeMessage30.getQos();
        org.meqantt.message.QoS qoS34 = null;
        subscribeMessage30.addTopic("", qoS34);
        java.util.List<org.meqantt.message.QoS> qoSList36 = subscribeMessage30.getTopicQoSs();
        subscribeMessage30.setDup(false);
        java.util.List<org.meqantt.message.QoS> qoSList39 = subscribeMessage30.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage47 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str48 = connectMessage47.getUsername();
        org.meqantt.message.QoS qoS52 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("", qoS52);
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList56 = subscribeMessage55.getTopics();
        org.meqantt.message.QoS qoS57 = subscribeMessage55.getQos();
        subscribeMessage53.addTopic("", qoS57);
        connectMessage47.setWill("", "\000d\000\001\001d", qoS57, true);
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("hi!", qoS57);
        org.meqantt.message.SubscribeMessage subscribeMessage62 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS57);
        org.meqantt.message.SubscribeMessage subscribeMessage63 = new org.meqantt.message.SubscribeMessage("", qoS57);
        subscribeMessage30.addTopic("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS57);
        subAckMessage9.addQoS(qoS57);
        org.meqantt.message.QoS qoS66 = subAckMessage9.getQos();
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage8.setQos(qoS66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertNull(qoSList10);
        org.junit.Assert.assertNull(qoSList11);
        org.junit.Assert.assertNull(qoSList12);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type15.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str19, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList36);
        org.junit.Assert.assertNotNull(qoSList39);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + qoS57 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS57.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS66 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS66.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14622");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.addTopic("00: 00000000 \000 0\n01: 00010111 \027 23\n02: 11101111 \357 239\n03: 10111111 \277 191\n04: 10111101 \275 189\n05: 00001000 \b 8\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n10: 11000000 \300 192\n11: 10000000 \200 128\n12: 00000100 \004 4\n13: 11101111 \357 239\n14: 10111111 \277 191\n15: 10111101 \275 189\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 11101111 \357 239\n23: 10111111 \277 191\n24: 10111101 \275 189\n");
    }

    @Test
    public void test14623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14623");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage11 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Type type12 = header1.getType();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type12);
    }

    @Test
    public void test14624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14624");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        boolean boolean5 = pubRelMessage4.isDup();
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage4.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test14625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14625");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage10.addTopic("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        unsubscribeMessage10.setDup(false);
    }

    @Test
    public void test14626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14626");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        connectMessage1.setWill("MQIsdp", "");
        java.lang.String str6 = connectMessage1.getClientId();
        boolean boolean7 = connectMessage1.isCleanSession();
        boolean boolean8 = connectMessage1.isWillRetained();
        boolean boolean9 = connectMessage1.hasPassword();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14627");
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str6 = connectMessage5.getUsername();
        org.meqantt.message.QoS qoS10 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage("", qoS10);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList14 = subscribeMessage13.getTopics();
        org.meqantt.message.QoS qoS15 = subscribeMessage13.getQos();
        subscribeMessage11.addTopic("", qoS15);
        connectMessage5.setWill("", "\000d\000\001\001d", qoS15, true);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS15);
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS15);
        java.util.List<java.lang.String> strList21 = subscribeMessage20.getTopics();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test14628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14628");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage13 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage14 = new org.meqantt.message.PubRelMessage(header1);
        java.lang.String str15 = header1.toString();
        org.meqantt.message.DisconnectMessage disconnectMessage16 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage17 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Header header20 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type21 = header20.getType();
        org.meqantt.message.Message.Type type22 = header20.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage23 = new org.meqantt.message.UnsubAckMessage(header20);
        org.meqantt.message.QoS qoS24 = unsubAckMessage23.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS24);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage17.setQos(qoS24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str15, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14629");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        java.lang.String str3 = connectMessage1.getWill();
        java.lang.String str4 = connectMessage1.getWillTopic();
        connectMessage1.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        boolean boolean8 = connectMessage1.hasUsername();
        boolean boolean9 = connectMessage1.hasPassword();
        java.lang.String str10 = connectMessage1.getUsername();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test14630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14630");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type11 = header1.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage(header1);
        java.util.List<java.lang.String> strList13 = subscribeMessage12.getTopics();
        int int14 = subscribeMessage12.getMessageId();
        java.util.List<java.lang.String> strList15 = subscribeMessage12.getTopics();
        java.util.List<java.lang.String> strList16 = subscribeMessage12.getTopics();
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test14631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14631");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        java.lang.String str10 = header1.toString();
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage12 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage13 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage14 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage15 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.QoS qoS16 = null;
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage15.setQos(qoS16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str10, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14632");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str5 = header1.toString();
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage7 = new org.meqantt.message.PubRecMessage(header1);
        int int8 = pubRecMessage7.getMessageId();
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage7.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test14633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14633");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage10 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type11 = subAckMessage10.getType();
        org.meqantt.message.Message.Header header13 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage14 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.PubCompMessage pubCompMessage15 = new org.meqantt.message.PubCompMessage(header13);
        org.meqantt.message.PubAckMessage pubAckMessage16 = new org.meqantt.message.PubAckMessage(header13);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage17 = new org.meqantt.message.UnsubscribeMessage(header13);
        org.meqantt.message.PublishMessage publishMessage18 = new org.meqantt.message.PublishMessage(header13);
        org.meqantt.message.Message.Type type19 = header13.getType();
        org.meqantt.message.PingReqMessage pingReqMessage20 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.PingReqMessage pingReqMessage21 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.SubAckMessage subAckMessage22 = new org.meqantt.message.SubAckMessage(header13);
        org.meqantt.message.ConnectMessage connectMessage28 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str29 = connectMessage28.getUsername();
        org.meqantt.message.QoS qoS33 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("", qoS33);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList37 = subscribeMessage36.getTopics();
        org.meqantt.message.QoS qoS38 = subscribeMessage36.getQos();
        subscribeMessage34.addTopic("", qoS38);
        connectMessage28.setWill("", "\000d\000\001\001d", qoS38, true);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage("hi!", qoS38);
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS38);
        subAckMessage22.addQoS(qoS38);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage10.setQos(qoS38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + qoS38 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS38.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14634");
        org.meqantt.message.ConnectMessage connectMessage0 = new org.meqantt.message.ConnectMessage();
        java.lang.String str1 = connectMessage0.getUsername();
        connectMessage0.setCredentials("hi!");
        java.lang.String str4 = connectMessage0.getProtocolId();
        boolean boolean5 = connectMessage0.isCleanSession();
        java.lang.String str6 = connectMessage0.getWillTopic();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test14635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14635");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14636");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Header header12 = null;
        org.meqantt.message.SubAckMessage subAckMessage13 = new org.meqantt.message.SubAckMessage(header12);
        org.meqantt.message.Message.Header header15 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type16 = header15.getType();
        org.meqantt.message.Message.Type type17 = header15.getType();
        org.meqantt.message.SubAckMessage subAckMessage18 = new org.meqantt.message.SubAckMessage(header15);
        org.meqantt.message.PingReqMessage pingReqMessage19 = new org.meqantt.message.PingReqMessage(header15);
        org.meqantt.message.PingReqMessage pingReqMessage20 = new org.meqantt.message.PingReqMessage(header15);
        org.meqantt.message.DisconnectMessage disconnectMessage21 = new org.meqantt.message.DisconnectMessage(header15);
        org.meqantt.message.SubAckMessage subAckMessage22 = new org.meqantt.message.SubAckMessage(header15);
        java.util.List<org.meqantt.message.QoS> qoSList23 = subAckMessage22.getGrantedQoSs();
        org.meqantt.message.SubAckMessage subAckMessage24 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList25 = subAckMessage24.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList26 = subAckMessage24.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList27 = subAckMessage24.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList30 = subscribeMessage29.getTopics();
        org.meqantt.message.QoS qoS31 = subscribeMessage29.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("", qoS31);
        subAckMessage24.addQoS(qoS31);
        subAckMessage22.addQoS(qoS31);
        subAckMessage13.addQoS(qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 00000000 \000 0\n", qoS31);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage10.setQos(qoS31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNull(qoSList23);
        org.junit.Assert.assertNull(qoSList25);
        org.junit.Assert.assertNull(qoSList26);
        org.junit.Assert.assertNull(qoSList27);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14637");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList1 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str7 = connectMessage6.getProtocolId();
        org.meqantt.message.QoS qoS8 = connectMessage6.getQos();
        subAckMessage0.addQoS(qoS8);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage0.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList1);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS8 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS8.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14638");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage7 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage9.getGrantedQoSs();
        int int11 = subAckMessage9.getMessageId();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage9.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(qoSList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14639");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getClientId();
        connectMessage1.setWill("hi!", "");
        org.meqantt.message.QoS qoS6 = connectMessage1.getWillQoS();
        connectMessage1.setWill("\000d\000\001\001d", "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        byte byte10 = connectMessage1.getProtocolVersion();
        boolean boolean11 = connectMessage1.hasWill();
        java.lang.String str12 = connectMessage1.getWill();
        boolean boolean13 = connectMessage1.hasUsername();
        org.meqantt.message.Message.Header header17 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage18 = new org.meqantt.message.PubCompMessage(header17);
        org.meqantt.message.PublishMessage publishMessage19 = new org.meqantt.message.PublishMessage(header17);
        org.meqantt.message.PubRelMessage pubRelMessage20 = new org.meqantt.message.PubRelMessage(header17);
        org.meqantt.message.PingRespMessage pingRespMessage21 = new org.meqantt.message.PingRespMessage(header17);
        org.meqantt.message.SubAckMessage subAckMessage22 = new org.meqantt.message.SubAckMessage(header17);
        org.meqantt.message.PublishMessage publishMessage23 = new org.meqantt.message.PublishMessage(header17);
        org.meqantt.message.PingRespMessage pingRespMessage24 = new org.meqantt.message.PingRespMessage(header17);
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage(header17);
        org.meqantt.message.QoS qoS26 = subscribeMessage25.getQos();
        connectMessage1.setWill("", "00: 00000000 \000 0\n01: 00000000 \000 0\n", qoS26, false);
        java.lang.String str29 = connectMessage1.getUsername();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 3 + "'", byte10 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str12, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + qoS26 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS26.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test14640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14640");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage8.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14641");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage11 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.Message.Header header13 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage(header13);
        org.meqantt.message.PingRespMessage pingRespMessage15 = new org.meqantt.message.PingRespMessage(header13);
        org.meqantt.message.Message.Header header17 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage(header17);
        byte byte19 = connectMessage18.getProtocolVersion();
        boolean boolean20 = connectMessage18.hasUsername();
        java.lang.String str21 = connectMessage18.getWill();
        boolean boolean22 = connectMessage18.isRetained();
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList26 = subscribeMessage25.getTopics();
        org.meqantt.message.QoS qoS27 = subscribeMessage25.getQos();
        connectMessage18.setWill("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", qoS27, false);
        pingRespMessage15.setQos(qoS27);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage11.setQos(qoS27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 3 + "'", byte19 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14642");
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage("", byteArray8);
        java.lang.String str10 = publishMessage9.getDataAsString();
        byte[] byteArray11 = publishMessage9.getData();
        java.lang.String str12 = org.meqantt.util.FormatUtil.toString(byteArray11);
        java.lang.String str13 = org.meqantt.util.FormatUtil.toString(byteArray11);
        java.lang.String str14 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray11);
        org.meqantt.message.PublishMessage publishMessage15 = new org.meqantt.message.PublishMessage("", byteArray11);
        java.lang.String str16 = org.meqantt.util.FormatUtil.toString(byteArray11);
        java.lang.String str17 = org.meqantt.util.FormatUtil.toString(byteArray11);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000d\000\001\001d" + "'", str10, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str14, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test14643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14643");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean3 = connectMessage2.isWillRetained();
        java.lang.String str4 = connectMessage2.getWillTopic();
        java.lang.String str5 = connectMessage2.getProtocolId();
        connectMessage2.setCredentials("");
        java.lang.String str8 = connectMessage2.getUsername();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS11 = unsubscribeMessage10.getQos();
        boolean boolean12 = unsubscribeMessage10.isRetained();
        int int13 = unsubscribeMessage10.getMessageId();
        int int14 = unsubscribeMessage10.getMessageId();
        unsubscribeMessage10.addTopic("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
        org.meqantt.message.ConnectMessage connectMessage20 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str21 = connectMessage20.getClientId();
        boolean boolean22 = connectMessage20.hasUsername();
        boolean boolean23 = connectMessage20.isCleanSession();
        org.meqantt.message.SubAckMessage subAckMessage26 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList27 = subAckMessage26.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList28 = subAckMessage26.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList29 = subAckMessage26.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList32 = subscribeMessage31.getTopics();
        org.meqantt.message.QoS qoS33 = subscribeMessage31.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("", qoS33);
        subAckMessage26.addQoS(qoS33);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList37 = subscribeMessage36.getTopics();
        org.meqantt.message.ConnectMessage connectMessage42 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str43 = connectMessage42.getProtocolId();
        org.meqantt.message.QoS qoS44 = connectMessage42.getQos();
        subscribeMessage36.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS44);
        subAckMessage26.addQoS(qoS44);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList51 = subscribeMessage50.getTopics();
        org.meqantt.message.QoS qoS52 = subscribeMessage50.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("", qoS52);
        org.meqantt.message.SubscribeMessage subscribeMessage54 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS52);
        org.meqantt.message.QoS qoS55 = subscribeMessage54.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage59 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList60 = subscribeMessage59.getTopics();
        org.meqantt.message.QoS qoS61 = subscribeMessage59.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage62 = new org.meqantt.message.SubscribeMessage("", qoS61);
        org.meqantt.message.SubscribeMessage subscribeMessage63 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS61);
        org.meqantt.message.QoS qoS64 = subscribeMessage63.getQos();
        subscribeMessage54.addTopic("", qoS64);
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage("", qoS64);
        subAckMessage26.addQoS(qoS64);
        connectMessage20.setWill("\001\003\003\001", "", qoS64, true);
        unsubscribeMessage10.setQos(qoS64);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage2.setQos(qoS64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MQIsdp" + "'", str5, "MQIsdp");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(qoSList27);
        org.junit.Assert.assertNull(qoSList28);
        org.junit.Assert.assertNull(qoSList29);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + qoS33 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS33.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "MQIsdp" + "'", str43, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS44 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS44.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS55 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS55.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + qoS61 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS61.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS64 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS64.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14644");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        org.meqantt.MqttListener mqttListener15 = null;
        nettyClient1.setListener(mqttListener15);
        nettyClient1.unsubscribe("\000\003hi!");
        org.meqantt.MqttListener mqttListener19 = null;
        nettyClient1.setListener(mqttListener19);
        nettyClient1.ping();
        nettyClient1.disconnect();
        nettyClient1.publish("\000d\000\001\001d", "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        org.meqantt.MqttListener mqttListener26 = null;
        nettyClient1.setListener(mqttListener26);
        org.meqantt.MqttListener mqttListener28 = null;
        nettyClient1.setListener(mqttListener28);
    }

    @Test
    public void test14645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14645");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str3 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        java.lang.String str7 = header1.toString();
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        byte[] byteArray14 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str15 = org.meqantt.util.FormatUtil.toString(byteArray14);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage("hi!", byteArray14);
        org.meqantt.message.Message.Header header18 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage19 = new org.meqantt.message.PingReqMessage(header18);
        org.meqantt.message.PubCompMessage pubCompMessage20 = new org.meqantt.message.PubCompMessage(header18);
        org.meqantt.message.PubAckMessage pubAckMessage21 = new org.meqantt.message.PubAckMessage(header18);
        org.meqantt.message.PublishMessage publishMessage22 = new org.meqantt.message.PublishMessage(header18);
        org.meqantt.message.ConnAckMessage connAckMessage23 = new org.meqantt.message.ConnAckMessage(header18);
        org.meqantt.message.SubAckMessage subAckMessage24 = new org.meqantt.message.SubAckMessage(header18);
        org.meqantt.message.Message.Header header26 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type27 = header26.getType();
        org.meqantt.message.Message.Type type28 = header26.getType();
        org.meqantt.message.SubAckMessage subAckMessage29 = new org.meqantt.message.SubAckMessage(header26);
        org.meqantt.message.PingReqMessage pingReqMessage30 = new org.meqantt.message.PingReqMessage(header26);
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage(header26);
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage(header26);
        org.meqantt.message.PingReqMessage pingReqMessage33 = new org.meqantt.message.PingReqMessage(header26);
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage(header26);
        java.util.List<java.lang.String> strList35 = subscribeMessage34.getTopics();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage37 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList38 = unsubscribeMessage37.getTopics();
        org.meqantt.message.Message.Type type39 = unsubscribeMessage37.getType();
        java.util.List<java.lang.String> strList40 = unsubscribeMessage37.getTopics();
        org.meqantt.message.QoS qoS41 = unsubscribeMessage37.getQos();
        subscribeMessage34.setQos(qoS41);
        subAckMessage24.addQoS(qoS41);
        publishMessage16.setQos(qoS41);
        org.meqantt.message.SubscribeMessage subscribeMessage45 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS41);
        subscribeMessage9.addTopic("", qoS41);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str3, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str7, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(type27);
        org.junit.Assert.assertNull(type28);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type39.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + qoS41 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS41.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14646");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type4.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type5.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test14647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14647");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        java.lang.String str6 = connectMessage1.getWill();
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean13 = connectMessage12.hasWill();
        java.lang.String str14 = connectMessage12.getWill();
        java.lang.String str15 = connectMessage12.getWill();
        java.lang.String str16 = connectMessage12.getProtocolId();
        java.lang.String str17 = connectMessage12.getProtocolId();
        org.meqantt.message.SubAckMessage subAckMessage20 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList21 = subAckMessage20.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList22 = subAckMessage20.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage26 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str27 = connectMessage26.getProtocolId();
        org.meqantt.message.QoS qoS28 = connectMessage26.getQos();
        subAckMessage20.addQoS(qoS28);
        connectMessage12.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", qoS28, false);
        connectMessage1.setWill("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", "\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS28, true);
        connectMessage1.setWill("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
        java.lang.String str37 = connectMessage1.getPassword();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MQIsdp" + "'", str16, "MQIsdp");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MQIsdp" + "'", str17, "MQIsdp");
        org.junit.Assert.assertNull(qoSList21);
        org.junit.Assert.assertNull(qoSList22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "MQIsdp" + "'", str27, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test14648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14648");
        org.meqantt.SocketClient socketClient1 = new org.meqantt.SocketClient("00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n");
        // The following exception was thrown during execution in test generation
        try {
            socketClient1.connect("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 11000000 \300 192\n05: 10000000 \200 128\n", (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: 00: 00000000 ? 0?01: 00000100 ? 4?02: 11000000 A? 192?03: 10000000 ? 128?04: 11000000 A? 192?05: 10000000 ? 128?");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14649");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage12 = new org.meqantt.message.PublishMessage("", byteArray11);
        java.lang.String str13 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray11);
        java.lang.String str14 = org.meqantt.util.FormatUtil.toString(byteArray11);
        java.lang.String str15 = org.meqantt.util.FormatUtil.toString(byteArray11);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage("00: 01100100 d 100\n01: 00000000 \000 0\n", byteArray11);
        org.meqantt.message.PublishMessage publishMessage17 = new org.meqantt.message.PublishMessage("MQIsdp", byteArray11);
        java.lang.String str18 = publishMessage17.getTopic();
        byte[] byteArray19 = publishMessage17.getData();
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) publishMessage17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str13, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MQIsdp" + "'", str18, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 0, 1, 1, 100]");
    }

    @Test
    public void test14650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14650");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Header header11 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingRespMessage pingRespMessage12 = new org.meqantt.message.PingRespMessage(header11);
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage(header11);
        org.meqantt.message.PubCompMessage pubCompMessage14 = new org.meqantt.message.PubCompMessage(header11);
        org.meqantt.message.PubCompMessage pubCompMessage15 = new org.meqantt.message.PubCompMessage(header11);
        org.meqantt.message.QoS qoS16 = pubCompMessage15.getQos();
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage9.setQos(qoS16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14651");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage10.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14652");
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage("", true, 1);
        byte byte5 = connectMessage4.getProtocolVersion();
        java.lang.String str6 = connectMessage4.getWill();
        byte[] byteArray7 = connectMessage4.toBytes();
        java.lang.String str8 = org.meqantt.util.FormatUtil.toString(byteArray7);
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage("\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", byteArray7);
        java.lang.Class<?> wildcardClass10 = byteArray7.getClass();
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 3 + "'", byte5 == (byte) 3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test14653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14653");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str3 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.Message.Type type7 = disconnectMessage6.getType();
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 10);
        boolean boolean12 = connectMessage11.hasPassword();
        int int13 = connectMessage11.getKeepAlive();
        java.lang.String str14 = connectMessage11.getPassword();
        org.meqantt.message.QoS qoS15 = connectMessage11.getQos();
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage6.setQos(qoS15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str3, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14654");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        org.meqantt.message.Message.Type type3 = unsubscribeMessage1.getType();
        unsubscribeMessage1.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type7 = subscribeMessage6.getType();
        subscribeMessage6.setDup(false);
        subscribeMessage6.setMessageId((int) (byte) 0);
        org.meqantt.message.Message.Header header13 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type14 = header13.getType();
        org.meqantt.message.Message.Type type15 = header13.getType();
        org.meqantt.message.SubAckMessage subAckMessage16 = new org.meqantt.message.SubAckMessage(header13);
        org.meqantt.message.PingReqMessage pingReqMessage17 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage(header13);
        org.meqantt.message.ConnectMessage connectMessage19 = new org.meqantt.message.ConnectMessage(header13);
        org.meqantt.message.PingReqMessage pingReqMessage20 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage(header13);
        org.meqantt.message.SubAckMessage subAckMessage22 = new org.meqantt.message.SubAckMessage(header13);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList24 = subscribeMessage23.getTopics();
        org.meqantt.message.QoS qoS25 = subscribeMessage23.getQos();
        org.meqantt.message.ConnectMessage connectMessage30 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str31 = connectMessage30.getProtocolId();
        org.meqantt.message.QoS qoS32 = connectMessage30.getQos();
        subscribeMessage23.addTopic("", qoS32);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage35 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList36 = unsubscribeMessage35.getTopics();
        org.meqantt.message.Message.Type type37 = unsubscribeMessage35.getType();
        java.util.List<java.lang.String> strList38 = unsubscribeMessage35.getTopics();
        org.meqantt.message.QoS qoS39 = unsubscribeMessage35.getQos();
        subscribeMessage23.setQos(qoS39);
        subAckMessage22.addQoS(qoS39);
        subscribeMessage6.setQos(qoS39);
        unsubscribeMessage1.setQos(qoS39);
        java.util.List<java.lang.String> strList44 = unsubscribeMessage1.getTopics();
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type3.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type7.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNull(type14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MQIsdp" + "'", str31, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type37.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + qoS39 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS39.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList44);
    }

    @Test
    public void test14655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14655");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000\004\001\003\003\001", "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
    }

    @Test
    public void test14656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14656");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str10 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage11 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage13 = new org.meqantt.message.ConnAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage13.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str10, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14657");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", true, 1);
        boolean boolean4 = connectMessage3.hasUsername();
        connectMessage3.setCredentials("MQIsdp");
        org.meqantt.message.Message.Type type7 = connectMessage3.getType();
        boolean boolean8 = connectMessage3.isCleanSession();
        boolean boolean9 = connectMessage3.hasUsername();
        org.meqantt.message.QoS qoS10 = connectMessage3.getWillQoS();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.meqantt.message.Message.Type.CONNECT + "'", type7.equals(org.meqantt.message.Message.Type.CONNECT));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(qoS10);
    }

    @Test
    public void test14658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14658");
        byte[] byteArray1 = org.meqantt.util.FormatUtil.toMQttString("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        java.lang.String str2 = org.meqantt.util.FormatUtil.toString(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 68, 48, 48, 58, 32, 48, 48, 48, 48, 48, 48, 48, 49, 32, 1, 32, 49, 10, 48, 49, 58, 32, 48, 48, 48, 48, 48, 48, 49, 49, 32, 3, 32, 51, 10, 48, 50, 58, 32, 48, 48, 48, 48, 48, 48, 49, 49, 32, 3, 32, 51, 10, 48, 51, 58, 32, 48, 48, 48, 48, 48, 48, 48, 49, 32, 1, 32, 49, 10]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n" + "'", str2, "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
    }

    @Test
    public void test14659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14659");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void test14660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14660");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.Message.Header header12 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type13 = header12.getType();
        org.meqantt.message.Message.Type type14 = header12.getType();
        org.meqantt.message.SubAckMessage subAckMessage15 = new org.meqantt.message.SubAckMessage(header12);
        org.meqantt.message.PingReqMessage pingReqMessage16 = new org.meqantt.message.PingReqMessage(header12);
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage(header12);
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage(header12);
        org.meqantt.message.PingReqMessage pingReqMessage19 = new org.meqantt.message.PingReqMessage(header12);
        org.meqantt.message.PubRelMessage pubRelMessage20 = new org.meqantt.message.PubRelMessage(header12);
        org.meqantt.message.PingReqMessage pingReqMessage21 = new org.meqantt.message.PingReqMessage(header12);
        org.meqantt.message.PubRelMessage pubRelMessage22 = new org.meqantt.message.PubRelMessage(header12);
        org.meqantt.message.Message.Header header25 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage26 = new org.meqantt.message.PingReqMessage(header25);
        org.meqantt.message.PubCompMessage pubCompMessage27 = new org.meqantt.message.PubCompMessage(header25);
        org.meqantt.message.SubAckMessage subAckMessage28 = new org.meqantt.message.SubAckMessage(header25);
        org.meqantt.message.SubAckMessage subAckMessage29 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList30 = subAckMessage29.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList31 = subAckMessage29.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage35 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str36 = connectMessage35.getProtocolId();
        org.meqantt.message.QoS qoS37 = connectMessage35.getQos();
        subAckMessage29.addQoS(qoS37);
        org.meqantt.message.ConnectMessage connectMessage42 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean43 = connectMessage42.hasWill();
        java.lang.String str44 = connectMessage42.getWill();
        org.meqantt.message.Message.Header header47 = null;
        org.meqantt.message.ConnectMessage connectMessage48 = new org.meqantt.message.ConnectMessage(header47);
        boolean boolean49 = connectMessage48.isWillRetained();
        boolean boolean50 = connectMessage48.isWillRetained();
        java.lang.String str51 = connectMessage48.getUsername();
        org.meqantt.message.QoS qoS55 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage56 = new org.meqantt.message.SubscribeMessage("", qoS55);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList59 = subscribeMessage58.getTopics();
        org.meqantt.message.QoS qoS60 = subscribeMessage58.getQos();
        subscribeMessage56.addTopic("", qoS60);
        connectMessage48.setWill("hi!", "", qoS60, false);
        connectMessage42.setWill("MQIsdp", "hi!", qoS60, false);
        org.meqantt.message.SubAckMessage subAckMessage68 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList69 = subAckMessage68.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList70 = subAckMessage68.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList71 = subAckMessage68.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage73 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList74 = subscribeMessage73.getTopics();
        org.meqantt.message.QoS qoS75 = subscribeMessage73.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage76 = new org.meqantt.message.SubscribeMessage("", qoS75);
        subAckMessage68.addQoS(qoS75);
        connectMessage42.setWill("hi!", "MQIsdp", qoS75, true);
        subAckMessage29.addQoS(qoS75);
        subAckMessage28.addQoS(qoS75);
        org.meqantt.message.SubscribeMessage subscribeMessage82 = new org.meqantt.message.SubscribeMessage("\000\003hi!", qoS75);
        pubRelMessage22.setQos(qoS75);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage10.setQos(qoS75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(type14);
        org.junit.Assert.assertNull(qoSList30);
        org.junit.Assert.assertNull(qoSList31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "MQIsdp" + "'", str36, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS37 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS37.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList69);
        org.junit.Assert.assertNull(qoSList70);
        org.junit.Assert.assertNull(qoSList71);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + qoS75 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS75.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14661");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage8 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage9 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Header header13 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage14 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.PubCompMessage pubCompMessage15 = new org.meqantt.message.PubCompMessage(header13);
        org.meqantt.message.PingReqMessage pingReqMessage16 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.PingReqMessage pingReqMessage17 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.PingReqMessage pingReqMessage18 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.PingReqMessage pingReqMessage19 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.ConnAckMessage connAckMessage20 = new org.meqantt.message.ConnAckMessage(header13);
        org.meqantt.message.PubRelMessage pubRelMessage21 = new org.meqantt.message.PubRelMessage(header13);
        org.meqantt.message.ConnAckMessage connAckMessage22 = new org.meqantt.message.ConnAckMessage(header13);
        org.meqantt.message.PublishMessage publishMessage23 = new org.meqantt.message.PublishMessage(header13);
        org.meqantt.message.ConnectMessage connectMessage24 = new org.meqantt.message.ConnectMessage(header13);
        org.meqantt.message.Message.Header header28 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type29 = header28.getType();
        org.meqantt.message.Message.Type type30 = header28.getType();
        org.meqantt.message.SubAckMessage subAckMessage31 = new org.meqantt.message.SubAckMessage(header28);
        org.meqantt.message.PingReqMessage pingReqMessage32 = new org.meqantt.message.PingReqMessage(header28);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage(header28);
        org.meqantt.message.ConnectMessage connectMessage34 = new org.meqantt.message.ConnectMessage(header28);
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean42 = connectMessage41.hasWill();
        java.lang.String str43 = connectMessage41.getWill();
        org.meqantt.message.Message.Header header46 = null;
        org.meqantt.message.ConnectMessage connectMessage47 = new org.meqantt.message.ConnectMessage(header46);
        boolean boolean48 = connectMessage47.isWillRetained();
        boolean boolean49 = connectMessage47.isWillRetained();
        java.lang.String str50 = connectMessage47.getUsername();
        org.meqantt.message.QoS qoS54 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage("", qoS54);
        org.meqantt.message.SubscribeMessage subscribeMessage57 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList58 = subscribeMessage57.getTopics();
        org.meqantt.message.QoS qoS59 = subscribeMessage57.getQos();
        subscribeMessage55.addTopic("", qoS59);
        connectMessage47.setWill("hi!", "", qoS59, false);
        connectMessage41.setWill("MQIsdp", "hi!", qoS59, false);
        org.meqantt.message.SubscribeMessage subscribeMessage65 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS59);
        connectMessage34.setWill("hi!", "\000\000", qoS59, true);
        java.lang.String str68 = connectMessage34.getWillTopic();
        java.lang.String str69 = connectMessage34.getWillTopic();
        org.meqantt.message.PublishMessage publishMessage74 = new org.meqantt.message.PublishMessage("MQIsdp", "");
        org.meqantt.message.QoS qoS75 = publishMessage74.getQos();
        connectMessage34.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS75, false);
        connectMessage24.setWill("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "00: 10100010 \242 162\n01: 00001111 \017 15\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000011 \003 3\n06: 01101000 h 104\n07: 01101001 i 105\n08: 00100001 ! 33\n09: 00000000 \000 0\n10: 00000110 \006 6\n11: 01001101 M 77\n12: 01010001 Q 81\n13: 01001001 I 73\n14: 01110011 s 115\n15: 01100100 d 100\n16: 01110000 p 112\n", qoS75, true);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage11.setQos(qoS75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type6);
        org.junit.Assert.assertNull(type29);
        org.junit.Assert.assertNull(type30);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + qoS59 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS59.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertTrue("'" + qoS75 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS75.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14662");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus4 = connAckMessage3.getStatus();
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList10 = subscribeMessage9.getTopics();
        org.meqantt.message.QoS qoS11 = subscribeMessage9.getQos();
        java.util.List<org.meqantt.message.QoS> qoSList12 = subscribeMessage9.getTopicQoSs();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage14 = new org.meqantt.message.UnsubscribeMessage("hi!");
        unsubscribeMessage14.setDup(false);
        org.meqantt.message.Message.Header header18 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type19 = header18.getType();
        org.meqantt.message.Message.Type type20 = header18.getType();
        org.meqantt.message.SubAckMessage subAckMessage21 = new org.meqantt.message.SubAckMessage(header18);
        org.meqantt.message.PingReqMessage pingReqMessage22 = new org.meqantt.message.PingReqMessage(header18);
        org.meqantt.message.PingReqMessage pingReqMessage23 = new org.meqantt.message.PingReqMessage(header18);
        org.meqantt.message.DisconnectMessage disconnectMessage24 = new org.meqantt.message.DisconnectMessage(header18);
        org.meqantt.message.SubAckMessage subAckMessage25 = new org.meqantt.message.SubAckMessage(header18);
        org.meqantt.message.UnsubAckMessage unsubAckMessage26 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS27 = unsubAckMessage26.getQos();
        subAckMessage25.addQoS(qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type30 = subscribeMessage29.getType();
        subscribeMessage29.setDup(false);
        subscribeMessage29.setMessageId((int) (short) 0);
        java.util.List<java.lang.String> strList35 = subscribeMessage29.getTopics();
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList37 = subscribeMessage36.getTopics();
        org.meqantt.message.QoS qoS38 = subscribeMessage36.getQos();
        org.meqantt.message.ConnectMessage connectMessage43 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str44 = connectMessage43.getProtocolId();
        org.meqantt.message.QoS qoS45 = connectMessage43.getQos();
        subscribeMessage36.addTopic("", qoS45);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage48 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList49 = unsubscribeMessage48.getTopics();
        org.meqantt.message.Message.Type type50 = unsubscribeMessage48.getType();
        java.util.List<java.lang.String> strList51 = unsubscribeMessage48.getTopics();
        org.meqantt.message.QoS qoS52 = unsubscribeMessage48.getQos();
        subscribeMessage36.setQos(qoS52);
        subscribeMessage29.setQos(qoS52);
        subAckMessage25.addQoS(qoS52);
        unsubscribeMessage14.setQos(qoS52);
        subscribeMessage9.setQos(qoS52);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage8.setQos(qoS52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus4 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus4.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList12);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type30.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + qoS38 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS38.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MQIsdp" + "'", str44, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS45 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS45.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type50.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14663");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean12 = connectMessage11.hasWill();
        java.lang.String str13 = connectMessage11.getWill();
        org.meqantt.message.Message.Header header16 = null;
        org.meqantt.message.ConnectMessage connectMessage17 = new org.meqantt.message.ConnectMessage(header16);
        boolean boolean18 = connectMessage17.isWillRetained();
        boolean boolean19 = connectMessage17.isWillRetained();
        java.lang.String str20 = connectMessage17.getUsername();
        org.meqantt.message.QoS qoS24 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage("", qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList28 = subscribeMessage27.getTopics();
        org.meqantt.message.QoS qoS29 = subscribeMessage27.getQos();
        subscribeMessage25.addTopic("", qoS29);
        connectMessage17.setWill("hi!", "", qoS29, false);
        connectMessage11.setWill("MQIsdp", "hi!", qoS29, false);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS29);
        subscribeMessage5.addTopic("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS29);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage5.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + qoS29 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS29.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14664");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        org.meqantt.MqttListener mqttListener15 = null;
        nettyClient1.setListener(mqttListener15);
        nettyClient1.unsubscribe("\000\003hi!");
        org.meqantt.MqttListener mqttListener19 = null;
        nettyClient1.setListener(mqttListener19);
        nettyClient1.ping();
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener25 = null;
        nettyClient1.setListener(mqttListener25);
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("00: 00000000 \000 0\n01: 00000000 \000 0\n");
    }

    @Test
    public void test14665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14665");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage1 = new org.meqantt.message.SubscribeMessage(header0);
        java.util.List<java.lang.String> strList2 = subscribeMessage1.getTopics();
        java.util.List<java.lang.String> strList3 = subscribeMessage1.getTopics();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = subscribeMessage1.isDup();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test14666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14666");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        int int12 = publishMessage11.getMessageId();
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test14667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14667");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        java.lang.String str3 = connectMessage1.getPassword();
        java.lang.String str4 = connectMessage1.getPassword();
        int int5 = connectMessage1.getKeepAlive();
        java.lang.String str6 = connectMessage1.getUsername();
        int int7 = connectMessage1.getKeepAlive();
        org.meqantt.message.Message.Header header10 = null;
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage(header10);
        connectMessage11.setCredentials("\000d\000\001\001d");
        connectMessage11.setCredentials("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.message.Message.Header header18 = null;
        org.meqantt.message.ConnectMessage connectMessage19 = new org.meqantt.message.ConnectMessage(header18);
        int int20 = connectMessage19.getKeepAlive();
        connectMessage19.setWill("MQIsdp", "");
        java.lang.String str24 = connectMessage19.getWillTopic();
        org.meqantt.message.ConnectMessage connectMessage34 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str35 = connectMessage34.getUsername();
        org.meqantt.message.QoS qoS39 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("", qoS39);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList43 = subscribeMessage42.getTopics();
        org.meqantt.message.QoS qoS44 = subscribeMessage42.getQos();
        subscribeMessage40.addTopic("", qoS44);
        connectMessage34.setWill("", "\000d\000\001\001d", qoS44, true);
        org.meqantt.message.SubscribeMessage subscribeMessage48 = new org.meqantt.message.SubscribeMessage("hi!", qoS44);
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS44);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage("", qoS44);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS44);
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList54 = subscribeMessage53.getTopics();
        org.meqantt.message.ConnectMessage connectMessage59 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str60 = connectMessage59.getProtocolId();
        org.meqantt.message.QoS qoS61 = connectMessage59.getQos();
        subscribeMessage53.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS61);
        subscribeMessage51.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS61);
        org.meqantt.message.ConnectMessage connectMessage68 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str69 = connectMessage68.getProtocolId();
        org.meqantt.message.QoS qoS70 = connectMessage68.getQos();
        subscribeMessage51.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS70);
        connectMessage19.setWill("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS70, false);
        boolean boolean74 = connectMessage19.isWillRetained();
        org.meqantt.message.QoS qoS75 = connectMessage19.getWillQoS();
        connectMessage11.setWill("", "\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", qoS75, true);
        connectMessage1.setWill("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", "00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n", qoS75, true);
        boolean boolean80 = connectMessage1.isCleanSession();
        int int81 = connectMessage1.getKeepAlive();
        java.lang.String str82 = connectMessage1.getWill();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MQIsdp" + "'", str24, "MQIsdp");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + qoS44 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS44.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "MQIsdp" + "'", str60, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS61 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS61.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "MQIsdp" + "'", str69, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS70 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS70.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + qoS75 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS75.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n" + "'", str82, "00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n");
    }

    @Test
    public void test14668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14668");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList1 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage0.getGrantedQoSs();
        boolean boolean4 = subAckMessage0.isDup();
        java.util.List<org.meqantt.message.QoS> qoSList5 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage("MQIsdp", "");
        org.meqantt.message.QoS qoS9 = publishMessage8.getQos();
        subAckMessage0.addQoS(qoS9);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage0.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList1);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(qoSList5);
        org.junit.Assert.assertTrue("'" + qoS9 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS9.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14669");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage4 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type8 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage9 = new org.meqantt.message.PubRecMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage9.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type8.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test14670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14670");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage12 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage13 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage15 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS16 = unsubscribeMessage15.getQos();
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage13.setQos(qoS16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14671");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus5 = connAckMessage4.getStatus();
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type2.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(connectionStatus5);
    }

    @Test
    public void test14672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14672");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 0);
        java.lang.String str4 = connectMessage3.getPassword();
        org.meqantt.message.QoS qoS5 = connectMessage3.getWillQoS();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(qoS5);
    }

    @Test
    public void test14673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14673");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage5.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14674");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        org.meqantt.MqttListener mqttListener15 = null;
        nettyClient1.setListener(mqttListener15);
        nettyClient1.unsubscribe("\000\003hi!");
        org.meqantt.MqttListener mqttListener19 = null;
        nettyClient1.setListener(mqttListener19);
        nettyClient1.ping();
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener25 = null;
        nettyClient1.setListener(mqttListener25);
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("");
        nettyClient1.unsubscribe("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n");
    }

    @Test
    public void test14675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14675");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage5.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14676");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage10.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test14677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14677");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        unsubscribeMessage1.addTopic("\000d\000\001\001d");
        unsubscribeMessage1.setMessageId(100);
        unsubscribeMessage1.addTopic("MQIsdp");
        boolean boolean9 = unsubscribeMessage1.isDup();
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14678");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage7 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Header header10 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage11 = new org.meqantt.message.PubCompMessage(header10);
        org.meqantt.message.PublishMessage publishMessage12 = new org.meqantt.message.PublishMessage(header10);
        org.meqantt.message.PubRelMessage pubRelMessage13 = new org.meqantt.message.PubRelMessage(header10);
        org.meqantt.message.PingRespMessage pingRespMessage14 = new org.meqantt.message.PingRespMessage(header10);
        org.meqantt.message.SubAckMessage subAckMessage15 = new org.meqantt.message.SubAckMessage(header10);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage(header10);
        org.meqantt.message.PingRespMessage pingRespMessage17 = new org.meqantt.message.PingRespMessage(header10);
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage(header10);
        org.meqantt.message.QoS qoS19 = subscribeMessage18.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage("00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n", qoS19);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage7.setQos(qoS19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type6);
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14679");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage11 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage12 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage14 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage14.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14680");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test14681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14681");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage13 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage14 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage15 = new org.meqantt.message.SubAckMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14682");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 10);
        boolean boolean4 = connectMessage3.hasPassword();
        boolean boolean5 = connectMessage3.hasUsername();
        boolean boolean6 = connectMessage3.isCleanSession();
        boolean boolean7 = connectMessage3.hasWill();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test14683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14683");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type8 = header1.getType();
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str2, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void test14684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14684");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList1 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage0.getGrantedQoSs();
        byte[] byteArray5 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str6 = org.meqantt.util.FormatUtil.toString(byteArray5);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage("hi!", byteArray5);
        org.meqantt.message.Message.Header header9 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header9);
        org.meqantt.message.PubCompMessage pubCompMessage11 = new org.meqantt.message.PubCompMessage(header9);
        org.meqantt.message.PubAckMessage pubAckMessage12 = new org.meqantt.message.PubAckMessage(header9);
        org.meqantt.message.PublishMessage publishMessage13 = new org.meqantt.message.PublishMessage(header9);
        org.meqantt.message.ConnAckMessage connAckMessage14 = new org.meqantt.message.ConnAckMessage(header9);
        org.meqantt.message.SubAckMessage subAckMessage15 = new org.meqantt.message.SubAckMessage(header9);
        org.meqantt.message.Message.Header header17 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type18 = header17.getType();
        org.meqantt.message.Message.Type type19 = header17.getType();
        org.meqantt.message.SubAckMessage subAckMessage20 = new org.meqantt.message.SubAckMessage(header17);
        org.meqantt.message.PingReqMessage pingReqMessage21 = new org.meqantt.message.PingReqMessage(header17);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage(header17);
        org.meqantt.message.ConnectMessage connectMessage23 = new org.meqantt.message.ConnectMessage(header17);
        org.meqantt.message.PingReqMessage pingReqMessage24 = new org.meqantt.message.PingReqMessage(header17);
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage(header17);
        java.util.List<java.lang.String> strList26 = subscribeMessage25.getTopics();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage28 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList29 = unsubscribeMessage28.getTopics();
        org.meqantt.message.Message.Type type30 = unsubscribeMessage28.getType();
        java.util.List<java.lang.String> strList31 = unsubscribeMessage28.getTopics();
        org.meqantt.message.QoS qoS32 = unsubscribeMessage28.getQos();
        subscribeMessage25.setQos(qoS32);
        subAckMessage15.addQoS(qoS32);
        publishMessage7.setQos(qoS32);
        subAckMessage0.addQoS(qoS32);
        java.util.List<org.meqantt.message.QoS> qoSList37 = subAckMessage0.getGrantedQoSs();
        org.junit.Assert.assertNull(qoSList1);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type30.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(qoSList37);
    }

    @Test
    public void test14685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14685");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        boolean boolean3 = connectMessage1.isCleanSession();
        java.lang.String str4 = connectMessage1.getPassword();
        connectMessage1.setWill("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n");
        java.lang.String str8 = connectMessage1.getUsername();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test14686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14686");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage6.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14687");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.Message.Type type8 = header1.getType();
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.util.List<java.lang.String> strList11 = unsubscribeMessage10.getTopics();
        unsubscribeMessage10.addTopic("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertNull(type8);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test14688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14688");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("p\002\000\n", false, 15);
    }

    @Test
    public void test14689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14689");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Type type12 = header1.getType();
        org.meqantt.message.ConnectMessage connectMessage13 = new org.meqantt.message.ConnectMessage(header1);
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertNull(type12);
    }

    @Test
    public void test14690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14690");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage7 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type10 = subscribeMessage9.getType();
        subscribeMessage9.setDup(false);
        subscribeMessage9.setMessageId((int) (short) 0);
        java.util.List<org.meqantt.message.QoS> qoSList15 = subscribeMessage9.getTopicQoSs();
        subscribeMessage9.setDup(false);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type20 = subscribeMessage19.getType();
        org.meqantt.message.ConnectMessage connectMessage26 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean27 = connectMessage26.hasWill();
        java.lang.String str28 = connectMessage26.getWill();
        org.meqantt.message.Message.Header header31 = null;
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage(header31);
        boolean boolean33 = connectMessage32.isWillRetained();
        boolean boolean34 = connectMessage32.isWillRetained();
        java.lang.String str35 = connectMessage32.getUsername();
        org.meqantt.message.QoS qoS39 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("", qoS39);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList43 = subscribeMessage42.getTopics();
        org.meqantt.message.QoS qoS44 = subscribeMessage42.getQos();
        subscribeMessage40.addTopic("", qoS44);
        connectMessage32.setWill("hi!", "", qoS44, false);
        connectMessage26.setWill("MQIsdp", "hi!", qoS44, false);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS44);
        subscribeMessage19.addTopic("\001\003\003\001", qoS44);
        subscribeMessage9.addTopic("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS44);
        java.util.List<java.lang.String> strList53 = subscribeMessage9.getTopics();
        org.meqantt.message.ConnectMessage connectMessage58 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str59 = connectMessage58.getUsername();
        org.meqantt.message.QoS qoS63 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage64 = new org.meqantt.message.SubscribeMessage("", qoS63);
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList67 = subscribeMessage66.getTopics();
        org.meqantt.message.QoS qoS68 = subscribeMessage66.getQos();
        subscribeMessage64.addTopic("", qoS68);
        connectMessage58.setWill("", "\000d\000\001\001d", qoS68, true);
        java.lang.String str72 = connectMessage58.getPassword();
        boolean boolean73 = connectMessage58.isWillRetained();
        org.meqantt.message.QoS qoS74 = connectMessage58.getWillQoS();
        java.lang.String str75 = connectMessage58.getProtocolId();
        connectMessage58.setWill("", "\001\003\003\001");
        org.meqantt.message.SubAckMessage subAckMessage81 = new org.meqantt.message.SubAckMessage();
        org.meqantt.message.SubscribeMessage subscribeMessage83 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList84 = subscribeMessage83.getTopics();
        org.meqantt.message.QoS qoS85 = subscribeMessage83.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage86 = new org.meqantt.message.SubscribeMessage("", qoS85);
        subAckMessage81.addQoS(qoS85);
        connectMessage58.setWill("", "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", qoS85, false);
        subscribeMessage9.addTopic("00: 00000000 \000 0\n01: 00000000 \000 0\n", qoS85);
        subscribeMessage9.setDup(false);
        org.meqantt.message.QoS qoS93 = subscribeMessage9.getQos();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage8.setQos(qoS93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type10.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(qoSList15);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type20.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + qoS44 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS44.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + qoS68 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS68.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + qoS74 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS74.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "MQIsdp" + "'", str75, "MQIsdp");
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertTrue("'" + qoS85 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS85.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS93 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS93.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14691");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.SubscribeMessage subscribeMessage2 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage3 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage4.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14692");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage9 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Header header11 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage12 = new org.meqantt.message.PingReqMessage(header11);
        org.meqantt.message.PubCompMessage pubCompMessage13 = new org.meqantt.message.PubCompMessage(header11);
        org.meqantt.message.SubAckMessage subAckMessage14 = new org.meqantt.message.SubAckMessage(header11);
        org.meqantt.message.SubAckMessage subAckMessage15 = new org.meqantt.message.SubAckMessage(header11);
        org.meqantt.message.ConnectMessage connectMessage16 = new org.meqantt.message.ConnectMessage(header11);
        org.meqantt.message.SubAckMessage subAckMessage17 = new org.meqantt.message.SubAckMessage(header11);
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage("MQIsdp", true, (int) 'a');
        boolean boolean22 = connectMessage21.hasPassword();
        org.meqantt.message.QoS qoS23 = connectMessage21.getQos();
        subAckMessage17.addQoS(qoS23);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage9.setQos(qoS23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + qoS23 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS23.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14693");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.util.List<java.lang.String> strList11 = unsubscribeMessage10.getTopics();
        java.util.List<java.lang.String> strList12 = unsubscribeMessage10.getTopics();
        org.meqantt.message.Message.Type type13 = unsubscribeMessage10.getType();
        boolean boolean14 = unsubscribeMessage10.isRetained();
        java.util.List<java.lang.String> strList15 = unsubscribeMessage10.getTopics();
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage10.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test14694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14694");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\000\000", true, (int) (short) 1);
        boolean boolean4 = connectMessage3.isRetained();
        java.lang.String str5 = connectMessage3.getUsername();
        java.lang.String str6 = connectMessage3.getPassword();
        boolean boolean7 = connectMessage3.hasUsername();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test14695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14695");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        byte byte3 = connectMessage2.getProtocolVersion();
        boolean boolean4 = connectMessage2.hasUsername();
        byte byte5 = connectMessage2.getProtocolVersion();
        boolean boolean6 = connectMessage2.isCleanSession();
        boolean boolean7 = connectMessage2.hasWill();
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 3 + "'", byte3 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 3 + "'", byte5 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test14696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14696");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Header header8 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        org.meqantt.message.PubAckMessage pubAckMessage10 = new org.meqantt.message.PubAckMessage(header8);
        java.lang.String str11 = header8.toString();
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header8);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList14 = subscribeMessage13.getTopics();
        org.meqantt.message.QoS qoS15 = subscribeMessage13.getQos();
        subAckMessage12.addQoS(qoS15);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage6.setQos(qoS15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str11, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14697");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        java.lang.String str9 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean11 = connectMessage10.isRetained();
        boolean boolean12 = connectMessage10.isWillRetained();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str9, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14698");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        byte byte3 = connectMessage2.getProtocolVersion();
        boolean boolean4 = connectMessage2.hasUsername();
        org.meqantt.message.QoS qoS5 = connectMessage2.getWillQoS();
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 3 + "'", byte3 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(qoS5);
    }

    @Test
    public void test14699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14699");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.QoS qoS3 = pubAckMessage2.getQos();
        org.meqantt.message.Message.Header header6 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str7 = header6.toString();
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header6);
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage(header6);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage12 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS13 = unsubscribeMessage12.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage("", qoS13);
        publishMessage9.setQos(qoS13);
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS13);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage2.setQos(qoS13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + qoS3 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS3.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str7, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14700");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        boolean boolean4 = unsubAckMessage3.isRetained();
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage3.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test14701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14701");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage(header1);
        subscribeMessage8.setMessageId((int) (short) 100);
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type6.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test14702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14702");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean3 = connectMessage2.isWillRetained();
        java.lang.String str4 = connectMessage2.getWillTopic();
        java.lang.String str5 = connectMessage2.getProtocolId();
        connectMessage2.setCredentials("");
        org.meqantt.message.Message.Type type8 = connectMessage2.getType();
        boolean boolean9 = connectMessage2.isWillRetained();
        boolean boolean10 = connectMessage2.isCleanSession();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MQIsdp" + "'", str5, "MQIsdp");
        org.junit.Assert.assertNull(type8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test14703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14703");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage8.addTopic("00: 00110000 0 48\n01: 00000111 \007 7\n02: 00000000 \000 0\n03: 00000011 \003 3\n04: 01101000 h 104\n05: 01101001 i 105\n06: 00100001 ! 33\n07: 00000000 \000 0\n08: 00000000 \000 0\n");
        unsubscribeMessage8.addTopic("00: 01100100 d 100\n01: 00000000 \000 0\n");
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage8.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test14704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14704");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        boolean boolean27 = connectMessage3.isCleanSession();
        java.lang.String str28 = connectMessage3.getProtocolId();
        java.lang.String str29 = connectMessage3.getPassword();
        java.lang.String str30 = connectMessage3.getClientId();
        boolean boolean31 = connectMessage3.isWillRetained();
        byte[] byteArray32 = connectMessage3.toBytes();
        boolean boolean33 = connectMessage3.hasUsername();
        boolean boolean34 = connectMessage3.isWillRetained();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "MQIsdp" + "'", str28, "MQIsdp");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "MQIsdp" + "'", str30, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[16, 33, 0, 6, 77, 81, 73, 115, 100, 112, 3, 6, 0, 100, 0, 6, 77, 81, 73, 115, 100, 112, 0, 6, 77, 81, 73, 115, 100, 112, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test14705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14705");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage2 = new org.meqantt.message.UnsubscribeMessage("\000\000");
        byte[] byteArray3 = unsubscribeMessage2.toBytes();
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage("hi!", byteArray3);
        java.lang.String str5 = publishMessage4.getDataAsString();
        byte[] byteArray6 = publishMessage4.getData();
        java.lang.String str7 = org.meqantt.util.FormatUtil.toString(byteArray6);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-94, 8, 0, 0, 0, 4, -64, -128, -64, -128]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd" + "'", str5, "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-94, 8, 0, 0, 0, 4, -64, -128, -64, -128]");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test14706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14706");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.subscribe("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener9 = null;
        nettyClient1.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.subscribe("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        nettyClient1.connect("\001\003\003\001", (int) (short) 10);
        nettyClient1.subscribe("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        nettyClient1.connect("00: 00000000 \000 0\n01: 00000000 \000 0\n", (int) (byte) 10);
        nettyClient1.disconnect();
        nettyClient1.ping();
    }

    @Test
    public void test14707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14707");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14708");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isCleanSession();
        java.lang.String str3 = connectMessage1.getUsername();
        java.lang.String str4 = connectMessage1.getClientId();
        java.lang.String str5 = connectMessage1.getProtocolId();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MQIsdp" + "'", str5, "MQIsdp");
    }

    @Test
    public void test14709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14709");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage10 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage12 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage13 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage14 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage14.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14710");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage4 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage5 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Header header9 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header9);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header9);
        org.meqantt.message.PubRelMessage pubRelMessage12 = new org.meqantt.message.PubRelMessage(header9);
        org.meqantt.message.Message.Type type13 = header9.getType();
        org.meqantt.message.PubRecMessage pubRecMessage14 = new org.meqantt.message.PubRecMessage(header9);
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage(header9);
        org.meqantt.message.Message.Header header18 = null;
        org.meqantt.message.ConnectMessage connectMessage19 = new org.meqantt.message.ConnectMessage(header18);
        java.lang.String str20 = connectMessage19.getClientId();
        connectMessage19.setWill("hi!", "");
        boolean boolean24 = connectMessage19.hasPassword();
        boolean boolean25 = connectMessage19.isCleanSession();
        boolean boolean26 = connectMessage19.hasWill();
        org.meqantt.message.QoS qoS27 = connectMessage19.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS27);
        subscribeMessage15.addTopic("\000\006\ufffd\ufffd\003hi!", qoS27);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage7.setQos(qoS27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14711");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.subscribe("\000d\000\001\001d");
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.ping();
        nettyClient1.connect("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", (int) (byte) 3);
        nettyClient1.publish("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n", "\000\000");
        nettyClient1.subscribe("\000\000");
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        nettyClient1.subscribe("\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
    }

    @Test
    public void test14712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14712");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus2 = org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED;
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(connectionStatus2);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus4 = connAckMessage3.getStatus();
        byte[] byteArray5 = connAckMessage3.toBytes();
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage("\000<Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", byteArray5);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage("0\b\000\000\000d\000\001\001d", byteArray5);
        org.junit.Assert.assertTrue("'" + connectionStatus2 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus2.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus4 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus4.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[32, 2, 0, 2]");
    }

    @Test
    public void test14713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14713");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "");
        publishMessage4.setDup(false);
        int int7 = publishMessage4.getMessageId();
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) publishMessage4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test14714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14714");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        java.lang.String str10 = header1.toString();
        org.meqantt.message.PubRelMessage pubRelMessage11 = new org.meqantt.message.PubRelMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage11.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str10, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14715");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean6 = connectMessage5.hasWill();
        java.lang.String str7 = connectMessage5.getWill();
        org.meqantt.message.Message.Header header10 = null;
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage(header10);
        boolean boolean12 = connectMessage11.isWillRetained();
        boolean boolean13 = connectMessage11.isWillRetained();
        java.lang.String str14 = connectMessage11.getUsername();
        org.meqantt.message.QoS qoS18 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage("", qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList22 = subscribeMessage21.getTopics();
        org.meqantt.message.QoS qoS23 = subscribeMessage21.getQos();
        subscribeMessage19.addTopic("", qoS23);
        connectMessage11.setWill("hi!", "", qoS23, false);
        connectMessage5.setWill("MQIsdp", "hi!", qoS23, false);
        byte byte29 = connectMessage5.getProtocolVersion();
        org.meqantt.message.ConnectMessage connectMessage36 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean37 = connectMessage36.hasWill();
        java.lang.String str38 = connectMessage36.getWill();
        org.meqantt.message.Message.Header header41 = null;
        org.meqantt.message.ConnectMessage connectMessage42 = new org.meqantt.message.ConnectMessage(header41);
        boolean boolean43 = connectMessage42.isWillRetained();
        boolean boolean44 = connectMessage42.isWillRetained();
        java.lang.String str45 = connectMessage42.getUsername();
        org.meqantt.message.QoS qoS49 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage("", qoS49);
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList53 = subscribeMessage52.getTopics();
        org.meqantt.message.QoS qoS54 = subscribeMessage52.getQos();
        subscribeMessage50.addTopic("", qoS54);
        connectMessage42.setWill("hi!", "", qoS54, false);
        connectMessage36.setWill("MQIsdp", "hi!", qoS54, false);
        org.meqantt.message.SubscribeMessage subscribeMessage60 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS54);
        connectMessage5.setWill("", "MQIsdp", qoS54, false);
        connectMessage5.setCredentials("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        boolean boolean66 = connectMessage5.isWillRetained();
        java.lang.String str67 = connectMessage5.getPassword();
        boolean boolean68 = connectMessage5.isDup();
        org.meqantt.message.Message.Header header71 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage72 = new org.meqantt.message.SubscribeMessage(header71);
        org.meqantt.message.QoS qoS74 = null;
        subscribeMessage72.addTopic("hi!", qoS74);
        java.util.List<org.meqantt.message.QoS> qoSList76 = subscribeMessage72.getTopicQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList77 = subscribeMessage72.getTopicQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList78 = subscribeMessage72.getTopicQoSs();
        org.meqantt.message.PublishMessage publishMessage82 = new org.meqantt.message.PublishMessage("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", "\001\003\003\001");
        org.meqantt.message.QoS qoS83 = publishMessage82.getQos();
        subscribeMessage72.addTopic("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS83);
        connectMessage5.setWill("00: 00000000 \000 0\n01: 00000000 \000 0\n", "00: 00000000 \000 0\n01: 00010011 \023 19\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00001000 \b 8\n05: 11101111 \357 239\n06: 10111111 \277 191\n07: 10111101 \275 189\n08: 11101111 \357 239\n09: 10111111 \277 191\n10: 10111101 \275 189\n11: 01100100 d 100\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 11101111 \357 239\n16: 10111111 \277 191\n17: 10111101 \275 189\n18: 00000001 \001 1\n19: 00000001 \001 1\n20: 01100100 d 100\n", qoS83, true);
        connectMessage5.setCredentials("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", "\000\003hi!");
        boolean boolean90 = connectMessage5.isWillRetained();
        java.lang.String str91 = connectMessage5.getUsername();
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) connectMessage5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + qoS23 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS23.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 3 + "'", byte29 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + qoS54 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS54.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "00: 00000000 \000 0\n01: 00000000 \000 0\n" + "'", str67, "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(qoSList76);
        org.junit.Assert.assertNotNull(qoSList77);
        org.junit.Assert.assertNotNull(qoSList78);
        org.junit.Assert.assertTrue("'" + qoS83 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS83.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n" + "'", str91, "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
    }

    @Test
    public void test14716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14716");
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean5 = connectMessage4.hasWill();
        java.lang.String str6 = connectMessage4.getWill();
        org.meqantt.message.Message.Header header9 = null;
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage(header9);
        boolean boolean11 = connectMessage10.isWillRetained();
        boolean boolean12 = connectMessage10.isWillRetained();
        java.lang.String str13 = connectMessage10.getUsername();
        org.meqantt.message.QoS qoS17 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage("", qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList21 = subscribeMessage20.getTopics();
        org.meqantt.message.QoS qoS22 = subscribeMessage20.getQos();
        subscribeMessage18.addTopic("", qoS22);
        connectMessage10.setWill("hi!", "", qoS22, false);
        connectMessage4.setWill("MQIsdp", "hi!", qoS22, false);
        byte byte28 = connectMessage4.getProtocolVersion();
        org.meqantt.message.ConnectMessage connectMessage35 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean36 = connectMessage35.hasWill();
        java.lang.String str37 = connectMessage35.getWill();
        org.meqantt.message.Message.Header header40 = null;
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage(header40);
        boolean boolean42 = connectMessage41.isWillRetained();
        boolean boolean43 = connectMessage41.isWillRetained();
        java.lang.String str44 = connectMessage41.getUsername();
        org.meqantt.message.QoS qoS48 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage("", qoS48);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList52 = subscribeMessage51.getTopics();
        org.meqantt.message.QoS qoS53 = subscribeMessage51.getQos();
        subscribeMessage49.addTopic("", qoS53);
        connectMessage41.setWill("hi!", "", qoS53, false);
        connectMessage35.setWill("MQIsdp", "hi!", qoS53, false);
        org.meqantt.message.SubscribeMessage subscribeMessage59 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS53);
        connectMessage4.setWill("", "MQIsdp", qoS53, false);
        connectMessage4.setCredentials("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        connectMessage4.setCredentials("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        boolean boolean68 = connectMessage4.hasWill();
        connectMessage4.setWill("\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]");
        byte[] byteArray72 = connectMessage4.toBytes();
        org.meqantt.message.PublishMessage publishMessage73 = new org.meqantt.message.PublishMessage("\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n", byteArray72);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + qoS22 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS22.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 3 + "'", byte28 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + qoS53 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS53.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(byteArray72);
    }

    @Test
    public void test14717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14717");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000d\000\001\001d", "\000d\000\001\001d");
        byte[] byteArray3 = publishMessage2.getData();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
    }

    @Test
    public void test14718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14718");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        int int8 = pubAckMessage7.getMessageId();
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage7.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test14719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14719");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getWillTopic();
        boolean boolean7 = connectMessage3.isCleanSession();
        boolean boolean8 = connectMessage3.hasPassword();
        boolean boolean9 = connectMessage3.isDup();
        org.meqantt.message.QoS qoS10 = connectMessage3.getWillQoS();
        java.lang.String str11 = connectMessage3.getUsername();
        org.meqantt.message.QoS qoS12 = connectMessage3.getWillQoS();
        boolean boolean13 = connectMessage3.hasPassword();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(qoS10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(qoS12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test14720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14720");
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str9 = connectMessage8.getUsername();
        org.meqantt.message.QoS qoS13 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage("", qoS13);
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList17 = subscribeMessage16.getTopics();
        org.meqantt.message.QoS qoS18 = subscribeMessage16.getQos();
        subscribeMessage14.addTopic("", qoS18);
        connectMessage8.setWill("", "\000d\000\001\001d", qoS18, true);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("hi!", qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("", qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList28 = subscribeMessage27.getTopics();
        org.meqantt.message.ConnectMessage connectMessage33 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str34 = connectMessage33.getProtocolId();
        org.meqantt.message.QoS qoS35 = connectMessage33.getQos();
        subscribeMessage27.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS35);
        subscribeMessage25.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS35);
        org.meqantt.message.ConnectMessage connectMessage42 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str43 = connectMessage42.getProtocolId();
        org.meqantt.message.QoS qoS44 = connectMessage42.getQos();
        subscribeMessage25.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS44);
        int int46 = subscribeMessage25.getMessageId();
        org.meqantt.message.ConnectMessage connectMessage55 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str56 = connectMessage55.getUsername();
        org.meqantt.message.QoS qoS60 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("", qoS60);
        org.meqantt.message.SubscribeMessage subscribeMessage63 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList64 = subscribeMessage63.getTopics();
        org.meqantt.message.QoS qoS65 = subscribeMessage63.getQos();
        subscribeMessage61.addTopic("", qoS65);
        connectMessage55.setWill("", "\000d\000\001\001d", qoS65, true);
        org.meqantt.message.SubscribeMessage subscribeMessage69 = new org.meqantt.message.SubscribeMessage("hi!", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage70 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage71 = new org.meqantt.message.SubscribeMessage("", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage72 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage74 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList75 = subscribeMessage74.getTopics();
        org.meqantt.message.ConnectMessage connectMessage80 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str81 = connectMessage80.getProtocolId();
        org.meqantt.message.QoS qoS82 = connectMessage80.getQos();
        subscribeMessage74.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS82);
        subscribeMessage72.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS82);
        subscribeMessage25.addTopic("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS82);
        org.meqantt.message.SubscribeMessage subscribeMessage86 = new org.meqantt.message.SubscribeMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", qoS82);
        java.util.List<java.lang.String> strList87 = subscribeMessage86.getTopics();
        byte[] byteArray88 = subscribeMessage86.toBytes();
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "MQIsdp" + "'", str34, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS35 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS35.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "MQIsdp" + "'", str43, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS44 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS44.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + qoS65 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS65.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "MQIsdp" + "'", str81, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS82 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS82.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-126, 68, 0, 0, 0, 63, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 80, 85, 66, 82, 69, 76, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 69, 88, 65, 67, 84, 76, 89, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 102, 97, 108, 115, 101, 93, 0]");
    }

    @Test
    public void test14721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14721");
        org.meqantt.message.ConnectMessage connectMessage0 = new org.meqantt.message.ConnectMessage();
        java.lang.String str1 = connectMessage0.getUsername();
        boolean boolean2 = connectMessage0.hasWill();
        connectMessage0.setCredentials("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        java.lang.String str6 = connectMessage0.getWill();
        java.lang.String str7 = connectMessage0.getProtocolId();
        boolean boolean8 = connectMessage0.isRetained();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectMessage0.write(outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test14722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14722");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        org.meqantt.MqttListener mqttListener15 = null;
        nettyClient1.setListener(mqttListener15);
        nettyClient1.unsubscribe("\000\003hi!");
        org.meqantt.MqttListener mqttListener19 = null;
        nettyClient1.setListener(mqttListener19);
        nettyClient1.ping();
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("\000d\000\001\001d");
        nettyClient1.ping();
        org.meqantt.MqttListener mqttListener26 = null;
        nettyClient1.setListener(mqttListener26);
        nettyClient1.ping();
        nettyClient1.connect("\000H00: 01110000 p 112\n01: 00000010 \002 2\n\ufffd\ufffd 0\n03: 00001010 \n 10\n", (int) (short) 0);
        nettyClient1.subscribe("\000\ufffd\ufffd 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n");
        org.meqantt.MqttListener mqttListener34 = null;
        nettyClient1.setListener(mqttListener34);
    }

    @Test
    public void test14723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14723");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        nettyClient1.publish("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "\000\003hi!");
        nettyClient1.disconnect();
        nettyClient1.publish("\020\032\000\006MQIsdp\003&\000\001\000\000\000\000\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", "\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
    }

    @Test
    public void test14724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14724");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        boolean boolean6 = connectMessage1.isWillRetained();
        java.lang.String str7 = connectMessage1.getWillTopic();
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.Message.Type type8 = connectMessage1.getType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test14725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14725");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.Message.Header header3 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header3);
        boolean boolean5 = connectMessage4.isWillRetained();
        java.lang.String str6 = connectMessage4.getWillTopic();
        java.lang.String str7 = connectMessage4.getProtocolId();
        connectMessage4.setCredentials("");
        org.meqantt.message.Message.Type type10 = connectMessage4.getType();
        boolean boolean11 = connectMessage4.isWillRetained();
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) connectMessage4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14726");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", false, (-1));
        boolean boolean4 = connectMessage3.hasUsername();
        boolean boolean5 = connectMessage3.isRetained();
        java.lang.String str6 = connectMessage3.getProtocolId();
        java.lang.String str7 = connectMessage3.getWillTopic();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MQIsdp" + "'", str6, "MQIsdp");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test14727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14727");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str2, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14728");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        java.lang.String str10 = publishMessage9.getTopic();
        org.meqantt.message.QoS qoS11 = publishMessage9.getQos();
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage6.setQos(qoS11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n" + "'", str10, "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14729");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        org.meqantt.message.QoS qoS4 = connectMessage3.getWillQoS();
        boolean boolean5 = connectMessage3.hasWill();
        connectMessage3.setWill("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        byte byte9 = connectMessage3.getProtocolVersion();
        int int10 = connectMessage3.getKeepAlive();
        org.junit.Assert.assertNull(qoS4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 3 + "'", byte9 == (byte) 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test14730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14730");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getProtocolId();
        java.lang.String str5 = connectMessage1.getWillTopic();
        byte byte6 = connectMessage1.getProtocolVersion();
        boolean boolean7 = connectMessage1.hasUsername();
        connectMessage1.setWill("MQIsdp", "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        byte byte11 = connectMessage1.getProtocolVersion();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 3 + "'", byte6 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 3 + "'", byte11 == (byte) 3);
    }

    @Test
    public void test14731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14731");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.UnsubAckMessage unsubAckMessage9 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage9.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14732");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage5.setDup(false);
        unsubscribeMessage5.setDup(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14733");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.QoS qoS8 = unsubAckMessage7.getQos();
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage7.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + qoS8 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS8.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14734");
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str9 = connectMessage8.getUsername();
        org.meqantt.message.QoS qoS13 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage("", qoS13);
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList17 = subscribeMessage16.getTopics();
        org.meqantt.message.QoS qoS18 = subscribeMessage16.getQos();
        subscribeMessage14.addTopic("", qoS18);
        connectMessage8.setWill("", "\000d\000\001\001d", qoS18, true);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("hi!", qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage("", qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS18);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList28 = subscribeMessage27.getTopics();
        org.meqantt.message.ConnectMessage connectMessage33 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str34 = connectMessage33.getProtocolId();
        org.meqantt.message.QoS qoS35 = connectMessage33.getQos();
        subscribeMessage27.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS35);
        subscribeMessage25.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS35);
        org.meqantt.message.ConnectMessage connectMessage42 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str43 = connectMessage42.getProtocolId();
        org.meqantt.message.QoS qoS44 = connectMessage42.getQos();
        subscribeMessage25.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS44);
        int int46 = subscribeMessage25.getMessageId();
        org.meqantt.message.ConnectMessage connectMessage55 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str56 = connectMessage55.getUsername();
        org.meqantt.message.QoS qoS60 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("", qoS60);
        org.meqantt.message.SubscribeMessage subscribeMessage63 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList64 = subscribeMessage63.getTopics();
        org.meqantt.message.QoS qoS65 = subscribeMessage63.getQos();
        subscribeMessage61.addTopic("", qoS65);
        connectMessage55.setWill("", "\000d\000\001\001d", qoS65, true);
        org.meqantt.message.SubscribeMessage subscribeMessage69 = new org.meqantt.message.SubscribeMessage("hi!", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage70 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage71 = new org.meqantt.message.SubscribeMessage("", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage72 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage74 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList75 = subscribeMessage74.getTopics();
        org.meqantt.message.ConnectMessage connectMessage80 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str81 = connectMessage80.getProtocolId();
        org.meqantt.message.QoS qoS82 = connectMessage80.getQos();
        subscribeMessage74.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS82);
        subscribeMessage72.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS82);
        subscribeMessage25.addTopic("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS82);
        org.meqantt.message.SubscribeMessage subscribeMessage86 = new org.meqantt.message.SubscribeMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", qoS82);
        java.util.List<java.lang.String> strList87 = subscribeMessage86.getTopics();
        subscribeMessage86.setDup(false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "MQIsdp" + "'", str34, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS35 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS35.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "MQIsdp" + "'", str43, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS44 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS44.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + qoS65 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS65.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "MQIsdp" + "'", str81, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS82 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS82.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList87);
    }

    @Test
    public void test14735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14735");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.UnsubAckMessage unsubAckMessage2 = new org.meqantt.message.UnsubAckMessage(header1);
        boolean boolean3 = unsubAckMessage2.isRetained();
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage("hi!", "");
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage("MQIsdp", "");
        org.meqantt.message.QoS qoS11 = publishMessage10.getQos();
        publishMessage7.setQos(qoS11);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage("\020\032\000\006MQIsdp\003&\000\001\000\000\000\000\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", qoS11);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage2.setQos(qoS11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14736");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage4 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage5 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage10 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList11 = subAckMessage10.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList12 = subAckMessage10.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList13 = subAckMessage10.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList16 = subscribeMessage15.getTopics();
        org.meqantt.message.QoS qoS17 = subscribeMessage15.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage("", qoS17);
        subAckMessage10.addQoS(qoS17);
        org.meqantt.message.QoS qoS20 = subAckMessage10.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList24 = subscribeMessage23.getTopics();
        org.meqantt.message.QoS qoS25 = subscribeMessage23.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("", qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS25);
        org.meqantt.message.QoS qoS28 = subscribeMessage27.getQos();
        subAckMessage10.addQoS(qoS28);
        subAckMessage9.addQoS(qoS28);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage9.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList11);
        org.junit.Assert.assertNull(qoSList12);
        org.junit.Assert.assertNull(qoSList13);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14737");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str5 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList8 = subAckMessage7.getGrantedQoSs();
        boolean boolean9 = subAckMessage7.isDup();
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList13 = subAckMessage12.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList14 = subAckMessage12.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str19 = connectMessage18.getProtocolId();
        org.meqantt.message.QoS qoS20 = connectMessage18.getQos();
        subAckMessage12.addQoS(qoS20);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("hi!", qoS20);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS20);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage7.setQos(qoS20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(qoSList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(qoSList13);
        org.junit.Assert.assertNull(qoSList14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MQIsdp" + "'", str19, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14738");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener8 = null;
        nettyClient1.setListener(mqttListener8);
        nettyClient1.ping();
        nettyClient1.connect("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n", 2);
        nettyClient1.publish("\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        nettyClient1.unsubscribe("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        nettyClient1.connect("Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]", 10);
        nettyClient1.subscribe("\000\000");
    }

    @Test
    public void test14739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14739");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage5 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage5.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14740");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean8 = connectMessage7.hasPassword();
        int int9 = connectMessage7.getKeepAlive();
        org.meqantt.message.Message.Header header12 = null;
        org.meqantt.message.ConnectMessage connectMessage13 = new org.meqantt.message.ConnectMessage(header12);
        boolean boolean14 = connectMessage13.isCleanSession();
        java.lang.String str15 = connectMessage13.getUsername();
        java.lang.String str16 = connectMessage13.getUsername();
        org.meqantt.message.Message.Header header20 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type21 = header20.getType();
        org.meqantt.message.Message.Type type22 = header20.getType();
        org.meqantt.message.SubAckMessage subAckMessage23 = new org.meqantt.message.SubAckMessage(header20);
        org.meqantt.message.PingReqMessage pingReqMessage24 = new org.meqantt.message.PingReqMessage(header20);
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage(header20);
        org.meqantt.message.ConnectMessage connectMessage26 = new org.meqantt.message.ConnectMessage(header20);
        org.meqantt.message.PingReqMessage pingReqMessage27 = new org.meqantt.message.PingReqMessage(header20);
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage(header20);
        org.meqantt.message.ConnAckMessage connAckMessage29 = new org.meqantt.message.ConnAckMessage(header20);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus30 = connAckMessage29.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus31 = connAckMessage29.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus32 = connAckMessage29.getStatus();
        org.meqantt.message.QoS qoS33 = connAckMessage29.getQos();
        connectMessage13.setWill("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS33, true);
        connectMessage7.setWill("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS33, true);
        connectMessage7.setCredentials("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "\000=Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNull(connectionStatus30);
        org.junit.Assert.assertNull(connectionStatus31);
        org.junit.Assert.assertNull(connectionStatus32);
        org.junit.Assert.assertTrue("'" + qoS33 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS33.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14741");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage3 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage4 = new org.meqantt.message.SubscribeMessage(header1);
    }

    @Test
    public void test14742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14742");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage8 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str9 = header1.toString();
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage10.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type6.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str9, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
    }

    @Test
    public void test14743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14743");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        connectMessage1.setCredentials("");
        connectMessage1.setCredentials("hi!", "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.message.QoS qoS7 = connectMessage1.getWillQoS();
        java.lang.String str8 = connectMessage1.getWillTopic();
        java.lang.String str9 = connectMessage1.getPassword();
        connectMessage1.setCredentials("Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]");
        java.lang.String str12 = connectMessage1.getPassword();
        boolean boolean13 = connectMessage1.hasUsername();
        org.junit.Assert.assertNull(qoS7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str9, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test14744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14744");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "MQIsdp");
        org.meqantt.message.QoS qoS3 = publishMessage2.getQos();
        byte[] byteArray4 = publishMessage2.getData();
        java.lang.String str5 = publishMessage2.getDataAsString();
        org.junit.Assert.assertTrue("'" + qoS3 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS3.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 6, 77, 81, 73, 115, 100, 112]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000\006MQIsdp" + "'", str5, "\000\006MQIsdp");
    }

    @Test
    public void test14745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14745");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type9 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage10 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage11 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header1);
        connectMessage12.setWill("\000\003hi!", "00: 00000000 \000 0\n01: 00000100 \004 4\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 11000000 \300 192\n05: 10000000 \200 128\n");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void test14746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14746");
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage("", byteArray10);
        java.lang.String str12 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray10);
        java.lang.String str13 = org.meqantt.util.FormatUtil.toString(byteArray10);
        java.lang.String str14 = org.meqantt.util.FormatUtil.toString(byteArray10);
        org.meqantt.message.PublishMessage publishMessage15 = new org.meqantt.message.PublishMessage("00: 01100100 d 100\n01: 00000000 \000 0\n", byteArray10);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage("00: 00000000 \000 0\n01: 00000000 \000 0\n", byteArray10);
        org.meqantt.message.PublishMessage publishMessage17 = new org.meqantt.message.PublishMessage("\000\023\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d", byteArray10);
        java.lang.String str18 = publishMessage17.getDataAsString();
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str12, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\000d\000\001\001d" + "'", str18, "\000d\000\001\001d");
    }

    @Test
    public void test14747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14747");
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage("", byteArray8);
        java.lang.String str10 = publishMessage9.getDataAsString();
        byte[] byteArray11 = publishMessage9.getData();
        byte[] byteArray12 = publishMessage9.toBytes();
        java.lang.String str13 = org.meqantt.util.FormatUtil.toString(byteArray12);
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", byteArray12);
        byte[] byteArray15 = publishMessage14.getData();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000d\000\001\001d" + "'", str10, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[48, 8, 0, 0, 0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[48, 8, 0, 0, 0, 100, 0, 1, 1, 100]");
    }

    @Test
    public void test14748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14748");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getClientId();
        boolean boolean5 = connectMessage3.isDup();
        boolean boolean6 = connectMessage3.hasWill();
        org.meqantt.message.Message.Type type7 = connectMessage3.getType();
        java.lang.String str8 = connectMessage3.getWillTopic();
        connectMessage3.setWill("", "p\002\000\n");
        boolean boolean12 = connectMessage3.isWillRetained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.meqantt.message.Message.Type.CONNECT + "'", type7.equals(org.meqantt.message.Message.Type.CONNECT));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14749");
        org.meqantt.message.SubscribeMessage subscribeMessage0 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList1 = subscribeMessage0.getTopics();
        org.meqantt.message.QoS qoS2 = subscribeMessage0.getQos();
        org.meqantt.message.QoS qoS3 = subscribeMessage0.getQos();
        int int4 = subscribeMessage0.getMessageId();
        subscribeMessage0.setDup(false);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage9 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList10 = unsubscribeMessage9.getTopics();
        unsubscribeMessage9.addTopic("\000d\000\001\001d");
        unsubscribeMessage9.addTopic("MQIsdp");
        java.util.List<java.lang.String> strList15 = unsubscribeMessage9.getTopics();
        unsubscribeMessage9.setDup(false);
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList19 = subscribeMessage18.getTopics();
        org.meqantt.message.QoS qoS20 = subscribeMessage18.getQos();
        org.meqantt.message.ConnectMessage connectMessage25 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str26 = connectMessage25.getProtocolId();
        org.meqantt.message.QoS qoS27 = connectMessage25.getQos();
        subscribeMessage18.addTopic("", qoS27);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage30 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList31 = unsubscribeMessage30.getTopics();
        org.meqantt.message.Message.Type type32 = unsubscribeMessage30.getType();
        java.util.List<java.lang.String> strList33 = unsubscribeMessage30.getTopics();
        org.meqantt.message.QoS qoS34 = unsubscribeMessage30.getQos();
        subscribeMessage18.setQos(qoS34);
        unsubscribeMessage9.setQos(qoS34);
        subscribeMessage0.addTopic("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", qoS34);
        java.util.List<org.meqantt.message.QoS> qoSList38 = subscribeMessage0.getTopicQoSs();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + qoS2 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS2.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS3 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS3.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "MQIsdp" + "'", str26, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type32.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(qoSList38);
    }

    @Test
    public void test14750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14750");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage3 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage10 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 0);
        java.lang.String str11 = connectMessage10.getProtocolId();
        org.meqantt.message.QoS qoS15 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage("", qoS15);
        int int17 = subscribeMessage16.getMessageId();
        subscribeMessage16.setMessageId((int) (short) 10);
        org.meqantt.message.Message.Header header21 = null;
        org.meqantt.message.ConnectMessage connectMessage22 = new org.meqantt.message.ConnectMessage(header21);
        int int23 = connectMessage22.getKeepAlive();
        connectMessage22.setWill("MQIsdp", "");
        org.meqantt.message.QoS qoS27 = connectMessage22.getWillQoS();
        subscribeMessage16.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS27);
        connectMessage10.setWill("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS27, true);
        boolean boolean31 = connectMessage10.hasWill();
        java.lang.String str32 = connectMessage10.getWillTopic();
        org.meqantt.message.Message.Header header36 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage37 = new org.meqantt.message.PubCompMessage(header36);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage(header36);
        java.util.List<org.meqantt.message.QoS> qoSList39 = subscribeMessage38.getTopicQoSs();
        java.util.List<java.lang.String> strList40 = subscribeMessage38.getTopics();
        int int41 = subscribeMessage38.getMessageId();
        java.util.List<java.lang.String> strList42 = subscribeMessage38.getTopics();
        org.meqantt.message.Message.Header header45 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type46 = header45.getType();
        org.meqantt.message.Message.Type type47 = header45.getType();
        org.meqantt.message.SubAckMessage subAckMessage48 = new org.meqantt.message.SubAckMessage(header45);
        org.meqantt.message.PingReqMessage pingReqMessage49 = new org.meqantt.message.PingReqMessage(header45);
        org.meqantt.message.PingReqMessage pingReqMessage50 = new org.meqantt.message.PingReqMessage(header45);
        org.meqantt.message.DisconnectMessage disconnectMessage51 = new org.meqantt.message.DisconnectMessage(header45);
        org.meqantt.message.DisconnectMessage disconnectMessage52 = new org.meqantt.message.DisconnectMessage(header45);
        org.meqantt.message.SubAckMessage subAckMessage53 = new org.meqantt.message.SubAckMessage(header45);
        org.meqantt.message.PubRelMessage pubRelMessage54 = new org.meqantt.message.PubRelMessage(header45);
        org.meqantt.message.ConnAckMessage connAckMessage55 = new org.meqantt.message.ConnAckMessage(header45);
        org.meqantt.message.PubCompMessage pubCompMessage56 = new org.meqantt.message.PubCompMessage(header45);
        org.meqantt.message.SubAckMessage subAckMessage57 = new org.meqantt.message.SubAckMessage(header45);
        org.meqantt.message.DisconnectMessage disconnectMessage58 = new org.meqantt.message.DisconnectMessage(header45);
        org.meqantt.message.QoS qoS59 = disconnectMessage58.getQos();
        subscribeMessage38.addTopic("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS59);
        connectMessage10.setWill("MQIsdp", "00: 00000000 \000 0\n01: 00000100 \004 4\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 11000000 \300 192\n05: 10000000 \200 128\n", qoS59, true);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage6.setQos(qoS59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MQIsdp" + "'", str11, "MQIsdp");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n" + "'", str32, "00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n");
        org.junit.Assert.assertNotNull(qoSList39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNull(type46);
        org.junit.Assert.assertNull(type47);
        org.junit.Assert.assertTrue("'" + qoS59 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS59.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14751");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage11 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage12 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage14 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList15 = subAckMessage14.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList16 = subAckMessage14.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList17 = subAckMessage14.getGrantedQoSs();
        subAckMessage14.setMessageId((int) '#');
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList21 = subscribeMessage20.getTopics();
        org.meqantt.message.ConnectMessage connectMessage26 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str27 = connectMessage26.getProtocolId();
        org.meqantt.message.QoS qoS28 = connectMessage26.getQos();
        subscribeMessage20.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS28);
        subAckMessage14.addQoS(qoS28);
        org.meqantt.message.Message.Header header31 = null;
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage(header31);
        int int33 = connectMessage32.getKeepAlive();
        connectMessage32.setWill("MQIsdp", "");
        java.lang.String str37 = connectMessage32.getWillTopic();
        org.meqantt.message.ConnectMessage connectMessage47 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str48 = connectMessage47.getUsername();
        org.meqantt.message.QoS qoS52 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("", qoS52);
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList56 = subscribeMessage55.getTopics();
        org.meqantt.message.QoS qoS57 = subscribeMessage55.getQos();
        subscribeMessage53.addTopic("", qoS57);
        connectMessage47.setWill("", "\000d\000\001\001d", qoS57, true);
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("hi!", qoS57);
        org.meqantt.message.SubscribeMessage subscribeMessage62 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS57);
        org.meqantt.message.SubscribeMessage subscribeMessage63 = new org.meqantt.message.SubscribeMessage("", qoS57);
        org.meqantt.message.SubscribeMessage subscribeMessage64 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS57);
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList67 = subscribeMessage66.getTopics();
        org.meqantt.message.ConnectMessage connectMessage72 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str73 = connectMessage72.getProtocolId();
        org.meqantt.message.QoS qoS74 = connectMessage72.getQos();
        subscribeMessage66.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS74);
        subscribeMessage64.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS74);
        org.meqantt.message.ConnectMessage connectMessage81 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str82 = connectMessage81.getProtocolId();
        org.meqantt.message.QoS qoS83 = connectMessage81.getQos();
        subscribeMessage64.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS83);
        connectMessage32.setWill("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS83, false);
        subAckMessage14.addQoS(qoS83);
        org.meqantt.message.SubscribeMessage subscribeMessage88 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00000111 \007 7\n02: 00000000 \000 0\n03: 00000011 \003 3\n04: 01101000 h 104\n05: 01101001 i 105\n06: 00100001 ! 33\n07: 00000000 \000 0\n08: 00000000 \000 0\n", qoS83);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage12.setQos(qoS83);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(qoSList15);
        org.junit.Assert.assertNull(qoSList16);
        org.junit.Assert.assertNull(qoSList17);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "MQIsdp" + "'", str27, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "MQIsdp" + "'", str37, "MQIsdp");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + qoS57 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS57.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "MQIsdp" + "'", str73, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS74 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS74.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "MQIsdp" + "'", str82, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS83 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS83.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14752");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus4 = connAckMessage3.getStatus();
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage9 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus4 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus4.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
    }

    @Test
    public void test14753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14753");
        org.meqantt.message.ConnectMessage connectMessage0 = new org.meqantt.message.ConnectMessage();
        java.lang.String str1 = connectMessage0.getUsername();
        connectMessage0.setCredentials("hi!");
        connectMessage0.setWill("hi!", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        java.lang.String str7 = connectMessage0.getWillTopic();
        org.meqantt.message.QoS qoS8 = connectMessage0.getWillQoS();
        int int9 = connectMessage0.getKeepAlive();
        java.lang.String str10 = connectMessage0.getUsername();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + qoS8 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS8.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test14754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14754");
        org.meqantt.SocketClient socketClient1 = new org.meqantt.SocketClient("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        // The following exception was thrown during execution in test generation
        try {
            socketClient1.connect("00: 10100010 \242 162\n01: 00010111 \027 23\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00010011 \023 19\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 00001000 \b 8\n09: 11101111 \357 239\n10: 10111111 \277 191\n11: 10111101 \275 189\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 01100100 d 100\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 00000001 \001 1\n23: 00000001 \001 1\n24: 01100100 d 100\n", 97);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: 00: 10100010 ? 162?01: 00010111 ? 23?02: 00000000 ? 0?03: 00000000 ? 0?04: 00000000 ? 0?05: 00010011 ? 19?06: 11000000 A? 192?07: 10000000 ? 128?08: 00001000 ? 8?09: 11101111 i? 239?10: 10111111 ? 191?11: 10111101 ? 189?12: 11101111 i? 239?13: 10111111 ? 191?14: 10111101 ? 189?15: 01100100 d 100?16: 11101111 i? 239?17: 10111111 ? 191?18: 10111101 ? 189?19: 11101111 i? 239?20: 10111111 ? 191?21: 10111101 ? 189?22: 00000001 ? 1?23: 00000001 ? 1?24: 01100100 d 100?");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14755");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        org.meqantt.message.QoS qoS27 = connectMessage3.getQos();
        boolean boolean28 = connectMessage3.isWillRetained();
        boolean boolean29 = connectMessage3.hasUsername();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test14756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14756");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        unsubscribeMessage1.setDup(false);
        java.util.List<java.lang.String> strList4 = unsubscribeMessage1.getTopics();
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test14757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14757");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Type type12 = header1.getType();
        org.meqantt.message.PubAckMessage pubAckMessage13 = new org.meqantt.message.PubAckMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type12);
    }

    @Test
    public void test14758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14758");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus6 = connAckMessage5.getStatus();
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(connectionStatus6);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(connectionStatus6);
        org.meqantt.message.ConnAckMessage connAckMessage9 = new org.meqantt.message.ConnAckMessage(connectionStatus6);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage9.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus6 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus6.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
    }

    @Test
    public void test14759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14759");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage3 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.ConnectMessage connectMessage6 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str7 = connectMessage6.getWillTopic();
        connectMessage6.setCredentials("00: 00000011 \003 3\n01: 00000000 \000 0\n", "00: 00100000   32\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00000010 \002 2\n");
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test14760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14760");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000\006\ufffd\ufffd\003hi!", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        java.lang.String str3 = publishMessage2.getTopic();
        java.lang.String str4 = publishMessage2.getTopic();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000\006\ufffd\ufffd\003hi!" + "'", str3, "\000\006\ufffd\ufffd\003hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\000\006\ufffd\ufffd\003hi!" + "'", str4, "\000\006\ufffd\ufffd\003hi!");
    }

    @Test
    public void test14761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14761");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus3 = connAckMessage2.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus4 = connAckMessage2.getStatus();
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus9 = connAckMessage8.getStatus();
        boolean boolean10 = connAckMessage8.isDup();
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus3 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus3.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus4 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus4.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus9 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus9.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test14762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14762");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage(header1);
        java.lang.String str10 = header1.toString();
        org.meqantt.message.PubRecMessage pubRecMessage11 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Header header13 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage14 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.PublishMessage publishMessage15 = new org.meqantt.message.PublishMessage(header13);
        org.meqantt.message.PubAckMessage pubAckMessage16 = new org.meqantt.message.PubAckMessage(header13);
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage(header13);
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str22 = connectMessage21.getClientId();
        boolean boolean23 = connectMessage21.hasUsername();
        boolean boolean24 = connectMessage21.isCleanSession();
        org.meqantt.message.SubAckMessage subAckMessage27 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList28 = subAckMessage27.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList29 = subAckMessage27.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList30 = subAckMessage27.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList33 = subscribeMessage32.getTopics();
        org.meqantt.message.QoS qoS34 = subscribeMessage32.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage("", qoS34);
        subAckMessage27.addQoS(qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage37 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList38 = subscribeMessage37.getTopics();
        org.meqantt.message.ConnectMessage connectMessage43 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str44 = connectMessage43.getProtocolId();
        org.meqantt.message.QoS qoS45 = connectMessage43.getQos();
        subscribeMessage37.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS45);
        subAckMessage27.addQoS(qoS45);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList52 = subscribeMessage51.getTopics();
        org.meqantt.message.QoS qoS53 = subscribeMessage51.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage54 = new org.meqantt.message.SubscribeMessage("", qoS53);
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS53);
        org.meqantt.message.QoS qoS56 = subscribeMessage55.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage60 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList61 = subscribeMessage60.getTopics();
        org.meqantt.message.QoS qoS62 = subscribeMessage60.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage63 = new org.meqantt.message.SubscribeMessage("", qoS62);
        org.meqantt.message.SubscribeMessage subscribeMessage64 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS62);
        org.meqantt.message.QoS qoS65 = subscribeMessage64.getQos();
        subscribeMessage55.addTopic("", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage67 = new org.meqantt.message.SubscribeMessage("", qoS65);
        subAckMessage27.addQoS(qoS65);
        connectMessage21.setWill("\001\003\003\001", "", qoS65, true);
        subscribeMessage17.setQos(qoS65);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage11.setQos(qoS65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str10, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(qoSList28);
        org.junit.Assert.assertNull(qoSList29);
        org.junit.Assert.assertNull(qoSList30);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MQIsdp" + "'", str44, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS45 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS45.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + qoS53 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS53.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS56 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS56.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + qoS62 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS62.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS65 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS65.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14763");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        unsubscribeMessage1.addTopic("\000d\000\001\001d");
        java.util.List<java.lang.String> strList5 = unsubscribeMessage1.getTopics();
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.addTopic("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        unsubscribeMessage1.setMessageId((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage1.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE can't set the DUP flag.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test14764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14764");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        java.lang.String str6 = connectMessage1.getWill();
        boolean boolean7 = connectMessage1.hasUsername();
        boolean boolean8 = connectMessage1.hasPassword();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = connectMessage1.toBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test14765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14765");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage10.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void test14766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14766");
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 0);
        java.lang.String str5 = connectMessage4.getProtocolId();
        org.meqantt.message.QoS qoS9 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage("", qoS9);
        int int11 = subscribeMessage10.getMessageId();
        subscribeMessage10.setMessageId((int) (short) 10);
        org.meqantt.message.Message.Header header15 = null;
        org.meqantt.message.ConnectMessage connectMessage16 = new org.meqantt.message.ConnectMessage(header15);
        int int17 = connectMessage16.getKeepAlive();
        connectMessage16.setWill("MQIsdp", "");
        org.meqantt.message.QoS qoS21 = connectMessage16.getWillQoS();
        subscribeMessage10.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS21);
        connectMessage4.setWill("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", qoS21, true);
        boolean boolean25 = connectMessage4.hasWill();
        connectMessage4.setWill("\000H00: 01110000 p 112\n01: 00000010 \002 2\n\ufffd\ufffd 0\n03: 00001010 \n 10\n", "\020\ufffd\001\000\006MQIsdp\003&\000d\000\006MQIsdp\000\006MQIsdp\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n");
        org.meqantt.message.Message.Header header32 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type33 = header32.getType();
        org.meqantt.message.Message.Type type34 = header32.getType();
        org.meqantt.message.SubAckMessage subAckMessage35 = new org.meqantt.message.SubAckMessage(header32);
        java.util.List<org.meqantt.message.QoS> qoSList36 = subAckMessage35.getGrantedQoSs();
        org.meqantt.message.QoS qoS37 = null;
        subAckMessage35.addQoS(qoS37);
        org.meqantt.message.Message.Type type39 = subAckMessage35.getType();
        org.meqantt.message.Message.Header header40 = null;
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage(header40);
        boolean boolean42 = connectMessage41.isWillRetained();
        boolean boolean43 = connectMessage41.isWillRetained();
        connectMessage41.setWill("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        connectMessage41.setCredentials("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        boolean boolean49 = connectMessage41.hasUsername();
        connectMessage41.setCredentials("\000\003hi!");
        java.lang.String str52 = connectMessage41.getClientId();
        boolean boolean53 = connectMessage41.isCleanSession();
        org.meqantt.message.QoS qoS54 = connectMessage41.getWillQoS();
        subAckMessage35.addQoS(qoS54);
        connectMessage4.setWill("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 11000000 \300 192\n05: 10000000 \200 128\n", "00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n", qoS54, false);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage("\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n", qoS54);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MQIsdp" + "'", str5, "MQIsdp");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(type33);
        org.junit.Assert.assertNull(type34);
        org.junit.Assert.assertNull(qoSList36);
        org.junit.Assert.assertNull(type39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + qoS54 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS54.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14767");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        connectMessage1.setCredentials("");
        java.lang.String str8 = connectMessage1.getClientId();
        org.meqantt.message.QoS qoS9 = connectMessage1.getWillQoS();
        java.lang.String str10 = connectMessage1.getUsername();
        connectMessage1.setWill("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        java.lang.String str14 = connectMessage1.getPassword();
        java.lang.String str15 = connectMessage1.getWillTopic();
        java.lang.String str16 = connectMessage1.getClientId();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(qoS9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n" + "'", str15, "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test14768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14768");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage10.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14769");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList9 = subscribeMessage8.getTopics();
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str15 = connectMessage14.getProtocolId();
        org.meqantt.message.QoS qoS16 = connectMessage14.getQos();
        subscribeMessage8.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS16);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage6.setQos(qoS16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: AT_MOST_ONCE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MQIsdp" + "'", str15, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14770");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str7 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList9 = subAckMessage8.getGrantedQoSs();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str7, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(qoSList9);
    }

    @Test
    public void test14771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14771");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Header header11 = new org.meqantt.message.Message.Header((byte) 10);
        org.meqantt.message.Message.Type type12 = header11.getType();
        org.meqantt.message.SubAckMessage subAckMessage13 = new org.meqantt.message.SubAckMessage(header11);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage("MQIsdp", "\000d\000\001\001d");
        java.lang.String str17 = publishMessage16.getDataAsString();
        byte[] byteArray18 = publishMessage16.getData();
        org.meqantt.message.QoS qoS19 = publishMessage16.getQos();
        subAckMessage13.addQoS(qoS19);
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage("", qoS19);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage8.setQos(qoS19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertNull(type12);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d" + "'", str17, "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14772");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getProtocolId();
        byte[] byteArray5 = connectMessage3.toBytes();
        org.meqantt.message.QoS qoS6 = connectMessage3.getQos();
        boolean boolean7 = connectMessage3.isRetained();
        boolean boolean8 = connectMessage3.hasUsername();
        boolean boolean9 = connectMessage3.isWillRetained();
        boolean boolean10 = connectMessage3.hasWill();
        int int11 = connectMessage3.getKeepAlive();
        java.lang.String str12 = connectMessage3.getWill();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test14773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14773");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage9 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage12 = new org.meqantt.message.PingRespMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14774");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage6 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage8 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.Message.Header header10 = null;
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage(header10);
        java.lang.String str12 = connectMessage11.getClientId();
        connectMessage11.setWill("hi!", "");
        boolean boolean16 = connectMessage11.hasPassword();
        boolean boolean17 = connectMessage11.isCleanSession();
        boolean boolean18 = connectMessage11.hasWill();
        org.meqantt.message.QoS qoS19 = connectMessage11.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS19);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage8.setQos(qoS19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14775");
        org.meqantt.message.SubscribeMessage subscribeMessage0 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type1 = subscribeMessage0.getType();
        subscribeMessage0.setDup(false);
        subscribeMessage0.setMessageId((int) (short) 0);
        java.util.List<java.lang.String> strList6 = subscribeMessage0.getTopics();
        java.util.List<org.meqantt.message.QoS> qoSList7 = subscribeMessage0.getTopicQoSs();
        java.util.List<java.lang.String> strList8 = subscribeMessage0.getTopics();
        boolean boolean9 = subscribeMessage0.isDup();
        java.util.List<java.lang.String> strList10 = subscribeMessage0.getTopics();
        org.meqantt.message.QoS qoS11 = null;
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage0.setQos(qoS11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type1 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type1.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(qoSList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test14776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14776");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage3 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
    }

    @Test
    public void test14777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14777");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getClientId();
        connectMessage1.setWill("hi!", "");
        boolean boolean6 = connectMessage1.isCleanSession();
        boolean boolean7 = connectMessage1.isCleanSession();
        boolean boolean8 = connectMessage1.hasPassword();
        boolean boolean9 = connectMessage1.isCleanSession();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14778");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14779");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Header header8 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type9 = header8.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage10 = new org.meqantt.message.UnsubAckMessage(header8);
        org.meqantt.message.QoS qoS11 = unsubAckMessage10.getQos();
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage6.setQos(qoS11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type9.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.EXACTLY_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.EXACTLY_ONCE));
    }

    @Test
    public void test14780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14780");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Type type8 = header1.getType();
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        org.junit.Assert.assertNull(type6);
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void test14781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14781");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean4 = connectMessage3.isWillRetained();
        java.lang.String str5 = connectMessage3.getPassword();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test14782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14782");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str2, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14783");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus6 = connAckMessage5.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus7 = connAckMessage5.getStatus();
        boolean boolean8 = connAckMessage5.isRetained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(connectionStatus6);
        org.junit.Assert.assertNull(connectionStatus7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test14784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14784");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        connectMessage3.setCredentials("\000d\000\001\001d");
        connectMessage3.setWill("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14785");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean8 = connectMessage7.isCleanSession();
        java.lang.String str9 = connectMessage7.getClientId();
        boolean boolean10 = connectMessage7.hasUsername();
        byte byte11 = connectMessage7.getProtocolVersion();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 3 + "'", byte11 == (byte) 3);
    }

    @Test
    public void test14786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14786");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        connectMessage1.setWill("MQIsdp", "");
        java.lang.String str6 = connectMessage1.getWillTopic();
        org.meqantt.message.ConnectMessage connectMessage16 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str17 = connectMessage16.getUsername();
        org.meqantt.message.QoS qoS21 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("", qoS21);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList25 = subscribeMessage24.getTopics();
        org.meqantt.message.QoS qoS26 = subscribeMessage24.getQos();
        subscribeMessage22.addTopic("", qoS26);
        connectMessage16.setWill("", "\000d\000\001\001d", qoS26, true);
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("hi!", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS26);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList36 = subscribeMessage35.getTopics();
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str42 = connectMessage41.getProtocolId();
        org.meqantt.message.QoS qoS43 = connectMessage41.getQos();
        subscribeMessage35.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS43);
        subscribeMessage33.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS43);
        org.meqantt.message.ConnectMessage connectMessage50 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str51 = connectMessage50.getProtocolId();
        org.meqantt.message.QoS qoS52 = connectMessage50.getQos();
        subscribeMessage33.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS52);
        connectMessage1.setWill("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS52, false);
        connectMessage1.setCredentials("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n");
        boolean boolean58 = connectMessage1.hasUsername();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MQIsdp" + "'", str6, "MQIsdp");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + qoS26 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS26.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQIsdp" + "'", str42, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS43 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS43.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "MQIsdp" + "'", str51, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test14787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14787");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        org.meqantt.MqttListener mqttListener5 = null;
        nettyClient1.setListener(mqttListener5);
        nettyClient1.ping();
        nettyClient1.ping();
        nettyClient1.unsubscribe("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        nettyClient1.ping();
        nettyClient1.unsubscribe("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00000011 \003 3\n05: 01101000 h 104\n06: 01101001 i 105\n07: 00100001 ! 33\n");
        nettyClient1.unsubscribe("\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
    }

    @Test
    public void test14788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14788");
        org.meqantt.message.Message.Header header2 = new org.meqantt.message.Message.Header((byte) 10);
        org.meqantt.message.Message.Type type3 = header2.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header2);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage("MQIsdp", "\000d\000\001\001d");
        java.lang.String str8 = publishMessage7.getDataAsString();
        byte[] byteArray9 = publishMessage7.getData();
        org.meqantt.message.QoS qoS10 = publishMessage7.getQos();
        subAckMessage4.addQoS(qoS10);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage("", qoS10);
        boolean boolean13 = subscribeMessage12.isRetained();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage16 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList17 = unsubscribeMessage16.getTopics();
        org.meqantt.message.Message.Type type18 = unsubscribeMessage16.getType();
        java.util.List<java.lang.String> strList19 = unsubscribeMessage16.getTopics();
        org.meqantt.message.QoS qoS20 = unsubscribeMessage16.getQos();
        unsubscribeMessage16.addTopic("MQIsdp");
        unsubscribeMessage16.setDup(false);
        unsubscribeMessage16.addTopic("\000d\000\001\001d");
        org.meqantt.message.Message.Header header27 = null;
        org.meqantt.message.ConnectMessage connectMessage28 = new org.meqantt.message.ConnectMessage(header27);
        int int29 = connectMessage28.getKeepAlive();
        java.lang.String str30 = connectMessage28.getWill();
        org.meqantt.message.QoS qoS31 = connectMessage28.getWillQoS();
        boolean boolean32 = connectMessage28.hasPassword();
        org.meqantt.message.Message.Header header37 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type38 = header37.getType();
        org.meqantt.message.Message.Type type39 = header37.getType();
        org.meqantt.message.SubAckMessage subAckMessage40 = new org.meqantt.message.SubAckMessage(header37);
        org.meqantt.message.PingReqMessage pingReqMessage41 = new org.meqantt.message.PingReqMessage(header37);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage(header37);
        org.meqantt.message.ConnectMessage connectMessage43 = new org.meqantt.message.ConnectMessage(header37);
        org.meqantt.message.PingReqMessage pingReqMessage44 = new org.meqantt.message.PingReqMessage(header37);
        org.meqantt.message.SubscribeMessage subscribeMessage45 = new org.meqantt.message.SubscribeMessage(header37);
        org.meqantt.message.SubAckMessage subAckMessage46 = new org.meqantt.message.SubAckMessage(header37);
        org.meqantt.message.SubscribeMessage subscribeMessage47 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList48 = subscribeMessage47.getTopics();
        org.meqantt.message.QoS qoS49 = subscribeMessage47.getQos();
        org.meqantt.message.ConnectMessage connectMessage54 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str55 = connectMessage54.getProtocolId();
        org.meqantt.message.QoS qoS56 = connectMessage54.getQos();
        subscribeMessage47.addTopic("", qoS56);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage59 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList60 = unsubscribeMessage59.getTopics();
        org.meqantt.message.Message.Type type61 = unsubscribeMessage59.getType();
        java.util.List<java.lang.String> strList62 = unsubscribeMessage59.getTopics();
        org.meqantt.message.QoS qoS63 = unsubscribeMessage59.getQos();
        subscribeMessage47.setQos(qoS63);
        subAckMessage46.addQoS(qoS63);
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage("", qoS63);
        connectMessage28.setWill("", "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS63, false);
        unsubscribeMessage16.setQos(qoS63);
        subscribeMessage12.addTopic("00: 00110000 0 48\n01: 00010010 \022 18\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000000 \000 0\n11: 00001000 \b 8\n12: 11000000 \300 192\n13: 10000000 \200 128\n14: 01100100 d 100\n15: 11000000 \300 192\n16: 10000000 \200 128\n17: 00000001 \001 1\n18: 00000001 \001 1\n19: 01100100 d 100\n", qoS63);
        org.meqantt.message.QoS qoS71 = null;
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage12.setQos(qoS71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SUBSCRIBE is always using QoS-level AT LEAST ONCE. Requested level: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d" + "'", str8, "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type18.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(qoS31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(type38);
        org.junit.Assert.assertNull(type39);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + qoS49 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS49.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MQIsdp" + "'", str55, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS56 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS56.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type61.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + qoS63 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS63.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14789");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        java.lang.String str8 = connectMessage1.getClientId();
        byte byte9 = connectMessage1.getProtocolVersion();
        connectMessage1.setCredentials("MQIsdp");
        boolean boolean12 = connectMessage1.isCleanSession();
        org.meqantt.message.QoS qoS13 = connectMessage1.getWillQoS();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 3 + "'", byte9 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14790");
        byte[] byteArray1 = org.meqantt.util.FormatUtil.toMQttString("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        java.lang.String str2 = org.meqantt.util.FormatUtil.toString(byteArray1);
        java.lang.String str3 = org.meqantt.util.FormatUtil.toString(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 108, 48, 48, 58, 32, 48, 48, 48, 48, 48, 48, 48, 48, 32, -64, -128, 32, 48, 10, 48, 49, 58, 32, 48, 49, 49, 48, 48, 49, 48, 48, 32, 100, 32, 49, 48, 48, 10, 48, 50, 58, 32, 48, 48, 48, 48, 48, 48, 48, 48, 32, -64, -128, 32, 48, 10, 48, 51, 58, 32, 48, 48, 48, 48, 48, 48, 48, 49, 32, 1, 32, 49, 10, 48, 52, 58, 32, 48, 48, 48, 48, 48, 48, 48, 49, 32, 1, 32, 49, 10, 48, 53, 58, 32, 48, 49, 49, 48, 48, 49, 48, 48, 32, 100, 32, 49, 48, 48, 10]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str2, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str3, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
    }

    @Test
    public void test14791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14791");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        org.meqantt.MqttListener mqttListener15 = null;
        nettyClient1.setListener(mqttListener15);
        nettyClient1.unsubscribe("\000\003hi!");
        org.meqantt.MqttListener mqttListener19 = null;
        nettyClient1.setListener(mqttListener19);
        org.meqantt.MqttListener mqttListener21 = null;
        nettyClient1.setListener(mqttListener21);
        nettyClient1.subscribe("\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
    }

    @Test
    public void test14792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14792");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        subAckMessage7.setMessageId((-1));
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage7.getGrantedQoSs();
        org.meqantt.message.Message.Header header13 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type14 = header13.getType();
        org.meqantt.message.Message.Type type15 = header13.getType();
        org.meqantt.message.SubAckMessage subAckMessage16 = new org.meqantt.message.SubAckMessage(header13);
        org.meqantt.message.PingReqMessage pingReqMessage17 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage(header13);
        org.meqantt.message.ConnectMessage connectMessage19 = new org.meqantt.message.ConnectMessage(header13);
        org.meqantt.message.PingReqMessage pingReqMessage20 = new org.meqantt.message.PingReqMessage(header13);
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage(header13);
        org.meqantt.message.SubAckMessage subAckMessage22 = new org.meqantt.message.SubAckMessage(header13);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList24 = subscribeMessage23.getTopics();
        org.meqantt.message.QoS qoS25 = subscribeMessage23.getQos();
        org.meqantt.message.ConnectMessage connectMessage30 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str31 = connectMessage30.getProtocolId();
        org.meqantt.message.QoS qoS32 = connectMessage30.getQos();
        subscribeMessage23.addTopic("", qoS32);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage35 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList36 = unsubscribeMessage35.getTopics();
        org.meqantt.message.Message.Type type37 = unsubscribeMessage35.getType();
        java.util.List<java.lang.String> strList38 = unsubscribeMessage35.getTopics();
        org.meqantt.message.QoS qoS39 = unsubscribeMessage35.getQos();
        subscribeMessage23.setQos(qoS39);
        subAckMessage22.addQoS(qoS39);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage("", qoS39);
        org.meqantt.message.PublishMessage publishMessage46 = new org.meqantt.message.PublishMessage("MQIsdp", "");
        org.meqantt.message.Message.Header header48 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type49 = header48.getType();
        org.meqantt.message.SubAckMessage subAckMessage50 = new org.meqantt.message.SubAckMessage(header48);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type52 = subscribeMessage51.getType();
        subscribeMessage51.setDup(false);
        subscribeMessage51.setMessageId((int) (short) 0);
        java.util.List<java.lang.String> strList57 = subscribeMessage51.getTopics();
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList59 = subscribeMessage58.getTopics();
        org.meqantt.message.QoS qoS60 = subscribeMessage58.getQos();
        org.meqantt.message.ConnectMessage connectMessage65 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str66 = connectMessage65.getProtocolId();
        org.meqantt.message.QoS qoS67 = connectMessage65.getQos();
        subscribeMessage58.addTopic("", qoS67);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage70 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList71 = unsubscribeMessage70.getTopics();
        org.meqantt.message.Message.Type type72 = unsubscribeMessage70.getType();
        java.util.List<java.lang.String> strList73 = unsubscribeMessage70.getTopics();
        org.meqantt.message.QoS qoS74 = unsubscribeMessage70.getQos();
        subscribeMessage58.setQos(qoS74);
        subscribeMessage51.setQos(qoS74);
        subAckMessage50.addQoS(qoS74);
        publishMessage46.setQos(qoS74);
        subscribeMessage42.addTopic("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", qoS74);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage7.setQos(qoS74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList10);
        org.junit.Assert.assertNull(type14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MQIsdp" + "'", str31, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type37.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + qoS39 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS39.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type49.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type52.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "MQIsdp" + "'", str66, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS67 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS67.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type72.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + qoS74 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS74.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14793");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage7 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage10.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14794");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage4 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage9.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14795");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage4 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage5 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage7.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14796");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage10 = new org.meqantt.message.PingRespMessage(header1);
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14797");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList1 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage4 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList5 = subscribeMessage4.getTopics();
        org.meqantt.message.QoS qoS6 = subscribeMessage4.getQos();
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str12 = connectMessage11.getProtocolId();
        org.meqantt.message.QoS qoS13 = connectMessage11.getQos();
        subscribeMessage4.addTopic("", qoS13);
        subAckMessage0.addQoS(qoS13);
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList19 = subscribeMessage18.getTopics();
        org.meqantt.message.QoS qoS20 = subscribeMessage18.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage("", qoS20);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS20);
        subAckMessage0.addQoS(qoS20);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage0.write(outputStream24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoSList1);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MQIsdp" + "'", str12, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14798");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        java.lang.String str6 = header1.toString();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14799");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Type type5 = pubAckMessage4.getType();
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage4.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test14800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14800");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage11 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage12 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage13 = new org.meqantt.message.PubRecMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14801");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean8 = connectMessage7.isCleanSession();
        int int9 = connectMessage7.getKeepAlive();
        java.lang.String str10 = connectMessage7.getWillTopic();
        boolean boolean11 = connectMessage7.hasWill();
        org.meqantt.message.QoS qoS12 = connectMessage7.getWillQoS();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(qoS12);
    }

    @Test
    public void test14802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14802");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("00: 00100000   32\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00000010 \002 2\n");
    }

    @Test
    public void test14803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14803");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        nettyClient1.connect("MQIsdp", (int) (short) 1);
        nettyClient1.publish("00: 00110000 0 48\n01: 00000111 \007 7\n02: 00000000 \000 0\n03: 00000011 \003 3\n04: 01101000 h 104\n05: 01101001 i 105\n06: 00100001 ! 33\n07: 00000000 \000 0\n08: 00000000 \000 0\n", "");
        nettyClient1.unsubscribe("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\ufffd\ufffd");
    }

    @Test
    public void test14804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14804");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000d\000\001\001d", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        java.lang.String str3 = publishMessage2.getTopic();
        byte[] byteArray4 = publishMessage2.getData();
        byte[] byteArray5 = publishMessage2.toBytes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000d\000\001\001d" + "'", str3, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[48, 73, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100, 0, 61, 72, 101, 97, 100, 101, 114, 32, 91, 116, 121, 112, 101, 61, 110, 117, 108, 108, 44, 32, 114, 101, 116, 97, 105, 110, 61, 102, 97, 108, 115, 101, 44, 32, 113, 111, 115, 61, 65, 84, 95, 76, 69, 65, 83, 84, 95, 79, 78, 67, 69, 44, 32, 100, 117, 112, 61, 116, 114, 117, 101, 93]");
    }

    @Test
    public void test14805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14805");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage6.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14806");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage7 = new org.meqantt.message.PubRecMessage(header1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str2, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void test14807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14807");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean9 = connectMessage8.hasUsername();
        int int10 = connectMessage8.getKeepAlive();
        connectMessage8.setCredentials("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test14808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14808");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage4 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage5 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage7 = new org.meqantt.message.PubRelMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage7.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14809");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        org.meqantt.MqttListener mqttListener5 = null;
        nettyClient1.setListener(mqttListener5);
        nettyClient1.ping();
        nettyClient1.subscribe("\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n");
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("");
        nettyClient1.publish("\000=Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]", "\000\004\001\003\003\001");
        nettyClient1.unsubscribe("\000\003hi!");
        org.meqantt.MqttListener mqttListener18 = null;
        nettyClient1.setListener(mqttListener18);
    }

    @Test
    public void test14810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14810");
        byte[] byteArray2 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str3 = org.meqantt.util.FormatUtil.toString(byteArray2);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage("hi!", byteArray2);
        publishMessage4.setMessageId((int) '\001');
        java.lang.String str7 = publishMessage4.getTopic();
        byte[] byteArray8 = publishMessage4.getData();
        byte[] byteArray9 = publishMessage4.toBytes();
        publishMessage4.setRetained(false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[48, 7, 0, 3, 104, 105, 33, 0, 0]");
    }

    @Test
    public void test14811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14811");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.SubAckMessage subAckMessage2 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage2.getGrantedQoSs();
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList6 = subAckMessage5.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList7 = subAckMessage5.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList8 = subAckMessage5.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList11 = subscribeMessage10.getTopics();
        org.meqantt.message.QoS qoS12 = subscribeMessage10.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage("", qoS12);
        subAckMessage5.addQoS(qoS12);
        org.meqantt.message.SubscribeMessage subscribeMessage15 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList16 = subscribeMessage15.getTopics();
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str22 = connectMessage21.getProtocolId();
        org.meqantt.message.QoS qoS23 = connectMessage21.getQos();
        subscribeMessage15.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS23);
        subAckMessage5.addQoS(qoS23);
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList30 = subscribeMessage29.getTopics();
        org.meqantt.message.QoS qoS31 = subscribeMessage29.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("", qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS31);
        org.meqantt.message.QoS qoS34 = subscribeMessage33.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList39 = subscribeMessage38.getTopics();
        org.meqantt.message.QoS qoS40 = subscribeMessage38.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("", qoS40);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS40);
        org.meqantt.message.QoS qoS43 = subscribeMessage42.getQos();
        subscribeMessage33.addTopic("", qoS43);
        org.meqantt.message.SubscribeMessage subscribeMessage45 = new org.meqantt.message.SubscribeMessage("", qoS43);
        subAckMessage5.addQoS(qoS43);
        org.meqantt.message.SubscribeMessage subscribeMessage47 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", qoS43);
        subAckMessage2.addQoS(qoS43);
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertNull(qoSList6);
        org.junit.Assert.assertNull(qoSList7);
        org.junit.Assert.assertNull(qoSList8);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + qoS12 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS12.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MQIsdp" + "'", str22, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS23 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS23.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + qoS31 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS31.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + qoS40 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS40.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS43 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS43.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14812");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage11 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage12 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.Message.Type type13 = header1.getType();
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean15 = connectMessage14.hasPassword();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test14813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14813");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.connect("\000\003hi!", 32);
        nettyClient1.disconnect();
        org.meqantt.MqttListener mqttListener12 = null;
        nettyClient1.setListener(mqttListener12);
        nettyClient1.connect("", (int) (byte) 10);
        org.meqantt.MqttListener mqttListener17 = null;
        nettyClient1.setListener(mqttListener17);
    }

    @Test
    public void test14814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14814");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage6 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.Message.Header header9 = new org.meqantt.message.Message.Header((byte) 10);
        org.meqantt.message.Message.Type type10 = header9.getType();
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header9);
        org.meqantt.message.PublishMessage publishMessage14 = new org.meqantt.message.PublishMessage("MQIsdp", "\000d\000\001\001d");
        java.lang.String str15 = publishMessage14.getDataAsString();
        byte[] byteArray16 = publishMessage14.getData();
        org.meqantt.message.QoS qoS17 = publishMessage14.getQos();
        subAckMessage11.addQoS(qoS17);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage7.setQos(qoS17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type10);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d" + "'", str15, "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14815");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("\000d\000\001\001d");
        unsubscribeMessage1.addTopic("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        unsubscribeMessage1.addTopic("");
        boolean boolean6 = unsubscribeMessage1.isDup();
        unsubscribeMessage1.setMessageId(10);
        unsubscribeMessage1.addTopic("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test14816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14816");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList4 = subAckMessage3.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList5 = subAckMessage3.getGrantedQoSs();
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage3.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type2.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(qoSList4);
        org.junit.Assert.assertNull(qoSList5);
    }

    @Test
    public void test14817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14817");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", true, (int) (byte) -1);
    }

    @Test
    public void test14818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14818");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage9 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean15 = connectMessage14.hasWill();
        java.lang.String str16 = connectMessage14.getWill();
        org.meqantt.message.Message.Header header19 = null;
        org.meqantt.message.ConnectMessage connectMessage20 = new org.meqantt.message.ConnectMessage(header19);
        boolean boolean21 = connectMessage20.isWillRetained();
        boolean boolean22 = connectMessage20.isWillRetained();
        java.lang.String str23 = connectMessage20.getUsername();
        org.meqantt.message.QoS qoS27 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage("", qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList31 = subscribeMessage30.getTopics();
        org.meqantt.message.QoS qoS32 = subscribeMessage30.getQos();
        subscribeMessage28.addTopic("", qoS32);
        connectMessage20.setWill("hi!", "", qoS32, false);
        connectMessage14.setWill("MQIsdp", "hi!", qoS32, false);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS32);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage9.setQos(qoS32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14819");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage11 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage12 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage13 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage14 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.QoS qoS15 = disconnectMessage14.getQos();
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage14.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14820");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        connectMessage3.setCredentials("MQIsdp", "MQIsdp");
        org.meqantt.message.QoS qoS9 = connectMessage3.getWillQoS();
        boolean boolean10 = connectMessage3.hasPassword();
        connectMessage3.setWill("00: 00000000 \000 0\n01: 00000000 \000 0\n", "\000\004\001\003\003\001");
        connectMessage3.setCredentials("00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n", "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        org.meqantt.message.QoS qoS17 = connectMessage3.getQos();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(qoS9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14821");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 10);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage5 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Header header7 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type8 = header7.getType();
        org.meqantt.message.Message.Type type9 = header7.getType();
        org.meqantt.message.ConnAckMessage connAckMessage10 = new org.meqantt.message.ConnAckMessage(header7);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header7);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList13 = subAckMessage12.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList14 = subAckMessage12.getGrantedQoSs();
        org.meqantt.message.PubRelMessage pubRelMessage16 = new org.meqantt.message.PubRelMessage((int) ' ');
        org.meqantt.message.QoS qoS17 = pubRelMessage16.getQos();
        subAckMessage12.addQoS(qoS17);
        publishMessage11.setQos(qoS17);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage5.setQos(qoS17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str2, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.junit.Assert.assertNull(type8);
        org.junit.Assert.assertNull(type9);
        org.junit.Assert.assertNull(qoSList13);
        org.junit.Assert.assertNull(qoSList14);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14822");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 0);
        boolean boolean4 = connectMessage3.hasWill();
        boolean boolean5 = connectMessage3.hasWill();
        org.meqantt.message.Message.Header header6 = null;
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header6);
        int int8 = connectMessage7.getKeepAlive();
        boolean boolean9 = connectMessage7.hasUsername();
        java.lang.String str10 = connectMessage7.getProtocolId();
        connectMessage7.setCredentials("hi!", "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        java.lang.String str14 = connectMessage7.getClientId();
        org.meqantt.message.ConnectMessage connectMessage20 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str21 = connectMessage20.getUsername();
        int int22 = connectMessage20.getKeepAlive();
        org.meqantt.message.ConnectMessage connectMessage28 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean29 = connectMessage28.hasWill();
        java.lang.String str30 = connectMessage28.getWill();
        org.meqantt.message.Message.Header header33 = null;
        org.meqantt.message.ConnectMessage connectMessage34 = new org.meqantt.message.ConnectMessage(header33);
        boolean boolean35 = connectMessage34.isWillRetained();
        boolean boolean36 = connectMessage34.isWillRetained();
        java.lang.String str37 = connectMessage34.getUsername();
        org.meqantt.message.QoS qoS41 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage("", qoS41);
        org.meqantt.message.SubscribeMessage subscribeMessage44 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList45 = subscribeMessage44.getTopics();
        org.meqantt.message.QoS qoS46 = subscribeMessage44.getQos();
        subscribeMessage42.addTopic("", qoS46);
        connectMessage34.setWill("hi!", "", qoS46, false);
        connectMessage28.setWill("MQIsdp", "hi!", qoS46, false);
        connectMessage20.setWill("\000\000", "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS46, false);
        org.meqantt.message.QoS qoS54 = connectMessage20.getWillQoS();
        connectMessage7.setWill("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", qoS54, false);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setQos(qoS54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MQIsdp" + "'", str10, "MQIsdp");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + qoS46 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS46.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS54 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS54.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14823");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, (int) 'a');
        org.meqantt.message.QoS qoS4 = connectMessage3.getWillQoS();
        org.meqantt.message.QoS qoS5 = connectMessage3.getWillQoS();
        org.meqantt.message.QoS qoS6 = connectMessage3.getWillQoS();
        org.junit.Assert.assertNull(qoS4);
        org.junit.Assert.assertNull(qoS5);
        org.junit.Assert.assertNull(qoS6);
    }

    @Test
    public void test14824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14824");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("00: 10100010 \242 162\n01: 00010111 \027 23\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00010011 \023 19\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 00001000 \b 8\n09: 11101111 \357 239\n10: 10111111 \277 191\n11: 10111101 \275 189\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 01100100 d 100\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 00000001 \001 1\n23: 00000001 \001 1\n24: 01100100 d 100\n", "");
    }

    @Test
    public void test14825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14825");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage8 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.Message.Type type11 = header1.getType();
        java.lang.String str12 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage13 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage13.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str12, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14826");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
        publishMessage2.setDup(true);
        publishMessage2.setRetained(true);
    }

    @Test
    public void test14827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14827");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean12 = connectMessage11.hasUsername();
        org.meqantt.message.Message.Header header16 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type17 = header16.getType();
        org.meqantt.message.Message.Type type18 = header16.getType();
        org.meqantt.message.SubAckMessage subAckMessage19 = new org.meqantt.message.SubAckMessage(header16);
        org.meqantt.message.PingReqMessage pingReqMessage20 = new org.meqantt.message.PingReqMessage(header16);
        org.meqantt.message.PingReqMessage pingReqMessage21 = new org.meqantt.message.PingReqMessage(header16);
        org.meqantt.message.DisconnectMessage disconnectMessage22 = new org.meqantt.message.DisconnectMessage(header16);
        org.meqantt.message.SubAckMessage subAckMessage23 = new org.meqantt.message.SubAckMessage(header16);
        java.util.List<org.meqantt.message.QoS> qoSList24 = subAckMessage23.getGrantedQoSs();
        org.meqantt.message.SubAckMessage subAckMessage25 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList26 = subAckMessage25.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList27 = subAckMessage25.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList28 = subAckMessage25.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList31 = subscribeMessage30.getTopics();
        org.meqantt.message.QoS qoS32 = subscribeMessage30.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("", qoS32);
        subAckMessage25.addQoS(qoS32);
        subAckMessage23.addQoS(qoS32);
        connectMessage11.setWill("00: 01100100 d 100\n01: 00000000 \000 0\n", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS32, false);
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNull(qoSList24);
        org.junit.Assert.assertNull(qoSList26);
        org.junit.Assert.assertNull(qoSList27);
        org.junit.Assert.assertNull(qoSList28);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14828");
        org.meqantt.message.PubCompMessage pubCompMessage1 = new org.meqantt.message.PubCompMessage(6);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage1.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14829");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str3 = header1.toString();
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        java.lang.String str7 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage8.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str3, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str7, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14830");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 0);
        java.lang.String str4 = connectMessage3.getClientId();
        org.meqantt.message.Message.Type type5 = connectMessage3.getType();
        org.meqantt.message.QoS qoS6 = connectMessage3.getWillQoS();
        java.lang.String str7 = connectMessage3.getWillTopic();
        boolean boolean8 = connectMessage3.isCleanSession();
        java.lang.String str9 = connectMessage3.getPassword();
        connectMessage3.setWill("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 00000001 \001 1\n03: 00000011 \003 3\n04: 00000011 \003 3\n05: 00000001 \001 1\n", "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        boolean boolean13 = connectMessage3.hasUsername();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.meqantt.message.Message.Type.CONNECT + "'", type5.equals(org.meqantt.message.Message.Type.CONNECT));
        org.junit.Assert.assertNull(qoS6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test14831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14831");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 3);
        org.meqantt.message.SubAckMessage subAckMessage2 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage4.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14832");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.QoS qoS7 = null;
        subAckMessage6.addQoS(qoS7);
    }

    @Test
    public void test14833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14833");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage6.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14834");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage7 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type8 = header1.getType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void test14835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14835");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("\000H00: 01110000 p 112\n01: 00000010 \002 2\n\ufffd\ufffd 0\n03: 00001010 \n 10\n", "\020\032\000\006MQIsdp\003&\000\001\000\000\000\000\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
    }

    @Test
    public void test14836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14836");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus2 = connAckMessage1.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus3 = connAckMessage1.getStatus();
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(connectionStatus3);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage4.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus2 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus2.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus3 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus3.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
    }

    @Test
    public void test14837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14837");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        boolean boolean3 = connectMessage2.hasPassword();
        java.lang.String str4 = connectMessage2.getUsername();
        java.lang.String str5 = connectMessage2.getPassword();
        connectMessage2.setCredentials("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00000011 \003 3\n05: 01101000 h 104\n06: 01101001 i 105\n07: 00100001 ! 33\n", "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test14838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14838");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage9 = new org.meqantt.message.PubRelMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage9.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test14839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14839");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str6 = connectMessage5.getUsername();
        java.lang.String str7 = connectMessage5.getUsername();
        java.lang.String str8 = connectMessage5.getClientId();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str2, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test14840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14840");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 10);
        org.meqantt.message.PubRecMessage pubRecMessage2 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage3 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage5 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage6 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage8.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14841");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header1);
        pubCompMessage9.setMessageId((int) ' ');
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 3, (byte) 3, (byte) 1 };
        java.lang.String str18 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray17);
        org.meqantt.message.PublishMessage publishMessage19 = new org.meqantt.message.PublishMessage("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", byteArray17);
        org.meqantt.message.QoS qoS20 = publishMessage19.getQos();
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage9.setQos(qoS20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 3, 3, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n" + "'", str18, "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14842");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage11.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void test14843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14843");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        connectMessage1.setWill("MQIsdp", "");
        org.meqantt.message.QoS qoS6 = connectMessage1.getWillQoS();
        boolean boolean7 = connectMessage1.hasUsername();
        int int8 = connectMessage1.getKeepAlive();
        connectMessage1.setCredentials("\000\003hi!", "MQIsdp");
        java.lang.String str12 = connectMessage1.getProtocolId();
        connectMessage1.setCredentials("\000\006\ufffd\ufffd\003hi!", "00: 01100100 d 100\n01: 00000000 \000 0\n");
        org.meqantt.message.ConnectMessage connectMessage24 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str25 = connectMessage24.getUsername();
        org.meqantt.message.QoS qoS29 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("", qoS29);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList33 = subscribeMessage32.getTopics();
        org.meqantt.message.QoS qoS34 = subscribeMessage32.getQos();
        subscribeMessage30.addTopic("", qoS34);
        connectMessage24.setWill("", "\000d\000\001\001d", qoS34, true);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage("hi!", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage39 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList44 = subscribeMessage43.getTopics();
        org.meqantt.message.ConnectMessage connectMessage49 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str50 = connectMessage49.getProtocolId();
        org.meqantt.message.QoS qoS51 = connectMessage49.getQos();
        subscribeMessage43.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS51);
        subscribeMessage41.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS51);
        org.meqantt.message.ConnectMessage connectMessage58 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str59 = connectMessage58.getProtocolId();
        org.meqantt.message.QoS qoS60 = connectMessage58.getQos();
        subscribeMessage41.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS60);
        org.meqantt.message.SubscribeMessage subscribeMessage62 = new org.meqantt.message.SubscribeMessage("00: 00010000 \020 16\n01: 00001110 \016 14\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00000010 \002 2\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n", qoS60);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setQos(qoS60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MQIsdp" + "'", str12, "MQIsdp");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MQIsdp" + "'", str50, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS51 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS51.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "MQIsdp" + "'", str59, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14844");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        java.lang.String str6 = connectMessage3.getWillTopic();
        boolean boolean7 = connectMessage3.hasPassword();
        connectMessage3.setWill("", "MQIsdp");
        org.meqantt.message.QoS qoS11 = connectMessage3.getQos();
        boolean boolean12 = connectMessage3.isRetained();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + qoS11 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS11.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14845");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage4 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage5.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14846");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        boolean boolean3 = connectMessage1.isWillRetained();
        int int4 = connectMessage1.getKeepAlive();
        byte byte5 = connectMessage1.getProtocolVersion();
        boolean boolean6 = connectMessage1.hasWill();
        int int7 = connectMessage1.getKeepAlive();
        byte byte8 = connectMessage1.getProtocolVersion();
        org.meqantt.message.QoS qoS9 = connectMessage1.getWillQoS();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 3 + "'", byte5 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 3 + "'", byte8 == (byte) 3);
        org.junit.Assert.assertNull(qoS9);
    }

    @Test
    public void test14847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14847");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage13 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus14 = connAckMessage13.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus15 = connAckMessage13.getStatus();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(connectionStatus14);
        org.junit.Assert.assertNull(connectionStatus15);
    }

    @Test
    public void test14848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14848");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage6 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str7 = header1.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str7, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14849");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getClientId();
        boolean boolean5 = connectMessage3.isDup();
        boolean boolean6 = connectMessage3.hasWill();
        int int7 = connectMessage3.getKeepAlive();
        int int8 = connectMessage3.getKeepAlive();
        boolean boolean9 = connectMessage3.isCleanSession();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test14850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14850");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage9 = new org.meqantt.message.PubRelMessage(header1);
        boolean boolean10 = pubRelMessage9.isRetained();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test14851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14851");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        pubAckMessage7.setMessageId((int) (byte) 10);
        org.meqantt.message.ConnectMessage connectMessage13 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 10);
        boolean boolean14 = connectMessage13.hasPassword();
        org.meqantt.message.Message.Header header18 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage19 = new org.meqantt.message.ConnectMessage(header18);
        org.meqantt.message.Message.Type type20 = header18.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage21 = new org.meqantt.message.UnsubscribeMessage(header18);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage(header18);
        org.meqantt.message.DisconnectMessage disconnectMessage23 = new org.meqantt.message.DisconnectMessage(header18);
        org.meqantt.message.DisconnectMessage disconnectMessage24 = new org.meqantt.message.DisconnectMessage(header18);
        org.meqantt.message.PubCompMessage pubCompMessage25 = new org.meqantt.message.PubCompMessage(header18);
        org.meqantt.message.ConnAckMessage connAckMessage26 = new org.meqantt.message.ConnAckMessage(header18);
        org.meqantt.message.PublishMessage publishMessage27 = new org.meqantt.message.PublishMessage(header18);
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList32 = subscribeMessage31.getTopics();
        org.meqantt.message.QoS qoS33 = subscribeMessage31.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("", qoS33);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS33);
        org.meqantt.message.QoS qoS36 = subscribeMessage35.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList41 = subscribeMessage40.getTopics();
        org.meqantt.message.QoS qoS42 = subscribeMessage40.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage("", qoS42);
        org.meqantt.message.SubscribeMessage subscribeMessage44 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS42);
        org.meqantt.message.QoS qoS45 = subscribeMessage44.getQos();
        subscribeMessage35.addTopic("", qoS45);
        org.meqantt.message.SubscribeMessage subscribeMessage47 = new org.meqantt.message.SubscribeMessage("", qoS45);
        publishMessage27.setQos(qoS45);
        connectMessage13.setWill("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 01001101 M 77\n03: 01010001 Q 81\n04: 01001001 I 73\n05: 01110011 s 115\n06: 01100100 d 100\n07: 01110000 p 112\n", "\000\000", qoS45, false);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage7.setQos(qoS45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + qoS33 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS33.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + qoS42 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS42.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS45 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS45.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14852");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        org.meqantt.message.Message.Type type3 = unsubscribeMessage1.getType();
        unsubscribeMessage1.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        unsubscribeMessage1.addTopic("\001\003\003\001");
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.setDup(false);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type3.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
    }

    @Test
    public void test14853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14853");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        connectMessage1.setCredentials("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList15 = subscribeMessage14.getTopics();
        org.meqantt.message.QoS qoS16 = subscribeMessage14.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage18 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS16);
        org.meqantt.message.QoS qoS19 = subscribeMessage18.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList24 = subscribeMessage23.getTopics();
        org.meqantt.message.QoS qoS25 = subscribeMessage23.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage("", qoS25);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS25);
        org.meqantt.message.QoS qoS28 = subscribeMessage27.getQos();
        subscribeMessage18.addTopic("", qoS28);
        org.meqantt.message.PublishMessage publishMessage33 = new org.meqantt.message.PublishMessage("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "MQIsdp");
        org.meqantt.message.QoS qoS34 = publishMessage33.getQos();
        subscribeMessage18.addTopic("", qoS34);
        connectMessage1.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "hi!", qoS34, false);
        boolean boolean38 = connectMessage1.isWillRetained();
        java.lang.String str39 = connectMessage1.getWillTopic();
        org.meqantt.message.QoS qoS40 = connectMessage1.getWillQoS();
        boolean boolean41 = connectMessage1.hasPassword();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str39, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.junit.Assert.assertTrue("'" + qoS40 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS40.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test14854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14854");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        java.lang.String str2 = connectMessage1.getPassword();
        java.lang.String str3 = connectMessage1.getWillTopic();
        boolean boolean4 = connectMessage1.isCleanSession();
        boolean boolean5 = connectMessage1.isCleanSession();
        int int6 = connectMessage1.getKeepAlive();
        connectMessage1.setCredentials("");
        java.lang.String str9 = connectMessage1.getPassword();
        java.lang.String str10 = connectMessage1.getWillTopic();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test14855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14855");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage13 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str14 = connectMessage13.getUsername();
        byte byte15 = connectMessage13.getProtocolVersion();
        boolean boolean16 = connectMessage13.hasUsername();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage13.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 3 + "'", byte15 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test14856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14856");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage10 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage11 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage11.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14857");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        java.lang.String str3 = connectMessage1.getWill();
        java.lang.String str4 = connectMessage1.getWillTopic();
        connectMessage1.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "\000\000");
        org.meqantt.message.Message.Header header11 = null;
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage(header11);
        java.lang.String str13 = connectMessage12.getClientId();
        connectMessage12.setWill("hi!", "");
        boolean boolean17 = connectMessage12.hasPassword();
        boolean boolean18 = connectMessage12.isCleanSession();
        boolean boolean19 = connectMessage12.hasWill();
        org.meqantt.message.QoS qoS20 = connectMessage12.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage21 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS20);
        connectMessage1.setWill("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS20, false);
        connectMessage1.setWill("\001\003\003\001", "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        boolean boolean27 = connectMessage1.hasPassword();
        connectMessage1.setCredentials("\ufffd\003\000\000\000", "\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.meqantt.message.Message.Header header32 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingRespMessage pingRespMessage33 = new org.meqantt.message.PingRespMessage(header32);
        org.meqantt.message.PublishMessage publishMessage34 = new org.meqantt.message.PublishMessage(header32);
        org.meqantt.message.UnsubAckMessage unsubAckMessage35 = new org.meqantt.message.UnsubAckMessage(header32);
        org.meqantt.message.SubAckMessage subAckMessage36 = new org.meqantt.message.SubAckMessage(header32);
        java.util.List<org.meqantt.message.QoS> qoSList37 = subAckMessage36.getGrantedQoSs();
        org.meqantt.message.SubAckMessage subAckMessage38 = new org.meqantt.message.SubAckMessage();
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList41 = subscribeMessage40.getTopics();
        org.meqantt.message.QoS qoS42 = subscribeMessage40.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage("", qoS42);
        subAckMessage38.addQoS(qoS42);
        subAckMessage36.addQoS(qoS42);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setQos(qoS42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(qoSList37);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + qoS42 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS42.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14858");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.Message.Type type9 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage10 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage12 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage13 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage14 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage14.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void test14859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14859");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isCleanSession();
        java.lang.String str3 = connectMessage1.getUsername();
        java.lang.String str4 = connectMessage1.getClientId();
        boolean boolean5 = connectMessage1.isWillRetained();
        connectMessage1.setCredentials("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        java.lang.String str9 = connectMessage1.getPassword();
        byte byte10 = connectMessage1.getProtocolVersion();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str9, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 3 + "'", byte10 == (byte) 3);
    }

    @Test
    public void test14860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14860");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        boolean boolean27 = connectMessage3.isCleanSession();
        boolean boolean28 = connectMessage3.hasPassword();
        connectMessage3.setWill("hi!", "\000\000");
        byte byte32 = connectMessage3.getProtocolVersion();
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList35 = subscribeMessage34.getTopics();
        org.meqantt.message.QoS qoS36 = subscribeMessage34.getQos();
        java.util.List<org.meqantt.message.QoS> qoSList37 = subscribeMessage34.getTopicQoSs();
        org.meqantt.message.Message.Header header39 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage40 = new org.meqantt.message.PingReqMessage(header39);
        org.meqantt.message.PubCompMessage pubCompMessage41 = new org.meqantt.message.PubCompMessage(header39);
        org.meqantt.message.PubAckMessage pubAckMessage42 = new org.meqantt.message.PubAckMessage(header39);
        org.meqantt.message.PublishMessage publishMessage43 = new org.meqantt.message.PublishMessage(header39);
        org.meqantt.message.ConnAckMessage connAckMessage44 = new org.meqantt.message.ConnAckMessage(header39);
        org.meqantt.message.SubAckMessage subAckMessage45 = new org.meqantt.message.SubAckMessage(header39);
        org.meqantt.message.Message.Header header47 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type48 = header47.getType();
        org.meqantt.message.Message.Type type49 = header47.getType();
        org.meqantt.message.SubAckMessage subAckMessage50 = new org.meqantt.message.SubAckMessage(header47);
        org.meqantt.message.PingReqMessage pingReqMessage51 = new org.meqantt.message.PingReqMessage(header47);
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage(header47);
        org.meqantt.message.ConnectMessage connectMessage53 = new org.meqantt.message.ConnectMessage(header47);
        org.meqantt.message.PingReqMessage pingReqMessage54 = new org.meqantt.message.PingReqMessage(header47);
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage(header47);
        java.util.List<java.lang.String> strList56 = subscribeMessage55.getTopics();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage58 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList59 = unsubscribeMessage58.getTopics();
        org.meqantt.message.Message.Type type60 = unsubscribeMessage58.getType();
        java.util.List<java.lang.String> strList61 = unsubscribeMessage58.getTopics();
        org.meqantt.message.QoS qoS62 = unsubscribeMessage58.getQos();
        subscribeMessage55.setQos(qoS62);
        subAckMessage45.addQoS(qoS62);
        subscribeMessage34.setQos(qoS62);
        byte[] byteArray69 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str70 = org.meqantt.util.FormatUtil.toString(byteArray69);
        org.meqantt.message.PublishMessage publishMessage71 = new org.meqantt.message.PublishMessage("hi!", byteArray69);
        publishMessage71.setMessageId((int) '\001');
        byte[] byteArray74 = publishMessage71.getData();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage76 = new org.meqantt.message.UnsubscribeMessage("\000\000");
        org.meqantt.message.Message.Header header78 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type79 = header78.getType();
        org.meqantt.message.Message.Type type80 = header78.getType();
        org.meqantt.message.SubAckMessage subAckMessage81 = new org.meqantt.message.SubAckMessage(header78);
        org.meqantt.message.PingReqMessage pingReqMessage82 = new org.meqantt.message.PingReqMessage(header78);
        org.meqantt.message.SubscribeMessage subscribeMessage83 = new org.meqantt.message.SubscribeMessage(header78);
        org.meqantt.message.ConnectMessage connectMessage84 = new org.meqantt.message.ConnectMessage(header78);
        org.meqantt.message.PingReqMessage pingReqMessage85 = new org.meqantt.message.PingReqMessage(header78);
        org.meqantt.message.SubscribeMessage subscribeMessage86 = new org.meqantt.message.SubscribeMessage(header78);
        java.util.List<java.lang.String> strList87 = subscribeMessage86.getTopics();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage89 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList90 = unsubscribeMessage89.getTopics();
        org.meqantt.message.Message.Type type91 = unsubscribeMessage89.getType();
        java.util.List<java.lang.String> strList92 = unsubscribeMessage89.getTopics();
        org.meqantt.message.QoS qoS93 = unsubscribeMessage89.getQos();
        subscribeMessage86.setQos(qoS93);
        unsubscribeMessage76.setQos(qoS93);
        publishMessage71.setQos(qoS93);
        subscribeMessage34.addTopic("\000\000", qoS93);
        org.meqantt.message.SubscribeMessage subscribeMessage98 = new org.meqantt.message.SubscribeMessage("\000\006MQIsdp", qoS93);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setQos(qoS93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 3 + "'", byte32 == (byte) 3);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList37);
        org.junit.Assert.assertNull(type48);
        org.junit.Assert.assertNull(type49);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type60.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + qoS62 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS62.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0]");
        org.junit.Assert.assertNull(type79);
        org.junit.Assert.assertNull(type80);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + type91 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type91.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + qoS93 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS93.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14861");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        nettyClient1.unsubscribe("hi!");
        nettyClient1.unsubscribe("hi!");
        org.meqantt.MqttListener mqttListener15 = null;
        nettyClient1.setListener(mqttListener15);
        nettyClient1.unsubscribe("\000\003hi!");
        nettyClient1.unsubscribe("\000d\000\001\001d");
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.unsubscribe("00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
        nettyClient1.connect("", (int) '\001');
        nettyClient1.connect("Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]", (int) '\001');
    }

    @Test
    public void test14862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14862");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        java.lang.String str3 = connectMessage1.getPassword();
        java.lang.String str4 = connectMessage1.getPassword();
        java.lang.String str5 = connectMessage1.getClientId();
        java.lang.String str6 = connectMessage1.getUsername();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test14863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14863");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str5 = header1.toString();
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14864");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.ping();
        org.meqantt.MqttListener mqttListener10 = null;
        nettyClient1.setListener(mqttListener10);
        org.meqantt.MqttListener mqttListener12 = null;
        nettyClient1.setListener(mqttListener12);
        nettyClient1.publish("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
        nettyClient1.ping();
        nettyClient1.subscribe("\000\ufffd\ufffd\023\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d");
    }

    @Test
    public void test14865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14865");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        int int5 = connectMessage3.getKeepAlive();
        connectMessage3.setCredentials("MQIsdp", "MQIsdp");
        connectMessage3.setWill("MQIsdp", "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00000001 \001 1\n");
        boolean boolean12 = connectMessage3.isWillRetained();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14866");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        byte[] byteArray4 = publishMessage3.getData();
        java.lang.Class<?> wildcardClass5 = publishMessage3.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str2, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(byteArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test14867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14867");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubRelMessage pubRelMessage2 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage3 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage4.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14868");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage6 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.Message.Header header12 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type13 = header12.getType();
        org.meqantt.message.Message.Type type14 = header12.getType();
        org.meqantt.message.SubAckMessage subAckMessage15 = new org.meqantt.message.SubAckMessage(header12);
        org.meqantt.message.PingReqMessage pingReqMessage16 = new org.meqantt.message.PingReqMessage(header12);
        org.meqantt.message.PingReqMessage pingReqMessage17 = new org.meqantt.message.PingReqMessage(header12);
        org.meqantt.message.DisconnectMessage disconnectMessage18 = new org.meqantt.message.DisconnectMessage(header12);
        org.meqantt.message.SubAckMessage subAckMessage19 = new org.meqantt.message.SubAckMessage(header12);
        org.meqantt.message.UnsubAckMessage unsubAckMessage20 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS21 = unsubAckMessage20.getQos();
        subAckMessage19.addQoS(qoS21);
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type24 = subscribeMessage23.getType();
        subscribeMessage23.setDup(false);
        subscribeMessage23.setMessageId((int) (short) 0);
        java.util.List<java.lang.String> strList29 = subscribeMessage23.getTopics();
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList31 = subscribeMessage30.getTopics();
        org.meqantt.message.QoS qoS32 = subscribeMessage30.getQos();
        org.meqantt.message.ConnectMessage connectMessage37 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str38 = connectMessage37.getProtocolId();
        org.meqantt.message.QoS qoS39 = connectMessage37.getQos();
        subscribeMessage30.addTopic("", qoS39);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage42 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList43 = unsubscribeMessage42.getTopics();
        org.meqantt.message.Message.Type type44 = unsubscribeMessage42.getType();
        java.util.List<java.lang.String> strList45 = unsubscribeMessage42.getTopics();
        org.meqantt.message.QoS qoS46 = unsubscribeMessage42.getQos();
        subscribeMessage30.setQos(qoS46);
        subscribeMessage23.setQos(qoS46);
        subAckMessage19.addQoS(qoS46);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS46);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage("p\002\000\n", qoS46);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage8.setQos(qoS46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(type14);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type24.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + qoS32 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS32.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "MQIsdp" + "'", str38, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS39 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS39.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type44.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + qoS46 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS46.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14869");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getProtocolId();
        java.lang.String str5 = connectMessage1.getWillTopic();
        byte byte6 = connectMessage1.getProtocolVersion();
        boolean boolean7 = connectMessage1.hasUsername();
        connectMessage1.setWill("MQIsdp", "\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        boolean boolean11 = connectMessage1.isCleanSession();
        boolean boolean12 = connectMessage1.isCleanSession();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 3 + "'", byte6 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14870");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.Message.Header header8 = new org.meqantt.message.Message.Header((byte) 3);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header8);
        org.meqantt.message.PubAckMessage pubAckMessage10 = new org.meqantt.message.PubAckMessage(header8);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header8);
        org.meqantt.message.UnsubAckMessage unsubAckMessage12 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS13 = unsubAckMessage12.getQos();
        subAckMessage11.addQoS(qoS13);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage6.setQos(qoS13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14871");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        pubAckMessage9.setMessageId((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage9.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14872");
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 1, (byte) 1, (byte) 100 };
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage("", byteArray9);
        java.lang.String str11 = publishMessage10.getDataAsString();
        byte[] byteArray12 = publishMessage10.getData();
        java.lang.String str13 = org.meqantt.util.FormatUtil.toString(byteArray12);
        java.lang.String str14 = org.meqantt.util.FormatUtil.toString(byteArray12);
        java.lang.String str15 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray12);
        java.lang.String str16 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray12);
        org.meqantt.message.PublishMessage publishMessage17 = new org.meqantt.message.PublishMessage("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", byteArray12);
        org.meqantt.message.PublishMessage publishMessage18 = new org.meqantt.message.PublishMessage("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", byteArray12);
        java.lang.String str19 = publishMessage18.getTopic();
        byte[] byteArray20 = publishMessage18.getData();
        java.lang.Class<?> wildcardClass21 = publishMessage18.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\000d\000\001\001d" + "'", str11, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str15, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n" + "'", str16, "00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str19, "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 100, 0, 1, 1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test14873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14873");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        nettyClient1.connect("MQIsdp", (int) (short) 1);
        org.meqantt.MqttListener mqttListener5 = null;
        nettyClient1.setListener(mqttListener5);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.connect("MQIsdp", (int) (byte) 3);
    }

    @Test
    public void test14874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14874");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PubAckMessage pubAckMessage2 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage3 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage7.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test14875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14875");
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage("MQIsdp", "\000d\000\001\001d");
        java.lang.String str4 = publishMessage3.getDataAsString();
        byte[] byteArray5 = publishMessage3.getData();
        byte[] byteArray6 = publishMessage3.getData();
        java.lang.String str7 = org.meqantt.util.FormatUtil.toString(byteArray6);
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage("00: 10100010 \242 162\n01: 00010111 \027 23\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00010011 \023 19\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 00001000 \b 8\n09: 11101111 \357 239\n10: 10111111 \277 191\n11: 10111101 \275 189\n12: 11101111 \357 239\n13: 10111111 \277 191\n14: 10111101 \275 189\n15: 01100100 d 100\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 00000001 \001 1\n23: 00000001 \001 1\n24: 01100100 d 100\n", byteArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d" + "'", str4, "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\000d\000\001\001d" + "'", str7, "\000d\000\001\001d");
    }

    @Test
    public void test14876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14876");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage3 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage6 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage7 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage8 = new org.meqantt.message.UnsubscribeMessage(header1);
    }

    @Test
    public void test14877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14877");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage9 = new org.meqantt.message.PubRelMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage9.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14878");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("", "");
        java.lang.String str3 = publishMessage2.getTopic();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test14879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14879");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage9.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type6.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str8, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
    }

    @Test
    public void test14880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14880");
        byte[] byteArray2 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str3 = org.meqantt.util.FormatUtil.toString(byteArray2);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage("hi!", byteArray2);
        publishMessage4.setMessageId((int) '\001');
        java.lang.String str7 = publishMessage4.getDataAsString();
        java.lang.String str8 = publishMessage4.getDataAsString();
        byte[] byteArray9 = publishMessage4.getData();
        byte[] byteArray10 = publishMessage4.toBytes();
        java.lang.String str11 = publishMessage4.getDataAsString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\000\000" + "'", str7, "\000\000");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\000\000" + "'", str8, "\000\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 7, 0, 3, 104, 105, 33, 0, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\000\000" + "'", str11, "\000\000");
    }

    @Test
    public void test14881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14881");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage5 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage5.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14882");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\000\000", false, (int) (short) -1);
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str15 = connectMessage14.getUsername();
        org.meqantt.message.QoS qoS19 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage("", qoS19);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList23 = subscribeMessage22.getTopics();
        org.meqantt.message.QoS qoS24 = subscribeMessage22.getQos();
        subscribeMessage20.addTopic("", qoS24);
        connectMessage14.setWill("", "\000d\000\001\001d", qoS24, true);
        org.meqantt.message.SubscribeMessage subscribeMessage28 = new org.meqantt.message.SubscribeMessage("hi!", qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage29 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage30 = new org.meqantt.message.SubscribeMessage("", qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS24);
        connectMessage3.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS24, false);
        org.meqantt.message.Message.Header header38 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage39 = new org.meqantt.message.SubscribeMessage(header38);
        java.util.List<java.lang.String> strList40 = subscribeMessage39.getTopics();
        java.util.List<java.lang.String> strList41 = subscribeMessage39.getTopics();
        java.util.List<org.meqantt.message.QoS> qoSList42 = subscribeMessage39.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage47 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean48 = connectMessage47.hasWill();
        java.lang.String str49 = connectMessage47.getWill();
        org.meqantt.message.Message.Header header52 = null;
        org.meqantt.message.ConnectMessage connectMessage53 = new org.meqantt.message.ConnectMessage(header52);
        boolean boolean54 = connectMessage53.isWillRetained();
        boolean boolean55 = connectMessage53.isWillRetained();
        java.lang.String str56 = connectMessage53.getUsername();
        org.meqantt.message.QoS qoS60 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("", qoS60);
        org.meqantt.message.SubscribeMessage subscribeMessage63 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList64 = subscribeMessage63.getTopics();
        org.meqantt.message.QoS qoS65 = subscribeMessage63.getQos();
        subscribeMessage61.addTopic("", qoS65);
        connectMessage53.setWill("hi!", "", qoS65, false);
        connectMessage47.setWill("MQIsdp", "hi!", qoS65, false);
        subscribeMessage39.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS65);
        org.meqantt.message.SubscribeMessage subscribeMessage72 = new org.meqantt.message.SubscribeMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS65);
        connectMessage3.setWill("", "00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n", qoS65, false);
        java.lang.String str75 = connectMessage3.getUsername();
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + qoS24 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS24.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(qoSList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + qoS65 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS65.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test14883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14883");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        java.lang.String str6 = connectMessage1.getWill();
        boolean boolean7 = connectMessage1.hasUsername();
        boolean boolean8 = connectMessage1.hasPassword();
        java.lang.String str9 = connectMessage1.getUsername();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test14884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14884");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.Message.Type type8 = header1.getType();
        org.meqantt.message.ConnAckMessage connAckMessage9 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage10 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage12 = new org.meqantt.message.SubAckMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void test14885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14885");
        org.meqantt.message.SubAckMessage subAckMessage2 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage2.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList4 = subAckMessage2.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str9 = connectMessage8.getProtocolId();
        org.meqantt.message.QoS qoS10 = connectMessage8.getQos();
        subAckMessage2.addQoS(qoS10);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage("hi!", qoS10);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS10);
        java.util.List<java.lang.String> strList14 = subscribeMessage13.getTopics();
        java.util.List<org.meqantt.message.QoS> qoSList15 = subscribeMessage13.getTopicQoSs();
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertNull(qoSList4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(qoSList15);
    }

    @Test
    public void test14886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14886");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage11 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage12 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage13 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage15 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage16 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage17 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage18 = new org.meqantt.message.UnsubAckMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14887");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
    }

    @Test
    public void test14888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14888");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage9 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS10 = unsubAckMessage9.getQos();
        subAckMessage8.addQoS(qoS10);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage8.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14889");
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("00: 00000000 \000 0\n01: 00010111 \027 23\n02: 11101111 \357 239\n03: 10111111 \277 191\n04: 10111101 \275 189\n05: 00001000 \b 8\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n10: 11000000 \300 192\n11: 10000000 \200 128\n12: 00000100 \004 4\n13: 11101111 \357 239\n14: 10111111 \277 191\n15: 10111101 \275 189\n16: 11101111 \357 239\n17: 10111111 \277 191\n18: 10111101 \275 189\n19: 11101111 \357 239\n20: 10111111 \277 191\n21: 10111101 \275 189\n22: 11101111 \357 239\n23: 10111111 \277 191\n24: 10111101 \275 189\n", false, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Client id cannot be null and must be at most 23 characters long: 00: 00000000 ? 0?01: 00010111 ? 23?02: 11101111 i? 239?03: 10111111 ? 191?04: 10111101 ? 189?05: 00001000 ? 8?06: 11000000 A? 192?07: 10000000 ? 128?08: 11000000 A? 192?09: 10000000 ? 128?10: 11000000 A? 192?11: 10000000 ? 128?12: 00000100 ? 4?13: 11101111 i? 239?14: 10111111 ? 191?15: 10111101 ? 189?16: 11101111 i? 239?17: 10111111 ? 191?18: 10111101 ? 189?19: 11101111 i? 239?20: 10111111 ? 191?21: 10111101 ? 189?22: 11101111 i? 239?23: 10111111 ? 191?24: 10111101 ? 189?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14890");
        org.meqantt.message.SubscribeMessage subscribeMessage1 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList2 = subscribeMessage1.getTopics();
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str8 = connectMessage7.getProtocolId();
        org.meqantt.message.QoS qoS9 = connectMessage7.getQos();
        subscribeMessage1.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS9);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS9);
        subscribeMessage11.setDup(false);
        java.util.List<org.meqantt.message.QoS> qoSList14 = subscribeMessage11.getTopicQoSs();
        subscribeMessage11.setDup(false);
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage11.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MQIsdp" + "'", str8, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS9 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS9.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList14);
    }

    @Test
    public void test14891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14891");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.subscribe("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener9 = null;
        nettyClient1.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.subscribe("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        nettyClient1.connect("\001\003\003\001", (int) (short) 10);
        nettyClient1.subscribe("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener20 = null;
        nettyClient1.setListener(mqttListener20);
        nettyClient1.subscribe("");
        org.meqantt.MqttListener mqttListener24 = null;
        nettyClient1.setListener(mqttListener24);
    }

    @Test
    public void test14892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14892");
        org.meqantt.message.ConnectMessage connectMessage0 = new org.meqantt.message.ConnectMessage();
        java.lang.String str1 = connectMessage0.getProtocolId();
        java.lang.String str2 = connectMessage0.getClientId();
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList6 = subAckMessage5.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList7 = subAckMessage5.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str12 = connectMessage11.getProtocolId();
        org.meqantt.message.QoS qoS13 = connectMessage11.getQos();
        subAckMessage5.addQoS(qoS13);
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean19 = connectMessage18.hasWill();
        java.lang.String str20 = connectMessage18.getWill();
        org.meqantt.message.Message.Header header23 = null;
        org.meqantt.message.ConnectMessage connectMessage24 = new org.meqantt.message.ConnectMessage(header23);
        boolean boolean25 = connectMessage24.isWillRetained();
        boolean boolean26 = connectMessage24.isWillRetained();
        java.lang.String str27 = connectMessage24.getUsername();
        org.meqantt.message.QoS qoS31 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("", qoS31);
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList35 = subscribeMessage34.getTopics();
        org.meqantt.message.QoS qoS36 = subscribeMessage34.getQos();
        subscribeMessage32.addTopic("", qoS36);
        connectMessage24.setWill("hi!", "", qoS36, false);
        connectMessage18.setWill("MQIsdp", "hi!", qoS36, false);
        org.meqantt.message.SubAckMessage subAckMessage44 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList45 = subAckMessage44.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList46 = subAckMessage44.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList47 = subAckMessage44.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList50 = subscribeMessage49.getTopics();
        org.meqantt.message.QoS qoS51 = subscribeMessage49.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage("", qoS51);
        subAckMessage44.addQoS(qoS51);
        connectMessage18.setWill("hi!", "MQIsdp", qoS51, true);
        subAckMessage5.addQoS(qoS51);
        connectMessage0.setWill("\000d\000\001\001d", "hi!", qoS51, true);
        java.lang.String str59 = connectMessage0.getUsername();
        boolean boolean60 = connectMessage0.isWillRetained();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MQIsdp" + "'", str1, "MQIsdp");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(qoSList6);
        org.junit.Assert.assertNull(qoSList7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MQIsdp" + "'", str12, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList45);
        org.junit.Assert.assertNull(qoSList46);
        org.junit.Assert.assertNull(qoSList47);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + qoS51 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS51.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test14893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14893");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        java.lang.String str6 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header7 = null;
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header7);
        boolean boolean9 = connectMessage8.isWillRetained();
        boolean boolean10 = connectMessage8.isWillRetained();
        connectMessage8.setWill("", "MQIsdp");
        boolean boolean14 = connectMessage8.isWillRetained();
        java.lang.String str15 = connectMessage8.getClientId();
        java.lang.String str16 = connectMessage8.getWill();
        byte byte17 = connectMessage8.getProtocolVersion();
        java.lang.String str18 = connectMessage8.getPassword();
        connectMessage8.setWill("\000\000", "00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        connectMessage8.setWill("00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.meqantt.message.QoS qoS25 = connectMessage8.getWillQoS();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setQos(qoS25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MQIsdp" + "'", str16, "MQIsdp");
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 3 + "'", byte17 == (byte) 3);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + qoS25 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS25.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14894");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage3 = new org.meqantt.message.SubscribeMessage(header1);
        java.util.List<org.meqantt.message.QoS> qoSList4 = subscribeMessage3.getTopicQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList5 = subscribeMessage3.getTopicQoSs();
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage3.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(qoSList4);
        org.junit.Assert.assertNotNull(qoSList5);
    }

    @Test
    public void test14895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14895");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        java.lang.String str3 = connectMessage1.getPassword();
        org.meqantt.message.Message.Header header7 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage(header7);
        connectMessage8.setWill("\000\000", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        org.meqantt.message.SubscribeMessage subscribeMessage14 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList15 = subscribeMessage14.getTopics();
        org.meqantt.message.QoS qoS16 = subscribeMessage14.getQos();
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str22 = connectMessage21.getProtocolId();
        org.meqantt.message.QoS qoS23 = connectMessage21.getQos();
        subscribeMessage14.addTopic("", qoS23);
        connectMessage8.setWill("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS23, true);
        connectMessage1.setWill("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS23, true);
        byte byte29 = connectMessage1.getProtocolVersion();
        boolean boolean30 = connectMessage1.hasUsername();
        boolean boolean31 = connectMessage1.hasUsername();
        boolean boolean32 = connectMessage1.hasUsername();
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.QoS qoS33 = connectMessage1.getQos();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + qoS16 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS16.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MQIsdp" + "'", str22, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS23 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS23.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 3 + "'", byte29 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test14896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14896");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.Message.Header header4 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header4);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header4);
        org.meqantt.message.ConnectMessage connectMessage11 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str12 = connectMessage11.getProtocolId();
        byte[] byteArray13 = connectMessage11.toBytes();
        org.meqantt.message.QoS qoS14 = connectMessage11.getQos();
        subscribeMessage6.addTopic("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n", qoS14);
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage("\020\032\000\006MQIsdp\003&\000\001\000\000\000\000\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", qoS14);
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) subscribeMessage16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MQIsdp" + "'", str12, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14897");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("MQIsdp", (int) (byte) 0);
        org.meqantt.MqttListener mqttListener12 = null;
        nettyClient1.setListener(mqttListener12);
        org.meqantt.MqttListener mqttListener14 = null;
        nettyClient1.setListener(mqttListener14);
        nettyClient1.disconnect();
    }

    @Test
    public void test14898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14898");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isWillRetained();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage1.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test14899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14899");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage8 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header1);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test14900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14900");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage8 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage11 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage12 = new org.meqantt.message.PubRecMessage(header1);
        int int13 = pubRecMessage12.getMessageId();
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage12.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test14901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14901");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.publish("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "Header [type=null, retain=true, qos=AT_LEAST_ONCE, dup=false]");
    }

    @Test
    public void test14902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14902");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage3 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage4 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.Message.Type type7 = header1.getType();
        org.meqantt.message.Message.Type type8 = header1.getType();
        org.meqantt.message.PublishMessage publishMessage9 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage10.addTopic("\000\006\ufffd\ufffd\003hi!");
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void test14903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14903");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean10 = connectMessage9.hasWill();
        java.lang.String str11 = connectMessage9.getWill();
        org.meqantt.message.Message.Header header14 = null;
        org.meqantt.message.ConnectMessage connectMessage15 = new org.meqantt.message.ConnectMessage(header14);
        boolean boolean16 = connectMessage15.isWillRetained();
        boolean boolean17 = connectMessage15.isWillRetained();
        java.lang.String str18 = connectMessage15.getUsername();
        org.meqantt.message.QoS qoS22 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("", qoS22);
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList26 = subscribeMessage25.getTopics();
        org.meqantt.message.QoS qoS27 = subscribeMessage25.getQos();
        subscribeMessage23.addTopic("", qoS27);
        connectMessage15.setWill("hi!", "", qoS27, false);
        connectMessage9.setWill("MQIsdp", "hi!", qoS27, false);
        org.meqantt.message.SubAckMessage subAckMessage35 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList36 = subAckMessage35.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList37 = subAckMessage35.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList38 = subAckMessage35.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList41 = subscribeMessage40.getTopics();
        org.meqantt.message.QoS qoS42 = subscribeMessage40.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage("", qoS42);
        subAckMessage35.addQoS(qoS42);
        connectMessage9.setWill("hi!", "MQIsdp", qoS42, true);
        boolean boolean47 = connectMessage9.isRetained();
        org.meqantt.message.QoS qoS48 = connectMessage9.getWillQoS();
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage5.setQos(qoS48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList36);
        org.junit.Assert.assertNull(qoSList37);
        org.junit.Assert.assertNull(qoSList38);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + qoS42 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS42.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + qoS48 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS48.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14904");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage8 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage9 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage(header1);
        java.lang.String str13 = header1.toString();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str13, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14905");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getProtocolId();
        byte[] byteArray5 = connectMessage3.toBytes();
        org.meqantt.message.QoS qoS6 = connectMessage3.getQos();
        java.lang.String str7 = connectMessage3.getPassword();
        org.meqantt.message.QoS qoS8 = connectMessage3.getWillQoS();
        java.lang.String str9 = connectMessage3.getProtocolId();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(qoS8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
    }

    @Test
    public void test14906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14906");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.UnsubAckMessage unsubAckMessage2 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage3 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.Message.Header header11 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type12 = header11.getType();
        org.meqantt.message.Message.Type type13 = header11.getType();
        org.meqantt.message.SubAckMessage subAckMessage14 = new org.meqantt.message.SubAckMessage(header11);
        org.meqantt.message.PingReqMessage pingReqMessage15 = new org.meqantt.message.PingReqMessage(header11);
        org.meqantt.message.PingReqMessage pingReqMessage16 = new org.meqantt.message.PingReqMessage(header11);
        org.meqantt.message.DisconnectMessage disconnectMessage17 = new org.meqantt.message.DisconnectMessage(header11);
        org.meqantt.message.SubAckMessage subAckMessage18 = new org.meqantt.message.SubAckMessage(header11);
        org.meqantt.message.UnsubAckMessage unsubAckMessage19 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS20 = unsubAckMessage19.getQos();
        subAckMessage18.addQoS(qoS20);
        org.meqantt.message.ConnectMessage connectMessage26 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean27 = connectMessage26.hasWill();
        java.lang.String str28 = connectMessage26.getWill();
        org.meqantt.message.Message.Header header31 = null;
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage(header31);
        boolean boolean33 = connectMessage32.isWillRetained();
        boolean boolean34 = connectMessage32.isWillRetained();
        java.lang.String str35 = connectMessage32.getUsername();
        org.meqantt.message.QoS qoS39 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("", qoS39);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList43 = subscribeMessage42.getTopics();
        org.meqantt.message.QoS qoS44 = subscribeMessage42.getQos();
        subscribeMessage40.addTopic("", qoS44);
        connectMessage32.setWill("hi!", "", qoS44, false);
        connectMessage26.setWill("MQIsdp", "hi!", qoS44, false);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS44);
        subAckMessage18.addQoS(qoS44);
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage("", qoS44);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage8.setQos(qoS44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type12);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + qoS44 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS44.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14907");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, 1);
        byte byte4 = connectMessage3.getProtocolVersion();
        boolean boolean5 = connectMessage3.hasPassword();
        boolean boolean6 = connectMessage3.isWillRetained();
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 3 + "'", byte4 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test14908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14908");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        java.lang.String str2 = header1.toString();
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage7 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str2, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test14909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14909");
        byte[] byteArray2 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str3 = org.meqantt.util.FormatUtil.toString(byteArray2);
        java.lang.String str4 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray2);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage("\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", byteArray2);
        java.lang.String str6 = publishMessage5.getTopic();
        publishMessage5.setDup(false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "00: 00000000 \000 0\n01: 00000000 \000 0\n" + "'", str4, "00: 00000000 \000 0\n01: 00000000 \000 0\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]" + "'", str6, "\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
    }

    @Test
    public void test14910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14910");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage6 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage9 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage9.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14911");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.Message.Type type9 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage10 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage11 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage12 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage13 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage14 = new org.meqantt.message.PubAckMessage(header1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void test14912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14912");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        java.lang.String str5 = header1.toString();
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage6.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14913");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus2 = connAckMessage1.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus3 = connAckMessage1.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus4 = connAckMessage1.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus5 = connAckMessage1.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus6 = connAckMessage1.getStatus();
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage1.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus2 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus2.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus3 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus3.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus4 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus4.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus5 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus5.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus6 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus6.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
    }

    @Test
    public void test14914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14914");
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str5 = connectMessage4.getUsername();
        int int6 = connectMessage4.getKeepAlive();
        java.lang.String str7 = connectMessage4.getWillTopic();
        boolean boolean8 = connectMessage4.hasPassword();
        java.lang.String str9 = connectMessage4.getPassword();
        byte[] byteArray10 = connectMessage4.toBytes();
        org.meqantt.message.PublishMessage publishMessage11 = new org.meqantt.message.PublishMessage("00: 00000000 \000 0\n01: 00000110 \006 6\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 00000011 \003 3\n05: 01101000 h 104\n06: 01101001 i 105\n07: 00100001 ! 33\n", byteArray10);
        java.lang.String str12 = org.meqantt.util.FormatUtil.toString(byteArray10);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test14915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14915");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        int int6 = unsubscribeMessage5.getMessageId();
        unsubscribeMessage5.setDup(false);
        org.meqantt.message.Message.Type type9 = unsubscribeMessage5.getType();
        org.meqantt.message.Message.Header header11 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type12 = header11.getType();
        org.meqantt.message.Message.Type type13 = header11.getType();
        org.meqantt.message.SubAckMessage subAckMessage14 = new org.meqantt.message.SubAckMessage(header11);
        java.util.List<org.meqantt.message.QoS> qoSList15 = subAckMessage14.getGrantedQoSs();
        org.meqantt.message.QoS qoS16 = null;
        subAckMessage14.addQoS(qoS16);
        org.meqantt.message.Message.Header header19 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage20 = new org.meqantt.message.PingReqMessage(header19);
        org.meqantt.message.PubCompMessage pubCompMessage21 = new org.meqantt.message.PubCompMessage(header19);
        org.meqantt.message.PubAckMessage pubAckMessage22 = new org.meqantt.message.PubAckMessage(header19);
        org.meqantt.message.PublishMessage publishMessage23 = new org.meqantt.message.PublishMessage(header19);
        org.meqantt.message.ConnAckMessage connAckMessage24 = new org.meqantt.message.ConnAckMessage(header19);
        org.meqantt.message.SubAckMessage subAckMessage25 = new org.meqantt.message.SubAckMessage(header19);
        org.meqantt.message.SubscribeMessage subscribeMessage26 = new org.meqantt.message.SubscribeMessage(header19);
        org.meqantt.message.ConnectMessage connectMessage36 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str37 = connectMessage36.getUsername();
        org.meqantt.message.QoS qoS41 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage("", qoS41);
        org.meqantt.message.SubscribeMessage subscribeMessage44 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList45 = subscribeMessage44.getTopics();
        org.meqantt.message.QoS qoS46 = subscribeMessage44.getQos();
        subscribeMessage42.addTopic("", qoS46);
        connectMessage36.setWill("", "\000d\000\001\001d", qoS46, true);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage("hi!", qoS46);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS46);
        org.meqantt.message.SubscribeMessage subscribeMessage52 = new org.meqantt.message.SubscribeMessage("", qoS46);
        org.meqantt.message.SubscribeMessage subscribeMessage53 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS46);
        org.meqantt.message.SubscribeMessage subscribeMessage54 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS46);
        subscribeMessage26.addTopic("00: 10100010 \242 162\n01: 00101000 ( 40\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00100100 $ 36\n06: 00110000 0 48\n07: 00110000 0 48\n08: 00111010 : 58\n09: 00100000   32\n10: 00110000 0 48\n11: 00110000 0 48\n12: 00110000 0 48\n13: 00110000 0 48\n14: 00110000 0 48\n15: 00110000 0 48\n16: 00110000 0 48\n17: 00110000 0 48\n18: 00100000   32\n19: 11000000 \300 192\n20: 10000000 \200 128\n21: 00100000   32\n22: 00110000 0 48\n23: 00001010 \n 10\n24: 00110000 0 48\n25: 00110001 1 49\n26: 00111010 : 58\n27: 00100000   32\n28: 00110000 0 48\n29: 00110000 0 48\n30: 00110000 0 48\n31: 00110000 0 48\n32: 00110000 0 48\n33: 00110000 0 48\n34: 00110000 0 48\n35: 00110000 0 48\n36: 00100000   32\n37: 11000000 \300 192\n38: 10000000 \200 128\n39: 00100000   32\n40: 00110000 0 48\n41: 00001010 \n 10\n", qoS46);
        subAckMessage14.addQoS(qoS46);
        org.meqantt.message.SubscribeMessage subscribeMessage59 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList60 = subscribeMessage59.getTopics();
        org.meqantt.message.QoS qoS61 = subscribeMessage59.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage62 = new org.meqantt.message.SubscribeMessage("", qoS61);
        org.meqantt.message.SubscribeMessage subscribeMessage63 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS61);
        java.util.List<java.lang.String> strList64 = subscribeMessage63.getTopics();
        java.util.List<org.meqantt.message.QoS> qoSList65 = subscribeMessage63.getTopicQoSs();
        org.meqantt.message.QoS qoS66 = subscribeMessage63.getQos();
        subAckMessage14.addQoS(qoS66);
        unsubscribeMessage5.setQos(qoS66);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(type9);
        org.junit.Assert.assertNull(type12);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(qoSList15);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + qoS46 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS46.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + qoS61 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS61.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(qoSList65);
        org.junit.Assert.assertTrue("'" + qoS66 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS66.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14916");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PublishMessage publishMessage5 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.QoS qoS7 = null;
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage6.setQos(qoS7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14917");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        org.meqantt.message.QoS qoS8 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage("", qoS8);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList12 = subscribeMessage11.getTopics();
        org.meqantt.message.QoS qoS13 = subscribeMessage11.getQos();
        subscribeMessage9.addTopic("", qoS13);
        connectMessage3.setWill("", "\000d\000\001\001d", qoS13, true);
        boolean boolean17 = connectMessage3.isCleanSession();
        java.lang.String str18 = connectMessage3.getClientId();
        java.lang.String str19 = connectMessage3.getPassword();
        boolean boolean20 = connectMessage3.isDup();
        org.meqantt.message.ConnectMessage connectMessage28 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str29 = connectMessage28.getUsername();
        org.meqantt.message.QoS qoS33 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("", qoS33);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList37 = subscribeMessage36.getTopics();
        org.meqantt.message.QoS qoS38 = subscribeMessage36.getQos();
        subscribeMessage34.addTopic("", qoS38);
        connectMessage28.setWill("", "\000d\000\001\001d", qoS38, true);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage("hi!", qoS38);
        org.meqantt.message.SubscribeMessage subscribeMessage43 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS38);
        connectMessage3.setWill("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", "00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00000001 \001 1\n", qoS38, true);
        org.meqantt.message.QoS qoS46 = connectMessage3.getWillQoS();
        org.meqantt.message.SubAckMessage subAckMessage48 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList49 = subAckMessage48.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList50 = subAckMessage48.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage54 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str55 = connectMessage54.getProtocolId();
        org.meqantt.message.QoS qoS56 = connectMessage54.getQos();
        subAckMessage48.addQoS(qoS56);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList59 = subscribeMessage58.getTopics();
        org.meqantt.message.QoS qoS60 = subscribeMessage58.getQos();
        subAckMessage48.addQoS(qoS60);
        org.meqantt.message.Message.Header header62 = null;
        org.meqantt.message.ConnectMessage connectMessage63 = new org.meqantt.message.ConnectMessage(header62);
        int int64 = connectMessage63.getKeepAlive();
        boolean boolean65 = connectMessage63.isCleanSession();
        org.meqantt.message.PubRelMessage pubRelMessage69 = new org.meqantt.message.PubRelMessage((int) ' ');
        org.meqantt.message.QoS qoS70 = pubRelMessage69.getQos();
        connectMessage63.setWill("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "MQIsdp", qoS70, true);
        subAckMessage48.addQoS(qoS70);
        org.meqantt.message.SubscribeMessage subscribeMessage74 = new org.meqantt.message.SubscribeMessage("\001\003\003\001", qoS70);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setQos(qoS70);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + qoS38 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS38.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS46 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS46.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList49);
        org.junit.Assert.assertNull(qoSList50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MQIsdp" + "'", str55, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS56 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS56.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + qoS70 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS70.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14918");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage6 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage10 = new org.meqantt.message.PubRecMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRecMessage10.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRec messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
    }

    @Test
    public void test14919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14919");
        org.meqantt.message.SubscribeMessage subscribeMessage1 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList2 = subscribeMessage1.getTopics();
        org.meqantt.message.QoS qoS3 = subscribeMessage1.getQos();
        org.meqantt.message.ConnectMessage connectMessage8 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str9 = connectMessage8.getProtocolId();
        org.meqantt.message.QoS qoS10 = connectMessage8.getQos();
        subscribeMessage1.addTopic("", qoS10);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage13 = new org.meqantt.message.UnsubscribeMessage("hi!");
        java.util.List<java.lang.String> strList14 = unsubscribeMessage13.getTopics();
        org.meqantt.message.Message.Type type15 = unsubscribeMessage13.getType();
        java.util.List<java.lang.String> strList16 = unsubscribeMessage13.getTopics();
        org.meqantt.message.QoS qoS17 = unsubscribeMessage13.getQos();
        subscribeMessage1.setQos(qoS17);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS17);
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        java.util.List<java.lang.String> strList21 = subscribeMessage19.getTopics();
        // The following exception was thrown during execution in test generation
        try {
            subscribeMessage19.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + qoS3 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS3.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS10 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS10.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.meqantt.message.Message.Type.UNSUBSCRIBE + "'", type15.equals(org.meqantt.message.Message.Type.UNSUBSCRIBE));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + qoS17 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS17.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test14920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14920");
        org.meqantt.message.SubAckMessage subAckMessage0 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList1 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage0.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList6 = subscribeMessage5.getTopics();
        org.meqantt.message.QoS qoS7 = subscribeMessage5.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage("", qoS7);
        subAckMessage0.addQoS(qoS7);
        java.util.List<org.meqantt.message.QoS> qoSList10 = subAckMessage0.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList12 = subscribeMessage11.getTopics();
        org.meqantt.message.QoS qoS13 = subscribeMessage11.getQos();
        org.meqantt.message.QoS qoS15 = null;
        subscribeMessage11.addTopic("", qoS15);
        java.util.List<org.meqantt.message.QoS> qoSList17 = subscribeMessage11.getTopicQoSs();
        subscribeMessage11.setDup(false);
        java.util.List<org.meqantt.message.QoS> qoSList20 = subscribeMessage11.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage25 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str26 = connectMessage25.getUsername();
        org.meqantt.message.QoS qoS30 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage("", qoS30);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList34 = subscribeMessage33.getTopics();
        org.meqantt.message.QoS qoS35 = subscribeMessage33.getQos();
        subscribeMessage31.addTopic("", qoS35);
        connectMessage25.setWill("", "\000d\000\001\001d", qoS35, true);
        subscribeMessage11.addTopic("\000\000", qoS35);
        subAckMessage0.addQoS(qoS35);
        subAckMessage0.setMessageId((int) (byte) -1);
        int int43 = subAckMessage0.getMessageId();
        java.util.List<org.meqantt.message.QoS> qoSList44 = subAckMessage0.getGrantedQoSs();
        org.junit.Assert.assertNull(qoSList1);
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + qoS7 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS7.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList10);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList17);
        org.junit.Assert.assertNotNull(qoSList20);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + qoS35 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS35.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 18 + "'", int43 == 18);
        org.junit.Assert.assertNotNull(qoSList44);
    }

    @Test
    public void test14921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14921");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage8.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type2.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str4, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
    }

    @Test
    public void test14922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14922");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        int int9 = subAckMessage8.getMessageId();
        org.meqantt.message.Message.Type type10 = subAckMessage8.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage12 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList13 = subscribeMessage12.getTopics();
        org.meqantt.message.ConnectMessage connectMessage18 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str19 = connectMessage18.getProtocolId();
        org.meqantt.message.QoS qoS20 = connectMessage18.getQos();
        subscribeMessage12.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS20);
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("\000D00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS20);
        subAckMessage8.addQoS(qoS20);
        // The following exception was thrown during execution in test generation
        try {
            subAckMessage8.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MQIsdp" + "'", str19, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS20 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS20.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14923");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", false, (int) (short) 0);
        java.lang.String str4 = connectMessage3.getClientId();
        java.lang.String str5 = connectMessage3.getPassword();
        java.lang.String str6 = connectMessage3.getWill();
        byte byte7 = connectMessage3.getProtocolVersion();
        boolean boolean8 = connectMessage3.hasWill();
        connectMessage3.setCredentials("\020\ufffd\001\000\006MQIsdp\003&\000d\000\006MQIsdp\000\006MQIsdp\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n", "00: 00000000 \000 0\n01: 00000100 \004 4\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 11000000 \300 192\n05: 10000000 \200 128\n");
        boolean boolean12 = connectMessage3.hasUsername();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 3 + "'", byte7 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test14924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14924");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.Message.Type type6 = header1.getType();
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage8 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage9.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void test14925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14925");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus3 = connAckMessage2.getStatus();
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(connectionStatus3);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus5 = connAckMessage4.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus6 = connAckMessage4.getStatus();
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(connectionStatus6);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage7.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE));
        org.junit.Assert.assertTrue("'" + connectionStatus3 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE + "'", connectionStatus3.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE));
        org.junit.Assert.assertTrue("'" + connectionStatus5 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE + "'", connectionStatus5.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE));
        org.junit.Assert.assertTrue("'" + connectionStatus6 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE + "'", connectionStatus6.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.SERVER_UNAVAILABLE));
    }

    @Test
    public void test14926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14926");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.Message.Header header3 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header3);
        boolean boolean5 = connectMessage4.isWillRetained();
        java.lang.String str6 = connectMessage4.getProtocolId();
        boolean boolean7 = connectMessage4.hasUsername();
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) connectMessage4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MQIsdp" + "'", str6, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test14927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14927");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("hi!");
        org.meqantt.MqttListener mqttListener2 = null;
        nettyClient1.setListener(mqttListener2);
        org.meqantt.MqttListener mqttListener4 = null;
        nettyClient1.setListener(mqttListener4);
        org.meqantt.MqttListener mqttListener6 = null;
        nettyClient1.setListener(mqttListener6);
        nettyClient1.connect("", (int) (byte) 1);
        nettyClient1.subscribe("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        nettyClient1.subscribe("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n");
        nettyClient1.unsubscribe("\020\032\000\006MQIsdp\003&\000\001\000\000\000\000\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        nettyClient1.ping();
    }

    @Test
    public void test14928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14928");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\000\006\ufffd\ufffd\003hi!", true, (int) (byte) 100);
        int int4 = connectMessage3.getKeepAlive();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test14929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14929");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage(header1);
        int int5 = publishMessage4.getMessageId();
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14930");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        java.util.List<java.lang.String> strList7 = subscribeMessage6.getTopics();
        java.util.List<java.lang.String> strList8 = subscribeMessage6.getTopics();
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test14931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14931");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage7 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str8 = header1.toString();
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type5.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str8, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
    }

    @Test
    public void test14932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14932");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        java.lang.String str5 = header1.toString();
        java.lang.String str6 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage10 = new org.meqantt.message.PingReqMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage10.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str5, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14933");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage7 = new org.meqantt.message.UnsubscribeMessage(header1);
        unsubscribeMessage7.addTopic("00: 00110000 0 48\n01: 00010010 \022 18\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000000 \000 0\n11: 00001000 \b 8\n12: 11000000 \300 192\n13: 10000000 \200 128\n14: 01100100 d 100\n15: 11000000 \300 192\n16: 10000000 \200 128\n17: 00000001 \001 1\n18: 00000001 \001 1\n19: 01100100 d 100\n");
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage7.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14934");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        java.util.List<java.lang.String> strList2 = unsubscribeMessage1.getTopics();
        boolean boolean3 = unsubscribeMessage1.isDup();
        java.util.List<java.lang.String> strList4 = unsubscribeMessage1.getTopics();
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test14935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14935");
        java.io.OutputStream outputStream0 = null;
        org.meqantt.message.MessageOutputStream messageOutputStream1 = new org.meqantt.message.MessageOutputStream(outputStream0);
        org.meqantt.message.Message.Header header3 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type4 = header3.getType();
        org.meqantt.message.Message.Type type5 = header3.getType();
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header3);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header3);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header3);
        org.meqantt.message.DisconnectMessage disconnectMessage9 = new org.meqantt.message.DisconnectMessage(header3);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header3);
        org.meqantt.message.PubAckMessage pubAckMessage11 = new org.meqantt.message.PubAckMessage(header3);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage12 = new org.meqantt.message.UnsubscribeMessage(header3);
        java.util.List<java.lang.String> strList13 = unsubscribeMessage12.getTopics();
        unsubscribeMessage12.setDup(false);
        unsubscribeMessage12.addTopic("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        unsubscribeMessage12.setDup(false);
        // The following exception was thrown during execution in test generation
        try {
            messageOutputStream1.writeMessage((org.meqantt.message.Message) unsubscribeMessage12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test14936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14936");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        java.lang.String str5 = connectMessage3.getWill();
        java.lang.String str6 = connectMessage3.getWill();
        java.lang.String str7 = connectMessage3.getClientId();
        connectMessage3.setWill("00: 00110000 0 48\n01: 00000111 \007 7\n02: 00000000 \000 0\n03: 00000011 \003 3\n04: 01101000 h 104\n05: 01101001 i 105\n06: 00100001 ! 33\n07: 00000000 \000 0\n08: 00000000 \000 0\n", "00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test14937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14937");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.UnsubAckMessage unsubAckMessage2 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage3 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage7 = new org.meqantt.message.UnsubAckMessage(header1);
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type5.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test14938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14938");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        connectMessage1.setWill("MQIsdp", "");
        java.lang.String str6 = connectMessage1.getClientId();
        boolean boolean7 = connectMessage1.isCleanSession();
        java.lang.String str8 = connectMessage1.getWill();
        // The following exception was thrown during execution in test generation
        try {
            org.meqantt.message.Message.Type type9 = connectMessage1.getType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test14939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14939");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.unsubscribe("\000\003hi!");
        nettyClient1.subscribe("");
        nettyClient1.connect("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", (int) (short) 100);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.unsubscribe("hi!");
        nettyClient1.subscribe("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
    }

    @Test
    public void test14940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14940");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage2 = new org.meqantt.message.UnsubscribeMessage("\000\000");
        byte[] byteArray3 = unsubscribeMessage2.toBytes();
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage("hi!", byteArray3);
        java.lang.String str5 = publishMessage4.getDataAsString();
        java.lang.String str6 = publishMessage4.getDataAsString();
        byte[] byteArray7 = publishMessage4.getData();
        java.lang.String str8 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray7);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-94, 8, 0, 0, 0, 4, -64, -128, -64, -128]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd" + "'", str5, "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd" + "'", str6, "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-94, 8, 0, 0, 0, 4, -64, -128, -64, -128]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n" + "'", str8, "00: 10100010 \242 162\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000100 \004 4\n06: 11000000 \300 192\n07: 10000000 \200 128\n08: 11000000 \300 192\n09: 10000000 \200 128\n");
    }

    @Test
    public void test14941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14941");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.Message.Type type4 = header1.getType();
        org.meqantt.message.PubAckMessage pubAckMessage5 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage6 = new org.meqantt.message.PubAckMessage(header1);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type4.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test14942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14942");
        org.meqantt.message.PublishMessage publishMessage2 = new org.meqantt.message.PublishMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", "p\002\000\n");
        byte[] byteArray3 = publishMessage2.getData();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 5, 112, 2, -64, -128, 10]");
    }

    @Test
    public void test14943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14943");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage4 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage6 = new org.meqantt.message.PubRelMessage(header1);
        java.lang.String str7 = header1.toString();
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage8.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str7, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14944");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubRelMessage pubRelMessage2 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage3 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.QoS qoS7 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage8 = new org.meqantt.message.SubscribeMessage("", qoS7);
        int int9 = subscribeMessage8.getMessageId();
        subscribeMessage8.setMessageId((int) (short) 10);
        org.meqantt.message.Message.Header header13 = null;
        org.meqantt.message.ConnectMessage connectMessage14 = new org.meqantt.message.ConnectMessage(header13);
        int int15 = connectMessage14.getKeepAlive();
        connectMessage14.setWill("MQIsdp", "");
        org.meqantt.message.QoS qoS19 = connectMessage14.getWillQoS();
        subscribeMessage8.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS19);
        org.meqantt.message.SubAckMessage subAckMessage22 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList23 = subAckMessage22.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList24 = subAckMessage22.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage28 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str29 = connectMessage28.getProtocolId();
        org.meqantt.message.QoS qoS30 = connectMessage28.getQos();
        subAckMessage22.addQoS(qoS30);
        org.meqantt.message.ConnectMessage connectMessage35 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean36 = connectMessage35.hasWill();
        java.lang.String str37 = connectMessage35.getWill();
        org.meqantt.message.Message.Header header40 = null;
        org.meqantt.message.ConnectMessage connectMessage41 = new org.meqantt.message.ConnectMessage(header40);
        boolean boolean42 = connectMessage41.isWillRetained();
        boolean boolean43 = connectMessage41.isWillRetained();
        java.lang.String str44 = connectMessage41.getUsername();
        org.meqantt.message.QoS qoS48 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage("", qoS48);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList52 = subscribeMessage51.getTopics();
        org.meqantt.message.QoS qoS53 = subscribeMessage51.getQos();
        subscribeMessage49.addTopic("", qoS53);
        connectMessage41.setWill("hi!", "", qoS53, false);
        connectMessage35.setWill("MQIsdp", "hi!", qoS53, false);
        org.meqantt.message.SubAckMessage subAckMessage61 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList62 = subAckMessage61.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList63 = subAckMessage61.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList64 = subAckMessage61.getGrantedQoSs();
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList67 = subscribeMessage66.getTopics();
        org.meqantt.message.QoS qoS68 = subscribeMessage66.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage69 = new org.meqantt.message.SubscribeMessage("", qoS68);
        subAckMessage61.addQoS(qoS68);
        connectMessage35.setWill("hi!", "MQIsdp", qoS68, true);
        subAckMessage22.addQoS(qoS68);
        org.meqantt.message.SubAckMessage subAckMessage74 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList75 = subAckMessage74.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList76 = subAckMessage74.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage80 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str81 = connectMessage80.getProtocolId();
        org.meqantt.message.QoS qoS82 = connectMessage80.getQos();
        subAckMessage74.addQoS(qoS82);
        subAckMessage22.addQoS(qoS82);
        subscribeMessage8.addTopic("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", qoS82);
        org.meqantt.message.SubscribeMessage subscribeMessage88 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList89 = subscribeMessage88.getTopics();
        org.meqantt.message.QoS qoS90 = subscribeMessage88.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage91 = new org.meqantt.message.SubscribeMessage("", qoS90);
        org.meqantt.message.SubscribeMessage subscribeMessage92 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS90);
        org.meqantt.message.QoS qoS93 = subscribeMessage92.getQos();
        subscribeMessage8.setQos(qoS93);
        java.util.List<java.lang.String> strList95 = subscribeMessage8.getTopics();
        java.util.List<java.lang.String> strList96 = subscribeMessage8.getTopics();
        org.meqantt.message.QoS qoS97 = subscribeMessage8.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage98 = new org.meqantt.message.SubscribeMessage("00: 00110000 0 48\n01: 00010010 \022 18\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000000 \000 0\n11: 00001000 \b 8\n12: 11000000 \300 192\n13: 10000000 \200 128\n14: 01100100 d 100\n15: 11000000 \300 192\n16: 10000000 \200 128\n17: 00000001 \001 1\n18: 00000001 \001 1\n19: 01100100 d 100\n", qoS97);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage4.setQos(qoS97);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + qoS19 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS19.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList23);
        org.junit.Assert.assertNull(qoSList24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "MQIsdp" + "'", str29, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS30 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS30.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + qoS53 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS53.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList62);
        org.junit.Assert.assertNull(qoSList63);
        org.junit.Assert.assertNull(qoSList64);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + qoS68 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS68.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(qoSList75);
        org.junit.Assert.assertNull(qoSList76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "MQIsdp" + "'", str81, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS82 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS82.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + qoS90 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS90.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS93 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS93.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertTrue("'" + qoS97 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS97.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14945");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\ufffd\ufffd");
        unsubscribeMessage1.setMessageId(97);
    }

    @Test
    public void test14946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14946");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.lang.String str6 = header1.toString();
        java.lang.String str7 = header1.toString();
        org.meqantt.message.PubRecMessage pubRecMessage8 = new org.meqantt.message.PubRecMessage(header1);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str7, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14947");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getProtocolId();
        byte[] byteArray5 = connectMessage3.toBytes();
        org.meqantt.message.QoS qoS6 = connectMessage3.getQos();
        boolean boolean7 = connectMessage3.isRetained();
        boolean boolean8 = connectMessage3.hasUsername();
        boolean boolean9 = connectMessage3.hasWill();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14948");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        int int2 = connectMessage1.getKeepAlive();
        connectMessage1.setWill("MQIsdp", "");
        org.meqantt.message.QoS qoS6 = connectMessage1.getWillQoS();
        byte byte7 = connectMessage1.getProtocolVersion();
        java.lang.String str8 = connectMessage1.getClientId();
        boolean boolean9 = connectMessage1.hasWill();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + qoS6 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS6.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 3 + "'", byte7 == (byte) 3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test14949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14949");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", (int) (short) 0);
        org.meqantt.MqttListener mqttListener12 = null;
        nettyClient1.setListener(mqttListener12);
        org.meqantt.MqttListener mqttListener14 = null;
        nettyClient1.setListener(mqttListener14);
        nettyClient1.publish("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd");
        nettyClient1.disconnect();
        nettyClient1.subscribe("00: 01110000 p 112\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 00001010 \n 10\n");
        nettyClient1.subscribe("\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
    }

    @Test
    public void test14950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14950");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage3 = new org.meqantt.message.SubAckMessage(header1);
        java.lang.String str4 = header1.toString();
        org.meqantt.message.PubCompMessage pubCompMessage5 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.Message.Type type8 = header1.getType();
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type2.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]" + "'", str4, "Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type8.equals(org.meqantt.message.Message.Type.PUBREL));
    }

    @Test
    public void test14951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14951");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        byte byte27 = connectMessage3.getProtocolVersion();
        org.meqantt.message.ConnectMessage connectMessage34 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean35 = connectMessage34.hasWill();
        java.lang.String str36 = connectMessage34.getWill();
        org.meqantt.message.Message.Header header39 = null;
        org.meqantt.message.ConnectMessage connectMessage40 = new org.meqantt.message.ConnectMessage(header39);
        boolean boolean41 = connectMessage40.isWillRetained();
        boolean boolean42 = connectMessage40.isWillRetained();
        java.lang.String str43 = connectMessage40.getUsername();
        org.meqantt.message.QoS qoS47 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage48 = new org.meqantt.message.SubscribeMessage("", qoS47);
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList51 = subscribeMessage50.getTopics();
        org.meqantt.message.QoS qoS52 = subscribeMessage50.getQos();
        subscribeMessage48.addTopic("", qoS52);
        connectMessage40.setWill("hi!", "", qoS52, false);
        connectMessage34.setWill("MQIsdp", "hi!", qoS52, false);
        org.meqantt.message.SubscribeMessage subscribeMessage58 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS52);
        connectMessage3.setWill("", "MQIsdp", qoS52, false);
        byte byte61 = connectMessage3.getProtocolVersion();
        java.lang.String str62 = connectMessage3.getWillTopic();
        org.meqantt.message.Message.Header header64 = new org.meqantt.message.Message.Header((byte) 10);
        org.meqantt.message.Message.Type type65 = header64.getType();
        org.meqantt.message.SubAckMessage subAckMessage66 = new org.meqantt.message.SubAckMessage(header64);
        org.meqantt.message.PublishMessage publishMessage69 = new org.meqantt.message.PublishMessage("MQIsdp", "\000d\000\001\001d");
        java.lang.String str70 = publishMessage69.getDataAsString();
        byte[] byteArray71 = publishMessage69.getData();
        org.meqantt.message.QoS qoS72 = publishMessage69.getQos();
        subAckMessage66.addQoS(qoS72);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setQos(qoS72);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 3 + "'", byte27 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte61 + "' != '" + (byte) 3 + "'", byte61 == (byte) 3);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(type65);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d" + "'", str70, "\000\b\ufffd\ufffd\ufffd\ufffd\001\001d");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + qoS72 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS72.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14952");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.subscribe("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.meqantt.MqttListener mqttListener9 = null;
        nettyClient1.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.disconnect();
        nettyClient1.ping();
        nettyClient1.subscribe("\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd");
        nettyClient1.publish("\000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\ufffd\ufffd", "\000\ufffd\ufffd\ufffd 162\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 00000100 \004 4\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n\ufffd\ufffd 192\n\ufffd\ufffd 128\n");
    }

    @Test
    public void test14953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14953");
        org.meqantt.message.Message.Header header1 = null;
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        int int3 = connectMessage2.getKeepAlive();
        connectMessage2.setWill("MQIsdp", "");
        java.lang.String str7 = connectMessage2.getWillTopic();
        org.meqantt.message.ConnectMessage connectMessage17 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str18 = connectMessage17.getUsername();
        org.meqantt.message.QoS qoS22 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("", qoS22);
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList26 = subscribeMessage25.getTopics();
        org.meqantt.message.QoS qoS27 = subscribeMessage25.getQos();
        subscribeMessage23.addTopic("", qoS27);
        connectMessage17.setWill("", "\000d\000\001\001d", qoS27, true);
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage("hi!", qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("", qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage34 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage36 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList37 = subscribeMessage36.getTopics();
        org.meqantt.message.ConnectMessage connectMessage42 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str43 = connectMessage42.getProtocolId();
        org.meqantt.message.QoS qoS44 = connectMessage42.getQos();
        subscribeMessage36.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS44);
        subscribeMessage34.addTopic("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS44);
        org.meqantt.message.ConnectMessage connectMessage51 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str52 = connectMessage51.getProtocolId();
        org.meqantt.message.QoS qoS53 = connectMessage51.getQos();
        subscribeMessage34.addTopic("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", qoS53);
        connectMessage2.setWill("00: 10010000 \220 144\n01: 00000011 \003 3\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n", "\ufffd\b\000\000\000\004\ufffd\ufffd\ufffd\ufffd", qoS53, false);
        boolean boolean57 = connectMessage2.isWillRetained();
        org.meqantt.message.QoS qoS58 = connectMessage2.getWillQoS();
        java.lang.String str59 = connectMessage2.getUsername();
        org.meqantt.message.QoS qoS60 = connectMessage2.getWillQoS();
        org.meqantt.message.SubscribeMessage subscribeMessage61 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 00000000 \000 0\n", qoS60);
        java.util.List<org.meqantt.message.QoS> qoSList62 = subscribeMessage61.getTopicQoSs();
        boolean boolean63 = subscribeMessage61.isRetained();
        java.util.List<org.meqantt.message.QoS> qoSList64 = subscribeMessage61.getTopicQoSs();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "MQIsdp" + "'", str43, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS44 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS44.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "MQIsdp" + "'", str52, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS53 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS53.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + qoS58 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS58.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + qoS60 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS60.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(qoSList64);
    }

    @Test
    public void test14954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14954");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        org.meqantt.message.QoS qoS5 = connectMessage3.getWillQoS();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(qoS5);
    }

    @Test
    public void test14955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14955");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.subscribe("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n");
        org.meqantt.MqttListener mqttListener11 = null;
        nettyClient1.setListener(mqttListener11);
        nettyClient1.unsubscribe("\000\003hi!");
        nettyClient1.subscribe("");
        nettyClient1.subscribe("");
        nettyClient1.connect("\000\000", (int) (byte) 0);
        nettyClient1.unsubscribe("00: 01100000 ` 96\n01: 00000010 \002 2\n02: 00000000 \000 0\n03: 01100100 d 100\n");
        nettyClient1.unsubscribe("\000d\000\001\001d");
        nettyClient1.connect("00: 00000000 \000 0\n01: 00000100 \004 4\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 11000000 \300 192\n05: 10000000 \200 128\n", (int) '4');
    }

    @Test
    public void test14956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14956");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage4 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage5 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage6 = new org.meqantt.message.PubCompMessage(header1);
        boolean boolean7 = pubCompMessage6.isDup();
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage6.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test14957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14957");
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus0 = org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED;
        org.meqantt.message.ConnAckMessage connAckMessage1 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage2 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(connectionStatus0);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus4 = connAckMessage3.getStatus();
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage6 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(connectionStatus4);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus8 = connAckMessage7.getStatus();
        org.meqantt.message.ConnAckMessage connAckMessage9 = new org.meqantt.message.ConnAckMessage(connectionStatus8);
        org.meqantt.message.Message.Header header11 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type12 = header11.getType();
        org.meqantt.message.Message.Type type13 = header11.getType();
        org.meqantt.message.SubAckMessage subAckMessage14 = new org.meqantt.message.SubAckMessage(header11);
        org.meqantt.message.PingReqMessage pingReqMessage15 = new org.meqantt.message.PingReqMessage(header11);
        org.meqantt.message.PingReqMessage pingReqMessage16 = new org.meqantt.message.PingReqMessage(header11);
        org.meqantt.message.DisconnectMessage disconnectMessage17 = new org.meqantt.message.DisconnectMessage(header11);
        org.meqantt.message.SubAckMessage subAckMessage18 = new org.meqantt.message.SubAckMessage(header11);
        java.util.List<org.meqantt.message.QoS> qoSList19 = subAckMessage18.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList20 = subAckMessage18.getGrantedQoSs();
        org.meqantt.message.Message.Header header21 = null;
        org.meqantt.message.ConnectMessage connectMessage22 = new org.meqantt.message.ConnectMessage(header21);
        boolean boolean23 = connectMessage22.isWillRetained();
        boolean boolean24 = connectMessage22.isWillRetained();
        connectMessage22.setWill("", "MQIsdp");
        boolean boolean28 = connectMessage22.isWillRetained();
        java.lang.String str29 = connectMessage22.getClientId();
        java.lang.String str30 = connectMessage22.getWill();
        java.lang.String str31 = connectMessage22.getUsername();
        boolean boolean32 = connectMessage22.isCleanSession();
        org.meqantt.message.QoS qoS33 = connectMessage22.getWillQoS();
        subAckMessage18.addQoS(qoS33);
        org.meqantt.message.ConnectMessage connectMessage38 = new org.meqantt.message.ConnectMessage("\000\000", false, (int) (short) -1);
        org.meqantt.message.ConnectMessage connectMessage49 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str50 = connectMessage49.getUsername();
        org.meqantt.message.QoS qoS54 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage55 = new org.meqantt.message.SubscribeMessage("", qoS54);
        org.meqantt.message.SubscribeMessage subscribeMessage57 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList58 = subscribeMessage57.getTopics();
        org.meqantt.message.QoS qoS59 = subscribeMessage57.getQos();
        subscribeMessage55.addTopic("", qoS59);
        connectMessage49.setWill("", "\000d\000\001\001d", qoS59, true);
        org.meqantt.message.SubscribeMessage subscribeMessage63 = new org.meqantt.message.SubscribeMessage("hi!", qoS59);
        org.meqantt.message.SubscribeMessage subscribeMessage64 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS59);
        org.meqantt.message.SubscribeMessage subscribeMessage65 = new org.meqantt.message.SubscribeMessage("", qoS59);
        org.meqantt.message.SubscribeMessage subscribeMessage66 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS59);
        org.meqantt.message.SubscribeMessage subscribeMessage67 = new org.meqantt.message.SubscribeMessage("00: 00000000 \000 0\n01: 01100100 d 100\n02: 00000000 \000 0\n03: 00000001 \001 1\n04: 00000001 \001 1\n05: 01100100 d 100\n", qoS59);
        connectMessage38.setWill("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS59, false);
        subAckMessage18.addQoS(qoS59);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage9.setQos(qoS59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + connectionStatus0 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus0.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus4 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus4.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertTrue("'" + connectionStatus8 + "' != '" + org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED + "'", connectionStatus8.equals(org.meqantt.message.ConnAckMessage.ConnectionStatus.IDENTIFIER_REJECTED));
        org.junit.Assert.assertNull(type12);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(qoSList19);
        org.junit.Assert.assertNull(qoSList20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "MQIsdp" + "'", str30, "MQIsdp");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + qoS33 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS33.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + qoS59 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS59.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14958");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage8 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
    }

    @Test
    public void test14959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14959");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage5 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage6 = new org.meqantt.message.UnsubscribeMessage(header1);
        java.util.List<java.lang.String> strList7 = unsubscribeMessage6.getTopics();
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage6.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test14960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14960");
        org.meqantt.message.SubscribeMessage subscribeMessage0 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList1 = subscribeMessage0.getTopics();
        org.meqantt.message.QoS qoS2 = subscribeMessage0.getQos();
        org.meqantt.message.QoS qoS4 = null;
        subscribeMessage0.addTopic("", qoS4);
        java.util.List<org.meqantt.message.QoS> qoSList6 = subscribeMessage0.getTopicQoSs();
        subscribeMessage0.setDup(false);
        java.util.List<org.meqantt.message.QoS> qoSList9 = subscribeMessage0.getTopicQoSs();
        org.meqantt.message.ConnectMessage connectMessage17 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str18 = connectMessage17.getUsername();
        org.meqantt.message.QoS qoS22 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage23 = new org.meqantt.message.SubscribeMessage("", qoS22);
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList26 = subscribeMessage25.getTopics();
        org.meqantt.message.QoS qoS27 = subscribeMessage25.getQos();
        subscribeMessage23.addTopic("", qoS27);
        connectMessage17.setWill("", "\000d\000\001\001d", qoS27, true);
        org.meqantt.message.SubscribeMessage subscribeMessage31 = new org.meqantt.message.SubscribeMessage("hi!", qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS27);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("", qoS27);
        subscribeMessage0.addTopic("00: 00110000 0 48\n01: 00001000 \b 8\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 01100100 d 100\n06: 00000000 \000 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS27);
        subscribeMessage0.setMessageId((int) (byte) -1);
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + qoS2 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS2.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(qoSList6);
        org.junit.Assert.assertNotNull(qoSList9);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + qoS27 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS27.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14961");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingRespMessage pingRespMessage2 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage3 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage4 = new org.meqantt.message.PingRespMessage(header1);
    }

    @Test
    public void test14962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14962");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        org.meqantt.message.Message.Header header8 = null;
        org.meqantt.message.ConnectMessage connectMessage9 = new org.meqantt.message.ConnectMessage(header8);
        boolean boolean10 = connectMessage9.isWillRetained();
        boolean boolean11 = connectMessage9.isWillRetained();
        java.lang.String str12 = connectMessage9.getUsername();
        org.meqantt.message.QoS qoS16 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("", qoS16);
        org.meqantt.message.SubscribeMessage subscribeMessage19 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList20 = subscribeMessage19.getTopics();
        org.meqantt.message.QoS qoS21 = subscribeMessage19.getQos();
        subscribeMessage17.addTopic("", qoS21);
        connectMessage9.setWill("hi!", "", qoS21, false);
        connectMessage3.setWill("MQIsdp", "hi!", qoS21, false);
        byte byte27 = connectMessage3.getProtocolVersion();
        org.meqantt.message.QoS qoS28 = connectMessage3.getWillQoS();
        boolean boolean29 = connectMessage3.isCleanSession();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + qoS21 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS21.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 3 + "'", byte27 == (byte) 3);
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test14963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14963");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage4 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage5 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PublishMessage publishMessage8 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage9 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage10 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage10.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14964");
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage("", "hi!");
        java.lang.String str4 = publishMessage3.getDataAsString();
        byte[] byteArray5 = publishMessage3.getData();
        java.lang.String str6 = org.meqantt.util.FormatUtil.toString(byteArray5);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", byteArray5);
        java.lang.String str8 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray5);
        java.lang.String str9 = org.meqantt.util.FormatUtil.toString(byteArray5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\000\003hi!" + "'", str4, "\000\003hi!");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 3, 104, 105, 33]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00: 00000000 \000 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n" + "'", str8, "00: 00000000 \000 0\n01: 00000011 \003 3\n02: 01101000 h 104\n03: 01101001 i 105\n04: 00100001 ! 33\n");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test14965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14965");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus4 = connAckMessage3.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus5 = connAckMessage3.getStatus();
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus6 = connAckMessage3.getStatus();
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage3.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(connectionStatus4);
        org.junit.Assert.assertNull(connectionStatus5);
        org.junit.Assert.assertNull(connectionStatus6);
    }

    @Test
    public void test14966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14966");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getUsername();
        org.meqantt.message.QoS qoS8 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage9 = new org.meqantt.message.SubscribeMessage("", qoS8);
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList12 = subscribeMessage11.getTopics();
        org.meqantt.message.QoS qoS13 = subscribeMessage11.getQos();
        subscribeMessage9.addTopic("", qoS13);
        connectMessage3.setWill("", "\000d\000\001\001d", qoS13, true);
        boolean boolean17 = connectMessage3.isCleanSession();
        java.lang.String str18 = connectMessage3.getClientId();
        java.lang.String str19 = connectMessage3.getPassword();
        java.lang.String str20 = connectMessage3.getWill();
        byte[] byteArray21 = connectMessage3.toBytes();
        java.lang.String str22 = org.meqantt.util.FormatUtil.toString(byteArray21);
        java.lang.String str23 = org.meqantt.util.FormatUtil.toString(byteArray21);
        java.lang.String str24 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray21);
        java.lang.String str25 = org.meqantt.util.FormatUtil.toString(byteArray21);
        java.lang.String str26 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray21);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + qoS13 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS13.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\000d\000\001\001d" + "'", str20, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n" + "'", str24, "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n" + "'", str26, "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
    }

    @Test
    public void test14967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14967");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("\ufffd\ufffd\001\000\000\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n\000");
        int int2 = unsubscribeMessage1.getMessageId();
        java.util.List<java.lang.String> strList3 = unsubscribeMessage1.getTopics();
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList7 = subAckMessage6.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList8 = subAckMessage6.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage12 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str13 = connectMessage12.getProtocolId();
        org.meqantt.message.QoS qoS14 = connectMessage12.getQos();
        subAckMessage6.addQoS(qoS14);
        org.meqantt.message.SubscribeMessage subscribeMessage16 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList17 = subscribeMessage16.getTopics();
        org.meqantt.message.QoS qoS18 = subscribeMessage16.getQos();
        subAckMessage6.addQoS(qoS18);
        org.meqantt.message.Message.Header header20 = null;
        org.meqantt.message.ConnectMessage connectMessage21 = new org.meqantt.message.ConnectMessage(header20);
        int int22 = connectMessage21.getKeepAlive();
        boolean boolean23 = connectMessage21.isCleanSession();
        org.meqantt.message.PubRelMessage pubRelMessage27 = new org.meqantt.message.PubRelMessage((int) ' ');
        org.meqantt.message.QoS qoS28 = pubRelMessage27.getQos();
        connectMessage21.setWill("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]", "MQIsdp", qoS28, true);
        subAckMessage6.addQoS(qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage32 = new org.meqantt.message.SubscribeMessage("\001\003\003\001", qoS28);
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", qoS28);
        org.meqantt.message.PublishMessage publishMessage37 = new org.meqantt.message.PublishMessage("MQIsdp", "");
        org.meqantt.message.QoS qoS38 = publishMessage37.getQos();
        subscribeMessage33.addTopic("\000\000", qoS38);
        org.meqantt.message.QoS qoS40 = subscribeMessage33.getQos();
        unsubscribeMessage1.setQos(qoS40);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(qoSList7);
        org.junit.Assert.assertNull(qoSList8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MQIsdp" + "'", str13, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS14 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS14.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + qoS18 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS18.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + qoS28 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS28.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS38 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS38.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS40 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS40.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14968");
        org.meqantt.message.ConnectMessage connectMessage0 = new org.meqantt.message.ConnectMessage();
        java.lang.String str1 = connectMessage0.getUsername();
        boolean boolean2 = connectMessage0.hasWill();
        java.lang.String str3 = connectMessage0.getWillTopic();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage0.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test14969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14969");
        org.meqantt.message.ConnectMessage connectMessage0 = new org.meqantt.message.ConnectMessage();
        java.lang.String str1 = connectMessage0.getProtocolId();
        java.lang.String str2 = connectMessage0.getClientId();
        boolean boolean3 = connectMessage0.isCleanSession();
        java.lang.String str4 = connectMessage0.getProtocolId();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "MQIsdp" + "'", str1, "MQIsdp");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
    }

    @Test
    public void test14970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14970");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage9 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus10 = connAckMessage9.getStatus();
        org.meqantt.message.Message.Header header12 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type13 = header12.getType();
        org.meqantt.message.Message.Type type14 = header12.getType();
        org.meqantt.message.SubAckMessage subAckMessage15 = new org.meqantt.message.SubAckMessage(header12);
        org.meqantt.message.PingReqMessage pingReqMessage16 = new org.meqantt.message.PingReqMessage(header12);
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage(header12);
        java.util.List<java.lang.String> strList18 = subscribeMessage17.getTopics();
        int int19 = subscribeMessage17.getMessageId();
        subscribeMessage17.setDup(false);
        org.meqantt.message.Message.Type type22 = subscribeMessage17.getType();
        java.util.List<org.meqantt.message.QoS> qoSList23 = subscribeMessage17.getTopicQoSs();
        org.meqantt.message.QoS qoS26 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage("", qoS26);
        subscribeMessage27.setDup(false);
        org.meqantt.message.QoS qoS32 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage33 = new org.meqantt.message.SubscribeMessage("", qoS32);
        org.meqantt.message.SubscribeMessage subscribeMessage35 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList36 = subscribeMessage35.getTopics();
        org.meqantt.message.QoS qoS37 = subscribeMessage35.getQos();
        subscribeMessage33.addTopic("", qoS37);
        java.util.List<java.lang.String> strList39 = subscribeMessage33.getTopics();
        java.util.List<java.lang.String> strList40 = subscribeMessage33.getTopics();
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type43 = subscribeMessage42.getType();
        org.meqantt.message.QoS qoS46 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage47 = new org.meqantt.message.SubscribeMessage("", qoS46);
        org.meqantt.message.SubscribeMessage subscribeMessage49 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList50 = subscribeMessage49.getTopics();
        org.meqantt.message.QoS qoS51 = subscribeMessage49.getQos();
        subscribeMessage47.addTopic("", qoS51);
        subscribeMessage42.addTopic("MQIsdp", qoS51);
        subscribeMessage42.setDup(false);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage58 = new org.meqantt.message.UnsubscribeMessage("MQIsdp");
        org.meqantt.message.QoS qoS59 = unsubscribeMessage58.getQos();
        subscribeMessage42.addTopic("MQIsdp", qoS59);
        subscribeMessage33.addTopic("Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]", qoS59);
        subscribeMessage27.addTopic("00: 00000000 \000 0\n01: 00001000 \b 8\n02: 11000000 \300 192\n03: 10000000 \200 128\n04: 01100100 d 100\n05: 11000000 \300 192\n06: 10000000 \200 128\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", qoS59);
        subscribeMessage17.addTopic("00: 00110000 0 48\n01: 00010010 \022 18\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000000 \000 0\n11: 00001000 \b 8\n12: 11000000 \300 192\n13: 10000000 \200 128\n14: 01100100 d 100\n15: 11000000 \300 192\n16: 10000000 \200 128\n17: 00000001 \001 1\n18: 00000001 \001 1\n19: 01100100 d 100\n", qoS59);
        // The following exception was thrown during execution in test generation
        try {
            connAckMessage9.setQos(qoS59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNACK messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertNull(connectionStatus10);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(type14);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNotNull(qoSList23);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + qoS37 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS37.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type43.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + qoS51 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS51.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS59 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS59.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14971");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage(header1);
        publishMessage10.setDup(false);
        boolean boolean13 = publishMessage10.isRetained();
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test14972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14972");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        org.meqantt.message.QoS qoS4 = connectMessage3.getWillQoS();
        boolean boolean5 = connectMessage3.hasWill();
        connectMessage3.setWill("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        int int9 = connectMessage3.getKeepAlive();
        boolean boolean10 = connectMessage3.hasWill();
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(qoS4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test14973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14973");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        byte byte3 = connectMessage2.getProtocolVersion();
        java.lang.String str4 = connectMessage2.getProtocolId();
        boolean boolean5 = connectMessage2.hasWill();
        org.meqantt.message.SubAckMessage subAckMessage7 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList8 = subAckMessage7.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList9 = subAckMessage7.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage13 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str14 = connectMessage13.getProtocolId();
        org.meqantt.message.QoS qoS15 = connectMessage13.getQos();
        subAckMessage7.addQoS(qoS15);
        org.meqantt.message.SubscribeMessage subscribeMessage17 = new org.meqantt.message.SubscribeMessage("hi!", qoS15);
        subscribeMessage17.setDup(false);
        org.meqantt.message.SubscribeMessage subscribeMessage20 = new org.meqantt.message.SubscribeMessage();
        org.meqantt.message.Message.Type type21 = subscribeMessage20.getType();
        org.meqantt.message.QoS qoS24 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage25 = new org.meqantt.message.SubscribeMessage("", qoS24);
        org.meqantt.message.SubscribeMessage subscribeMessage27 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList28 = subscribeMessage27.getTopics();
        org.meqantt.message.QoS qoS29 = subscribeMessage27.getQos();
        subscribeMessage25.addTopic("", qoS29);
        subscribeMessage20.addTopic("MQIsdp", qoS29);
        org.meqantt.message.UnsubAckMessage unsubAckMessage33 = new org.meqantt.message.UnsubAckMessage();
        org.meqantt.message.QoS qoS34 = unsubAckMessage33.getQos();
        subscribeMessage20.addTopic("", qoS34);
        org.meqantt.message.SubscribeMessage subscribeMessage38 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList39 = subscribeMessage38.getTopics();
        org.meqantt.message.QoS qoS40 = subscribeMessage38.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage41 = new org.meqantt.message.SubscribeMessage("", qoS40);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS40);
        org.meqantt.message.QoS qoS43 = subscribeMessage42.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage47 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList48 = subscribeMessage47.getTopics();
        org.meqantt.message.QoS qoS49 = subscribeMessage47.getQos();
        org.meqantt.message.SubscribeMessage subscribeMessage50 = new org.meqantt.message.SubscribeMessage("", qoS49);
        org.meqantt.message.SubscribeMessage subscribeMessage51 = new org.meqantt.message.SubscribeMessage("\000d\000\001\001d", qoS49);
        org.meqantt.message.QoS qoS52 = subscribeMessage51.getQos();
        subscribeMessage42.addTopic("", qoS52);
        subscribeMessage20.setQos(qoS52);
        subscribeMessage17.setQos(qoS52);
        // The following exception was thrown during execution in test generation
        try {
            connectMessage2.setQos(qoS52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 3 + "'", byte3 == (byte) 3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(qoSList8);
        org.junit.Assert.assertNull(qoSList9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MQIsdp" + "'", str14, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.meqantt.message.Message.Type.SUBSCRIBE + "'", type21.equals(org.meqantt.message.Message.Type.SUBSCRIBE));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + qoS29 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS29.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS34 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS34.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + qoS40 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS40.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS43 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS43.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + qoS49 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS49.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS52 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS52.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
    }

    @Test
    public void test14974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14974");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage3 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage4 = new org.meqantt.message.SubscribeMessage(header1);
    }

    @Test
    public void test14975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14975");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage4 = new org.meqantt.message.UnsubscribeMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage6 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage7 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage9 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage10 = new org.meqantt.message.UnsubscribeMessage(header1);
        int int11 = unsubscribeMessage10.getMessageId();
        unsubscribeMessage10.setDup(false);
        // The following exception was thrown during execution in test generation
        try {
            unsubscribeMessage10.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SUBSCRIBE messages don't use the RETAIN flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14976");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage3 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage5 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage7 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage8 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.SubAckMessage subAckMessage9 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage10 = new org.meqantt.message.PubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubAckMessage10.setDup(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubAck messages don't use the DUP flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14977");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("MQIsdp", (int) (byte) 0);
        nettyClient1.subscribe("");
        nettyClient1.publish("Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]", "00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n");
        nettyClient1.unsubscribe("00: 00000000 \000 0\n01: 00000000 \000 0\n");
        nettyClient1.unsubscribe("00: 00000000 \000 0\n01: 00000000 \000 0\n");
        nettyClient1.connect("00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", 32);
        nettyClient1.connect("\000\023\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\001\001d", (int) (short) 0);
        nettyClient1.connect("\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", 2);
    }

    @Test
    public void test14978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14978");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        boolean boolean8 = connectMessage1.hasPassword();
        java.lang.String str9 = connectMessage1.getClientId();
        connectMessage1.setCredentials("\000d\000\001\001d");
        boolean boolean12 = connectMessage1.hasPassword();
        java.lang.String str13 = connectMessage1.getWill();
        connectMessage1.setCredentials("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        java.lang.String str16 = connectMessage1.getPassword();
        java.lang.String str17 = connectMessage1.getProtocolId();
        connectMessage1.setCredentials("00: 00110000 0 48\n01: 00000111 \007 7\n02: 00000000 \000 0\n03: 00000011 \003 3\n04: 01101000 h 104\n05: 01101001 i 105\n06: 00100001 ! 33\n07: 00000000 \000 0\n08: 00000000 \000 0\n");
        connectMessage1.setCredentials("00: 11111111 \377 255\n01: 01100100 d 100\n02: 00000001 \001 1\n", "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MQIsdp" + "'", str13, "MQIsdp");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MQIsdp" + "'", str17, "MQIsdp");
    }

    @Test
    public void test14979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14979");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage4 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.UnsubAckMessage unsubAckMessage6 = new org.meqantt.message.UnsubAckMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            unsubAckMessage6.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: UnsubAck messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test14980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14980");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type11 = header1.getType();
        java.lang.String str12 = header1.toString();
        java.lang.String str13 = header1.toString();
        org.meqantt.message.PingRespMessage pingRespMessage14 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage15 = new org.meqantt.message.DisconnectMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            disconnectMessage15.setDup(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DISCONNECT message does not support the DUP flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str12, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str13, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14981");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage6 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        java.lang.String str8 = header1.toString();
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14982");
        org.meqantt.message.ConnectMessage connectMessage5 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str6 = connectMessage5.getUsername();
        org.meqantt.message.QoS qoS10 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage11 = new org.meqantt.message.SubscribeMessage("", qoS10);
        org.meqantt.message.SubscribeMessage subscribeMessage13 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList14 = subscribeMessage13.getTopics();
        org.meqantt.message.QoS qoS15 = subscribeMessage13.getQos();
        subscribeMessage11.addTopic("", qoS15);
        connectMessage5.setWill("", "\000d\000\001\001d", qoS15, true);
        boolean boolean19 = connectMessage5.isCleanSession();
        java.lang.String str20 = connectMessage5.getClientId();
        java.lang.String str21 = connectMessage5.getPassword();
        java.lang.String str22 = connectMessage5.getWill();
        byte[] byteArray23 = connectMessage5.toBytes();
        java.lang.String str24 = org.meqantt.util.FormatUtil.toString(byteArray23);
        java.lang.String str25 = org.meqantt.util.FormatUtil.dumpByteArray(byteArray23);
        org.meqantt.message.PublishMessage publishMessage26 = new org.meqantt.message.PublishMessage("Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", byteArray23);
        byte[] byteArray27 = publishMessage26.getData();
        byte[] byteArray28 = publishMessage26.getData();
        org.meqantt.message.PublishMessage publishMessage29 = new org.meqantt.message.PublishMessage("", byteArray28);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + qoS15 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS15.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\000d\000\001\001d" + "'", str22, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n" + "'", str25, "00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
    }

    @Test
    public void test14983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14983");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.ConnectMessage connectMessage2 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage3 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage4 = new org.meqantt.message.ConnectMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test14984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14984");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        connectMessage1.setWill("", "MQIsdp");
        boolean boolean7 = connectMessage1.isWillRetained();
        java.lang.String str8 = connectMessage1.getClientId();
        int int9 = connectMessage1.getKeepAlive();
        int int10 = connectMessage1.getKeepAlive();
        boolean boolean11 = connectMessage1.hasPassword();
        java.lang.String str12 = connectMessage1.getProtocolId();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MQIsdp" + "'", str12, "MQIsdp");
    }

    @Test
    public void test14985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14985");
        org.meqantt.message.SubAckMessage subAckMessage1 = new org.meqantt.message.SubAckMessage();
        java.util.List<org.meqantt.message.QoS> qoSList2 = subAckMessage1.getGrantedQoSs();
        java.util.List<org.meqantt.message.QoS> qoSList3 = subAckMessage1.getGrantedQoSs();
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str8 = connectMessage7.getProtocolId();
        org.meqantt.message.QoS qoS9 = connectMessage7.getQos();
        subAckMessage1.addQoS(qoS9);
        byte[] byteArray11 = subAckMessage1.toBytes();
        org.meqantt.message.ConnectMessage connectMessage16 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str17 = connectMessage16.getUsername();
        org.meqantt.message.QoS qoS21 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage22 = new org.meqantt.message.SubscribeMessage("", qoS21);
        org.meqantt.message.SubscribeMessage subscribeMessage24 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList25 = subscribeMessage24.getTopics();
        org.meqantt.message.QoS qoS26 = subscribeMessage24.getQos();
        subscribeMessage22.addTopic("", qoS26);
        connectMessage16.setWill("", "\000d\000\001\001d", qoS26, true);
        boolean boolean30 = connectMessage16.isCleanSession();
        java.lang.String str31 = connectMessage16.getClientId();
        java.lang.String str32 = connectMessage16.getPassword();
        java.lang.String str33 = connectMessage16.getWill();
        byte[] byteArray34 = connectMessage16.toBytes();
        org.meqantt.message.PublishMessage publishMessage35 = new org.meqantt.message.PublishMessage("\000\003hi!", byteArray34);
        org.meqantt.message.QoS qoS36 = publishMessage35.getQos();
        subAckMessage1.addQoS(qoS36);
        org.meqantt.message.QoS qoS39 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("", qoS39);
        subscribeMessage40.setDup(false);
        org.meqantt.message.QoS qoS43 = subscribeMessage40.getQos();
        subAckMessage1.addQoS(qoS43);
        org.meqantt.message.SubscribeMessage subscribeMessage45 = new org.meqantt.message.SubscribeMessage("MQIsdp", qoS43);
        java.lang.Class<?> wildcardClass46 = qoS43.getClass();
        org.junit.Assert.assertNull(qoSList2);
        org.junit.Assert.assertNull(qoSList3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MQIsdp" + "'", str8, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS9 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS9.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-112, 3, 0, 0, 0]");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + qoS26 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS26.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\000d\000\001\001d" + "'", str33, "\000d\000\001\001d");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[16, 26, 0, 6, 77, 81, 73, 115, 100, 112, 3, 38, 0, 1, 0, 0, 0, 0, 0, 8, -64, -128, 100, -64, -128, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + qoS36 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS36.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + qoS43 + "' != '" + org.meqantt.message.QoS.AT_LEAST_ONCE + "'", qoS43.equals(org.meqantt.message.QoS.AT_LEAST_ONCE));
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test14986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14986");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage3 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage4 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PubRecMessage pubRecMessage5 = new org.meqantt.message.PubRecMessage(header1);
        java.lang.String str6 = header1.toString();
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage8 = new org.meqantt.message.PubRelMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubRelMessage8.setRetained(false);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubRel messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]" + "'", str6, "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14987");
        byte[] byteArray2 = org.meqantt.util.FormatUtil.toMQttString("");
        java.lang.String str3 = org.meqantt.util.FormatUtil.toString(byteArray2);
        org.meqantt.message.PublishMessage publishMessage4 = new org.meqantt.message.PublishMessage("hi!", byteArray2);
        publishMessage4.setMessageId((int) '\001');
        publishMessage4.setRetained(true);
        java.lang.String str9 = publishMessage4.getTopic();
        byte[] byteArray10 = publishMessage4.getData();
        java.lang.String str11 = publishMessage4.getDataAsString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\000\000" + "'", str11, "\000\000");
    }

    @Test
    public void test14988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14988");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.PingReqMessage pingReqMessage2 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage3 = new org.meqantt.message.PingReqMessage(header1);
        java.lang.String str4 = header1.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str4, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14989");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PublishMessage publishMessage3 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage4 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.Message.Type type5 = header1.getType();
        org.meqantt.message.PubRecMessage pubRecMessage6 = new org.meqantt.message.PubRecMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage7 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage8 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.PublishMessage publishMessage10 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.Message.Type type11 = header1.getType();
        org.meqantt.message.PingReqMessage pingReqMessage12 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.Message.Header header14 = new org.meqantt.message.Message.Header((byte) 0);
        org.meqantt.message.PubCompMessage pubCompMessage15 = new org.meqantt.message.PubCompMessage(header14);
        org.meqantt.message.PublishMessage publishMessage16 = new org.meqantt.message.PublishMessage(header14);
        org.meqantt.message.PubRelMessage pubRelMessage17 = new org.meqantt.message.PubRelMessage(header14);
        org.meqantt.message.Message.Type type18 = header14.getType();
        org.meqantt.message.DisconnectMessage disconnectMessage19 = new org.meqantt.message.DisconnectMessage(header14);
        org.meqantt.message.ConnectMessage connectMessage20 = new org.meqantt.message.ConnectMessage(header14);
        org.meqantt.message.ConnectMessage connectMessage26 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean27 = connectMessage26.hasWill();
        java.lang.String str28 = connectMessage26.getWill();
        org.meqantt.message.Message.Header header31 = null;
        org.meqantt.message.ConnectMessage connectMessage32 = new org.meqantt.message.ConnectMessage(header31);
        boolean boolean33 = connectMessage32.isWillRetained();
        boolean boolean34 = connectMessage32.isWillRetained();
        java.lang.String str35 = connectMessage32.getUsername();
        org.meqantt.message.QoS qoS39 = null;
        org.meqantt.message.SubscribeMessage subscribeMessage40 = new org.meqantt.message.SubscribeMessage("", qoS39);
        org.meqantt.message.SubscribeMessage subscribeMessage42 = new org.meqantt.message.SubscribeMessage();
        java.util.List<java.lang.String> strList43 = subscribeMessage42.getTopics();
        org.meqantt.message.QoS qoS44 = subscribeMessage42.getQos();
        subscribeMessage40.addTopic("", qoS44);
        connectMessage32.setWill("hi!", "", qoS44, false);
        connectMessage26.setWill("MQIsdp", "hi!", qoS44, false);
        byte byte50 = connectMessage26.getProtocolVersion();
        connectMessage26.setCredentials("\000?Header [type=PUBREL, retain=false, qos=EXACTLY_ONCE, dup=false]", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        java.lang.String str54 = connectMessage26.getWillTopic();
        org.meqantt.message.QoS qoS55 = connectMessage26.getWillQoS();
        connectMessage20.setWill("\020\016\000\006MQIsdp\003\002\000\001\000\000", "00: 10100010 \242 162\n01: 00001111 \017 15\n02: 00000000 \000 0\n03: 00000000 \000 0\n04: 00000000 \000 0\n05: 00000011 \003 3\n06: 01101000 h 104\n07: 01101001 i 105\n08: 00100001 ! 33\n09: 00000000 \000 0\n10: 00000110 \006 6\n11: 01001101 M 77\n12: 01010001 Q 81\n13: 01001001 I 73\n14: 01110011 s 115\n15: 01100100 d 100\n16: 01110000 p 112\n", qoS55, true);
        // The following exception was thrown during execution in test generation
        try {
            pingReqMessage12.setQos(qoS55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PINGREQ message does not support the QoS flag");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + qoS44 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS44.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) 3 + "'", byte50 == (byte) 3);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MQIsdp" + "'", str54, "MQIsdp");
        org.junit.Assert.assertTrue("'" + qoS55 + "' != '" + org.meqantt.message.QoS.AT_MOST_ONCE + "'", qoS55.equals(org.meqantt.message.QoS.AT_MOST_ONCE));
    }

    @Test
    public void test14990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14990");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("", true, (int) (short) 1);
        java.lang.String str4 = connectMessage3.getProtocolId();
        boolean boolean5 = connectMessage3.hasUsername();
        int int6 = connectMessage3.getKeepAlive();
        boolean boolean7 = connectMessage3.isCleanSession();
        java.lang.String str8 = connectMessage3.getPassword();
        java.lang.String str9 = connectMessage3.getWill();
        boolean boolean10 = connectMessage3.isCleanSession();
        byte[] byteArray11 = connectMessage3.toBytes();
        org.meqantt.message.QoS qoS12 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectMessage3.setQos(qoS12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CONNECT messages don't use the QoS flags.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MQIsdp" + "'", str4, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[16, 14, 0, 6, 77, 81, 73, 115, 100, 112, 3, 2, 0, 1, 0, 0]");
    }

    @Test
    public void test14991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14991");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.UnsubAckMessage unsubAckMessage2 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.ConnAckMessage connAckMessage4 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage5 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.UnsubAckMessage unsubAckMessage6 = new org.meqantt.message.UnsubAckMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage7 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.ConnAckMessage.ConnectionStatus connectionStatus8 = connAckMessage7.getStatus();
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.meqantt.message.Message.Type.PUBREL + "'", type3.equals(org.meqantt.message.Message.Type.PUBREL));
        org.junit.Assert.assertNull(connectionStatus8);
    }

    @Test
    public void test14992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14992");
        org.meqantt.netty.MqttMessageHandler mqttMessageHandler0 = new org.meqantt.netty.MqttMessageHandler();
        org.meqantt.MqttListener mqttListener1 = null;
        mqttMessageHandler0.setListener(mqttListener1);
        org.meqantt.MqttListener mqttListener3 = null;
        mqttMessageHandler0.setListener(mqttListener3);
        org.meqantt.MqttListener mqttListener5 = null;
        mqttMessageHandler0.setListener(mqttListener5);
        org.meqantt.MqttListener mqttListener7 = null;
        mqttMessageHandler0.setListener(mqttListener7);
        org.meqantt.MqttListener mqttListener9 = null;
        mqttMessageHandler0.setListener(mqttListener9);
        org.meqantt.MqttListener mqttListener11 = null;
        mqttMessageHandler0.setListener(mqttListener11);
        org.meqantt.MqttListener mqttListener13 = null;
        mqttMessageHandler0.setListener(mqttListener13);
        org.meqantt.MqttListener mqttListener15 = null;
        mqttMessageHandler0.setListener(mqttListener15);
        org.meqantt.MqttListener mqttListener17 = null;
        mqttMessageHandler0.setListener(mqttListener17);
        org.meqantt.MqttListener mqttListener19 = null;
        mqttMessageHandler0.setListener(mqttListener19);
        org.meqantt.MqttListener mqttListener21 = null;
        mqttMessageHandler0.setListener(mqttListener21);
        org.meqantt.MqttListener mqttListener23 = null;
        mqttMessageHandler0.setListener(mqttListener23);
        org.meqantt.MqttListener mqttListener25 = null;
        mqttMessageHandler0.setListener(mqttListener25);
        org.meqantt.MqttListener mqttListener27 = null;
        mqttMessageHandler0.setListener(mqttListener27);
        org.meqantt.MqttListener mqttListener29 = null;
        mqttMessageHandler0.setListener(mqttListener29);
        org.meqantt.MqttListener mqttListener31 = null;
        mqttMessageHandler0.setListener(mqttListener31);
        org.meqantt.MqttListener mqttListener33 = null;
        mqttMessageHandler0.setListener(mqttListener33);
        org.meqantt.MqttListener mqttListener35 = null;
        mqttMessageHandler0.setListener(mqttListener35);
        org.meqantt.MqttListener mqttListener37 = null;
        mqttMessageHandler0.setListener(mqttListener37);
        org.meqantt.MqttListener mqttListener39 = null;
        mqttMessageHandler0.setListener(mqttListener39);
        org.meqantt.MqttListener mqttListener41 = null;
        mqttMessageHandler0.setListener(mqttListener41);
        org.jboss.netty.channel.ChannelHandlerContext channelHandlerContext43 = null;
        org.jboss.netty.channel.ChildChannelStateEvent childChannelStateEvent44 = null;
        // The following exception was thrown during execution in test generation
        try {
            mqttMessageHandler0.childChannelOpen(channelHandlerContext43, childChannelStateEvent44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14993");
        org.meqantt.message.UnsubscribeMessage unsubscribeMessage1 = new org.meqantt.message.UnsubscribeMessage("\000\000");
        unsubscribeMessage1.addTopic("\000\000");
        unsubscribeMessage1.addTopic("\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        unsubscribeMessage1.setDup(false);
        unsubscribeMessage1.setDup(false);
    }

    @Test
    public void test14994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14994");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 100);
        org.meqantt.message.PubCompMessage pubCompMessage2 = new org.meqantt.message.PubCompMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage3 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage4 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage5 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage6 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.PublishMessage publishMessage7 = new org.meqantt.message.PublishMessage(header1);
        org.meqantt.message.ConnAckMessage connAckMessage8 = new org.meqantt.message.ConnAckMessage(header1);
        org.meqantt.message.PingRespMessage pingRespMessage9 = new org.meqantt.message.PingRespMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage10 = new org.meqantt.message.SubscribeMessage(header1);
    }

    @Test
    public void test14995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14995");
        org.meqantt.message.Message.Header header0 = null;
        org.meqantt.message.ConnectMessage connectMessage1 = new org.meqantt.message.ConnectMessage(header0);
        boolean boolean2 = connectMessage1.isWillRetained();
        boolean boolean3 = connectMessage1.isWillRetained();
        java.lang.String str4 = connectMessage1.getUsername();
        boolean boolean5 = connectMessage1.isCleanSession();
        connectMessage1.setCredentials("");
        java.lang.String str8 = connectMessage1.getClientId();
        java.lang.String str9 = connectMessage1.getProtocolId();
        java.lang.String str10 = connectMessage1.getClientId();
        connectMessage1.setCredentials("\000\ufffd\ufffdD00: 00000001 \001 1\n01: 00000011 \003 3\n02: 00000011 \003 3\n03: 00000001 \001 1\n", "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MQIsdp" + "'", str9, "MQIsdp");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test14996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14996");
        org.meqantt.message.Message.Header header1 = new org.meqantt.message.Message.Header((byte) 1);
        org.meqantt.message.Message.Type type2 = header1.getType();
        org.meqantt.message.Message.Type type3 = header1.getType();
        org.meqantt.message.SubAckMessage subAckMessage4 = new org.meqantt.message.SubAckMessage(header1);
        org.meqantt.message.PingReqMessage pingReqMessage5 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.SubscribeMessage subscribeMessage6 = new org.meqantt.message.SubscribeMessage(header1);
        org.meqantt.message.ConnectMessage connectMessage7 = new org.meqantt.message.ConnectMessage(header1);
        java.lang.String str8 = header1.toString();
        org.meqantt.message.PingReqMessage pingReqMessage9 = new org.meqantt.message.PingReqMessage(header1);
        org.meqantt.message.DisconnectMessage disconnectMessage10 = new org.meqantt.message.DisconnectMessage(header1);
        org.meqantt.message.PubRelMessage pubRelMessage11 = new org.meqantt.message.PubRelMessage(header1);
        org.meqantt.message.PubAckMessage pubAckMessage12 = new org.meqantt.message.PubAckMessage(header1);
        org.meqantt.message.PubCompMessage pubCompMessage13 = new org.meqantt.message.PubCompMessage(header1);
        // The following exception was thrown during execution in test generation
        try {
            pubCompMessage13.setRetained(true);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PubComp messages don't use the RETAIN flag.");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]" + "'", str8, "Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
    }

    @Test
    public void test14997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14997");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("\000\003hi!", true, 0);
        boolean boolean4 = connectMessage3.hasPassword();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test14998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14998");
        org.meqantt.NettyClient nettyClient1 = new org.meqantt.NettyClient("");
        nettyClient1.connect("", (int) (short) 0);
        nettyClient1.unsubscribe("\000d\000\001\001d");
        org.meqantt.MqttListener mqttListener7 = null;
        nettyClient1.setListener(mqttListener7);
        nettyClient1.connect("MQIsdp", (int) (byte) 0);
        nettyClient1.publish("\000\ufffd00: 00110000 0 48\n01: 00001000 \b 8\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n\ufffd\ufffd 0\n05: 01100100 d 100\n\ufffd\ufffd 0\n07: 00000001 \001 1\n08: 00000001 \001 1\n09: 01100100 d 100\n", "Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        nettyClient1.disconnect();
        nettyClient1.unsubscribe("Header [type=null, retain=true, qos=AT_MOST_ONCE, dup=false]");
        nettyClient1.publish("\020\032\000\006MQIsdp\003&\000\001\000\000\000\000\000\b\ufffd\ufffd\ufffd\ufffd\001\001d", "Header [type=null, retain=false, qos=AT_MOST_ONCE, dup=false]");
        nettyClient1.disconnect();
        nettyClient1.disconnect();
    }

    @Test
    public void test14999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14999");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        java.lang.String str4 = connectMessage3.getPassword();
        connectMessage3.setCredentials("\000d\000\001\001d", "\000\000");
        java.lang.String str8 = connectMessage3.getWillTopic();
        java.lang.String str9 = connectMessage3.getPassword();
        connectMessage3.setWill("00: 00010000 \020 16\n01: 00011010 \032 26\n02: 00000000 \000 0\n03: 00000110 \006 6\n04: 01001101 M 77\n05: 01010001 Q 81\n06: 01001001 I 73\n07: 01110011 s 115\n08: 01100100 d 100\n09: 01110000 p 112\n10: 00000011 \003 3\n11: 00100110 & 38\n12: 00000000 \000 0\n13: 00000001 \001 1\n14: 00000000 \000 0\n15: 00000000 \000 0\n16: 00000000 \000 0\n17: 00000000 \000 0\n18: 00000000 \000 0\n19: 00001000 \b 8\n20: 11000000 \300 192\n21: 10000000 \200 128\n22: 01100100 d 100\n23: 11000000 \300 192\n24: 10000000 \200 128\n25: 00000001 \001 1\n26: 00000001 \001 1\n27: 01100100 d 100\n", "\000=Header [type=null, retain=false, qos=AT_LEAST_ONCE, dup=true]");
        int int13 = connectMessage3.getKeepAlive();
        boolean boolean14 = connectMessage3.isWillRetained();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\000\000" + "'", str9, "\000\000");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test15000");
        org.meqantt.message.ConnectMessage connectMessage3 = new org.meqantt.message.ConnectMessage("MQIsdp", true, 100);
        boolean boolean4 = connectMessage3.hasWill();
        java.lang.String str5 = connectMessage3.getWill();
        java.lang.String str6 = connectMessage3.getWill();
        java.lang.String str7 = connectMessage3.getProtocolId();
        java.lang.String str8 = connectMessage3.getProtocolId();
        boolean boolean9 = connectMessage3.hasUsername();
        java.lang.String str10 = connectMessage3.getProtocolId();
        java.lang.String str11 = connectMessage3.getWill();
        java.lang.String str12 = connectMessage3.getWillTopic();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MQIsdp" + "'", str7, "MQIsdp");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MQIsdp" + "'", str8, "MQIsdp");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MQIsdp" + "'", str10, "MQIsdp");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }
}
