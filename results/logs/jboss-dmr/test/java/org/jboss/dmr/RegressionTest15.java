package org.jboss.dmr;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest15 {

    public static boolean debug = false;

    @Test
    public void test07501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07501");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelNode modelNode8 = modelNode6.require((int) (byte) 0);
        boolean boolean10 = modelNode8.hasDefined("\"H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgnC2F\\ngdlAz6ACAF+odLA1AAAA\"");
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07502");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        java.lang.String str2 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(10L);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.get(strArray12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = modelNode17.asList();
        org.jboss.dmr.ListModelValue listModelValue19 = new org.jboss.dmr.ListModelValue(modelNodeList18);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue19);
        org.jboss.dmr.ModelValue modelValue21 = listModelValue19.resolve();
        int int23 = listModelValue19.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList24 = listModelValue19.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList25 = modelNode13.asPropertyList(propertyList24);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set("hi!", 0.0d);
        org.jboss.dmr.Property property31 = new org.jboss.dmr.Property("", modelNode30);
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.get(strArray32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = modelNode37.asList();
        org.jboss.dmr.ListModelValue listModelValue39 = new org.jboss.dmr.ListModelValue(modelNodeList38);
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue39);
        org.jboss.dmr.ModelValue modelValue41 = listModelValue39.resolve();
        int int43 = listModelValue39.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList44 = listModelValue39.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList45 = modelNode33.asPropertyList(propertyList44);
        modelNode13.setNoCopy(modelNode33);
        org.jboss.dmr.ModelNode modelNode48 = modelNode33.set((long) 100);
        org.jboss.dmr.ModelType modelType49 = modelNode48.getType();
        long long51 = modelNode48.asLong((long) (short) 100);
        boolean boolean52 = modelNode48.isProtected();
        org.jboss.dmr.Property property54 = new org.jboss.dmr.Property("10", modelNode48, true);
        org.jboss.dmr.ModelNode modelNode55 = modelNode0.add(property54);
        modelNode0.protect();
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4" + "'", str2, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertNotNull(modelValue21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertNotNull(modelValue41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(propertyList45);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertTrue("'" + modelType49 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType49.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(modelNode55);
    }

    @Test
    public void test07503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07503");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ListModelValue listModelValue16 = new org.jboss.dmr.ListModelValue(modelNodeList15);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue16);
        org.jboss.dmr.ModelValue modelValue18 = listModelValue16.resolve();
        int int20 = listModelValue16.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList21 = listModelValue16.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue16.asPropertyList();
        boolean boolean23 = listModelValue5.equals(listModelValue16);
        boolean boolean24 = listModelValue16.asBoolean();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode26 = listModelValue16.getChild((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(propertyList21);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test07504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07504");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        byte[] byteArray11 = longModelValue5.asBytes();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) longModelValue5);
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str15 = longModelValue14.asString();
        double double17 = longModelValue14.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression18 = longModelValue14.asExpression();
        long long20 = longModelValue14.asLong((long) 'a');
        int int22 = longModelValue14.asInt((int) '4');
        java.lang.String str23 = longModelValue14.asString();
        long long24 = longModelValue14.asLong();
        int int25 = longModelValue14.asInt();
        boolean boolean26 = longModelValue5.equals(longModelValue14);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07505");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        org.jboss.dmr.ValueExpression valueExpression18 = stringModelValue11.asExpression();
        java.lang.String str19 = stringModelValue11.asString();
        org.jboss.dmr.ValueExpression valueExpression20 = stringModelValue11.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal21 = stringModelValue11.asBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str19, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(valueExpression20);
    }

    @Test
    public void test07506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07506");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode17 = bytesModelValue12.requireChild((int) 'l');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [108]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test07507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07507");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.lang.String str5 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode1);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode1.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set((double) 0);
        org.jboss.dmr.ModelNode modelNode9 = modelNode1.clear();
        org.jboss.dmr.IntModelValue intModelValue12 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long14 = intModelValue12.asLong((long) 'b');
        java.lang.String str15 = intModelValue12.asString();
        java.math.BigInteger bigInteger16 = intModelValue12.asBigInteger();
        org.jboss.dmr.ModelNode modelNode17 = modelNode9.add("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", bigInteger16);
        java.lang.String str19 = modelNode9.asString("(\"hi!\" => 0.0)");
        org.jboss.dmr.PropertyModelValue propertyModelValue20 = new org.jboss.dmr.PropertyModelValue("{\n    \"EXPRESSION_VALUE\" : {\n        \"\" : {\n            \"hi!\" : 0.0\n        }\n    }\n}", modelNode9);
        org.jboss.dmr.ModelNode modelNode22 = modelNode9.set(32);
        org.jboss.dmr.ModelNode modelNode23 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode9.setNoCopy(modelNode23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "32" + "'", str15, "32");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]" + "'", str19, "[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]");
        org.junit.Assert.assertNotNull(modelNode22);
    }

    @Test
    public void test07508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07508");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isBytes();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = modelReader15.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't double");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07509");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) 52);
        org.jboss.dmr.DoubleModelValue doubleModelValue3 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long4 = doubleModelValue3.asLong();
        boolean boolean5 = doubleModelValue3.asBoolean();
        byte[] byteArray6 = doubleModelValue3.asBytes();
        boolean boolean7 = longModelValue1.equals((java.lang.Object) doubleModelValue3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07510");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        org.jboss.dmr.ValueExpression valueExpression11 = bigIntegerModelValue4.asExpression();
        org.jboss.dmr.ValueExpression valueExpression12 = bigIntegerModelValue4.asExpression();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode(valueExpression12);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression12);
    }

    @Test
    public void test07511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07511");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("PROPERTY", false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory5 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory7 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream8 = null;
        org.jboss.dmr.Base64.InputStream inputStream10 = new org.jboss.dmr.Base64.InputStream(inputStream8, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue12 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str13 = longModelValue12.asString();
        byte[] byteArray14 = longModelValue12.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue15 = new org.jboss.dmr.BytesModelValue(byteArray14);
        int int18 = inputStream10.read(byteArray14, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream10, (-1));
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory7.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream22 = null;
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue26 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str27 = longModelValue26.asString();
        byte[] byteArray28 = longModelValue26.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue29 = new org.jboss.dmr.BytesModelValue(byteArray28);
        int int32 = inputStream24.read(byteArray28, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.stream.ModelReader modelReader33 = modelStreamFactory7.newModelReader((java.io.InputStream) inputStream24);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream35, (int) 'l');
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory5.newModelReader((java.io.InputStream) inputStream35);
        java.io.InputStream inputStream39 = null;
        org.jboss.dmr.Base64.InputStream inputStream41 = new org.jboss.dmr.Base64.InputStream(inputStream39, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream42 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream41);
        org.jboss.dmr.Base64.InputStream inputStream43 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream41);
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream43, (int) (short) 10);
        org.jboss.dmr.stream.ModelReader modelReader46 = modelStreamFactory5.newModelReader((java.io.InputStream) inputStream45);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode48 = modelNodeFactory0.readFrom((java.io.InputStream) inputStream45, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelStreamFactory5);
        org.junit.Assert.assertNotNull(modelStreamFactory7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(modelReader33);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertNotNull(modelReader46);
    }

    @Test
    public void test07512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07512");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.math.BigDecimal bigDecimal5 = bytesModelValue4.asBigDecimal();
        java.math.BigInteger bigInteger6 = bytesModelValue4.asBigInteger();
        java.math.BigInteger bigInteger7 = bytesModelValue4.asBigInteger();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue16 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode13, false);
        boolean boolean18 = propertyModelValue16.has("10.0");
        org.jboss.dmr.ModelNode modelNode20 = propertyModelValue16.getChild(0);
        org.jboss.dmr.PropertyModelValue propertyModelValue22 = new org.jboss.dmr.PropertyModelValue("Expression \"1\"", modelNode20, true);
        boolean boolean23 = bytesModelValue4.equals((java.lang.Object) propertyModelValue22);
        long long25 = bytesModelValue4.asLong((long) (byte) 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
    }

    @Test
    public void test07513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07513");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        java.lang.String[] strArray48 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode49 = modelNode46.get(strArray48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode28.get(strArray48);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode50, true);
        org.jboss.dmr.PropertyModelValue propertyModelValue53 = new org.jboss.dmr.PropertyModelValue(property52);
        org.jboss.dmr.Property property54 = propertyModelValue53.asProperty();
        org.jboss.dmr.ModelValue modelValue55 = propertyModelValue53.resolve();
        java.lang.String str56 = propertyModelValue53.asString();
        org.jboss.dmr.ModelType modelType57 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode58 = new org.jboss.dmr.ModelNode(modelType57);
        org.jboss.dmr.ModelNode modelNode60 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode63 = modelNode60.set("hi!", 0.0d);
        org.jboss.dmr.Property property64 = new org.jboss.dmr.Property("", modelNode63);
        org.jboss.dmr.ModelNode modelNode65 = modelNode58.set(property64);
        org.jboss.dmr.ModelNode modelNode66 = property64.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue67 = new org.jboss.dmr.PropertyModelValue(property64);
        org.jboss.dmr.ModelValue modelValue68 = propertyModelValue67.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList69 = propertyModelValue67.asList();
        org.jboss.dmr.ModelNode modelNode71 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode74 = modelNode71.set("hi!", 0.0d);
        java.lang.String str75 = modelNode71.toString();
        org.jboss.dmr.ModelNode modelNode76 = modelNode71.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode78 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode81 = modelNode78.set("hi!", 0.0d);
        org.jboss.dmr.Property property82 = new org.jboss.dmr.Property("", modelNode81);
        org.jboss.dmr.ModelNode modelNode83 = modelNode71.set(property82);
        org.jboss.dmr.PropertyModelValue propertyModelValue85 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode83, false);
        org.jboss.dmr.Property property86 = propertyModelValue85.asProperty();
        boolean boolean87 = propertyModelValue67.equals(propertyModelValue85);
        org.jboss.dmr.ModelValue modelValue88 = propertyModelValue85.protect();
        java.lang.String str89 = propertyModelValue85.asString();
        boolean boolean90 = propertyModelValue53.equals(propertyModelValue85);
        java.util.List<org.jboss.dmr.Property> propertyList91 = propertyModelValue85.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(modelValue55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))" + "'", str56, "(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelType57 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType57.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode65);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(modelValue68);
        org.junit.Assert.assertNotNull(modelNodeList69);
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(\"hi!\" => 0.0)" + "'", str75, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertNotNull(modelNode81);
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(modelValue88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))" + "'", str89, "(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(propertyList91);
    }

    @Test
    public void test07514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07514");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        byte[] byteArray5 = longModelValue1.asBytes();
        org.jboss.dmr.ModelValue modelValue6 = longModelValue1.clone();
        java.math.BigDecimal bigDecimal7 = longModelValue1.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode(bigDecimal7);
        java.math.BigInteger bigInteger9 = modelNode8.asBigInteger();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigInteger9);
    }

    @Test
    public void test07515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07515");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        byte[] byteArray14 = intModelValue9.asBytes();
        org.jboss.dmr.IntModelValue intModelValue16 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str17 = intModelValue16.asString();
        double double19 = intModelValue16.asDouble((double) 2);
        int int20 = intModelValue16.asInt();
        byte[] byteArray21 = intModelValue16.asBytes();
        long long22 = intModelValue16.asLong();
        boolean boolean23 = intModelValue9.equals(intModelValue16);
        boolean boolean25 = intModelValue9.has("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BWwAAAAAeA==");
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        double double31 = bytesModelValue30.asDouble();
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode35 = modelNode33.set((int) '#');
        java.lang.Boolean boolean36 = modelNode33.asBooleanOrNull();
        java.lang.String str38 = modelNode33.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        boolean boolean39 = bytesModelValue30.equals((java.lang.Object) modelNode33);
        int int41 = bytesModelValue30.asInt(52);
        double double42 = bytesModelValue30.asDouble();
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.set("hi!", 0.0d);
        java.lang.String str48 = modelNode44.toString();
        org.jboss.dmr.ModelNode modelNode49 = modelNode44.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode51 = modelNode44.set(100);
        org.jboss.dmr.ModelNode modelNode52 = modelNode43.add(modelNode44);
        int int54 = modelNode44.asInt(2);
        org.jboss.dmr.ModelType modelType56 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode57 = modelNode44.set("[(\"hi!\" => 0.0)]", modelType56);
        org.jboss.dmr.TypeModelValue typeModelValue58 = org.jboss.dmr.TypeModelValue.of(modelType56);
        boolean boolean59 = bytesModelValue30.equals((java.lang.Object) modelType56);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory61 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream62 = null;
        org.jboss.dmr.Base64.InputStream inputStream64 = new org.jboss.dmr.Base64.InputStream(inputStream62, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream65 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream64);
        org.jboss.dmr.stream.ModelReader modelReader66 = modelStreamFactory61.newModelReader((java.io.InputStream) inputStream65);
        java.io.OutputStream outputStream67 = null;
        org.jboss.dmr.Base64.OutputStream outputStream68 = new org.jboss.dmr.Base64.OutputStream(outputStream67);
        org.jboss.dmr.Base64.OutputStream outputStream69 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream68);
        outputStream68.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter72 = modelStreamFactory61.newModelWriter((java.io.OutputStream) outputStream68);
        org.jboss.dmr.stream.ModelWriter modelWriter73 = modelWriter72.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter75 = modelWriter72.writeInt((int) '4');
        org.jboss.dmr.ModelNode modelNode76 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode79 = modelNode76.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList80 = modelNode79.asList();
        org.jboss.dmr.ListModelValue listModelValue81 = new org.jboss.dmr.ListModelValue(modelNodeList80);
        org.jboss.dmr.ModelNode modelNode82 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue81);
        org.jboss.dmr.ModelValue modelValue83 = listModelValue81.resolve();
        int int85 = listModelValue81.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList86 = listModelValue81.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList87 = listModelValue81.asPropertyList();
        java.lang.String str88 = listModelValue81.asString();
        int int89 = listModelValue81.asInt();
        java.lang.String str90 = listModelValue81.asString();
        org.jboss.dmr.ModelType modelType91 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode92 = new org.jboss.dmr.ModelNode(modelType91);
        boolean boolean93 = listModelValue81.equals((java.lang.Object) modelType91);
        org.jboss.dmr.TypeModelValue typeModelValue94 = org.jboss.dmr.TypeModelValue.of(modelType91);
        org.jboss.dmr.TypeModelValue typeModelValue95 = org.jboss.dmr.TypeModelValue.of(modelType91);
        org.jboss.dmr.stream.ModelWriter modelWriter96 = modelWriter72.writeType(modelType91);
        bytesModelValue30.write(modelWriter72);
        intModelValue9.write(modelWriter72);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 32]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32" + "'", str17, "32");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 32.0d + "'", double19 == 32.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4.9E-324d + "'", double31 == 4.9E-324d);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertEquals("'" + boolean36 + "' != '" + true + "'", boolean36, true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "35" + "'", str38, "35");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4.9E-324d + "'", double42 == 4.9E-324d);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(\"hi!\" => 0.0)" + "'", str48, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + modelType56 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType56.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNotNull(typeModelValue58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory61);
        org.junit.Assert.assertNotNull(modelReader66);
        org.junit.Assert.assertNotNull(modelWriter72);
        org.junit.Assert.assertNotNull(modelWriter73);
        org.junit.Assert.assertNotNull(modelWriter75);
        org.junit.Assert.assertNotNull(modelNode79);
        org.junit.Assert.assertNotNull(modelNodeList80);
        org.junit.Assert.assertNotNull(modelValue83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(propertyList86);
        org.junit.Assert.assertNotNull(propertyList87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str88, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str90, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType91 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType91.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeModelValue94);
        org.junit.Assert.assertNotNull(typeModelValue95);
        org.junit.Assert.assertNotNull(modelWriter96);
    }

    @Test
    public void test07516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07516");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        int int5 = objectModelValue0.asInt();
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.protect();
        long long8 = objectModelValue0.asLong((long) 'i');
        org.jboss.dmr.ModelValue modelValue10 = objectModelValue0.copy(true);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(modelValue10);
    }

    @Test
    public void test07517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07517");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList12 = propertyModelValue10.asPropertyList();
        java.io.DataOutput dataOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue10.writeExternal(dataOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(propertyList12);
    }

    @Test
    public void test07518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07518");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        org.jboss.dmr.ModelValue modelValue9 = listModelValue5.copy();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory11 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream12 = null;
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream12, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        int int22 = inputStream14.read(byteArray18, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream14, (-1));
        org.jboss.dmr.stream.ModelReader modelReader25 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream24);
        boolean boolean26 = modelReader25.isBigInteger();
        boolean boolean27 = modelReader25.isLong();
        boolean boolean28 = modelReader25.isBigDecimal();
        boolean boolean29 = modelReader25.isUndefined();
        boolean boolean30 = modelReader25.isUndefined();
        boolean boolean31 = modelReader25.isObjectStart();
        boolean boolean32 = modelReader25.isObjectEnd();
        boolean boolean33 = modelReader25.isBytes();
        boolean boolean34 = modelReader25.isDouble();
        boolean boolean35 = modelReader25.isBigInteger();
        boolean boolean36 = modelReader25.isDouble();
        boolean boolean37 = modelReader25.isObjectStart();
        boolean boolean38 = modelReader25.isPropertyStart();
        boolean boolean39 = listModelValue5.equals((java.lang.Object) modelReader25);
        boolean boolean40 = modelReader25.isString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal41 = modelReader25.getBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't big decimal");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(modelStreamFactory11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(modelReader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test07519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07519");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) (short) 100);
        boolean boolean9 = longModelValue1.asBoolean(true);
        long long11 = longModelValue1.asLong(0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test07520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07520");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        org.jboss.dmr.ValueExpression valueExpression18 = stringModelValue11.asExpression();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory20 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream21 = null;
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream(inputStream21, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream23);
        org.jboss.dmr.stream.ModelReader modelReader25 = modelStreamFactory20.newModelReader((java.io.InputStream) inputStream24);
        java.io.OutputStream outputStream26 = null;
        org.jboss.dmr.Base64.OutputStream outputStream27 = new org.jboss.dmr.Base64.OutputStream(outputStream26);
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream27);
        outputStream27.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelStreamFactory20.newModelWriter((java.io.OutputStream) outputStream27);
        org.jboss.dmr.stream.ModelWriter modelWriter32 = modelWriter31.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter34 = modelWriter32.writeInt((int) (byte) 10);
        stringModelValue11.write(modelWriter32);
        org.jboss.dmr.ValueExpression valueExpression36 = stringModelValue11.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = stringModelValue11.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertNotNull(modelStreamFactory20);
        org.junit.Assert.assertNotNull(modelReader25);
        org.junit.Assert.assertNotNull(modelWriter31);
        org.junit.Assert.assertNotNull(modelWriter32);
        org.junit.Assert.assertNotNull(modelWriter34);
        org.junit.Assert.assertNotNull(valueExpression36);
    }

    @Test
    public void test07521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07521");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        long long3 = longModelValue1.asLong((long) (byte) -1);
        int int5 = longModelValue1.asInt(0);
        byte[] byteArray6 = longModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal9 = longModelValue8.asBigDecimal();
        int int10 = longModelValue8.asInt();
        org.jboss.dmr.ValueExpression valueExpression11 = longModelValue8.asExpression();
        double double12 = longModelValue8.asDouble();
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        long long16 = longModelValue14.asLong((long) (short) 0);
        java.lang.String str17 = longModelValue14.asString();
        byte[] byteArray18 = longModelValue14.asBytes();
        org.jboss.dmr.ModelType modelType19 = longModelValue14.getType();
        long long21 = longModelValue14.asLong(1L);
        boolean boolean22 = longModelValue8.equals(longModelValue14);
        org.jboss.dmr.ValueExpression valueExpression23 = longModelValue8.asExpression();
        int int24 = longModelValue8.asInt();
        boolean boolean25 = longModelValue1.equals(longModelValue8);
        java.math.BigDecimal bigDecimal26 = longModelValue1.asBigDecimal();
        int int27 = longModelValue1.asInt();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType19 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType19.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test07522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07522");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter12.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter15.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelWriter15.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter21 = modelWriter15.writeLong((long) 52);
        // The following exception was thrown during execution in test generation
        try {
            modelWriter21.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(modelWriter21);
    }

    @Test
    public void test07523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07523");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ListModelValue listModelValue16 = new org.jboss.dmr.ListModelValue(modelNodeList15);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue16);
        org.jboss.dmr.ModelValue modelValue18 = listModelValue16.resolve();
        int int20 = listModelValue16.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList21 = listModelValue16.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue16.asPropertyList();
        boolean boolean23 = listModelValue5.equals(listModelValue16);
        boolean boolean24 = listModelValue16.asBoolean();
        long long25 = listModelValue16.asLong();
        org.jboss.dmr.ModelNode modelNode26 = listModelValue16.asObject();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(propertyList21);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(modelNode26);
    }

    @Test
    public void test07524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07524");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        double double6 = booleanModelValue1.asDouble((double) 1.0f);
        java.math.BigInteger bigInteger7 = booleanModelValue1.asBigInteger();
        int int9 = booleanModelValue1.asInt((int) (short) 1);
        java.math.BigInteger bigInteger10 = booleanModelValue1.asBigInteger();
        long long12 = booleanModelValue1.asLong((long) (short) -1);
        long long13 = booleanModelValue1.asLong();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode15 = booleanModelValue1.getChild((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test07525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07525");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        org.jboss.dmr.ValueExpression valueExpression11 = bigIntegerModelValue4.asExpression();
        java.io.PrintWriter printWriter12 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigIntegerModelValue4.writeString(printWriter12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
    }

    @Test
    public void test07526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07526");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = listModelValue5.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode27, false);
        org.jboss.dmr.Property property30 = propertyModelValue29.asProperty();
        boolean boolean31 = listModelValue5.equals((java.lang.Object) propertyModelValue29);
        java.io.DataOutput dataOutput32 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue29.writeExternal(dataOutput32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test07527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07527");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long2 = longModelValue1.asLong();
        java.math.BigDecimal bigDecimal3 = longModelValue1.asBigDecimal();
        boolean boolean5 = longModelValue1.asBoolean(false);
        double double7 = longModelValue1.asDouble((double) 97L);
        java.io.PrintWriter printWriter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            longModelValue1.format(printWriter8, (int) 'D', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test07528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07528");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.protect();
        java.util.List<org.jboss.dmr.Property> propertyList3 = objectModelValue0.asPropertyList();
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue(97L);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory7 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream8 = null;
        org.jboss.dmr.Base64.InputStream inputStream10 = new org.jboss.dmr.Base64.InputStream(inputStream8, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream10);
        org.jboss.dmr.stream.ModelReader modelReader12 = modelStreamFactory7.newModelReader((java.io.InputStream) inputStream11);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        outputStream14.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter18 = modelStreamFactory7.newModelWriter((java.io.OutputStream) outputStream14);
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelWriter18.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue21 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray22 = intModelValue21.asBytes();
        int int24 = intModelValue21.asInt(0);
        java.math.BigInteger bigInteger25 = intModelValue21.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelWriter19.writeBigInteger(bigInteger25);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelWriter19.writeListStart();
        longModelValue5.write(modelWriter27);
        objectModelValue0.write(modelWriter27);
        org.jboss.dmr.DoubleModelValue doubleModelValue31 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long32 = doubleModelValue31.asLong();
        boolean boolean33 = doubleModelValue31.asBoolean();
        java.math.BigInteger bigInteger34 = doubleModelValue31.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelWriter27.writeBigInteger(bigInteger34);
        // The following exception was thrown during execution in test generation
        try {
            modelWriter27.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been written");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(propertyList3);
        org.junit.Assert.assertNotNull(modelStreamFactory7);
        org.junit.Assert.assertNotNull(modelReader12);
        org.junit.Assert.assertNotNull(modelWriter18);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(modelWriter35);
    }

    @Test
    public void test07529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07529");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        boolean boolean22 = modelReader21.isLong();
        boolean boolean23 = modelReader21.isType();
        boolean boolean24 = modelReader21.isLong();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = modelReader21.getBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't boolean");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07530");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        double double5 = bytesModelValue4.asDouble();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.set((int) '#');
        java.lang.Boolean boolean10 = modelNode7.asBooleanOrNull();
        java.lang.String str12 = modelNode7.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        boolean boolean13 = bytesModelValue4.equals((java.lang.Object) modelNode7);
        double double14 = bytesModelValue4.asDouble();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.9E-324d + "'", double5 == 4.9E-324d);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "35" + "'", str12, "35");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4.9E-324d + "'", double14 == 4.9E-324d);
    }

    @Test
    public void test07531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07531");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = modelNode20.asList();
        org.jboss.dmr.ListModelValue listModelValue22 = new org.jboss.dmr.ListModelValue(modelNodeList21);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue22);
        org.jboss.dmr.ModelValue modelValue24 = listModelValue22.resolve();
        int int26 = listModelValue22.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList27 = listModelValue22.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList28 = listModelValue22.asPropertyList();
        org.jboss.dmr.ModelValue modelValue29 = listModelValue22.copy();
        boolean boolean30 = listModelValue13.equals(listModelValue22);
        boolean boolean32 = listModelValue13.has((int) 'D');
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(propertyList27);
        org.junit.Assert.assertNotNull(propertyList28);
        org.junit.Assert.assertNotNull(modelValue29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07532");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isUndefined();
        boolean boolean19 = modelReader15.isBytes();
        boolean boolean20 = modelReader15.isBigInteger();
        boolean boolean21 = modelReader15.isBytes();
        boolean boolean22 = modelReader15.isString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = modelReader15.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't string");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test07533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07533");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(bigInteger3);
        boolean boolean6 = modelNode5.isProtected();
        org.jboss.dmr.ModelNode modelNode7 = modelNode5.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode9 = modelNode7.add("H4sIAAAAAAAAAFvzloG1uIhBNr8oXS8rKb+4WC8lt0gvLDGnNNW1oqAotbg4Mz/vj9r8R3l9E2J4GBgqCspZGJh0DSsAkLuCFDkAAAA=");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode7);
    }

    @Test
    public void test07534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07534");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        long long5 = objectModelValue0.asLong();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.removeChild("52");
        long long9 = objectModelValue0.asLong((long) 'l');
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(modelNode7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test07535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07535");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'Z');
    }

    @Test
    public void test07536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07536");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode1);
        org.jboss.dmr.ModelValue modelValue16 = propertyModelValue15.protect();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = modelValue16.asBoolean(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelValue16);
    }

    @Test
    public void test07537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07537");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        java.lang.String str5 = stringModelValue4.toString();
        boolean boolean6 = stringModelValue1.equals(stringModelValue4);
        org.jboss.dmr.ValueExpression valueExpression7 = stringModelValue1.asExpression();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"" + "'", str5, "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(valueExpression7);
    }

    @Test
    public void test07538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07538");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        long long11 = longModelValue1.asLong();
        java.math.BigDecimal bigDecimal12 = longModelValue1.asBigDecimal();
        long long14 = longModelValue1.asLong((long) (short) 100);
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        java.lang.String str20 = bytesModelValue19.asString();
        int int21 = bytesModelValue19.asInt();
        byte[] byteArray22 = bytesModelValue19.asBytes();
        org.jboss.dmr.LongModelValue longModelValue24 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str25 = longModelValue24.asString();
        byte[] byteArray26 = longModelValue24.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue27 = new org.jboss.dmr.BytesModelValue(byteArray26);
        java.lang.String str28 = bytesModelValue27.asString();
        int int29 = bytesModelValue27.asInt();
        int int30 = bytesModelValue27.asInt();
        org.jboss.dmr.LongModelValue longModelValue32 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str33 = longModelValue32.asString();
        byte[] byteArray34 = longModelValue32.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue35 = new org.jboss.dmr.BytesModelValue(byteArray34);
        double double36 = bytesModelValue35.asDouble();
        boolean boolean37 = bytesModelValue27.equals(bytesModelValue35);
        byte[] byteArray38 = bytesModelValue35.asBytes();
        java.math.BigInteger bigInteger39 = bytesModelValue35.asBigInteger();
        boolean boolean40 = bytesModelValue19.equals(bytesModelValue35);
        int int42 = bytesModelValue35.asInt((int) 'J');
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory44 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream45 = null;
        org.jboss.dmr.Base64.InputStream inputStream47 = new org.jboss.dmr.Base64.InputStream(inputStream45, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream48 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream47);
        org.jboss.dmr.stream.ModelReader modelReader49 = modelStreamFactory44.newModelReader((java.io.InputStream) inputStream48);
        java.io.OutputStream outputStream50 = null;
        org.jboss.dmr.Base64.OutputStream outputStream51 = new org.jboss.dmr.Base64.OutputStream(outputStream50);
        org.jboss.dmr.Base64.OutputStream outputStream52 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream51);
        outputStream51.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter55 = modelStreamFactory44.newModelWriter((java.io.OutputStream) outputStream51);
        org.jboss.dmr.stream.ModelWriter modelWriter56 = modelWriter55.writeListStart();
        bytesModelValue35.write(modelWriter56);
        org.jboss.dmr.BooleanModelValue booleanModelValue59 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray60 = booleanModelValue59.asBytes();
        java.lang.String str61 = booleanModelValue59.asString();
        int int62 = booleanModelValue59.asInt();
        long long63 = booleanModelValue59.asLong();
        boolean boolean65 = booleanModelValue59.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger66 = booleanModelValue59.asBigInteger();
        java.lang.String str67 = booleanModelValue59.asString();
        byte[] byteArray68 = booleanModelValue59.asBytes();
        java.lang.String str70 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) byteArray68, 10);
        org.jboss.dmr.stream.ModelWriter modelWriter71 = modelWriter56.writeBytes(byteArray68);
        org.jboss.dmr.StringModelValue stringModelValue73 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue75 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue77 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean78 = stringModelValue75.equals(stringModelValue77);
        byte[] byteArray79 = stringModelValue77.asBytes();
        java.lang.Object obj80 = null;
        boolean boolean81 = stringModelValue77.equals(obj80);
        boolean boolean83 = stringModelValue77.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean84 = stringModelValue73.equals(stringModelValue77);
        org.jboss.dmr.ValueExpression valueExpression85 = stringModelValue73.asExpression();
        byte[] byteArray86 = stringModelValue73.asBytes();
        org.jboss.dmr.stream.ModelWriter modelWriter87 = modelWriter56.writeBytes(byteArray86);
        longModelValue1.write(modelWriter87);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str20, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str28, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.9E-324d + "'", double36 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory44);
        org.junit.Assert.assertNotNull(modelReader49);
        org.junit.Assert.assertNotNull(modelWriter55);
        org.junit.Assert.assertNotNull(modelWriter56);
        org.junit.Assert.assertNotNull(booleanModelValue59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "true" + "'", str61, "true");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "true" + "'", str67, "true");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA" + "'", str70, "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.junit.Assert.assertNotNull(modelWriter71);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(valueExpression85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(modelWriter87);
    }

    @Test
    public void test07539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07539");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue9 = new org.jboss.dmr.ExpressionValue(valueExpression8);
        java.io.PrintWriter printWriter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue9.formatAsJSON(printWriter10, 8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
    }

    @Test
    public void test07540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07540");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.lang.String str6 = modelNode2.toString();
        org.jboss.dmr.ModelNode modelNode7 = modelNode2.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set(100);
        org.jboss.dmr.ModelNode modelNode10 = modelNode1.add(modelNode2);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set(4.9E-324d);
        org.jboss.dmr.Property property14 = new org.jboss.dmr.Property("98", modelNode12, false);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
    }

    @Test
    public void test07541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07541");
        java.lang.Throwable throwable3 = null;
        org.jboss.dmr.stream.ModelException modelException4 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable3);
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException4);
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException4);
        org.jboss.dmr.stream.ModelException modelException7 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException6);
        org.jboss.dmr.stream.ModelException modelException8 = new org.jboss.dmr.stream.ModelException("(\"hi!\" => expression \"hi!\")", (java.lang.Throwable) modelException7);
        org.jboss.dmr.stream.ModelException modelException9 = new org.jboss.dmr.stream.ModelException("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4", (java.lang.Throwable) modelException7);
        java.lang.Throwable throwable11 = null;
        org.jboss.dmr.stream.ModelException modelException12 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable11);
        org.jboss.dmr.stream.ModelException modelException13 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException12);
        org.jboss.dmr.stream.ModelException modelException14 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException12);
        java.lang.Throwable throwable16 = null;
        org.jboss.dmr.stream.ModelException modelException17 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable16);
        org.jboss.dmr.stream.ModelException modelException18 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException17);
        java.lang.Throwable throwable20 = null;
        org.jboss.dmr.stream.ModelException modelException21 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable20);
        org.jboss.dmr.stream.ModelException modelException22 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException21);
        modelException17.addSuppressed((java.lang.Throwable) modelException21);
        java.lang.Throwable[] throwableArray24 = modelException21.getSuppressed();
        modelException14.addSuppressed((java.lang.Throwable) modelException21);
        modelException9.addSuppressed((java.lang.Throwable) modelException14);
        org.jboss.dmr.stream.ModelException modelException27 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException14);
        org.jboss.dmr.ModelType modelType29 = org.jboss.dmr.ModelType.PROPERTY;
        char char30 = modelType29.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue31 = org.jboss.dmr.TypeModelValue.of(modelType29);
        org.jboss.dmr.ModelType modelType32 = org.jboss.dmr.ModelType.PROPERTY;
        char char33 = modelType32.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue34 = org.jboss.dmr.TypeModelValue.of(modelType32);
        boolean boolean35 = typeModelValue31.equals(typeModelValue34);
        java.lang.String str36 = typeModelValue34.asString();
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = modelNode40.asList();
        org.jboss.dmr.ListModelValue listModelValue42 = new org.jboss.dmr.ListModelValue(modelNodeList41);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue42);
        org.jboss.dmr.ModelValue modelValue44 = listModelValue42.resolve();
        int int46 = listModelValue42.asInt((int) (byte) 100);
        boolean boolean47 = listModelValue42.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray48 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean49 = listModelValue42.equals((java.lang.Object) modelNodeArray48);
        boolean boolean50 = typeModelValue34.equals((java.lang.Object) listModelValue42);
        org.jboss.dmr.ModelValue modelValue51 = listModelValue42.resolve();
        org.jboss.dmr.ModelValue modelValue52 = listModelValue42.protect();
        java.lang.Throwable throwable54 = null;
        org.jboss.dmr.stream.ModelException modelException55 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable54);
        org.jboss.dmr.stream.ModelException modelException56 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException55);
        java.lang.Throwable throwable58 = null;
        org.jboss.dmr.stream.ModelException modelException59 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable58);
        org.jboss.dmr.stream.ModelException modelException60 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException59);
        modelException55.addSuppressed((java.lang.Throwable) modelException59);
        boolean boolean62 = listModelValue42.equals((java.lang.Object) modelException55);
        org.jboss.dmr.stream.ModelException modelException63 = new org.jboss.dmr.stream.ModelException("1", (java.lang.Throwable) modelException55);
        modelException27.addSuppressed((java.lang.Throwable) modelException55);
        java.lang.Throwable[] throwableArray65 = modelException55.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertTrue("'" + modelType29 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType29.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char30 + "' != '" + 'p' + "'", char30 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue31);
        org.junit.Assert.assertTrue("'" + modelType32 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType32.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char33 + "' != '" + 'p' + "'", char33 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PROPERTY" + "'", str36, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertNotNull(modelValue44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(modelNodeArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(modelValue51);
        org.junit.Assert.assertNotNull(modelValue52);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(throwableArray65);
    }

    @Test
    public void test07542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07542");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        boolean boolean6 = doubleModelValue1.asBoolean(false);
        java.lang.String str7 = doubleModelValue1.asString();
        boolean boolean9 = doubleModelValue1.asBoolean(false);
        java.math.BigInteger bigInteger10 = doubleModelValue1.asBigInteger();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10.0" + "'", str7, "10.0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(bigInteger10);
    }

    @Test
    public void test07543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07543");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        byte[] byteArray5 = stringModelValue3.asBytes();
        org.jboss.dmr.ValueExpression valueExpression6 = stringModelValue3.asExpression();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory8 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream9 = null;
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream(inputStream9, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue13 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str14 = longModelValue13.asString();
        byte[] byteArray15 = longModelValue13.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue16 = new org.jboss.dmr.BytesModelValue(byteArray15);
        int int19 = inputStream11.read(byteArray15, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream11, (-1));
        org.jboss.dmr.stream.ModelReader modelReader22 = modelStreamFactory8.newModelReader((java.io.InputStream) inputStream21);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25);
        org.jboss.dmr.Base64.InputStream inputStream27 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25);
        org.jboss.dmr.stream.ModelReader modelReader28 = modelStreamFactory8.newModelReader((java.io.InputStream) inputStream25);
        java.io.InputStream inputStream29 = null;
        org.jboss.dmr.Base64.InputStream inputStream31 = new org.jboss.dmr.Base64.InputStream(inputStream29, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream31);
        org.jboss.dmr.stream.ModelReader modelReader33 = modelStreamFactory8.newModelReader((java.io.InputStream) inputStream31);
        java.io.OutputStream outputStream34 = null;
        org.jboss.dmr.Base64.OutputStream outputStream35 = new org.jboss.dmr.Base64.OutputStream(outputStream34);
        outputStream35.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream38 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream37);
        outputStream37.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream40 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream37);
        org.jboss.dmr.Base64.OutputStream outputStream41 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream37);
        org.jboss.dmr.stream.ModelWriter modelWriter42 = modelStreamFactory8.newModelWriter((java.io.OutputStream) outputStream41);
        org.jboss.dmr.stream.ModelWriter modelWriter44 = modelWriter42.writeExpression("H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue3.write(modelWriter42);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertNotNull(modelStreamFactory8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(modelReader22);
        org.junit.Assert.assertNotNull(modelReader28);
        org.junit.Assert.assertNotNull(modelReader33);
        org.junit.Assert.assertNotNull(modelWriter42);
        org.junit.Assert.assertNotNull(modelWriter44);
    }

    @Test
    public void test07544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07544");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        long long7 = listModelValue5.asLong();
        java.util.List<org.jboss.dmr.Property> propertyList8 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int10 = modelNode9.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode16 = modelNode9.set(valueExpression14);
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode(valueExpression14);
        boolean boolean19 = listModelValue5.equals((java.lang.Object) modelNode18);
        modelNode18.protect();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(propertyList8);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07545");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("rO0ABXA=");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode3 = modelNode1.add((double) 's');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07546");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        boolean boolean11 = modelNode8.equals((java.lang.Object) 100L);
        boolean boolean12 = modelNode0.equals(modelNode8);
        org.jboss.dmr.ModelNode modelNode13 = modelNode8.setEmptyList();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode13);
    }

    @Test
    public void test07547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07547");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.jboss.dmr.Base64.encodeBytes(byteArray0, (int) ' ', (int) 'J');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07548");
        java.lang.String str1 = org.jboss.dmr.ModelValue.jsonEscape("(\"expression \\\"hi!\\\"\" => bytes {\n    0x01\n})");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\"(\\\"expression \\\\\\\"hi!\\\\\\\"\\\" => bytes {\\n    0x01\\n})\"" + "'", str1, "\"(\\\"expression \\\\\\\"hi!\\\\\\\"\\\" => bytes {\\n    0x01\\n})\"");
    }

    @Test
    public void test07549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07549");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        long long8 = bytesModelValue4.asLong((long) (short) 1);
        java.math.BigInteger bigInteger9 = bytesModelValue4.asBigInteger();
        java.lang.String str10 = bytesModelValue4.asString();
        int int12 = bytesModelValue4.asInt((int) 'J');
        int int14 = bytesModelValue4.asInt((int) 'J');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str10, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test07550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07550");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) 52);
        double double3 = longModelValue1.asDouble((double) 32L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
    }

    @Test
    public void test07551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07551");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.PropertyModelValue propertyModelValue3 = new org.jboss.dmr.PropertyModelValue("0.0", modelNode2);
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set((double) 100L);
        java.lang.Boolean boolean6 = modelNode5.asBooleanOrNull();
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        long long10 = longModelValue8.asLong((long) (short) 0);
        java.lang.String str11 = longModelValue8.asString();
        org.jboss.dmr.ValueExpression valueExpression12 = longModelValue8.asExpression();
        long long13 = longModelValue8.asLong();
        java.math.BigInteger bigInteger14 = longModelValue8.asBigInteger();
        java.math.BigDecimal bigDecimal15 = longModelValue8.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression16 = longModelValue8.asExpression();
        org.jboss.dmr.ValueExpression valueExpression17 = longModelValue8.asExpression();
        org.jboss.dmr.ModelNode modelNode18 = modelNode5.set(valueExpression17);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger19 = modelNode5.asBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertNotNull(modelNode18);
    }

    @Test
    public void test07552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07552");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.set((double) (-1.0f));
        double double13 = modelNode9.asDouble(1.0d);
        org.jboss.dmr.ModelNode modelNode14 = modelNode9.setEmptyList();
        boolean boolean15 = modelNode14.asBoolean();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07553");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isUndefined();
        boolean boolean19 = modelReader15.isObjectStart();
        boolean boolean20 = modelReader15.isBytes();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = modelReader15.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't double");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07554");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double3 = longModelValue1.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        byte[] byteArray8 = longModelValue5.asBytes();
        boolean boolean9 = longModelValue1.equals(longModelValue5);
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue11.asLong((long) (short) 0);
        java.math.BigInteger bigInteger14 = longModelValue11.asBigInteger();
        boolean boolean15 = longModelValue5.equals(longModelValue11);
        int int17 = longModelValue11.asInt((int) (byte) 100);
        org.jboss.dmr.ObjectModelValue objectModelValue18 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue18.asObject();
        org.jboss.dmr.ModelValue modelValue20 = objectModelValue18.protect();
        java.util.List<org.jboss.dmr.Property> propertyList21 = objectModelValue18.asPropertyList();
        org.jboss.dmr.ModelValue modelValue22 = objectModelValue18.copy();
        boolean boolean23 = longModelValue11.equals((java.lang.Object) modelValue22);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = modelValue22.removeChild(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertNotNull(propertyList21);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07555");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelType modelType5 = modelNode3.getType();
        org.jboss.dmr.TypeModelValue typeModelValue6 = org.jboss.dmr.TypeModelValue.of(modelType5);
        boolean boolean8 = typeModelValue6.asBoolean(false);
        boolean boolean10 = typeModelValue6.asBoolean(false);
        org.jboss.dmr.ModelType modelType11 = typeModelValue6.asType();
        java.io.DataOutput dataOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeModelValue6.writeExternal(dataOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType5.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
    }

    @Test
    public void test07556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07556");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 0);
        byte[] byteArray2 = doubleModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue3 = new org.jboss.dmr.BytesModelValue(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test07557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07557");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        int int13 = listModelValue5.asInt();
        java.lang.String str14 = listModelValue5.asString();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        boolean boolean17 = listModelValue5.equals((java.lang.Object) modelType15);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode18 = listModelValue5.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType15.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07558");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isObjectEnd();
        boolean boolean19 = modelReader15.isBoolean();
        boolean boolean20 = modelReader15.isBoolean();
        boolean boolean21 = modelReader15.isBytes();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07559");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("{}");
        java.lang.String str2 = stringModelValue1.asString();
        byte[] byteArray3 = stringModelValue1.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger4 = stringModelValue1.asBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"{}\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[123, 125]");
    }

    @Test
    public void test07560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07560");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = listModelValue5.asObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode8 = listModelValue5.removeChild("[1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode6);
    }

    @Test
    public void test07561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07561");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isBytes();
        boolean boolean24 = modelReader15.isDouble();
        boolean boolean25 = modelReader15.isBigInteger();
        boolean boolean26 = modelReader15.isObjectEnd();
        boolean boolean27 = modelReader15.isBoolean();
        boolean boolean28 = modelReader15.isExpression();
        boolean boolean29 = modelReader15.isDouble();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = modelReader15.getExpression();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't expression");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07562");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.StringModelValue stringModelValue6 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        boolean boolean7 = stringModelValue3.equals(stringModelValue6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression12 = stringModelValue11.asExpression();
        boolean boolean13 = stringModelValue9.equals(stringModelValue11);
        boolean boolean14 = stringModelValue6.equals(stringModelValue11);
        byte[] byteArray15 = stringModelValue6.asBytes();
        java.lang.String str16 = stringModelValue6.asString();
        org.jboss.dmr.StringModelValue stringModelValue18 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.ValueExpression valueExpression19 = stringModelValue18.asExpression();
        java.lang.String str20 = stringModelValue18.asString();
        boolean boolean21 = stringModelValue6.equals(stringModelValue18);
        java.io.PrintWriter printWriter22 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue6.formatAsJSON(printWriter22, (int) 'I', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Expression \"true\"" + "'", str16, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Expression \"true\"" + "'", str20, "Expression \"true\"");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test07563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07563");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        int int13 = bigIntegerModelValue11.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue14 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double15 = booleanModelValue14.asDouble();
        org.jboss.dmr.ModelValue modelValue16 = booleanModelValue14.copy();
        java.math.BigInteger bigInteger17 = booleanModelValue14.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue18 = new org.jboss.dmr.BigIntegerModelValue(bigInteger17);
        java.lang.String str19 = bigIntegerModelValue18.asString();
        java.math.BigInteger bigInteger20 = bigIntegerModelValue18.asBigInteger();
        boolean boolean21 = bigIntegerModelValue11.equals(bigIntegerModelValue18);
        int int22 = bigIntegerModelValue18.asInt();
        boolean boolean23 = bigIntegerModelValue4.equals(bigIntegerModelValue18);
        org.jboss.dmr.LongModelValue longModelValue25 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str26 = longModelValue25.asString();
        byte[] byteArray27 = longModelValue25.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue28 = new org.jboss.dmr.BytesModelValue(byteArray27);
        java.lang.String str29 = bytesModelValue28.asString();
        int int30 = bytesModelValue28.asInt();
        int int31 = bytesModelValue28.asInt();
        org.jboss.dmr.LongModelValue longModelValue33 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str34 = longModelValue33.asString();
        byte[] byteArray35 = longModelValue33.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue36 = new org.jboss.dmr.BytesModelValue(byteArray35);
        double double37 = bytesModelValue36.asDouble();
        boolean boolean38 = bytesModelValue28.equals(bytesModelValue36);
        org.jboss.dmr.LongModelValue longModelValue40 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str41 = longModelValue40.asString();
        byte[] byteArray42 = longModelValue40.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue43 = new org.jboss.dmr.BytesModelValue(byteArray42);
        boolean boolean44 = bytesModelValue36.equals(bytesModelValue43);
        java.math.BigInteger bigInteger45 = bytesModelValue43.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue46 = new org.jboss.dmr.BigIntegerModelValue(bigInteger45);
        boolean boolean47 = bigIntegerModelValue18.equals(bigIntegerModelValue46);
        double double49 = bigIntegerModelValue18.asDouble((double) 112L);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str29, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4.9E-324d + "'", double37 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test07564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07564");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        byte[] byteArray6 = intModelValue1.asBytes();
        boolean boolean8 = intModelValue1.has("[1]");
        java.lang.String str10 = intModelValue1.toJSONString(true);
        org.jboss.dmr.ValueExpression valueExpression11 = intModelValue1.asExpression();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "32" + "'", str10, "32");
        org.junit.Assert.assertNotNull(valueExpression11);
    }

    @Test
    public void test07565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07565");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int10 = modelNode9.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.clone();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setNoCopy("35", modelNode11);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode13 = modelNode12.addEmptyList();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode12);
    }

    @Test
    public void test07566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07566");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isType();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelEvent modelEvent21 = modelReader15.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07567");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(bigDecimal5);
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.clear();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray10 = booleanModelValue9.asBytes();
        java.lang.String str11 = booleanModelValue9.asString();
        int int12 = booleanModelValue9.asInt();
        long long13 = booleanModelValue9.asLong();
        boolean boolean15 = booleanModelValue9.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger16 = booleanModelValue9.asBigInteger();
        byte[] byteArray17 = booleanModelValue9.asBytes();
        org.jboss.dmr.ModelNode modelNode18 = modelNode7.add(byteArray17);
        org.jboss.dmr.ModelNode modelNode21 = modelNode7.set("BYTES_VALUE", false);
        java.lang.String str23 = modelNode7.toJSONString(false);
        java.lang.String str24 = modelNode7.asStringOrNull();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "true" + "'", str11, "true");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n    \"BYTES_VALUE\" : false\n}" + "'", str23, "{\n    \"BYTES_VALUE\" : false\n}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(\"BYTES_VALUE\" => false)" + "'", str24, "(\"BYTES_VALUE\" => false)");
    }

    @Test
    public void test07568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07568");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        boolean boolean4 = modelNode1.has((int) '#');
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode9 = modelNode1.set("1");
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue17 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode14, false);
        boolean boolean19 = propertyModelValue17.has("10.0");
        org.jboss.dmr.ModelNode modelNode21 = propertyModelValue17.getChild(0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList22 = propertyModelValue17.asList();
        org.jboss.dmr.ModelNode modelNode23 = modelNode1.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList22);
        org.jboss.dmr.ModelNode modelNode25 = modelNode1.add((double) 'I');
        org.jboss.dmr.StringModelValue stringModelValue28 = new org.jboss.dmr.StringModelValue("(\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))");
        byte[] byteArray29 = stringModelValue28.asBytes();
        org.jboss.dmr.ModelNode modelNode30 = modelNode25.add("DOUBLE", byteArray29);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNodeList22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[40, 34, 69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 92, 34, 49, 92, 34, 34, 32, 61, 62, 32, 40, 34, 111, 114, 103, 46, 106, 98, 111, 115, 115, 46, 100, 109, 114, 46, 115, 116, 114, 101, 97, 109, 46, 77, 111, 100, 101, 108, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 91, 40, 92, 34, 104, 105, 33, 92, 34, 32, 61, 62, 32, 48, 46, 48, 41, 93, 34, 32, 61, 62, 32, 66, 89, 84, 69, 83, 41, 41]");
        org.junit.Assert.assertNotNull(modelNode30);
    }

    @Test
    public void test07569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07569");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelNodeFactory modelNodeFactory10 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode13 = modelNodeFactory10.readFrom("10.0", false);
        boolean boolean14 = modelNode13.isDefined();
        boolean boolean15 = listModelValue5.equals((java.lang.Object) modelNode13);
        org.jboss.dmr.BooleanModelValue booleanModelValue16 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double17 = booleanModelValue16.asDouble();
        org.jboss.dmr.ModelValue modelValue18 = booleanModelValue16.copy();
        java.math.BigInteger bigInteger19 = booleanModelValue16.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue20 = new org.jboss.dmr.BigIntegerModelValue(bigInteger19);
        java.lang.String str21 = bigIntegerModelValue20.asString();
        long long23 = bigIntegerModelValue20.asLong(32L);
        double double24 = bigIntegerModelValue20.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue25 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double26 = booleanModelValue25.asDouble();
        org.jboss.dmr.ModelValue modelValue27 = booleanModelValue25.copy();
        java.math.BigInteger bigInteger28 = booleanModelValue25.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue29 = new org.jboss.dmr.BigIntegerModelValue(bigInteger28);
        double double31 = bigIntegerModelValue29.asDouble((double) 'b');
        boolean boolean32 = bigIntegerModelValue20.equals(bigIntegerModelValue29);
        org.jboss.dmr.BooleanModelValue booleanModelValue33 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double34 = booleanModelValue33.asDouble();
        org.jboss.dmr.ModelValue modelValue35 = booleanModelValue33.copy();
        java.math.BigInteger bigInteger36 = booleanModelValue33.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue37 = new org.jboss.dmr.BigIntegerModelValue(bigInteger36);
        long long39 = bigIntegerModelValue37.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue40 = null;
        boolean boolean41 = bigIntegerModelValue37.equals(bigIntegerModelValue40);
        boolean boolean42 = bigIntegerModelValue20.equals(bigIntegerModelValue37);
        org.jboss.dmr.ModelValue modelValue43 = bigIntegerModelValue37.resolve();
        boolean boolean45 = bigIntegerModelValue37.asBoolean(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory47 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream48 = null;
        org.jboss.dmr.Base64.InputStream inputStream50 = new org.jboss.dmr.Base64.InputStream(inputStream48, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue52 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str53 = longModelValue52.asString();
        byte[] byteArray54 = longModelValue52.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue55 = new org.jboss.dmr.BytesModelValue(byteArray54);
        int int58 = inputStream50.read(byteArray54, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream60 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream50, (-1));
        org.jboss.dmr.stream.ModelReader modelReader61 = modelStreamFactory47.newModelReader((java.io.InputStream) inputStream60);
        java.io.InputStream inputStream62 = null;
        org.jboss.dmr.Base64.InputStream inputStream64 = new org.jboss.dmr.Base64.InputStream(inputStream62, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream65 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream64);
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream64);
        org.jboss.dmr.stream.ModelReader modelReader67 = modelStreamFactory47.newModelReader((java.io.InputStream) inputStream64);
        java.io.InputStream inputStream68 = null;
        org.jboss.dmr.Base64.InputStream inputStream70 = new org.jboss.dmr.Base64.InputStream(inputStream68, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream71 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream70);
        org.jboss.dmr.stream.ModelReader modelReader72 = modelStreamFactory47.newModelReader((java.io.InputStream) inputStream70);
        java.io.OutputStream outputStream73 = null;
        org.jboss.dmr.Base64.OutputStream outputStream74 = new org.jboss.dmr.Base64.OutputStream(outputStream73);
        outputStream74.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream76 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream74);
        org.jboss.dmr.Base64.OutputStream outputStream77 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream76);
        outputStream76.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream79 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream76);
        org.jboss.dmr.Base64.OutputStream outputStream80 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream76);
        org.jboss.dmr.stream.ModelWriter modelWriter81 = modelStreamFactory47.newModelWriter((java.io.OutputStream) outputStream80);
        org.jboss.dmr.stream.ModelWriter modelWriter83 = modelWriter81.writeBoolean(false);
        modelWriter83.close();
        boolean boolean85 = bigIntegerModelValue37.equals((java.lang.Object) modelWriter83);
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.write(modelWriter83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: DMR writer have been closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelNodeFactory10);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(booleanModelValue16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(booleanModelValue33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(modelValue43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory47);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(modelReader61);
        org.junit.Assert.assertNotNull(modelReader67);
        org.junit.Assert.assertNotNull(modelReader72);
        org.junit.Assert.assertNotNull(modelWriter81);
        org.junit.Assert.assertNotNull(modelWriter83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07570");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.lang.String str6 = modelNode2.toString();
        org.jboss.dmr.ModelNode modelNode7 = modelNode2.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set(100);
        org.jboss.dmr.ModelNode modelNode10 = modelNode1.add(modelNode2);
        org.jboss.dmr.ModelType modelType12 = org.jboss.dmr.ModelType.BYTES;
        char char13 = modelType12.getTypeChar();
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType12);
        org.jboss.dmr.PropertyModelValue propertyModelValue16 = new org.jboss.dmr.PropertyModelValue("Expression \"1\"", modelNode1, false);
        java.util.Set<java.lang.String> strSet17 = modelNode1.keys();
        org.jboss.dmr.ModelNode modelNode19 = org.jboss.dmr.ModelNode.fromJSONString("1.0");
        org.jboss.dmr.ModelNode modelNode20 = modelNode19.setEmptyObject();
        org.jboss.dmr.IntModelValue intModelValue23 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long25 = intModelValue23.asLong((long) 'b');
        java.lang.String str26 = intModelValue23.asString();
        long long27 = intModelValue23.asLong();
        long long28 = intModelValue23.asLong();
        org.jboss.dmr.ValueExpression valueExpression29 = intModelValue23.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver30 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal31 = valueExpression29.resolveBigDecimal(valueExpressionResolver30);
        org.jboss.dmr.ModelNode modelNode32 = modelNode20.set("\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\"", bigDecimal31);
        modelNode1.setNoCopy(modelNode32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Long long34 = modelNode1.asLongOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + modelType12 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType12.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + 'b' + "'", char13 == 'b');
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(modelNode32);
    }

    @Test
    public void test07571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07571");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) ' ');
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode4 = modelNode3.setEmptyList();
        boolean boolean5 = longModelValue1.equals((java.lang.Object) modelNode3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test07572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07572");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue5 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean6 = stringModelValue3.equals(stringModelValue5);
        byte[] byteArray7 = stringModelValue5.asBytes();
        java.lang.Object obj8 = null;
        boolean boolean9 = stringModelValue5.equals(obj8);
        boolean boolean11 = stringModelValue5.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean12 = stringModelValue1.equals(stringModelValue5);
        java.lang.String str13 = stringModelValue1.asString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger14 = stringModelValue1.asBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Expressi\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Expression \"true\"" + "'", str13, "Expression \"true\"");
    }

    @Test
    public void test07573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07573");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        boolean boolean18 = listModelValue13.has((int) (byte) -1);
        long long20 = listModelValue13.asLong((long) 'D');
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test07574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07574");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigDecimal bigDecimal10 = bigDecimalModelValue7.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue7.asExpression();
        org.jboss.dmr.ValueExpression valueExpression12 = bigDecimalModelValue7.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression15 = expressionValue14.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver16 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str17 = valueExpression15.resolveString(valueExpressionResolver16);
        java.lang.String str19 = valueExpressionResolver16.resolvePart("{ \"35\" : 0.0 }");
        java.lang.String str21 = valueExpressionResolver16.resolvePart("{\n    \"EXPRESSION_VALUE\" : 35\n}");
        org.jboss.dmr.BooleanModelValue booleanModelValue23 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long24 = booleanModelValue23.asLong();
        org.jboss.dmr.ValueExpression valueExpression25 = booleanModelValue23.asExpression();
        java.lang.String str26 = valueExpression25.toString();
        org.jboss.dmr.ExpressionValue expressionValue28 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression29 = expressionValue28.asExpression();
        boolean boolean30 = valueExpression25.equals(valueExpression29);
        org.jboss.dmr.LongModelValue longModelValue32 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal33 = longModelValue32.asBigDecimal();
        int int34 = longModelValue32.asInt();
        org.jboss.dmr.ValueExpression valueExpression35 = longModelValue32.asExpression();
        boolean boolean36 = valueExpression29.equals(valueExpression35);
        int int37 = valueExpression35.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue39 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression40 = expressionValue39.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver41 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str42 = valueExpression40.resolveString(valueExpressionResolver41);
        java.math.BigInteger bigInteger43 = valueExpression35.resolveBigInteger(valueExpressionResolver41);
        java.lang.String str44 = valueExpressionResolver16.resolve(valueExpression35);
        java.lang.String str46 = valueExpressionResolver16.resolvePart("(\"hi!\" => 0.0)");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger47 = valueExpression12.resolveBigInteger(valueExpressionResolver16);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"1.0\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(booleanModelValue23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(valueExpression25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Expression \"true\"" + "'", str26, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(valueExpression35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(valueExpression40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "52" + "'", str44, "52");
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test07575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07575");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromJSONString("[1]");
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.add(true);
        org.jboss.dmr.ModelNode modelNode5 = modelNode3.setExpression("{\n    \"TYPE_MODEL_VALUE\" => undefined,\n    \"[(\\\"hi!\\\" => 0.0)]\" => undefined,\n    \"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => undefined\n}");
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode5);
    }

    @Test
    public void test07576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07576");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.lang.String str5 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode1);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode1.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set((double) 0);
        org.jboss.dmr.ModelNode modelNode9 = modelNode1.clear();
        org.jboss.dmr.IntModelValue intModelValue12 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long14 = intModelValue12.asLong((long) 'b');
        java.lang.String str15 = intModelValue12.asString();
        java.math.BigInteger bigInteger16 = intModelValue12.asBigInteger();
        org.jboss.dmr.ModelNode modelNode17 = modelNode9.add("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", bigInteger16);
        java.lang.String str19 = modelNode9.asString("(\"hi!\" => 0.0)");
        org.jboss.dmr.PropertyModelValue propertyModelValue20 = new org.jboss.dmr.PropertyModelValue("{\n    \"EXPRESSION_VALUE\" : {\n        \"\" : {\n            \"hi!\" : 0.0\n        }\n    }\n}", modelNode9);
        org.jboss.dmr.ModelNode modelNode22 = modelNode9.set(32);
        java.io.PrintWriter printWriter23 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode22.formatAsJSON(printWriter23, 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "32" + "'", str15, "32");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]" + "'", str19, "[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]");
        org.junit.Assert.assertNotNull(modelNode22);
    }

    @Test
    public void test07577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07577");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(true);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream16);
        org.jboss.dmr.stream.ModelReader modelReader18 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream16);
        java.io.OutputStream outputStream19 = null;
        org.jboss.dmr.Base64.OutputStream outputStream20 = new org.jboss.dmr.Base64.OutputStream(outputStream19);
        outputStream20.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream22 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream20);
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream22, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream25 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream24);
        outputStream25.resumeEncoding();
        outputStream25.flushBase64();
        java.io.OutputStream outputStream28 = null;
        org.jboss.dmr.Base64.OutputStream outputStream29 = new org.jboss.dmr.Base64.OutputStream(outputStream28);
        outputStream29.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream29);
        org.jboss.dmr.Base64.OutputStream outputStream32 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream31);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue37 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger38 = booleanModelValue37.asBigInteger();
        byte[] byteArray39 = booleanModelValue37.asBytes();
        org.jboss.dmr.ModelNode modelNode40 = modelNode34.set("expression \"hi!\"", byteArray39);
        outputStream31.write(byteArray39);
        outputStream25.write(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = inputStream16.read(byteArray39, (int) 'p', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader18);
        org.junit.Assert.assertNotNull(booleanModelValue37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertNotNull(modelNode40);
    }

    @Test
    public void test07578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07578");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.math.BigDecimal bigDecimal5 = bytesModelValue4.asBigDecimal();
        java.math.BigInteger bigInteger6 = bytesModelValue4.asBigInteger();
        double double7 = bytesModelValue4.asDouble();
        java.io.DataOutput dataOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue4.writeExternal(dataOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 4.9E-324d + "'", double7 == 4.9E-324d);
    }

    @Test
    public void test07579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07579");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression14 = expressionValue13.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str17 = expressionValue16.toString();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        boolean boolean24 = expressionValue16.equals((java.lang.Object) property23);
        boolean boolean25 = expressionValue13.equals(expressionValue16);
        boolean boolean26 = expressionValue8.equals((java.lang.Object) boolean25);
        org.jboss.dmr.ValueExpression valueExpression27 = expressionValue8.asExpression();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode(valueExpression27);
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4", "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode35 = modelNode34.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue36 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode37 = objectModelValue36.asObject();
        java.util.Set<java.lang.String> strSet38 = objectModelValue36.getKeys();
        boolean boolean40 = objectModelValue36.has((int) 'a');
        boolean boolean42 = objectModelValue36.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue43 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode44 = objectModelValue43.asObject();
        java.util.Set<java.lang.String> strSet45 = objectModelValue43.getKeys();
        boolean boolean47 = objectModelValue43.has((int) 'a');
        boolean boolean48 = objectModelValue36.equals(objectModelValue43);
        org.jboss.dmr.ModelNode modelNode49 = objectModelValue43.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList50 = objectModelValue43.asList();
        org.jboss.dmr.ModelNode modelNode51 = modelNode34.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList50);
        org.jboss.dmr.Property property53 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode34, true);
        org.jboss.dmr.Property property54 = property53.clone();
        org.jboss.dmr.ModelNode modelNode55 = modelNode31.set(property54);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = modelNode55.asInt((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "expression \"hi!\"" + "'", str17, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNodeList50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(modelNode55);
    }

    @Test
    public void test07580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07580");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream27 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26);
        org.jboss.dmr.stream.ModelReader modelReader28 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream26);
        java.io.OutputStream outputStream29 = null;
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream(outputStream29);
        outputStream30.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream32 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        outputStream32.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream35 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelStreamFactory3.newModelWriter((java.io.OutputStream) outputStream36);
        stringModelValue1.write(modelWriter37);
        byte[] byteArray39 = stringModelValue1.asBytes();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory41 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream42 = null;
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream(inputStream42, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream44);
        org.jboss.dmr.stream.ModelReader modelReader46 = modelStreamFactory41.newModelReader((java.io.InputStream) inputStream45);
        java.io.OutputStream outputStream47 = null;
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream(outputStream47);
        org.jboss.dmr.Base64.OutputStream outputStream49 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream48);
        outputStream48.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelStreamFactory41.newModelWriter((java.io.OutputStream) outputStream48);
        org.jboss.dmr.stream.ModelWriter modelWriter53 = modelWriter52.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter55 = modelWriter53.writeInt((int) (byte) 10);
        java.io.InputStream inputStream56 = null;
        org.jboss.dmr.Base64.InputStream inputStream58 = new org.jboss.dmr.Base64.InputStream(inputStream56, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue60 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str61 = longModelValue60.asString();
        byte[] byteArray62 = longModelValue60.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue63 = new org.jboss.dmr.BytesModelValue(byteArray62);
        int int66 = inputStream58.read(byteArray62, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter67 = modelWriter55.writeBytes(byteArray62);
        org.jboss.dmr.ModelNode modelNode69 = org.jboss.dmr.ModelNode.fromString("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"");
        org.jboss.dmr.ModelNode modelNode71 = modelNode69.setExpression("AAAAIA==");
        org.jboss.dmr.ModelNode modelNode74 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long75 = modelNode74.asLong();
        org.jboss.dmr.ValueExpression valueExpression76 = modelNode74.asExpression();
        java.math.BigDecimal bigDecimal77 = valueExpression76.resolveBigDecimal();
        java.lang.String str78 = valueExpression76.getExpressionString();
        java.math.BigDecimal bigDecimal79 = valueExpression76.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue80 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal79);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue81 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal79);
        org.jboss.dmr.ModelNode modelNode82 = modelNode69.set("\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"", bigDecimal79);
        org.jboss.dmr.stream.ModelWriter modelWriter83 = modelWriter67.writeBigDecimal(bigDecimal79);
        org.jboss.dmr.stream.ModelWriter modelWriter84 = modelWriter83.writePropertyStart();
        stringModelValue1.write(modelWriter83);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType86 = stringModelValue1.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.jboss.dmr.ModelType.rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z?cy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA?AAAAeA==");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertNotNull(modelReader28);
        org.junit.Assert.assertNotNull(modelWriter37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[114, 79, 48, 65, 66, 88, 78, 121, 65, 66, 100, 118, 99, 109, 99, 117, 97, 109, 74, 118, 99, 51, 77, 117, 90, 71, 49, 121, 76, 107, 49, 118, 90, 71, 86, 115, 84, 109, 57, 107, 90, 82, 119, 116, 111, 85, 83, 100, 111, 52, 52, 47, 68, 65, 65, 65, 101, 72, 66, 51, 82, 51, 65, 65, 78, 87, 57, 121, 90, 121, 53, 113, 89, 109, 57, 122, 10, 99, 121, 53, 107, 98, 88, 73, 117, 99, 51, 82, 121, 90, 87, 70, 116, 76, 107, 49, 118, 90, 71, 86, 115, 82, 88, 104, 106, 90, 88, 66, 48, 97, 87, 57, 117, 79, 105, 66, 98, 75, 67, 74, 111, 97, 83, 69, 105, 73, 68, 48, 43, 73, 68, 65, 117, 77, 67, 108, 100, 99, 65, 65, 68, 97, 71, 107, 104, 82, 65, 65, 65, 65, 65, 65, 65, 10, 65, 65, 65, 65, 101, 65, 61, 61]");
        org.junit.Assert.assertNotNull(modelStreamFactory41);
        org.junit.Assert.assertNotNull(modelReader46);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(modelWriter53);
        org.junit.Assert.assertNotNull(modelWriter55);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(modelWriter67);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(valueExpression76);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1.0" + "'", str78, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(modelNode82);
        org.junit.Assert.assertNotNull(modelWriter83);
        org.junit.Assert.assertNotNull(modelWriter84);
    }

    @Test
    public void test07581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07581");
        java.lang.String str1 = org.jboss.dmr.ValueExpression.quote("org.jboss.dmr.stream.ModelException: (\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "org.jboss.dmr.stream.ModelException: (\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))" + "'", str1, "org.jboss.dmr.stream.ModelException: (\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))");
    }

    @Test
    public void test07582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07582");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        boolean boolean3 = longModelValue1.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression4 = longModelValue1.asExpression();
        java.io.DataOutput dataOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            longModelValue1.writeExternal(dataOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(valueExpression4);
    }

    @Test
    public void test07583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07583");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        byte[] byteArray6 = longModelValue1.asBytes();
        boolean boolean8 = org.jboss.dmr.Base64.encodeToFile(byteArray6, "\"PROPERTY_VALUE\"");
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray6);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test07584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07584");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        java.math.BigInteger bigInteger6 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(bigInteger6);
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue((-1L));
        long long11 = longModelValue9.asLong((long) (byte) -1);
        int int13 = longModelValue9.asInt(0);
        org.jboss.dmr.ValueExpression valueExpression14 = longModelValue9.asExpression();
        org.jboss.dmr.ModelNode modelNode15 = modelNode7.set(valueExpression14);
        java.io.DataOutputStream dataOutputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode7.writeExternal(dataOutputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(modelNode15);
    }

    @Test
    public void test07585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07585");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression9 = bigDecimalModelValue7.asExpression();
        int int10 = bigDecimalModelValue7.asInt();
        long long11 = bigDecimalModelValue7.asLong();
        boolean boolean12 = bigDecimalModelValue7.asBoolean();
        java.io.DataOutput dataOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue7.writeExternal(dataOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07586");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        int int10 = intModelValue5.asInt();
        long long11 = intModelValue5.asLong();
        int int12 = intModelValue5.asInt();
        long long14 = intModelValue5.asLong((long) (byte) 1);
        java.io.DataOutput dataOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            intModelValue5.writeExternal(dataOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
    }

    @Test
    public void test07587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07587");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.ModelNode modelNode8 = modelNode3.set((double) 'a');
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue(1L);
        long long12 = longModelValue10.asLong((long) (short) 0);
        java.lang.String str13 = longModelValue10.asString();
        org.jboss.dmr.ValueExpression valueExpression14 = longModelValue10.asExpression();
        int int15 = valueExpression14.resolveInt();
        org.jboss.dmr.ModelNode modelNode16 = modelNode3.set(valueExpression14);
        org.jboss.dmr.IntModelValue intModelValue18 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str19 = intModelValue18.asString();
        double double21 = intModelValue18.asDouble((double) 2);
        java.math.BigDecimal bigDecimal22 = intModelValue18.asBigDecimal();
        boolean boolean23 = valueExpression14.equals((java.lang.Object) intModelValue18);
        int int24 = intModelValue18.asInt();
        org.jboss.dmr.IntModelValue intModelValue26 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long28 = intModelValue26.asLong((long) 'b');
        java.lang.String str29 = intModelValue26.asString();
        java.math.BigInteger bigInteger30 = intModelValue26.asBigInteger();
        double double32 = intModelValue26.asDouble(0.0d);
        double double33 = intModelValue26.asDouble();
        boolean boolean34 = intModelValue26.asBoolean();
        int int35 = intModelValue26.asInt();
        boolean boolean36 = intModelValue18.equals(intModelValue26);
        double double38 = intModelValue18.asDouble((double) (short) 1);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode44.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue47 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode44, false);
        boolean boolean49 = propertyModelValue47.has("10.0");
        org.jboss.dmr.ModelNode modelNode51 = propertyModelValue47.getChild(0);
        org.jboss.dmr.PropertyModelValue propertyModelValue53 = new org.jboss.dmr.PropertyModelValue("Expression \"1\"", modelNode51, true);
        org.jboss.dmr.ModelValue modelValue54 = propertyModelValue53.protect();
        org.jboss.dmr.ModelValue modelValue55 = propertyModelValue53.resolve();
        boolean boolean56 = intModelValue18.equals((java.lang.Object) modelValue55);
        org.jboss.dmr.IntModelValue intModelValue58 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode59 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode62 = modelNode59.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList63 = modelNode62.asList();
        org.jboss.dmr.ListModelValue listModelValue64 = new org.jboss.dmr.ListModelValue(modelNodeList63);
        org.jboss.dmr.ModelNode modelNode65 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue64);
        org.jboss.dmr.ModelValue modelValue66 = listModelValue64.resolve();
        int int68 = listModelValue64.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList69 = listModelValue64.asPropertyList();
        boolean boolean70 = intModelValue58.equals((java.lang.Object) listModelValue64);
        double double71 = intModelValue58.asDouble();
        long long73 = intModelValue58.asLong(1L);
        byte[] byteArray74 = intModelValue58.asBytes();
        boolean boolean75 = intModelValue18.equals(intModelValue58);
        org.jboss.dmr.IntModelValue intModelValue77 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str78 = intModelValue77.asString();
        byte[] byteArray79 = intModelValue77.asBytes();
        boolean boolean81 = intModelValue77.has("\"35\"");
        java.math.BigInteger bigInteger82 = intModelValue77.asBigInteger();
        boolean boolean83 = intModelValue18.equals((java.lang.Object) bigInteger82);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32" + "'", str19, "32");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 32.0d + "'", double21 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 32.0d + "'", double32 == 32.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 32.0d + "'", double33 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 32.0d + "'", double38 == 32.0d);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelValue54);
        org.junit.Assert.assertNotNull(modelValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNotNull(modelNodeList63);
        org.junit.Assert.assertNotNull(modelValue66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(propertyList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 32.0d + "'", double71 == 32.0d);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 32L + "'", long73 == 32L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "32" + "'", str78, "32");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test07588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07588");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode10 = modelNode0.resolve();
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        org.jboss.dmr.ModelType modelType14 = org.jboss.dmr.ModelType.PROPERTY;
        char char15 = modelType14.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue16 = org.jboss.dmr.TypeModelValue.of(modelType14);
        boolean boolean17 = typeModelValue13.equals(typeModelValue16);
        java.lang.String str18 = typeModelValue16.asString();
        org.jboss.dmr.ModelType modelType19 = org.jboss.dmr.ModelType.PROPERTY;
        char char20 = modelType19.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue21 = org.jboss.dmr.TypeModelValue.of(modelType19);
        org.jboss.dmr.ModelType modelType22 = org.jboss.dmr.ModelType.PROPERTY;
        char char23 = modelType22.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue24 = org.jboss.dmr.TypeModelValue.of(modelType22);
        boolean boolean25 = typeModelValue21.equals(typeModelValue24);
        java.lang.String str26 = typeModelValue24.asString();
        boolean boolean28 = typeModelValue24.asBoolean(true);
        boolean boolean29 = typeModelValue16.equals(typeModelValue24);
        org.jboss.dmr.ValueExpression valueExpression30 = typeModelValue24.asExpression();
        org.jboss.dmr.ValueExpression valueExpression31 = typeModelValue24.asExpression();
        org.jboss.dmr.BooleanModelValue booleanModelValue33 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long34 = booleanModelValue33.asLong();
        org.jboss.dmr.ValueExpression valueExpression35 = booleanModelValue33.asExpression();
        boolean boolean37 = valueExpression35.equals((java.lang.Object) 'p');
        org.jboss.dmr.ExpressionValue expressionValue38 = new org.jboss.dmr.ExpressionValue(valueExpression35);
        org.jboss.dmr.BooleanModelValue booleanModelValue39 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double40 = booleanModelValue39.asDouble();
        org.jboss.dmr.ModelValue modelValue41 = booleanModelValue39.copy();
        java.math.BigInteger bigInteger42 = booleanModelValue39.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue43 = new org.jboss.dmr.BigIntegerModelValue(bigInteger42);
        double double45 = bigIntegerModelValue43.asDouble((double) 'b');
        int int46 = bigIntegerModelValue43.asInt();
        org.jboss.dmr.ValueExpression valueExpression47 = bigIntegerModelValue43.asExpression();
        boolean boolean48 = valueExpression35.equals((java.lang.Object) valueExpression47);
        boolean boolean49 = valueExpression31.equals(valueExpression35);
        org.jboss.dmr.ModelNode modelNode50 = modelNode10.set(valueExpression31);
        org.jboss.dmr.LongModelValue longModelValue52 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str53 = longModelValue52.asString();
        org.jboss.dmr.ValueExpression valueExpression54 = longModelValue52.asExpression();
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        boolean boolean59 = modelNode57.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.PropertyModelValue propertyModelValue60 = new org.jboss.dmr.PropertyModelValue("TYPE_MODEL_VALUE", modelNode57);
        org.jboss.dmr.ModelNode modelNode62 = propertyModelValue60.getChild(0);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver63 = new org.jboss.dmr.ValueExpressionResolver();
        boolean boolean64 = propertyModelValue60.equals((java.lang.Object) valueExpressionResolver63);
        java.math.BigInteger bigInteger65 = valueExpression54.resolveBigInteger(valueExpressionResolver63);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal66 = valueExpression31.resolveBigDecimal(valueExpressionResolver63);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType14.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'p' + "'", char15 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PROPERTY" + "'", str18, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType19 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType19.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + 'p' + "'", char20 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue21);
        org.junit.Assert.assertTrue("'" + modelType22 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType22.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + 'p' + "'", char23 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PROPERTY" + "'", str26, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertNotNull(booleanModelValue33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(valueExpression35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(booleanModelValue39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(valueExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertNotNull(valueExpression54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(bigInteger65);
    }

    @Test
    public void test07589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07589");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        boolean boolean4 = stringModelValue1.equals((java.lang.Object) (-1.0d));
        java.lang.String str5 = stringModelValue1.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent6 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) modelEvent6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue13 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean14 = stringModelValue11.equals(stringModelValue13);
        byte[] byteArray15 = stringModelValue13.asBytes();
        java.lang.Object obj16 = null;
        boolean boolean17 = stringModelValue13.equals(obj16);
        boolean boolean19 = stringModelValue13.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean20 = stringModelValue9.equals(stringModelValue13);
        boolean boolean21 = stringModelValue1.equals(stringModelValue13);
        org.jboss.dmr.StringModelValue stringModelValue22 = null;
        boolean boolean23 = stringModelValue1.equals(stringModelValue22);
        java.io.PrintWriter printWriter24 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue1.formatAsJSON(printWriter24, (int) 'p', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str5, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent6 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent6.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07590");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        byte[] byteArray14 = intModelValue9.asBytes();
        org.jboss.dmr.ModelValue modelValue15 = intModelValue9.clone();
        int int17 = intModelValue9.asInt((int) (short) 0);
        byte[] byteArray18 = intModelValue9.asBytes();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 32]");
    }

    @Test
    public void test07591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07591");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.set((double) (-1.0f));
        double double13 = modelNode9.asDouble(1.0d);
        org.jboss.dmr.ModelNode modelNode14 = modelNode9.setEmptyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode9.asList();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
    }

    @Test
    public void test07592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07592");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        byte[] byteArray3 = booleanModelValue1.asBytes();
        int int5 = booleanModelValue1.asInt((int) (short) 1);
        java.math.BigDecimal bigDecimal6 = booleanModelValue1.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(bigDecimal6);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode8 = modelNode7.addEmptyObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(bigDecimal6);
    }

    @Test
    public void test07593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07593");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isBytes();
        boolean boolean20 = modelReader15.isBigInteger();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = modelReader15.getInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't int");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07594");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        org.jboss.dmr.Property property6 = property5.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue(property5);
        org.jboss.dmr.PropertyModelValue propertyModelValue8 = new org.jboss.dmr.PropertyModelValue(property5);
        org.jboss.dmr.Property property9 = propertyModelValue8.asProperty();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode11 = propertyModelValue8.getChild("(\"(\\\"hi!\\\" => expression \\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\")\" => -1L)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test07595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07595");
        java.lang.String str1 = org.jboss.dmr.ModelValue.quote("big decimal 32");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\"big decimal 32\"" + "'", str1, "\"big decimal 32\"");
    }

    @Test
    public void test07596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07596");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(false);
        int int3 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set(52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue12);
        org.jboss.dmr.ModelValue modelValue14 = listModelValue12.resolve();
        int int16 = listModelValue12.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList17 = listModelValue12.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue12.asPropertyList();
        org.jboss.dmr.ModelNode modelNode20 = listModelValue12.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.resolve();
        org.jboss.dmr.ModelNode modelNode22 = modelNode5.set("EXPRESSION_VALUE", modelNode21);
        org.jboss.dmr.ModelNode modelNode25 = modelNode5.set("\"[97L]\"", "");
        java.io.ObjectOutput objectOutput26 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode5.writeExternal(objectOutput26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode25);
    }

    @Test
    public void test07597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07597");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.lang.String str6 = modelNode2.toString();
        org.jboss.dmr.ModelNode modelNode7 = modelNode2.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set(100);
        org.jboss.dmr.ModelNode modelNode10 = modelNode1.add(modelNode2);
        org.jboss.dmr.ModelType modelType12 = org.jboss.dmr.ModelType.BYTES;
        char char13 = modelType12.getTypeChar();
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType12);
        org.jboss.dmr.PropertyModelValue propertyModelValue16 = new org.jboss.dmr.PropertyModelValue("Expression \"1\"", modelNode1, false);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long19 = modelNode18.asLong();
        org.jboss.dmr.ValueExpression valueExpression20 = modelNode18.asExpression();
        java.math.BigDecimal bigDecimal21 = valueExpression20.resolveBigDecimal();
        java.lang.String str22 = valueExpression20.getExpressionString();
        java.math.BigDecimal bigDecimal23 = valueExpression20.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue24 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal23);
        int int26 = bigDecimalModelValue24.asInt(0);
        int int27 = bigDecimalModelValue24.asInt();
        int int28 = bigDecimalModelValue24.asInt();
        java.math.BigInteger bigInteger29 = bigDecimalModelValue24.asBigInteger();
        org.jboss.dmr.ModelNode modelNode30 = modelNode1.set(bigInteger29);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property31 = modelNode30.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + modelType12 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType12.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + 'b' + "'", char13 == 'b');
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1.0" + "'", str22, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(modelNode30);
    }

    @Test
    public void test07598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07598");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int3 = doubleModelValue1.asInt((int) 'l');
        java.math.BigDecimal bigDecimal4 = doubleModelValue1.asBigDecimal();
        byte[] byteArray5 = doubleModelValue1.asBytes();
        double double7 = doubleModelValue1.asDouble(1.0d);
        java.lang.String str8 = doubleModelValue1.asString();
        boolean boolean9 = doubleModelValue1.asBoolean();
        long long10 = doubleModelValue1.asLong();
        boolean boolean11 = doubleModelValue1.asBoolean();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory13 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream14 = null;
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream(inputStream14, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream16);
        org.jboss.dmr.stream.ModelReader modelReader18 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream17);
        java.io.OutputStream outputStream19 = null;
        org.jboss.dmr.Base64.OutputStream outputStream20 = new org.jboss.dmr.Base64.OutputStream(outputStream19);
        org.jboss.dmr.Base64.OutputStream outputStream21 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream20);
        outputStream20.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelStreamFactory13.newModelWriter((java.io.OutputStream) outputStream20);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        java.lang.String str30 = modelNode26.toString();
        org.jboss.dmr.ModelNode modelNode31 = modelNode26.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode33 = modelNode26.set(100);
        org.jboss.dmr.ModelNode modelNode34 = modelNode25.add(modelNode26);
        org.jboss.dmr.ModelType modelType36 = org.jboss.dmr.ModelType.BYTES;
        char char37 = modelType36.getTypeChar();
        org.jboss.dmr.ModelNode modelNode38 = modelNode25.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType36);
        org.jboss.dmr.TypeModelValue typeModelValue39 = org.jboss.dmr.TypeModelValue.of(modelType36);
        org.jboss.dmr.TypeModelValue typeModelValue40 = org.jboss.dmr.TypeModelValue.of(modelType36);
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelWriter24.writeType(modelType36);
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue1.write(modelWriter41);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10.0" + "'", str8, "10.0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory13);
        org.junit.Assert.assertNotNull(modelReader18);
        org.junit.Assert.assertNotNull(modelWriter24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(\"hi!\" => 0.0)" + "'", str30, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertTrue("'" + modelType36 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType36.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char37 + "' != '" + 'b' + "'", char37 == 'b');
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(typeModelValue39);
        org.junit.Assert.assertNotNull(typeModelValue40);
        org.junit.Assert.assertNotNull(modelWriter41);
    }

    @Test
    public void test07599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07599");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isListStart();
        boolean boolean23 = modelReader15.isUndefined();
        boolean boolean24 = modelReader15.isBigInteger();
        boolean boolean25 = modelReader15.isObjectStart();
        boolean boolean26 = modelReader15.isDouble();
        // The following exception was thrown during execution in test generation
        try {
            modelReader15.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been read");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07600");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = modelNode16.set(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue24 = new org.jboss.dmr.PropertyModelValue(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue(property22);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = propertyModelValue25.asList();
        org.jboss.dmr.ModelNode modelNode27 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList26);
        org.jboss.dmr.IntModelValue intModelValue30 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str31 = intModelValue30.asString();
        double double33 = intModelValue30.asDouble((double) 2);
        java.math.BigDecimal bigDecimal34 = intModelValue30.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode35 = modelNode27.add("(\"hi!\" => 0.0)", bigDecimal34);
        int int37 = modelNode27.asInt(0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = modelNode27.asList();
        org.jboss.dmr.ModelNode modelNode40 = modelNode27.add(false);
        org.jboss.dmr.ModelNode modelNode42 = modelNode40.add((double) 32L);
        java.io.PrintWriter printWriter43 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode40.formatAsJSON(printWriter43, (int) (byte) 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType15.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 32.0d + "'", double33 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode42);
    }

    @Test
    public void test07601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07601");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))", (int) (short) 0);
        org.jboss.dmr.ModelType modelType6 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(modelType6);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        org.jboss.dmr.Property property13 = new org.jboss.dmr.Property("", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(property13);
        org.jboss.dmr.ModelNode modelNode15 = property13.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue16 = new org.jboss.dmr.PropertyModelValue(property13);
        java.util.List<org.jboss.dmr.Property> propertyList17 = propertyModelValue16.asPropertyList();
        boolean boolean18 = modelNode2.equals((java.lang.Object) propertyModelValue16);
        org.jboss.dmr.Property property20 = new org.jboss.dmr.Property("", modelNode2, false);
        org.jboss.dmr.ModelNode modelNode22 = modelNode2.set((int) (short) 1);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        int int33 = inputStream25.read(byteArray29, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (-1));
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream37);
        // The following exception was thrown during execution in test generation
        try {
            modelNode2.readExternal((java.io.InputStream) inputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType6.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test07602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07602");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        java.lang.String str2 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(10L);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.get(strArray12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = modelNode17.asList();
        org.jboss.dmr.ListModelValue listModelValue19 = new org.jboss.dmr.ListModelValue(modelNodeList18);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue19);
        org.jboss.dmr.ModelValue modelValue21 = listModelValue19.resolve();
        int int23 = listModelValue19.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList24 = listModelValue19.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList25 = modelNode13.asPropertyList(propertyList24);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set("hi!", 0.0d);
        org.jboss.dmr.Property property31 = new org.jboss.dmr.Property("", modelNode30);
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.get(strArray32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = modelNode37.asList();
        org.jboss.dmr.ListModelValue listModelValue39 = new org.jboss.dmr.ListModelValue(modelNodeList38);
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue39);
        org.jboss.dmr.ModelValue modelValue41 = listModelValue39.resolve();
        int int43 = listModelValue39.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList44 = listModelValue39.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList45 = modelNode33.asPropertyList(propertyList44);
        modelNode13.setNoCopy(modelNode33);
        org.jboss.dmr.ModelNode modelNode48 = modelNode33.set((long) 100);
        org.jboss.dmr.ModelType modelType49 = modelNode48.getType();
        long long51 = modelNode48.asLong((long) (short) 100);
        boolean boolean52 = modelNode48.isProtected();
        org.jboss.dmr.Property property54 = new org.jboss.dmr.Property("10", modelNode48, true);
        org.jboss.dmr.ModelNode modelNode55 = modelNode0.add(property54);
        org.jboss.dmr.ModelType modelType56 = modelNode0.getType();
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4" + "'", str2, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertNotNull(modelValue21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertNotNull(modelValue41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(propertyList45);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertTrue("'" + modelType49 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType49.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertTrue("'" + modelType56 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType56.equals(org.jboss.dmr.ModelType.LIST));
    }

    @Test
    public void test07603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07603");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode6 = modelNode0.add((double) 100);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode11 = modelNode10.setEmptyList();
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.asObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.get("Expression \"true\"");
        boolean boolean15 = modelNode6.equals(modelNode12);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(modelType16);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        org.jboss.dmr.ModelNode modelNode24 = modelNode17.set(property23);
        org.jboss.dmr.ModelNode modelNode25 = property23.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue(property23);
        org.jboss.dmr.ModelValue modelValue27 = propertyModelValue26.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = propertyModelValue26.asList();
        org.jboss.dmr.ModelNode modelNode29 = modelNode6.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        boolean boolean30 = modelNode29.isProtected();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger31 = modelNode29.asBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType16.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07604");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue4.removeChild("1");
        boolean boolean9 = objectModelValue4.asBoolean();
        boolean boolean10 = objectModelValue0.equals(objectModelValue4);
        long long11 = objectModelValue4.asLong();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue4.getChild("\"\\\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\\\"\"");
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode16 = modelNode13.remove(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
    }

    @Test
    public void test07605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07605");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) 'p');
        java.math.BigDecimal bigDecimal2 = intModelValue1.asBigDecimal();
        boolean boolean3 = intModelValue1.asBoolean();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory5 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream6 = null;
        org.jboss.dmr.Base64.InputStream inputStream8 = new org.jboss.dmr.Base64.InputStream(inputStream6, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str11 = longModelValue10.asString();
        byte[] byteArray12 = longModelValue10.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue13 = new org.jboss.dmr.BytesModelValue(byteArray12);
        int int16 = inputStream8.read(byteArray12, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream8, (-1));
        org.jboss.dmr.stream.ModelReader modelReader19 = modelStreamFactory5.newModelReader((java.io.InputStream) inputStream18);
        boolean boolean20 = modelReader19.isLong();
        boolean boolean21 = modelReader19.isBigDecimal();
        boolean boolean22 = modelReader19.isUndefined();
        boolean boolean23 = modelReader19.isObjectStart();
        boolean boolean24 = intModelValue1.equals((java.lang.Object) modelReader19);
        boolean boolean25 = modelReader19.isObjectEnd();
        boolean boolean26 = modelReader19.isBoolean();
        boolean boolean27 = modelReader19.isListStart();
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(modelReader19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07606");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("1L");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList8 = objectModelValue0.asList();
        boolean boolean10 = objectModelValue0.has("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")");
        boolean boolean11 = objectModelValue0.asBoolean();
        java.io.DataOutput dataOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.writeExternal(dataOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07607");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        long long12 = listModelValue5.asLong((long) ' ');
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str15 = longModelValue14.asString();
        byte[] byteArray16 = longModelValue14.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue17 = new org.jboss.dmr.BytesModelValue(byteArray16);
        java.lang.String str18 = bytesModelValue17.asString();
        int int19 = bytesModelValue17.asInt();
        int int20 = bytesModelValue17.asInt();
        org.jboss.dmr.LongModelValue longModelValue22 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str23 = longModelValue22.asString();
        byte[] byteArray24 = longModelValue22.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue25 = new org.jboss.dmr.BytesModelValue(byteArray24);
        double double26 = bytesModelValue25.asDouble();
        boolean boolean27 = bytesModelValue17.equals(bytesModelValue25);
        org.jboss.dmr.LongModelValue longModelValue29 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str30 = longModelValue29.asString();
        byte[] byteArray31 = longModelValue29.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue32 = new org.jboss.dmr.BytesModelValue(byteArray31);
        boolean boolean33 = bytesModelValue25.equals(bytesModelValue32);
        long long34 = bytesModelValue25.asLong();
        int int36 = bytesModelValue25.asInt(8);
        long long37 = bytesModelValue25.asLong();
        boolean boolean38 = listModelValue5.equals((java.lang.Object) long37);
        int int40 = listModelValue5.asInt(10);
        org.jboss.dmr.DoubleModelValue doubleModelValue42 = new org.jboss.dmr.DoubleModelValue((double) 1.0f);
        boolean boolean43 = listModelValue5.equals((java.lang.Object) 1.0f);
        org.jboss.dmr.ModelNode modelNode44 = listModelValue5.asObject();
        boolean boolean45 = listModelValue5.asBoolean();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str18, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.9E-324d + "'", double26 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test07608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07608");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = objectModelValue0.asList();
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.resolve();
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue0.copy();
        java.io.PrintWriter printWriter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.formatAsJSON(printWriter8, (int) '4', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertNotNull(modelValue7);
    }

    @Test
    public void test07609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07609");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isListEnd();
        boolean boolean24 = modelReader15.isPropertyStart();
        boolean boolean25 = modelReader15.isObjectEnd();
        boolean boolean26 = modelReader15.isExpression();
        boolean boolean27 = modelReader15.isBigDecimal();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelEvent modelEvent28 = modelReader15.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07610");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        java.math.BigDecimal bigDecimal5 = booleanModelValue1.asBigDecimal();
        byte[] byteArray6 = booleanModelValue1.asBytes();
        int int8 = booleanModelValue1.asInt((int) 'i');
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.Property> propertyList9 = booleanModelValue1.asPropertyList();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test07611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07611");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = objectModelValue0.asList();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\"");
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.add((long) 'a');
        int int11 = modelNode7.asInt((int) (byte) -1);
        java.io.ObjectOutput objectOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode7.writeExternal(objectOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test07612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07612");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        byte[] byteArray6 = intModelValue1.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        java.lang.String str13 = listModelValue12.asString();
        long long14 = listModelValue12.asLong();
        int int16 = listModelValue12.asInt((int) '4');
        int int18 = listModelValue12.asInt((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode19 = listModelValue12.asObject();
        boolean boolean21 = listModelValue12.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = modelNode25.asList();
        org.jboss.dmr.ListModelValue listModelValue27 = new org.jboss.dmr.ListModelValue(modelNodeList26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue27);
        org.jboss.dmr.ModelValue modelValue29 = listModelValue27.resolve();
        int int31 = listModelValue27.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList32 = listModelValue27.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = listModelValue27.asList();
        long long34 = listModelValue27.asLong();
        boolean boolean35 = listModelValue12.equals(listModelValue27);
        boolean boolean36 = intModelValue1.equals((java.lang.Object) listModelValue27);
        long long37 = intModelValue1.asLong();
        org.jboss.dmr.stream.ModelWriter modelWriter38 = null;
        // The following exception was thrown during execution in test generation
        try {
            intModelValue1.write(modelWriter38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str13, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelValue29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 32L + "'", long37 == 32L);
    }

    @Test
    public void test07613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07613");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.List<org.jboss.dmr.Property> propertyList16 = modelNode13.asPropertyListOrEmpty();
        java.util.Set<java.lang.String> strSet17 = modelNode13.keys();
        org.jboss.dmr.ModelNode modelNode19 = modelNode13.setExpression("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwAGI=");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode21 = modelNode13.get((int) 's');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(modelNode19);
    }

    @Test
    public void test07614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07614");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        int int4 = objectModelValue0.asInt((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue5 = objectModelValue0.protect();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        java.lang.String str10 = modelNode6.toString();
        org.jboss.dmr.ModelNode modelNode11 = modelNode6.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode13 = modelNode6.set(100);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode18 = modelNode16.set((int) '#');
        org.jboss.dmr.ModelNode modelNode19 = modelNode6.setNoCopy("EXPRESSION_VALUE", modelNode18);
        org.jboss.dmr.ModelNode modelNode20 = modelNode19.setEmptyList();
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.add();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = modelNode25.asList();
        java.lang.String str28 = modelNode25.asString("true");
        org.jboss.dmr.ModelNode modelNode30 = modelNode25.set((double) 'a');
        org.jboss.dmr.IntModelValue intModelValue32 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str33 = intModelValue32.asString();
        double double35 = intModelValue32.asDouble((double) 2);
        java.math.BigDecimal bigDecimal36 = intModelValue32.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue37 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal36);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue38 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal36);
        org.jboss.dmr.ModelNode modelNode39 = modelNode30.set(bigDecimal36);
        org.jboss.dmr.ModelNode modelNode40 = modelNode20.set(bigDecimal36);
        boolean boolean41 = objectModelValue0.equals((java.lang.Object) modelNode20);
        org.jboss.dmr.BooleanModelValue booleanModelValue42 = org.jboss.dmr.BooleanModelValue.FALSE;
        long long44 = booleanModelValue42.asLong((long) 'a');
        boolean boolean45 = objectModelValue0.equals((java.lang.Object) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property46 = objectModelValue0.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(\"hi!\" => 0.0)" + "'", str10, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"hi!\" => 0.0)" + "'", str28, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "32" + "'", str33, "32");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 32.0d + "'", double35 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(booleanModelValue42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test07615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07615");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((int) ' ');
        long long7 = doubleModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = doubleModelValue1.asExpression();
        java.math.BigInteger bigInteger9 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asList();
        org.jboss.dmr.ListModelValue listModelValue15 = new org.jboss.dmr.ListModelValue(modelNodeList14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue15);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue15.resolve();
        int int19 = listModelValue15.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList20 = listModelValue15.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = listModelValue15.asList();
        long long22 = listModelValue15.asLong();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        org.jboss.dmr.ListModelValue listModelValue28 = new org.jboss.dmr.ListModelValue(modelNodeList27);
        java.lang.String str29 = listModelValue28.asString();
        long long30 = listModelValue28.asLong();
        int int32 = listModelValue28.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue33 = listModelValue28.protect();
        boolean boolean35 = listModelValue28.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue28.resolve();
        boolean boolean37 = listModelValue28.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = listModelValue28.asList();
        boolean boolean39 = listModelValue15.equals(listModelValue28);
        java.util.List<org.jboss.dmr.Property> propertyList40 = listModelValue15.asPropertyList();
        boolean boolean41 = doubleModelValue1.equals((java.lang.Object) propertyList40);
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str44 = longModelValue43.asString();
        byte[] byteArray45 = longModelValue43.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue46 = new org.jboss.dmr.BytesModelValue(byteArray45);
        java.lang.String str47 = bytesModelValue46.asString();
        int int48 = bytesModelValue46.asInt();
        int int49 = bytesModelValue46.asInt();
        int int51 = bytesModelValue46.asInt(112);
        boolean boolean52 = doubleModelValue1.equals((java.lang.Object) int51);
        java.io.InputStream inputStream53 = null;
        org.jboss.dmr.Base64.InputStream inputStream55 = new org.jboss.dmr.Base64.InputStream(inputStream53, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue57 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str58 = longModelValue57.asString();
        byte[] byteArray59 = longModelValue57.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue60 = new org.jboss.dmr.BytesModelValue(byteArray59);
        int int63 = inputStream55.read(byteArray59, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream65 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream55, (-1));
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream65);
        boolean boolean67 = doubleModelValue1.equals((java.lang.Object) inputStream66);
        org.jboss.dmr.Base64.InputStream inputStream69 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream66, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode70 = org.jboss.dmr.ModelNode.fromJSONStream((java.io.InputStream) inputStream66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str29, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(modelValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str47, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test07616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07616");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str3 = modelNode1.asString("true");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(bigDecimal9);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.setNoCopy("35", modelNode12);
        boolean boolean15 = modelNode12.hasDefined("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.ModelNode modelNode17 = modelNode12.set("\"bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}\"");
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long22 = booleanModelValue20.asLong((long) 32);
        int int23 = booleanModelValue20.asInt();
        java.math.BigDecimal bigDecimal24 = booleanModelValue20.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode25 = modelNode12.set("\"\\\"1L\\\"\"", bigDecimal24);
        java.io.OutputStream outputStream27 = null;
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream(outputStream27);
        outputStream28.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream28);
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.BooleanModelValue booleanModelValue33 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger34 = booleanModelValue33.asBigInteger();
        byte[] byteArray35 = booleanModelValue33.asBytes();
        outputStream30.write(byteArray35, (int) (short) -1, (int) (byte) 0);
        org.jboss.dmr.ModelNode modelNode39 = modelNode25.set("TYPE_MODEL_VALUE", byteArray35);
        java.io.DataInput dataInput40 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode25.readExternal(dataInput40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(booleanModelValue33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertNotNull(modelNode39);
    }

    @Test
    public void test07617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07617");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.Set<java.lang.String> strSet16 = propertyModelValue15.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList17 = propertyModelValue15.asPropertyList();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.lang.String str23 = modelNode19.toString();
        org.jboss.dmr.ModelNode modelNode24 = modelNode19.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode19.set(property30);
        org.jboss.dmr.PropertyModelValue propertyModelValue33 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode31, false);
        java.util.Set<java.lang.String> strSet34 = propertyModelValue33.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList35 = propertyModelValue33.asPropertyList();
        java.util.Set<java.lang.String> strSet36 = propertyModelValue33.getKeys();
        boolean boolean37 = propertyModelValue15.equals(propertyModelValue33);
        boolean boolean39 = propertyModelValue15.has("(\"BYTES_VALUE\" => expression \"1.0\")");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = propertyModelValue15.asList();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(\"hi!\" => 0.0)" + "'", str23, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(propertyList35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(modelNodeList40);
    }

    @Test
    public void test07618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07618");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (short) 100);
        org.jboss.dmr.Validation.validate(modelNode1, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory5 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream6 = null;
        org.jboss.dmr.Base64.InputStream inputStream8 = new org.jboss.dmr.Base64.InputStream(inputStream6, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream8);
        org.jboss.dmr.stream.ModelReader modelReader10 = modelStreamFactory5.newModelReader((java.io.InputStream) inputStream9);
        java.io.OutputStream outputStream11 = null;
        org.jboss.dmr.Base64.OutputStream outputStream12 = new org.jboss.dmr.Base64.OutputStream(outputStream11);
        org.jboss.dmr.Base64.OutputStream outputStream13 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream12);
        outputStream12.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter16 = modelStreamFactory5.newModelWriter((java.io.OutputStream) outputStream12);
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter16.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelWriter16.writeInt((int) '4');
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList24 = modelNode23.asList();
        org.jboss.dmr.ListModelValue listModelValue25 = new org.jboss.dmr.ListModelValue(modelNodeList24);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue25);
        org.jboss.dmr.ModelValue modelValue27 = listModelValue25.resolve();
        int int29 = listModelValue25.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList30 = listModelValue25.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList31 = listModelValue25.asPropertyList();
        java.lang.String str32 = listModelValue25.asString();
        int int33 = listModelValue25.asInt();
        java.lang.String str34 = listModelValue25.asString();
        org.jboss.dmr.ModelType modelType35 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode(modelType35);
        boolean boolean37 = listModelValue25.equals((java.lang.Object) modelType35);
        org.jboss.dmr.TypeModelValue typeModelValue38 = org.jboss.dmr.TypeModelValue.of(modelType35);
        org.jboss.dmr.TypeModelValue typeModelValue39 = org.jboss.dmr.TypeModelValue.of(modelType35);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelWriter16.writeType(modelType35);
        modelNode1.write(modelWriter40);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode42 = modelNode1.add();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory5);
        org.junit.Assert.assertNotNull(modelReader10);
        org.junit.Assert.assertNotNull(modelWriter16);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList24);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(propertyList30);
        org.junit.Assert.assertNotNull(propertyList31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str32, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str34, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType35 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType35.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(typeModelValue38);
        org.junit.Assert.assertNotNull(typeModelValue39);
        org.junit.Assert.assertNotNull(modelWriter40);
    }

    @Test
    public void test07619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07619");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = inputStream5.available();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
    }

    @Test
    public void test07620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07620");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        double double4 = intModelValue1.asDouble();
        boolean boolean5 = intModelValue1.asBoolean();
        long long7 = intModelValue1.asLong(52L);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str10 = intModelValue9.asString();
        double double12 = intModelValue9.asDouble((double) 2);
        java.math.BigInteger bigInteger13 = intModelValue9.asBigInteger();
        double double14 = intModelValue9.asDouble();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int16 = modelNode15.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.setExpression("hi!", "hi!");
        java.lang.String str21 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode17);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList22 = modelNode17.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode23 = modelNode15.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList22);
        boolean boolean24 = intModelValue9.equals((java.lang.Object) modelNode15);
        java.lang.String str25 = intModelValue9.asString();
        double double26 = intModelValue9.asDouble();
        boolean boolean27 = intModelValue1.equals(intModelValue9);
        long long29 = intModelValue1.asLong((long) 'I');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "32" + "'", str10, "32");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str21, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "32" + "'", str25, "32");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
    }

    @Test
    public void test07621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07621");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) 'a');
        int int9 = longModelValue1.asInt((int) '4');
        java.lang.String str10 = longModelValue1.asString();
        long long11 = longModelValue1.asLong();
        double double13 = longModelValue1.asDouble((double) 52);
        long long15 = longModelValue1.asLong((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode17 = longModelValue1.getChild("[10L]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test07622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07622");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = modelReader15.getInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't int");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07623");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.set((int) '#');
        java.lang.Boolean boolean4 = modelNode1.asBooleanOrNull();
        java.lang.String str6 = modelNode1.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.BIG_DECIMAL;
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode(modelType8);
        org.jboss.dmr.ModelNode modelNode10 = modelNode1.set("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", modelType8);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.setExpression("rO0ABXNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5n\nLk51bWJlcoaslR0LlOCLAgAAeHAAAABk", "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode18 = modelNode17.setEmptyList();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str22 = modelNode20.asString("true");
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long26 = modelNode25.asLong();
        org.jboss.dmr.ValueExpression valueExpression27 = modelNode25.asExpression();
        java.math.BigDecimal bigDecimal28 = valueExpression27.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode(bigDecimal28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode29.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode32 = modelNode20.setNoCopy("35", modelNode31);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        org.jboss.dmr.Property property38 = new org.jboss.dmr.Property("", modelNode37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.get(strArray39);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode44.asList();
        org.jboss.dmr.ListModelValue listModelValue46 = new org.jboss.dmr.ListModelValue(modelNodeList45);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue46);
        org.jboss.dmr.ModelValue modelValue48 = listModelValue46.resolve();
        int int50 = listModelValue46.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList51 = listModelValue46.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList52 = modelNode40.asPropertyList(propertyList51);
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode57 = modelNode54.set("hi!", 0.0d);
        org.jboss.dmr.Property property58 = new org.jboss.dmr.Property("", modelNode57);
        java.lang.String[] strArray59 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.get(strArray59);
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode64.asList();
        org.jboss.dmr.ListModelValue listModelValue66 = new org.jboss.dmr.ListModelValue(modelNodeList65);
        org.jboss.dmr.ModelNode modelNode67 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue66);
        org.jboss.dmr.ModelValue modelValue68 = listModelValue66.resolve();
        int int70 = listModelValue66.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList71 = listModelValue66.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList72 = modelNode60.asPropertyList(propertyList71);
        modelNode40.setNoCopy(modelNode60);
        org.jboss.dmr.ModelNode modelNode75 = modelNode60.set((long) 100);
        org.jboss.dmr.ModelNode modelNode76 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode79 = modelNode76.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList80 = modelNode79.asListOrEmpty();
        java.lang.String[] strArray83 = new java.lang.String[] { "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" };
        boolean boolean84 = modelNode79.hasDefined(strArray83);
        boolean boolean85 = modelNode75.hasDefined(strArray83);
        boolean boolean86 = modelNode32.hasDefined(strArray83);
        boolean boolean87 = modelNode18.hasDefined(strArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode88 = modelNode13.get(strArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "35" + "'", str6, "35");
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.BIG_DECIMAL + "'", modelType8.equals(org.jboss.dmr.ModelType.BIG_DECIMAL));
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "10" + "'", str22, "10");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertNotNull(modelValue48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(propertyList51);
        org.junit.Assert.assertNotNull(propertyList52);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertNotNull(modelValue68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(propertyList71);
        org.junit.Assert.assertNotNull(propertyList72);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertNotNull(modelNode79);
        org.junit.Assert.assertNotNull(modelNodeList80);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test07624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07624");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.resolve();
        java.lang.String str10 = modelNode7.toJSONString(true);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        org.jboss.dmr.Property property17 = new org.jboss.dmr.Property("", modelNode16);
        boolean boolean19 = modelNode16.equals((java.lang.Object) 100L);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("[(\"hi!\" => 0.0)]", modelNode16, false);
        org.jboss.dmr.Property property22 = property21.clone();
        org.jboss.dmr.ModelNode modelNode23 = modelNode7.set(property22);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode27 = modelNode26.resolve();
        java.lang.String str28 = modelNode26.asString();
        org.jboss.dmr.ModelNode modelNode30 = modelNode26.set((long) 52);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.setExpression("hi!", "hi!");
        java.lang.String str36 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode32);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode32.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode39 = modelNode32.set((double) 0);
        org.jboss.dmr.ModelType modelType41 = org.jboss.dmr.ModelType.PROPERTY;
        char char42 = modelType41.getTypeChar();
        org.jboss.dmr.ModelNode modelNode43 = modelNode32.set("[(\"hi!\" => 0.0)]", modelType41);
        org.jboss.dmr.Property property44 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode43);
        org.jboss.dmr.ModelNode modelNode45 = modelNode30.set(property44);
        org.jboss.dmr.ModelNode modelNode47 = modelNode30.set(false);
        boolean boolean48 = modelNode47.isProtected();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode49 = modelNode23.add("rO0ABXNyAA9qYXZhLmxhbmcuU2hvcnRoTTcTNGDaUgIAAVMABXZhbHVleHIAEGphdmEubGFuZy5O\ndW1iZXKGrJUdC5TgiwIAAHhwAAA=", modelNode47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{ \"expression \\\"hi!\\\"\" : { \"BYTES_VALUE\" : \"AQ==\" } }" + "'", str10, "{ \"expression \\\"hi!\\\"\" : { \"BYTES_VALUE\" : \"AQ==\" } }");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "true" + "'", str28, "true");
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str36, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertTrue("'" + modelType41 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType41.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + 'p' + "'", char42 == 'p');
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test07625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07625");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str4 = modelNode2.asString("true");
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode2);
        org.jboss.dmr.DoubleModelValue doubleModelValue7 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long8 = doubleModelValue7.asLong();
        boolean boolean10 = doubleModelValue7.asBoolean(true);
        int int11 = doubleModelValue7.asInt();
        org.jboss.dmr.DoubleModelValue doubleModelValue13 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long14 = doubleModelValue13.asLong();
        long long16 = doubleModelValue13.asLong((long) 32);
        byte[] byteArray17 = doubleModelValue13.asBytes();
        boolean boolean18 = doubleModelValue7.equals(doubleModelValue13);
        boolean boolean19 = doubleModelValue13.asBoolean();
        java.math.BigInteger bigInteger20 = doubleModelValue13.asBigInteger();
        boolean boolean21 = modelNode2.equals((java.lang.Object) doubleModelValue13);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long24 = modelNode23.asLong();
        org.jboss.dmr.ValueExpression valueExpression25 = modelNode23.asExpression();
        java.math.BigDecimal bigDecimal26 = valueExpression25.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode(bigDecimal26);
        java.math.BigDecimal bigDecimal28 = modelNode27.asBigDecimal();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode29 = modelNode2.add(bigDecimal28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10" + "'", str4, "10");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(valueExpression25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal28);
    }

    @Test
    public void test07626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07626");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        byte[] byteArray6 = intModelValue1.asBytes();
        boolean boolean8 = intModelValue1.has("[1]");
        boolean boolean10 = intModelValue1.asBoolean(false);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07627");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        boolean boolean10 = listModelValue5.asBoolean();
        org.jboss.dmr.ModelNode modelNode11 = listModelValue5.asObject();
        java.lang.String str13 = modelNode11.asString("\"true\"");
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\"hi!\" => 0.0}" + "'", str13, "{\"hi!\" => 0.0}");
    }

    @Test
    public void test07628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07628");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set(property11);
        boolean boolean14 = modelNode12.hasDefined("rO0ABXQAUXJPMEFCWE55QUJkdmNtY3VhbUp2YzNNdVpHMXlMazF2WkdWc1RtOWtaUnd0b1VTZG80\nNC9EQUFBZUhCM0RIQUFBMmhwSVdVQUEyaHAKSVhnPQ==");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal15 = modelNode12.asBigDecimalOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07629");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        int int34 = inputStream26.read(byteArray30, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (-1));
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader41 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream38);
        java.io.OutputStream outputStream42 = null;
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream(outputStream42);
        outputStream43.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream47 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream45, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream47);
        outputStream48.resumeEncoding();
        outputStream48.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream48);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int53 = modelNode52.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode54 = modelNode52.clone();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory56 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream57 = null;
        org.jboss.dmr.Base64.InputStream inputStream59 = new org.jboss.dmr.Base64.InputStream(inputStream57, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue61 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str62 = longModelValue61.asString();
        byte[] byteArray63 = longModelValue61.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue64 = new org.jboss.dmr.BytesModelValue(byteArray63);
        int int67 = inputStream59.read(byteArray63, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream69 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream59, (-1));
        org.jboss.dmr.stream.ModelReader modelReader70 = modelStreamFactory56.newModelReader((java.io.InputStream) inputStream69);
        java.io.InputStream inputStream71 = null;
        org.jboss.dmr.Base64.InputStream inputStream73 = new org.jboss.dmr.Base64.InputStream(inputStream71, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream74 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream73);
        org.jboss.dmr.Base64.InputStream inputStream75 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream73);
        org.jboss.dmr.stream.ModelReader modelReader76 = modelStreamFactory56.newModelReader((java.io.InputStream) inputStream73);
        java.io.InputStream inputStream77 = null;
        org.jboss.dmr.Base64.InputStream inputStream79 = new org.jboss.dmr.Base64.InputStream(inputStream77, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream80 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream79);
        org.jboss.dmr.stream.ModelReader modelReader81 = modelStreamFactory56.newModelReader((java.io.InputStream) inputStream79);
        java.io.OutputStream outputStream82 = null;
        org.jboss.dmr.Base64.OutputStream outputStream83 = new org.jboss.dmr.Base64.OutputStream(outputStream82);
        outputStream83.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream85 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream83);
        org.jboss.dmr.Base64.OutputStream outputStream86 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream85);
        outputStream85.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream88 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream85);
        org.jboss.dmr.Base64.OutputStream outputStream89 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream85);
        org.jboss.dmr.stream.ModelWriter modelWriter90 = modelStreamFactory56.newModelWriter((java.io.OutputStream) outputStream89);
        org.jboss.dmr.Base64.OutputStream outputStream91 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream89);
        modelNode54.writeExternal((java.io.OutputStream) outputStream91);
        outputStream91.write((int) (byte) 0);
        outputStream91.resumeEncoding();
        java.nio.charset.Charset charset96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter97 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream91, charset96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelReader41);
        org.junit.Assert.assertNotNull(modelWriter51);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelStreamFactory56);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(modelReader70);
        org.junit.Assert.assertNotNull(modelReader76);
        org.junit.Assert.assertNotNull(modelReader81);
        org.junit.Assert.assertNotNull(modelWriter90);
    }

    @Test
    public void test07630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07630");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        java.lang.String str4 = valueExpression3.toString();
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression7 = expressionValue6.asExpression();
        boolean boolean8 = valueExpression3.equals(valueExpression7);
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal11 = longModelValue10.asBigDecimal();
        int int12 = longModelValue10.asInt();
        org.jboss.dmr.ValueExpression valueExpression13 = longModelValue10.asExpression();
        boolean boolean14 = valueExpression7.equals(valueExpression13);
        java.lang.Object obj15 = null;
        boolean boolean16 = valueExpression13.equals(obj15);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = modelNode20.asList();
        org.jboss.dmr.ListModelValue listModelValue22 = new org.jboss.dmr.ListModelValue(modelNodeList21);
        java.lang.String str23 = listModelValue22.asString();
        long long24 = listModelValue22.asLong();
        int int26 = listModelValue22.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue27 = listModelValue22.protect();
        boolean boolean29 = listModelValue22.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue30 = listModelValue22.resolve();
        boolean boolean31 = listModelValue22.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = listModelValue22.asList();
        boolean boolean33 = valueExpression13.equals((java.lang.Object) listModelValue22);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver34 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue36 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long37 = booleanModelValue36.asLong();
        org.jboss.dmr.ValueExpression valueExpression38 = booleanModelValue36.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue39 = new org.jboss.dmr.ExpressionValue(valueExpression38);
        java.lang.String str40 = valueExpression38.getExpressionString();
        java.lang.String str41 = valueExpressionResolver34.resolve(valueExpression38);
        java.lang.String str43 = valueExpressionResolver34.resolvePart("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQACFBST1BFUlRZ");
        java.lang.String str45 = valueExpressionResolver34.resolvePart("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwACM=");
        org.jboss.dmr.StringModelValue stringModelValue47 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        java.lang.String str48 = stringModelValue47.toString();
        org.jboss.dmr.ValueExpression valueExpression49 = stringModelValue47.asExpression();
        java.lang.String str50 = valueExpressionResolver34.resolve(valueExpression49);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = valueExpression13.resolveBoolean(valueExpressionResolver34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Expression \"true\"" + "'", str4, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str23, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver34);
        org.junit.Assert.assertNotNull(booleanModelValue36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(valueExpression38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "true" + "'", str40, "true");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "true" + "'", str41, "true");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"" + "'", str48, "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.junit.Assert.assertNotNull(valueExpression49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str50, "(\"\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test07631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07631");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        double double5 = bytesModelValue4.asDouble();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.set((int) '#');
        java.lang.Boolean boolean10 = modelNode7.asBooleanOrNull();
        java.lang.String str12 = modelNode7.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        boolean boolean13 = bytesModelValue4.equals((java.lang.Object) modelNode7);
        int int15 = bytesModelValue4.asInt(52);
        double double16 = bytesModelValue4.asDouble();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        java.lang.String str22 = modelNode18.toString();
        org.jboss.dmr.ModelNode modelNode23 = modelNode18.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode25 = modelNode18.set(100);
        org.jboss.dmr.ModelNode modelNode26 = modelNode17.add(modelNode18);
        int int28 = modelNode18.asInt(2);
        org.jboss.dmr.ModelType modelType30 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode31 = modelNode18.set("[(\"hi!\" => 0.0)]", modelType30);
        org.jboss.dmr.TypeModelValue typeModelValue32 = org.jboss.dmr.TypeModelValue.of(modelType30);
        boolean boolean33 = bytesModelValue4.equals((java.lang.Object) modelType30);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory35 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream36 = null;
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream(inputStream36, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory35.newModelReader((java.io.InputStream) inputStream39);
        java.io.OutputStream outputStream41 = null;
        org.jboss.dmr.Base64.OutputStream outputStream42 = new org.jboss.dmr.Base64.OutputStream(outputStream41);
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream42);
        outputStream42.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter46 = modelStreamFactory35.newModelWriter((java.io.OutputStream) outputStream42);
        org.jboss.dmr.stream.ModelWriter modelWriter47 = modelWriter46.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter49 = modelWriter46.writeInt((int) '4');
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode53 = modelNode50.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList54 = modelNode53.asList();
        org.jboss.dmr.ListModelValue listModelValue55 = new org.jboss.dmr.ListModelValue(modelNodeList54);
        org.jboss.dmr.ModelNode modelNode56 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue55);
        org.jboss.dmr.ModelValue modelValue57 = listModelValue55.resolve();
        int int59 = listModelValue55.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList60 = listModelValue55.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList61 = listModelValue55.asPropertyList();
        java.lang.String str62 = listModelValue55.asString();
        int int63 = listModelValue55.asInt();
        java.lang.String str64 = listModelValue55.asString();
        org.jboss.dmr.ModelType modelType65 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode66 = new org.jboss.dmr.ModelNode(modelType65);
        boolean boolean67 = listModelValue55.equals((java.lang.Object) modelType65);
        org.jboss.dmr.TypeModelValue typeModelValue68 = org.jboss.dmr.TypeModelValue.of(modelType65);
        org.jboss.dmr.TypeModelValue typeModelValue69 = org.jboss.dmr.TypeModelValue.of(modelType65);
        org.jboss.dmr.stream.ModelWriter modelWriter70 = modelWriter46.writeType(modelType65);
        bytesModelValue4.write(modelWriter46);
        org.jboss.dmr.stream.ModelWriter modelWriter73 = modelWriter46.writeExpression("(\"hi!\" => [\n    (\"hi!\" => 0.0),\n    undefined\n])");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter74 = modelWriter46.writePropertyEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting ',' or LIST_END");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.9E-324d + "'", double5 == 4.9E-324d);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "35" + "'", str12, "35");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4.9E-324d + "'", double16 == 4.9E-324d);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(\"hi!\" => 0.0)" + "'", str22, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + modelType30 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType30.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(typeModelValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory35);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelWriter46);
        org.junit.Assert.assertNotNull(modelWriter47);
        org.junit.Assert.assertNotNull(modelWriter49);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNodeList54);
        org.junit.Assert.assertNotNull(modelValue57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(propertyList60);
        org.junit.Assert.assertNotNull(propertyList61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str62, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str64, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType65 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType65.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(typeModelValue68);
        org.junit.Assert.assertNotNull(typeModelValue69);
        org.junit.Assert.assertNotNull(modelWriter70);
        org.junit.Assert.assertNotNull(modelWriter73);
    }

    @Test
    public void test07632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07632");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isObjectEnd();
        boolean boolean20 = modelReader15.isObjectStart();
        boolean boolean21 = modelReader15.isType();
        // The following exception was thrown during execution in test generation
        try {
            modelReader15.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been read");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07633");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue7.getChild((int) (short) 0);
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue18 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean19 = expressionValue16.equals(expressionValue18);
        org.jboss.dmr.ExpressionValue expressionValue21 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression22 = expressionValue21.asExpression();
        boolean boolean23 = expressionValue16.equals(expressionValue21);
        java.lang.String str24 = expressionValue16.asString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory26 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream27 = null;
        org.jboss.dmr.Base64.InputStream inputStream29 = new org.jboss.dmr.Base64.InputStream(inputStream27, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream30 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream29);
        org.jboss.dmr.stream.ModelReader modelReader31 = modelStreamFactory26.newModelReader((java.io.InputStream) inputStream30);
        java.io.OutputStream outputStream32 = null;
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream(outputStream32);
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream33);
        outputStream33.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelStreamFactory26.newModelWriter((java.io.OutputStream) outputStream33);
        org.jboss.dmr.stream.ModelWriter modelWriter38 = modelWriter37.writeListStart();
        expressionValue16.write(modelWriter38);
        propertyModelValue7.write(modelWriter38);
        org.jboss.dmr.ModelNode modelNode41 = propertyModelValue7.asObject();
        java.lang.Boolean boolean42 = modelNode41.asBooleanOrNull();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(modelStreamFactory26);
        org.junit.Assert.assertNotNull(modelReader31);
        org.junit.Assert.assertNotNull(modelWriter37);
        org.junit.Assert.assertNotNull(modelWriter38);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + true + "'", boolean42, true);
    }

    @Test
    public void test07634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07634");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        boolean boolean15 = expressionValue8.equals((java.lang.Object) modelNode12);
        java.lang.Class<?> wildcardClass16 = expressionValue8.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test07635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07635");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        java.lang.String str7 = bigDecimalModelValue6.asString();
        int int9 = bigDecimalModelValue6.asInt((int) (short) -1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "32" + "'", str7, "32");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
    }

    @Test
    public void test07636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07636");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory19 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream20 = null;
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream(inputStream20, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream22);
        org.jboss.dmr.stream.ModelReader modelReader24 = modelStreamFactory19.newModelReader((java.io.InputStream) inputStream23);
        java.io.OutputStream outputStream25 = null;
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream(outputStream25);
        org.jboss.dmr.Base64.OutputStream outputStream27 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream26);
        outputStream26.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelStreamFactory19.newModelWriter((java.io.OutputStream) outputStream26);
        stringModelValue11.write(modelWriter30);
        org.jboss.dmr.DoubleModelValue doubleModelValue33 = new org.jboss.dmr.DoubleModelValue((double) (short) 0);
        double double34 = doubleModelValue33.asDouble();
        java.math.BigInteger bigInteger35 = doubleModelValue33.asBigInteger();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter36 = modelWriter30.writeBigInteger(bigInteger35);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory19);
        org.junit.Assert.assertNotNull(modelReader24);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(bigInteger35);
    }

    @Test
    public void test07637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07637");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"");
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.setExpression("AAAAIA==");
        org.jboss.dmr.ModelNode modelNode4 = modelNode3.clear();
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double6 = booleanModelValue5.asDouble();
        org.jboss.dmr.ModelValue modelValue7 = booleanModelValue5.copy();
        java.math.BigInteger bigInteger8 = booleanModelValue5.asBigInteger();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode(bigInteger8);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(bigInteger8);
        org.jboss.dmr.ModelNode modelNode11 = modelNode4.add(bigInteger8);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(modelNode11);
    }

    @Test
    public void test07638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07638");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.set("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"");
        org.jboss.dmr.BooleanModelValue booleanModelValue12 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long14 = booleanModelValue12.asLong((long) 32);
        int int15 = booleanModelValue12.asInt();
        java.math.BigDecimal bigDecimal16 = booleanModelValue12.asBigDecimal();
        org.jboss.dmr.ModelValue modelValue17 = booleanModelValue12.protect();
        org.jboss.dmr.stream.ModelEvent modelEvent18 = org.jboss.dmr.stream.ModelEvent.LONG;
        boolean boolean19 = booleanModelValue12.equals((java.lang.Object) modelEvent18);
        double double20 = booleanModelValue12.asDouble();
        byte[] byteArray21 = booleanModelValue12.asBytes();
        org.jboss.dmr.ModelNode modelNode22 = modelNode9.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3CUQ/8AAAAAAAAHg=", byteArray21);
        org.jboss.dmr.ModelNode modelNode24 = modelNode22.set("false");
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(booleanModelValue12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + modelEvent18 + "' != '" + org.jboss.dmr.stream.ModelEvent.LONG + "'", modelEvent18.equals(org.jboss.dmr.stream.ModelEvent.LONG));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0]");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
    }

    @Test
    public void test07639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07639");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj1 = org.jboss.dmr.Base64.decodeToObject("\"(\\\"hi!\\\" => 0.0)\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Bad Base64 input character at 0: 34(decimal)");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07640");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asList();
        org.jboss.dmr.ListModelValue listModelValue17 = new org.jboss.dmr.ListModelValue(modelNodeList16);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue17);
        org.jboss.dmr.ModelValue modelValue19 = listModelValue17.resolve();
        int int21 = listModelValue17.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue17.asPropertyList();
        org.jboss.dmr.ModelValue modelValue23 = listModelValue17.clone();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory25 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream26 = null;
        org.jboss.dmr.Base64.InputStream inputStream28 = new org.jboss.dmr.Base64.InputStream(inputStream26, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue30 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str31 = longModelValue30.asString();
        byte[] byteArray32 = longModelValue30.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue33 = new org.jboss.dmr.BytesModelValue(byteArray32);
        int int36 = inputStream28.read(byteArray32, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream28, (-1));
        org.jboss.dmr.stream.ModelReader modelReader39 = modelStreamFactory25.newModelReader((java.io.InputStream) inputStream38);
        java.io.InputStream inputStream40 = null;
        org.jboss.dmr.Base64.InputStream inputStream42 = new org.jboss.dmr.Base64.InputStream(inputStream40, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream43 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream42);
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream42);
        org.jboss.dmr.stream.ModelReader modelReader45 = modelStreamFactory25.newModelReader((java.io.InputStream) inputStream42);
        java.io.InputStream inputStream46 = null;
        org.jboss.dmr.Base64.InputStream inputStream48 = new org.jboss.dmr.Base64.InputStream(inputStream46, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream49 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream48);
        org.jboss.dmr.stream.ModelReader modelReader50 = modelStreamFactory25.newModelReader((java.io.InputStream) inputStream48);
        java.io.OutputStream outputStream51 = null;
        org.jboss.dmr.Base64.OutputStream outputStream52 = new org.jboss.dmr.Base64.OutputStream(outputStream51);
        outputStream52.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream54 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream52);
        org.jboss.dmr.Base64.OutputStream outputStream55 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream54);
        outputStream54.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream57 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream54);
        org.jboss.dmr.Base64.OutputStream outputStream58 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream54);
        org.jboss.dmr.stream.ModelWriter modelWriter59 = modelStreamFactory25.newModelWriter((java.io.OutputStream) outputStream58);
        listModelValue17.write(modelWriter59);
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.write(modelWriter59);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertNotNull(modelStreamFactory25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(modelReader39);
        org.junit.Assert.assertNotNull(modelReader45);
        org.junit.Assert.assertNotNull(modelReader50);
        org.junit.Assert.assertNotNull(modelWriter59);
    }

    @Test
    public void test07641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07641");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long4 = modelNode3.asLong();
        org.jboss.dmr.ValueExpression valueExpression5 = modelNode3.asExpression();
        java.math.BigDecimal bigDecimal6 = valueExpression5.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(valueExpression5);
        java.math.BigDecimal bigDecimal8 = valueExpression5.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode(valueExpression5);
        java.io.ObjectInput objectInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression5.readExternal(objectInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(bigDecimal8);
    }

    @Test
    public void test07642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07642");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        double double15 = bigIntegerModelValue13.asDouble((double) 'b');
        boolean boolean16 = bigIntegerModelValue4.equals(bigIntegerModelValue13);
        double double18 = bigIntegerModelValue4.asDouble((double) '#');
        long long19 = bigIntegerModelValue4.asLong();
        long long20 = bigIntegerModelValue4.asLong();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test07643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07643");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isUndefined();
        boolean boolean19 = modelReader15.isBytes();
        boolean boolean20 = modelReader15.isBigInteger();
        boolean boolean21 = modelReader15.isString();
        boolean boolean22 = modelReader15.isType();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType23 = modelReader15.getType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test07644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07644");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.lang.String str11 = modelNode7.toString();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(100);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        java.lang.String str28 = modelNode27.asString();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        boolean boolean39 = listModelValue34.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = listModelValue34.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = modelNode27.asList(modelNodeList40);
        org.jboss.dmr.ModelNode modelNode42 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList40);
        boolean boolean43 = bigIntegerModelValue4.equals((java.lang.Object) modelNode14);
        double double44 = bigIntegerModelValue4.asDouble();
        java.math.BigInteger bigInteger45 = bigIntegerModelValue4.asBigInteger();
        java.io.PrintWriter printWriter46 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigIntegerModelValue4.format(printWriter46, (int) (byte) -1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"hi!\" => 0.0)" + "'", str11, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str28, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(modelNodeList40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger45);
    }

    @Test
    public void test07645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07645");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        java.io.OutputStream outputStream22 = null;
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream(outputStream22);
        outputStream23.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream25 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream23);
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream25);
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger29 = booleanModelValue28.asBigInteger();
        byte[] byteArray30 = booleanModelValue28.asBytes();
        outputStream25.write(byteArray30, (int) (short) -1, (int) (byte) 0);
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream25);
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream25);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory37 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream38 = null;
        org.jboss.dmr.Base64.InputStream inputStream40 = new org.jboss.dmr.Base64.InputStream(inputStream38, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream41 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream40);
        org.jboss.dmr.stream.ModelReader modelReader42 = modelStreamFactory37.newModelReader((java.io.InputStream) inputStream41);
        java.io.OutputStream outputStream43 = null;
        org.jboss.dmr.Base64.OutputStream outputStream44 = new org.jboss.dmr.Base64.OutputStream(outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream44);
        outputStream44.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter48 = modelStreamFactory37.newModelWriter((java.io.OutputStream) outputStream44);
        java.io.OutputStream outputStream49 = null;
        org.jboss.dmr.Base64.OutputStream outputStream50 = new org.jboss.dmr.Base64.OutputStream(outputStream49);
        outputStream50.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream52 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream50);
        org.jboss.dmr.Base64.OutputStream outputStream54 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream52, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream55 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream54);
        outputStream55.resumeEncoding();
        outputStream55.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter58 = modelStreamFactory37.newModelWriter((java.io.OutputStream) outputStream55);
        java.io.InputStream inputStream59 = null;
        org.jboss.dmr.Base64.InputStream inputStream61 = new org.jboss.dmr.Base64.InputStream(inputStream59, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue63 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str64 = longModelValue63.asString();
        byte[] byteArray65 = longModelValue63.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue66 = new org.jboss.dmr.BytesModelValue(byteArray65);
        int int69 = inputStream61.read(byteArray65, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream71 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream61, (-1));
        org.jboss.dmr.Base64.InputStream inputStream73 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream61, (int) 'p');
        org.jboss.dmr.stream.ModelReader modelReader74 = modelStreamFactory37.newModelReader((java.io.InputStream) inputStream61);
        org.jboss.dmr.Base64.InputStream inputStream75 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream61);
        org.jboss.dmr.Base64.InputStream inputStream76 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream61);
        org.jboss.dmr.stream.ModelReader modelReader77 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream61);
        java.io.OutputStream outputStream78 = null;
        org.jboss.dmr.Base64.OutputStream outputStream79 = new org.jboss.dmr.Base64.OutputStream(outputStream78);
        org.jboss.dmr.Base64.OutputStream outputStream80 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream79);
        org.jboss.dmr.Base64.OutputStream outputStream81 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream80);
        outputStream80.write((int) (short) 10);
        java.nio.charset.Charset charset84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter85 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream80, charset84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertNotNull(modelWriter35);
        org.junit.Assert.assertNotNull(modelStreamFactory37);
        org.junit.Assert.assertNotNull(modelReader42);
        org.junit.Assert.assertNotNull(modelWriter48);
        org.junit.Assert.assertNotNull(modelWriter58);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(modelReader74);
        org.junit.Assert.assertNotNull(modelReader77);
    }

    @Test
    public void test07646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07646");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean5 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.ModelValue modelValue6 = stringModelValue1.copy();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = stringModelValue1.asInt((int) 'e');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(modelValue6);
    }

    @Test
    public void test07647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07647");
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver0 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long3 = booleanModelValue2.asLong();
        org.jboss.dmr.ValueExpression valueExpression4 = booleanModelValue2.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue5 = new org.jboss.dmr.ExpressionValue(valueExpression4);
        java.lang.String str6 = valueExpression4.getExpressionString();
        java.lang.String str7 = valueExpressionResolver0.resolve(valueExpression4);
        java.lang.String str8 = valueExpression4.toString();
        java.lang.String str9 = valueExpression4.resolveString();
        org.junit.Assert.assertNotNull(valueExpressionResolver0);
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "true" + "'", str6, "true");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Expression \"true\"" + "'", str8, "Expression \"true\"");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
    }

    @Test
    public void test07648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07648");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        boolean boolean12 = modelNode9.equals((java.lang.Object) 100L);
        boolean boolean13 = modelNode1.equals(modelNode9);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("", modelNode18);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.get(strArray20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int23 = modelNode22.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.setExpression("hi!", "hi!");
        java.lang.String str28 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode24);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList29 = modelNode24.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode30 = modelNode22.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode32 = modelNode9.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode34 = modelNode9.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.PropertyModelValue propertyModelValue36 = new org.jboss.dmr.PropertyModelValue("1.0", modelNode9, false);
        java.io.InputStream inputStream37 = null;
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream(inputStream37, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue41 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str42 = longModelValue41.asString();
        byte[] byteArray43 = longModelValue41.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue44 = new org.jboss.dmr.BytesModelValue(byteArray43);
        int int47 = inputStream39.read(byteArray43, (int) (short) 1, (int) (byte) -1);
        java.lang.String str48 = org.jboss.dmr.Base64.encodeBytes(byteArray43);
        org.jboss.dmr.ModelNode modelNode49 = modelNode9.set(byteArray43);
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode53 = modelNode50.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList54 = modelNode53.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode55 = modelNode9.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList54);
        org.jboss.dmr.ModelNode modelNode57 = modelNode55.add(100);
        org.jboss.dmr.LongModelValue longModelValue60 = new org.jboss.dmr.LongModelValue(1L);
        long long62 = longModelValue60.asLong((long) (short) 0);
        java.lang.String str63 = longModelValue60.asString();
        org.jboss.dmr.ValueExpression valueExpression64 = longModelValue60.asExpression();
        int int65 = longModelValue60.asInt();
        int int66 = longModelValue60.asInt();
        org.jboss.dmr.ModelNode modelNode67 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode68 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode71 = modelNode68.set("hi!", 0.0d);
        java.lang.String str72 = modelNode68.toString();
        org.jboss.dmr.ModelNode modelNode73 = modelNode68.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode75 = modelNode68.set(100);
        org.jboss.dmr.ModelNode modelNode76 = modelNode67.add(modelNode68);
        org.jboss.dmr.ModelNode modelNode78 = modelNode76.set((double) (-1.0f));
        java.math.BigInteger bigInteger79 = modelNode76.asBigIntegerOrNull();
        boolean boolean80 = longModelValue60.equals((java.lang.Object) modelNode76);
        org.jboss.dmr.ModelNode modelNode81 = modelNode57.set("AA==", modelNode76);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode83 = modelNode57.remove("{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined,\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => undefined}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str28, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "AAAAAAAAAAE=" + "'", str48, "AAAAAAAAAAE=");
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNodeList54);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(valueExpression64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(\"hi!\" => 0.0)" + "'", str72, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(modelNode81);
    }

    @Test
    public void test07649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07649");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) 'a');
        int int9 = longModelValue1.asInt((int) '4');
        java.lang.String str10 = longModelValue1.asString();
        long long11 = longModelValue1.asLong();
        double double12 = longModelValue1.asDouble();
        boolean boolean13 = longModelValue1.asBoolean();
        java.io.DataOutput dataOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            longModelValue1.writeExternal(dataOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07650");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        byte[] byteArray14 = intModelValue9.asBytes();
        org.jboss.dmr.IntModelValue intModelValue16 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str17 = intModelValue16.asString();
        double double19 = intModelValue16.asDouble((double) 2);
        int int20 = intModelValue16.asInt();
        byte[] byteArray21 = intModelValue16.asBytes();
        long long22 = intModelValue16.asLong();
        boolean boolean23 = intModelValue9.equals(intModelValue16);
        boolean boolean25 = intModelValue9.has("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BWwAAAAAeA==");
        int int26 = intModelValue9.asInt();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 32]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32" + "'", str17, "32");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 32.0d + "'", double19 == 32.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
    }

    @Test
    public void test07651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07651");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBoolean();
        boolean boolean19 = modelReader15.isListStart();
        // The following exception was thrown during execution in test generation
        try {
            modelReader15.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been read");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07652");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long10 = booleanModelValue9.asLong();
        org.jboss.dmr.ValueExpression valueExpression11 = booleanModelValue9.asExpression();
        java.lang.String str12 = valueExpression11.toString();
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression15 = expressionValue14.asExpression();
        boolean boolean16 = valueExpression11.equals(valueExpression15);
        java.lang.String str17 = valueExpression15.resolveString();
        org.jboss.dmr.ModelNode modelNode18 = modelNode3.set("Expression \"1\"", valueExpression15);
        boolean boolean19 = modelNode3.isDefined();
        boolean boolean21 = modelNode3.hasDefined((int) 'p');
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Expression \"true\"" + "'", str12, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07653");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        boolean boolean11 = modelNode8.equals((java.lang.Object) 100L);
        boolean boolean12 = modelNode0.equals(modelNode8);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int22 = modelNode21.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.setExpression("hi!", "hi!");
        java.lang.String str27 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode23.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode29 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode8.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode33 = modelNode8.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.BooleanModelValue booleanModelValue35 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double36 = booleanModelValue35.asDouble();
        org.jboss.dmr.ModelValue modelValue37 = booleanModelValue35.copy();
        java.math.BigInteger bigInteger38 = booleanModelValue35.asBigInteger();
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode(bigInteger38);
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode(bigInteger38);
        org.jboss.dmr.ModelNode modelNode41 = modelNode33.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==", bigInteger38);
        org.jboss.dmr.ModelNode modelNode43 = modelNode41.setExpression("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode45 = modelNode41.insert((int) 'd');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str27, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(booleanModelValue35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode43);
    }

    @Test
    public void test07654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07654");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        java.lang.String str16 = valueExpression14.getExpressionString();
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue18 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal17);
        boolean boolean19 = bigDecimalModelValue18.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression20 = bigDecimalModelValue18.asExpression();
        int int21 = bigDecimalModelValue18.asInt();
        long long22 = bigDecimalModelValue18.asLong();
        long long24 = bigDecimalModelValue18.asLong(32L);
        boolean boolean25 = bigDecimalModelValue7.equals(bigDecimalModelValue18);
        double double27 = bigDecimalModelValue7.asDouble((double) (short) -1);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long30 = modelNode29.asLong();
        org.jboss.dmr.ValueExpression valueExpression31 = modelNode29.asExpression();
        java.math.BigDecimal bigDecimal32 = valueExpression31.resolveBigDecimal();
        java.lang.String str33 = valueExpression31.getExpressionString();
        java.math.BigDecimal bigDecimal34 = valueExpression31.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue35 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal34);
        boolean boolean36 = bigDecimalModelValue35.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression37 = bigDecimalModelValue35.asExpression();
        int int38 = bigDecimalModelValue35.asInt();
        long long39 = bigDecimalModelValue35.asLong();
        long long41 = bigDecimalModelValue35.asLong(32L);
        boolean boolean42 = bigDecimalModelValue7.equals(bigDecimalModelValue35);
        java.math.BigInteger bigInteger43 = bigDecimalModelValue35.asBigInteger();
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long46 = modelNode45.asLong();
        org.jboss.dmr.ValueExpression valueExpression47 = modelNode45.asExpression();
        java.math.BigDecimal bigDecimal48 = valueExpression47.resolveBigDecimal();
        java.lang.String str49 = valueExpression47.getExpressionString();
        java.math.BigDecimal bigDecimal50 = valueExpression47.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue51 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal50);
        boolean boolean52 = bigDecimalModelValue51.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression53 = bigDecimalModelValue51.asExpression();
        int int54 = bigDecimalModelValue51.asInt();
        double double56 = bigDecimalModelValue51.asDouble((double) 1.0f);
        boolean boolean57 = bigDecimalModelValue35.equals(bigDecimalModelValue51);
        double double59 = bigDecimalModelValue51.asDouble((double) 0);
        java.io.PrintWriter printWriter60 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue51.format(printWriter60, (int) 'Z', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0" + "'", str16, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1.0" + "'", str33, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(valueExpression37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(valueExpression47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1.0" + "'", str49, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(valueExpression53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
    }

    @Test
    public void test07655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07655");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(10);
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.resolve();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long6 = modelNode5.asLong();
        org.jboss.dmr.ValueExpression valueExpression7 = modelNode5.asExpression();
        java.math.BigDecimal bigDecimal8 = valueExpression7.resolveBigDecimal();
        java.lang.String str9 = valueExpression7.getExpressionString();
        org.jboss.dmr.ExpressionValue expressionValue11 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression12 = expressionValue11.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver13 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str14 = valueExpression12.resolveString(valueExpressionResolver13);
        java.math.BigDecimal bigDecimal15 = valueExpression7.resolveBigDecimal(valueExpressionResolver13);
        org.jboss.dmr.ModelNode modelNode16 = modelNode2.set("Expression \"1.0\"", bigDecimal15);
        boolean boolean17 = modelNode16.isDefined();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.set("hi!", 0.0d);
        org.jboss.dmr.Property property24 = new org.jboss.dmr.Property("", modelNode23);
        java.lang.String[] strArray25 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.get(strArray25);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int29 = modelNode28.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode30 = modelNode28.clone();
        org.jboss.dmr.ModelNode modelNode31 = modelNode26.setNoCopy("35", modelNode30);
        org.jboss.dmr.ModelType modelType32 = modelNode30.getType();
        org.jboss.dmr.ModelNode modelNode33 = modelNode16.set("100", modelType32);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1.0" + "'", str9, "1.0");
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertTrue("'" + modelType32 + "' != '" + org.jboss.dmr.ModelType.UNDEFINED + "'", modelType32.equals(org.jboss.dmr.ModelType.UNDEFINED));
        org.junit.Assert.assertNotNull(modelNode33);
    }

    @Test
    public void test07656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07656");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        byte[] byteArray3 = intModelValue1.asBytes();
        double double5 = intModelValue1.asDouble(100.0d);
        long long7 = intModelValue1.asLong((long) ' ');
        double double9 = intModelValue1.asDouble((double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = intModelValue1.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 32.0d + "'", double5 == 32.0d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 32.0d + "'", double9 == 32.0d);
    }

    @Test
    public void test07657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07657");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, 0);
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, (int) 'J');
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = inputStream9.markSupported();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07658");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode(byteArray3);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 52]");
    }

    @Test
    public void test07659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07659");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(bigInteger3);
        boolean boolean6 = modelNode5.isProtected();
        org.jboss.dmr.ModelNode modelNode7 = modelNode5.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode9 = modelNode7.add(97L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode7);
    }

    @Test
    public void test07660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07660");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode19 = modelNode18.setEmptyList();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long22 = modelNode21.asLong();
        org.jboss.dmr.ValueExpression valueExpression23 = modelNode21.asExpression();
        java.math.BigDecimal bigDecimal24 = valueExpression23.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode18.set(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode27 = modelNode13.set(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode28 = modelNode27.clone();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set((long) 'J');
        java.io.DataInput dataInput31 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode27.readExternal(dataInput31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode30);
    }

    @Test
    public void test07661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07661");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        java.lang.String str2 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(10L);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory6 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream7 = null;
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream10 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream9);
        org.jboss.dmr.stream.ModelReader modelReader11 = modelStreamFactory6.newModelReader((java.io.InputStream) inputStream10);
        java.io.OutputStream outputStream12 = null;
        org.jboss.dmr.Base64.OutputStream outputStream13 = new org.jboss.dmr.Base64.OutputStream(outputStream12);
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream13);
        outputStream13.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelStreamFactory6.newModelWriter((java.io.OutputStream) outputStream13);
        org.jboss.dmr.stream.ModelWriter modelWriter18 = modelWriter17.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue20 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray21 = intModelValue20.asBytes();
        int int23 = intModelValue20.asInt(0);
        java.math.BigInteger bigInteger24 = intModelValue20.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter25 = modelWriter18.writeBigInteger(bigInteger24);
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelWriter18.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter26.writeLong((long) (short) -1);
        modelNode4.write(modelWriter26);
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelWriter26.writeDouble((double) 10);
        org.jboss.dmr.LongModelValue longModelValue33 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str34 = longModelValue33.asString();
        byte[] byteArray35 = longModelValue33.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue36 = new org.jboss.dmr.BytesModelValue(byteArray35);
        java.lang.String str37 = bytesModelValue36.asString();
        int int38 = bytesModelValue36.asInt();
        int int39 = bytesModelValue36.asInt();
        org.jboss.dmr.LongModelValue longModelValue41 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str42 = longModelValue41.asString();
        byte[] byteArray43 = longModelValue41.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue44 = new org.jboss.dmr.BytesModelValue(byteArray43);
        double double45 = bytesModelValue44.asDouble();
        boolean boolean46 = bytesModelValue36.equals(bytesModelValue44);
        byte[] byteArray47 = bytesModelValue44.asBytes();
        java.math.BigInteger bigInteger48 = bytesModelValue44.asBigInteger();
        org.jboss.dmr.LongModelValue longModelValue50 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str51 = longModelValue50.asString();
        byte[] byteArray52 = longModelValue50.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue53 = new org.jboss.dmr.BytesModelValue(byteArray52);
        double double54 = bytesModelValue53.asDouble();
        boolean boolean55 = bytesModelValue44.equals(bytesModelValue53);
        org.jboss.dmr.LongModelValue longModelValue57 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str58 = longModelValue57.asString();
        byte[] byteArray59 = longModelValue57.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue60 = new org.jboss.dmr.BytesModelValue(byteArray59);
        java.lang.String str61 = bytesModelValue60.asString();
        int int62 = bytesModelValue60.asInt();
        java.lang.String str63 = bytesModelValue60.asString();
        java.lang.String str64 = bytesModelValue60.asString();
        long long66 = bytesModelValue60.asLong((long) (byte) 10);
        boolean boolean67 = bytesModelValue44.equals(bytesModelValue60);
        long long68 = bytesModelValue44.asLong();
        java.math.BigInteger bigInteger69 = bytesModelValue44.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter70 = modelWriter26.writeBigInteger(bigInteger69);
        org.jboss.dmr.stream.ModelWriter modelWriter72 = modelWriter70.writeString("(\"Expression \\\"true\\\"\" => (\"EXPRESSION_VALUE\" => 35))");
        // The following exception was thrown during execution in test generation
        try {
            modelWriter70.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been written");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4" + "'", str2, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelStreamFactory6);
        org.junit.Assert.assertNotNull(modelReader11);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(modelWriter25);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertNotNull(modelWriter28);
        org.junit.Assert.assertNotNull(modelWriter31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str37, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 4.9E-324d + "'", double45 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 4.9E-324d + "'", double54 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str61, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str63, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str64, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertNotNull(modelWriter70);
        org.junit.Assert.assertNotNull(modelWriter72);
    }

    @Test
    public void test07662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07662");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        boolean boolean12 = longModelValue1.asBoolean(false);
        boolean boolean14 = longModelValue1.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long18 = modelNode17.asLong();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.Property property45 = new org.jboss.dmr.Property("", modelNode44);
        java.lang.String[] strArray46 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.get(strArray46);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList52 = modelNode51.asList();
        org.jboss.dmr.ListModelValue listModelValue53 = new org.jboss.dmr.ListModelValue(modelNodeList52);
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue53);
        org.jboss.dmr.ModelValue modelValue55 = listModelValue53.resolve();
        int int57 = listModelValue53.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList58 = listModelValue53.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList59 = modelNode47.asPropertyList(propertyList58);
        modelNode27.setNoCopy(modelNode47);
        org.jboss.dmr.ModelNode modelNode61 = modelNode17.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode27);
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode66 = modelNode63.set("hi!", 0.0d);
        org.jboss.dmr.Property property67 = new org.jboss.dmr.Property("", modelNode66);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode69 = modelNode66.get(strArray68);
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int71 = modelNode70.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode72 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode75 = modelNode72.setExpression("hi!", "hi!");
        java.lang.String str76 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode72);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList77 = modelNode72.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode78 = modelNode70.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList77);
        org.jboss.dmr.ModelNode modelNode79 = modelNode69.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList77);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList80 = modelNode17.asList(modelNodeList77);
        org.jboss.dmr.PropertyModelValue propertyModelValue82 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode17, false);
        java.lang.String str83 = modelNode17.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode86 = modelNode17.set("Expression \"true\"", (long) (byte) -1);
        boolean boolean87 = longModelValue1.equals((java.lang.Object) "Expression \"true\"");
        byte[] byteArray88 = longModelValue1.asBytes();
        java.math.BigInteger bigInteger89 = longModelValue1.asBigInteger();
        org.jboss.dmr.ModelNode modelNode90 = new org.jboss.dmr.ModelNode(bigInteger89);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNodeList52);
        org.junit.Assert.assertNotNull(modelValue55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(propertyList58);
        org.junit.Assert.assertNotNull(propertyList59);
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str76, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList77);
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertNotNull(modelNode79);
        org.junit.Assert.assertNotNull(modelNodeList80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))" + "'", str83, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger89);
    }

    @Test
    public void test07663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07663");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelType modelType5 = modelNode3.getType();
        org.jboss.dmr.TypeModelValue typeModelValue6 = org.jboss.dmr.TypeModelValue.of(modelType5);
        org.jboss.dmr.ModelType modelType7 = org.jboss.dmr.ModelType.PROPERTY;
        char char8 = modelType7.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue9 = org.jboss.dmr.TypeModelValue.of(modelType7);
        java.lang.String str10 = typeModelValue9.asString();
        boolean boolean11 = typeModelValue6.equals(typeModelValue9);
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue15 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean16 = expressionValue13.equals(expressionValue15);
        org.jboss.dmr.ExpressionValue expressionValue18 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue20 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean21 = expressionValue18.equals(expressionValue20);
        boolean boolean22 = expressionValue13.equals(expressionValue20);
        org.jboss.dmr.ModelValue modelValue23 = expressionValue13.resolve();
        java.lang.String str24 = expressionValue13.asString();
        org.jboss.dmr.ModelValue modelValue25 = expressionValue13.resolve();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory27 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream28 = null;
        org.jboss.dmr.Base64.InputStream inputStream30 = new org.jboss.dmr.Base64.InputStream(inputStream28, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream31 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream30);
        org.jboss.dmr.stream.ModelReader modelReader32 = modelStreamFactory27.newModelReader((java.io.InputStream) inputStream31);
        java.io.OutputStream outputStream33 = null;
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream(outputStream33);
        org.jboss.dmr.Base64.OutputStream outputStream35 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream34);
        outputStream34.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter38 = modelStreamFactory27.newModelWriter((java.io.OutputStream) outputStream34);
        org.jboss.dmr.stream.ModelWriter modelWriter39 = modelWriter38.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelWriter39.writeInt((int) (byte) 10);
        expressionValue13.write(modelWriter39);
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.set("hi!", 0.0d);
        org.jboss.dmr.Property property48 = new org.jboss.dmr.Property("", modelNode47);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode50 = modelNode47.get(strArray49);
        org.jboss.dmr.ModelNode modelNode51 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int52 = modelNode51.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode56 = modelNode53.setExpression("hi!", "hi!");
        java.lang.String str57 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode53);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList58 = modelNode53.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode59 = modelNode51.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList58);
        org.jboss.dmr.ModelNode modelNode60 = modelNode50.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList58);
        org.jboss.dmr.LongModelValue longModelValue62 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str63 = longModelValue62.asString();
        double double65 = longModelValue62.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression66 = longModelValue62.asExpression();
        byte[] byteArray67 = longModelValue62.asBytes();
        org.jboss.dmr.ModelNode modelNode68 = modelNode60.add(byteArray67);
        org.jboss.dmr.stream.ModelWriter modelWriter69 = modelWriter39.writeBytes(byteArray67);
        org.jboss.dmr.IntModelValue intModelValue71 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str72 = intModelValue71.asString();
        double double74 = intModelValue71.asDouble((double) 2);
        java.math.BigDecimal bigDecimal75 = intModelValue71.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue76 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal75);
        long long77 = bigDecimalModelValue76.asLong();
        long long78 = bigDecimalModelValue76.asLong();
        int int80 = bigDecimalModelValue76.asInt((-1));
        org.jboss.dmr.ModelValue modelValue81 = bigDecimalModelValue76.copy();
        boolean boolean83 = bigDecimalModelValue76.asBoolean(false);
        java.math.BigInteger bigInteger84 = bigDecimalModelValue76.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter85 = modelWriter69.writeBigInteger(bigInteger84);
        org.jboss.dmr.stream.ModelWriter modelWriter87 = modelWriter69.writeDouble((-1.0d));
        typeModelValue6.write(modelWriter87);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType5.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue6);
        org.junit.Assert.assertTrue("'" + modelType7 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType7.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + 'p' + "'", char8 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY" + "'", str10, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(modelValue25);
        org.junit.Assert.assertNotNull(modelStreamFactory27);
        org.junit.Assert.assertNotNull(modelReader32);
        org.junit.Assert.assertNotNull(modelWriter38);
        org.junit.Assert.assertNotNull(modelWriter39);
        org.junit.Assert.assertNotNull(modelWriter41);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str57, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList58);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelWriter69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "32" + "'", str72, "32");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 32.0d + "'", double74 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 32L + "'", long77 == 32L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 32L + "'", long78 == 32L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 32 + "'", int80 == 32);
        org.junit.Assert.assertNotNull(modelValue81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(modelWriter85);
        org.junit.Assert.assertNotNull(modelWriter87);
    }

    @Test
    public void test07664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07664");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 100);
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        org.jboss.dmr.IntModelValue intModelValue7 = new org.jboss.dmr.IntModelValue((-1));
        boolean boolean8 = intModelValue1.equals(intModelValue7);
        boolean boolean9 = intModelValue7.asBoolean();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07665");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = objectModelValue0.asList();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\"");
        java.util.Set<java.lang.String> strSet8 = objectModelValue0.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = objectModelValue0.getChild(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test07666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07666");
        org.jboss.dmr.ValueExpression valueExpression1 = new org.jboss.dmr.ValueExpression("100");
        java.lang.String str2 = valueExpression1.getExpressionString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100");
    }

    @Test
    public void test07667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07667");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        java.lang.String str16 = valueExpression14.getExpressionString();
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue18 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal17);
        boolean boolean19 = bigDecimalModelValue18.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression20 = bigDecimalModelValue18.asExpression();
        int int21 = bigDecimalModelValue18.asInt();
        long long22 = bigDecimalModelValue18.asLong();
        long long24 = bigDecimalModelValue18.asLong(32L);
        boolean boolean25 = bigDecimalModelValue7.equals(bigDecimalModelValue18);
        double double27 = bigDecimalModelValue7.asDouble((double) (short) -1);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long30 = modelNode29.asLong();
        org.jboss.dmr.ValueExpression valueExpression31 = modelNode29.asExpression();
        java.math.BigDecimal bigDecimal32 = valueExpression31.resolveBigDecimal();
        java.lang.String str33 = valueExpression31.getExpressionString();
        java.math.BigDecimal bigDecimal34 = valueExpression31.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue35 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal34);
        boolean boolean36 = bigDecimalModelValue35.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression37 = bigDecimalModelValue35.asExpression();
        int int38 = bigDecimalModelValue35.asInt();
        long long39 = bigDecimalModelValue35.asLong();
        long long41 = bigDecimalModelValue35.asLong(32L);
        boolean boolean42 = bigDecimalModelValue7.equals(bigDecimalModelValue35);
        double double44 = bigDecimalModelValue7.asDouble((double) '#');
        java.lang.String str45 = bigDecimalModelValue7.asString();
        boolean boolean46 = bigDecimalModelValue7.asBoolean();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0" + "'", str16, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1.0" + "'", str33, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(valueExpression37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1.0" + "'", str45, "1.0");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test07668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07668");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        byte[] byteArray5 = longModelValue1.asBytes();
        org.jboss.dmr.ModelType modelType6 = longModelValue1.getType();
        long long8 = longModelValue1.asLong(1L);
        double double9 = longModelValue1.asDouble();
        java.io.DataOutput dataOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            longModelValue1.writeExternal(dataOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType6.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test07669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07669");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        java.lang.String str13 = listModelValue12.asString();
        long long14 = listModelValue12.asLong();
        int int16 = listModelValue12.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue17 = listModelValue12.protect();
        boolean boolean18 = listModelValue5.equals(listModelValue12);
        org.jboss.dmr.ModelValue modelValue19 = listModelValue5.protect();
        java.lang.String str21 = listModelValue5.toJSONString(true);
        int int23 = listModelValue5.asInt((int) '#');
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str13, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[{ \"hi!\" : 0.0 }]" + "'", str21, "[{ \"hi!\" : 0.0 }]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test07670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07670");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        long long7 = bigDecimalModelValue6.asLong();
        double double8 = bigDecimalModelValue6.asDouble();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 32.0d + "'", double8 == 32.0d);
    }

    @Test
    public void test07671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07671");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        byte[] byteArray3 = longModelValue1.asBytes();
        long long5 = longModelValue1.asLong(10L);
        int int7 = longModelValue1.asInt((int) (short) -1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test07672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07672");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromJSONString("(\"true\" => INT)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unexpected character '(' while reading DMR stream");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07673");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        long long4 = doubleModelValue1.asLong((long) (short) -1);
        double double6 = doubleModelValue1.asDouble(0.0d);
        java.math.BigInteger bigInteger7 = doubleModelValue1.asBigInteger();
        double double8 = doubleModelValue1.asDouble();
        java.math.BigDecimal bigDecimal9 = doubleModelValue1.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression10 = doubleModelValue1.asExpression();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory12 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream13 = null;
        org.jboss.dmr.Base64.InputStream inputStream15 = new org.jboss.dmr.Base64.InputStream(inputStream13, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream15);
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory12.newModelReader((java.io.InputStream) inputStream16);
        java.io.OutputStream outputStream18 = null;
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream(outputStream18);
        org.jboss.dmr.Base64.OutputStream outputStream20 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream19);
        outputStream19.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelStreamFactory12.newModelWriter((java.io.OutputStream) outputStream19);
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelWriter23.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelWriter23.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter26.writeBoolean(true);
        doubleModelValue1.write(modelWriter26);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter26.writeListEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter31 = modelWriter26.writeListStart();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertNotNull(modelStreamFactory12);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter24);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertNotNull(modelWriter28);
        org.junit.Assert.assertNotNull(modelWriter30);
    }

    @Test
    public void test07674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07674");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.protect();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory6 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream7 = null;
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream10 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream9);
        org.jboss.dmr.stream.ModelReader modelReader11 = modelStreamFactory6.newModelReader((java.io.InputStream) inputStream10);
        java.io.OutputStream outputStream12 = null;
        org.jboss.dmr.Base64.OutputStream outputStream13 = new org.jboss.dmr.Base64.OutputStream(outputStream12);
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream13);
        outputStream13.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelStreamFactory6.newModelWriter((java.io.OutputStream) outputStream13);
        org.jboss.dmr.stream.ModelWriter modelWriter18 = modelWriter17.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter20 = modelWriter18.writeInt((int) (byte) 10);
        stringModelValue4.write(modelWriter20);
        objectModelValue0.write(modelWriter20);
        boolean boolean24 = objectModelValue0.asBoolean(false);
        java.io.PrintWriter printWriter25 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.formatAsJSON(printWriter25, 52, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(modelStreamFactory6);
        org.junit.Assert.assertNotNull(modelReader11);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter18);
        org.junit.Assert.assertNotNull(modelWriter20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07675");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.get(strArray10);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asList();
        org.jboss.dmr.ListModelValue listModelValue17 = new org.jboss.dmr.ListModelValue(modelNodeList16);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue17);
        org.jboss.dmr.ModelValue modelValue19 = listModelValue17.resolve();
        int int21 = listModelValue17.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue17.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList23 = modelNode11.asPropertyList(propertyList22);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.get(strArray30);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue37);
        org.jboss.dmr.ModelValue modelValue39 = listModelValue37.resolve();
        int int41 = listModelValue37.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList42 = listModelValue37.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList43 = modelNode31.asPropertyList(propertyList42);
        modelNode11.setNoCopy(modelNode31);
        org.jboss.dmr.ModelNode modelNode45 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode11);
        java.lang.String str47 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode45, 1);
        org.jboss.dmr.ModelNode modelNode48 = modelNode45.resolve();
        java.io.DataInput dataInput49 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode45.readExternal(dataInput49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(propertyList42);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==" + "'", str47, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.junit.Assert.assertNotNull(modelNode48);
    }

    @Test
    public void test07676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07676");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        int int11 = listModelValue5.asInt((int) (short) -1);
        java.lang.String str12 = listModelValue5.asString();
        boolean boolean13 = listModelValue5.asBoolean();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = listModelValue5.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07677");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter12.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter15.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelWriter17.writeInt(0);
        org.jboss.dmr.stream.ModelWriter modelWriter20 = modelWriter17.writePropertyStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter22 = modelWriter17.writeLong((long) 100);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(modelWriter20);
    }

    @Test
    public void test07678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07678");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        java.math.BigInteger bigInteger4 = longModelValue1.asBigInteger();
        long long6 = longModelValue1.asLong((long) 100);
        int int7 = longModelValue1.asInt();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test07679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07679");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        java.math.BigDecimal bigDecimal5 = booleanModelValue1.asBigDecimal();
        java.lang.String str6 = booleanModelValue1.asString();
        java.math.BigDecimal bigDecimal7 = booleanModelValue1.asBigDecimal();
        java.math.BigInteger bigInteger8 = booleanModelValue1.asBigInteger();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "false" + "'", str6, "false");
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigInteger8);
    }

    @Test
    public void test07680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07680");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(false);
        int int3 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set(52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue12);
        org.jboss.dmr.ModelValue modelValue14 = listModelValue12.resolve();
        int int16 = listModelValue12.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList17 = listModelValue12.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue12.asPropertyList();
        org.jboss.dmr.ModelNode modelNode20 = listModelValue12.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.resolve();
        org.jboss.dmr.ModelNode modelNode22 = modelNode5.set("EXPRESSION_VALUE", modelNode21);
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set(true);
        org.jboss.dmr.ModelNode modelNode25 = modelNode24.resolve();
        java.lang.String str26 = modelNode24.asString();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        org.jboss.dmr.Validation.validate(modelNode28, "[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.setExpression("hi!", "hi!");
        java.lang.String str38 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode34);
        boolean boolean40 = modelNode34.hasDefined((-1));
        org.jboss.dmr.BooleanModelValue booleanModelValue41 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double42 = booleanModelValue41.asDouble();
        org.jboss.dmr.ModelValue modelValue43 = booleanModelValue41.copy();
        java.math.BigInteger bigInteger44 = booleanModelValue41.asBigInteger();
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode(bigInteger44);
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode(bigInteger44);
        org.jboss.dmr.ModelNode modelNode47 = modelNode34.set(bigInteger44);
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue48 = new org.jboss.dmr.BigIntegerModelValue(bigInteger44);
        org.jboss.dmr.ModelNode modelNode49 = modelNode28.set(bigInteger44);
        org.jboss.dmr.ModelNode modelNode52 = modelNode28.set("", false);
        org.jboss.dmr.ModelNode modelNode53 = modelNode24.set("{\n    \"[(\\\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\\\" => big integer 32)]\" : 1\n}", modelNode52);
        java.lang.String str55 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode24, 3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "true" + "'", str26, "true");
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str38, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(booleanModelValue41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKg3KeA\nwaWaSwEIlKI1YpQ8TIo9HeHA1xEJ2MYoKdjaKSRlpitk5pWkpqcWKRgbacYqKVgpGHLVFjAwRDFU\nAABKHkXaewAAAA==" + "'", str55, "H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKg3KeA\nwaWaSwEIlKI1YpQ8TIo9HeHA1xEJ2MYoKdjaKSRlpitk5pWkpqcWKRgbacYqKVgpGHLVFjAwRDFU\nAABKHkXaewAAAA==");
    }

    @Test
    public void test07681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07681");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        byte[] byteArray5 = longModelValue1.asBytes();
        org.jboss.dmr.ModelType modelType6 = longModelValue1.getType();
        long long8 = longModelValue1.asLong(1L);
        java.lang.String str9 = longModelValue1.asString();
        long long10 = longModelValue1.asLong();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode12 = longModelValue1.requireChild(8);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [8]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType6.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test07682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07682");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        byte[] byteArray5 = doubleModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression6 = doubleModelValue1.asExpression();
        java.io.ObjectInput objectInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression6.readExternal(objectInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(valueExpression6);
    }

    @Test
    public void test07683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07683");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("\"\"");
        org.junit.Assert.assertNotNull(modelNode1);
    }

    @Test
    public void test07684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07684");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(10);
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.resolve();
        org.jboss.dmr.Validation.validate(modelNode1, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.clone();
        java.lang.String str6 = modelNode1.toString();
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10" + "'", str6, "10");
    }

    @Test
    public void test07685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07685");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        java.lang.String str9 = property7.getName();
        org.jboss.dmr.Property property10 = property7.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue12 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = propertyModelValue12.asList();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(modelNodeList13);
    }

    @Test
    public void test07686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07686");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        long long4 = doubleModelValue1.asLong((long) 32);
        org.jboss.dmr.ModelValue modelValue5 = doubleModelValue1.protect();
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long8 = booleanModelValue7.asLong();
        int int9 = booleanModelValue7.asInt();
        org.jboss.dmr.DoubleModelValue doubleModelValue11 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long12 = doubleModelValue11.asLong();
        boolean boolean13 = doubleModelValue11.asBoolean();
        boolean boolean14 = booleanModelValue7.equals((java.lang.Object) doubleModelValue11);
        java.lang.String str15 = doubleModelValue11.asString();
        org.jboss.dmr.ValueExpression valueExpression16 = doubleModelValue11.asExpression();
        boolean boolean17 = doubleModelValue1.equals(doubleModelValue11);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory19 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream20 = null;
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream(inputStream20, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream22);
        org.jboss.dmr.stream.ModelReader modelReader24 = modelStreamFactory19.newModelReader((java.io.InputStream) inputStream23);
        java.io.OutputStream outputStream25 = null;
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream(outputStream25);
        org.jboss.dmr.Base64.OutputStream outputStream27 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream26);
        outputStream26.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelStreamFactory19.newModelWriter((java.io.OutputStream) outputStream26);
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelWriter30.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter33 = modelWriter30.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelWriter33.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelWriter33.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter39 = modelWriter33.writeString("(\"true\" => INT)");
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelWriter39.writeDouble((double) (short) 0);
        org.jboss.dmr.stream.ModelWriter modelWriter42 = modelWriter39.writeListEnd();
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue1.write(modelWriter42);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10.0" + "'", str15, "10.0");
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory19);
        org.junit.Assert.assertNotNull(modelReader24);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelWriter31);
        org.junit.Assert.assertNotNull(modelWriter33);
        org.junit.Assert.assertNotNull(modelWriter35);
        org.junit.Assert.assertNotNull(modelWriter37);
        org.junit.Assert.assertNotNull(modelWriter39);
        org.junit.Assert.assertNotNull(modelWriter41);
        org.junit.Assert.assertNotNull(modelWriter42);
    }

    @Test
    public void test07687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07687");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) 112L);
    }

    @Test
    public void test07688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07688");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        int int6 = doubleModelValue1.asInt(2);
        double double8 = doubleModelValue1.asDouble(0.0d);
        org.jboss.dmr.DoubleModelValue doubleModelValue10 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long11 = doubleModelValue10.asLong();
        boolean boolean12 = doubleModelValue10.asBoolean();
        byte[] byteArray13 = doubleModelValue10.asBytes();
        int int15 = doubleModelValue10.asInt((int) ' ');
        long long16 = doubleModelValue10.asLong();
        org.jboss.dmr.ValueExpression valueExpression17 = doubleModelValue10.asExpression();
        java.math.BigInteger bigInteger18 = doubleModelValue10.asBigInteger();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode22.asList();
        org.jboss.dmr.ListModelValue listModelValue24 = new org.jboss.dmr.ListModelValue(modelNodeList23);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue24);
        org.jboss.dmr.ModelValue modelValue26 = listModelValue24.resolve();
        int int28 = listModelValue24.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList29 = listModelValue24.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList30 = listModelValue24.asList();
        long long31 = listModelValue24.asLong();
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        java.lang.String str38 = listModelValue37.asString();
        long long39 = listModelValue37.asLong();
        int int41 = listModelValue37.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue42 = listModelValue37.protect();
        boolean boolean44 = listModelValue37.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue45 = listModelValue37.resolve();
        boolean boolean46 = listModelValue37.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = listModelValue37.asList();
        boolean boolean48 = listModelValue24.equals(listModelValue37);
        java.util.List<org.jboss.dmr.Property> propertyList49 = listModelValue24.asPropertyList();
        boolean boolean50 = doubleModelValue10.equals((java.lang.Object) propertyList49);
        double double52 = doubleModelValue10.asDouble((double) '4');
        boolean boolean53 = doubleModelValue1.equals(doubleModelValue10);
        org.jboss.dmr.ValueExpression valueExpression54 = doubleModelValue10.asExpression();
        java.math.BigDecimal bigDecimal55 = valueExpression54.resolveBigDecimal();
        java.math.BigDecimal bigDecimal56 = valueExpression54.resolveBigDecimal();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertNotNull(modelValue26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(propertyList29);
        org.junit.Assert.assertNotNull(modelNodeList30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str38, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(modelValue42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(modelValue45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(propertyList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(valueExpression54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimal56);
    }

    @Test
    public void test07689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07689");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        boolean boolean3 = objectModelValue0.asBoolean();
        java.lang.String str4 = objectModelValue0.asString();
        org.jboss.dmr.ObjectModelValue objectModelValue5 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue5.asObject();
        java.util.Set<java.lang.String> strSet7 = objectModelValue5.getKeys();
        boolean boolean9 = objectModelValue5.has((int) 'a');
        boolean boolean11 = objectModelValue5.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue12 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue12.asObject();
        java.util.Set<java.lang.String> strSet14 = objectModelValue12.getKeys();
        boolean boolean16 = objectModelValue12.has((int) 'a');
        boolean boolean17 = objectModelValue5.equals(objectModelValue12);
        org.jboss.dmr.ModelNode modelNode18 = objectModelValue12.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList19 = objectModelValue12.asPropertyList();
        org.jboss.dmr.ObjectModelValue objectModelValue20 = new org.jboss.dmr.ObjectModelValue();
        boolean boolean21 = objectModelValue20.asBoolean();
        int int23 = objectModelValue20.asInt(0);
        org.jboss.dmr.ModelValue modelValue25 = objectModelValue20.copy(false);
        boolean boolean26 = objectModelValue12.equals(objectModelValue20);
        boolean boolean27 = objectModelValue0.equals(objectModelValue12);
        long long28 = objectModelValue12.asLong();
        org.jboss.dmr.ObjectModelValue objectModelValue29 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode30 = objectModelValue29.asObject();
        java.util.Set<java.lang.String> strSet31 = objectModelValue29.getKeys();
        boolean boolean33 = objectModelValue29.has((int) 'a');
        boolean boolean35 = objectModelValue29.has("");
        java.util.List<org.jboss.dmr.Property> propertyList36 = objectModelValue29.asPropertyList();
        boolean boolean38 = objectModelValue29.asBoolean(false);
        org.jboss.dmr.ObjectModelValue objectModelValue39 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode40 = objectModelValue39.asObject();
        java.util.Set<java.lang.String> strSet41 = objectModelValue39.getKeys();
        org.jboss.dmr.ModelNode modelNode43 = objectModelValue39.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean44 = objectModelValue39.asBoolean();
        org.jboss.dmr.ModelNode modelNode46 = objectModelValue39.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue47 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode48 = objectModelValue47.asObject();
        java.util.Set<java.lang.String> strSet49 = objectModelValue47.getKeys();
        org.jboss.dmr.ModelNode modelNode51 = objectModelValue47.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean52 = objectModelValue47.asBoolean();
        int int54 = objectModelValue47.asInt((int) 'b');
        int int56 = objectModelValue47.asInt((int) '#');
        boolean boolean57 = objectModelValue39.equals(objectModelValue47);
        int int58 = objectModelValue47.asInt();
        java.util.Set<java.lang.String> strSet59 = objectModelValue47.getKeys();
        long long61 = objectModelValue47.asLong((long) 0);
        org.jboss.dmr.ModelType modelType62 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode(modelType62);
        org.jboss.dmr.LongModelValue longModelValue66 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str67 = longModelValue66.asString();
        byte[] byteArray68 = longModelValue66.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue69 = new org.jboss.dmr.BytesModelValue(byteArray68);
        java.lang.String str70 = bytesModelValue69.asString();
        int int71 = bytesModelValue69.asInt();
        long long73 = bytesModelValue69.asLong((long) (short) 1);
        long long74 = bytesModelValue69.asLong();
        java.math.BigDecimal bigDecimal75 = bytesModelValue69.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode76 = modelNode63.set("32", bigDecimal75);
        boolean boolean77 = objectModelValue47.equals((java.lang.Object) bigDecimal75);
        boolean boolean78 = objectModelValue47.asBoolean();
        boolean boolean79 = objectModelValue29.equals(objectModelValue47);
        boolean boolean80 = objectModelValue12.equals(objectModelValue29);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(modelValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(propertyList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(modelNode43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNull(modelNode51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + modelType62 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType62.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str70, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test07690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07690");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        boolean boolean20 = bytesModelValue12.equals(bytesModelValue19);
        java.math.BigInteger bigInteger21 = bytesModelValue19.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue22 = new org.jboss.dmr.BigIntegerModelValue(bigInteger21);
        java.io.PrintWriter printWriter23 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigIntegerModelValue22.format(printWriter23, (int) (byte) -1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigInteger21);
    }

    @Test
    public void test07691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07691");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        outputStream4.flushBase64();
        outputStream4.resumeEncoding();
        outputStream4.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream4, (int) 'l');
    }

    @Test
    public void test07692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07692");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.resolve();
        java.lang.String str3 = modelNode1.asString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set((long) 52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.setExpression("hi!", "hi!");
        java.lang.String str11 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode7.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set((double) 0);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.PROPERTY;
        char char17 = modelType16.getTypeChar();
        org.jboss.dmr.ModelNode modelNode18 = modelNode7.set("[(\"hi!\" => 0.0)]", modelType16);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode18);
        org.jboss.dmr.ModelNode modelNode20 = modelNode5.set(property19);
        org.jboss.dmr.ModelType modelType21 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode(modelType21);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        org.jboss.dmr.Property property28 = new org.jboss.dmr.Property("", modelNode27);
        org.jboss.dmr.ModelNode modelNode29 = modelNode22.set(property28);
        org.jboss.dmr.ModelNode modelNode30 = property28.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue31 = new org.jboss.dmr.PropertyModelValue(property28);
        java.util.List<org.jboss.dmr.Property> propertyList32 = propertyModelValue31.asPropertyList();
        org.jboss.dmr.ModelNode modelNode34 = propertyModelValue31.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode35 = modelNode34.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue38 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long39 = booleanModelValue38.asLong();
        org.jboss.dmr.ValueExpression valueExpression40 = booleanModelValue38.asExpression();
        java.lang.String str41 = valueExpression40.toString();
        org.jboss.dmr.ExpressionValue expressionValue43 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression44 = expressionValue43.asExpression();
        boolean boolean45 = valueExpression40.equals(valueExpression44);
        org.jboss.dmr.LongModelValue longModelValue47 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal48 = longModelValue47.asBigDecimal();
        int int49 = longModelValue47.asInt();
        org.jboss.dmr.ValueExpression valueExpression50 = longModelValue47.asExpression();
        boolean boolean51 = valueExpression44.equals(valueExpression50);
        int int52 = valueExpression50.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue54 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression55 = expressionValue54.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver56 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str57 = valueExpression55.resolveString(valueExpressionResolver56);
        java.math.BigInteger bigInteger58 = valueExpression50.resolveBigInteger(valueExpressionResolver56);
        org.jboss.dmr.ModelNode modelNode59 = modelNode34.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression50);
        java.lang.String str60 = valueExpression50.resolveString();
        org.jboss.dmr.ModelNode modelNode61 = modelNode5.set(valueExpression50);
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long64 = modelNode63.asLong();
        org.jboss.dmr.ValueExpression valueExpression65 = modelNode63.asExpression();
        java.math.BigDecimal bigDecimal66 = valueExpression65.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue68 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long69 = booleanModelValue68.asLong();
        org.jboss.dmr.ValueExpression valueExpression70 = booleanModelValue68.asExpression();
        boolean boolean72 = valueExpression70.equals((java.lang.Object) 'p');
        boolean boolean73 = valueExpression65.equals(valueExpression70);
        org.jboss.dmr.ModelNode modelNode74 = new org.jboss.dmr.ModelNode(valueExpression65);
        org.jboss.dmr.ModelNode modelNode76 = modelNode74.set(false);
        boolean boolean77 = modelNode5.equals(modelNode76);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode80 = modelNode5.add("[(\"hi!\" => expression \"hi!\"),\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\",false,(\"H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA\" => bytes {\n    0x28, 0x22, 0x22, 0x20, 0x3d, 0x3e, 0x20, 0x28,\n    0x22, 0x68, 0x69, 0x21, 0x22, 0x20, 0x3d, 0x3e,\n    0x20, 0x30, 0x2e, 0x30, 0x29, 0x29\n})]", (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str11, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType16.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'p' + "'", char17 == 'p');
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + modelType21 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType21.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(booleanModelValue38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(valueExpression40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Expression \"true\"" + "'", str41, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(valueExpression50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(valueExpression55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "52" + "'", str60, "52");
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(valueExpression65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(booleanModelValue68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(valueExpression70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test07693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07693");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(false);
        int int3 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set(52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue12);
        org.jboss.dmr.ModelValue modelValue14 = listModelValue12.resolve();
        int int16 = listModelValue12.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList17 = listModelValue12.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue12.asPropertyList();
        org.jboss.dmr.ModelNode modelNode20 = listModelValue12.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.resolve();
        org.jboss.dmr.ModelNode modelNode22 = modelNode5.set("EXPRESSION_VALUE", modelNode21);
        org.jboss.dmr.ModelNode modelNode25 = modelNode5.set("1", (double) 1.0f);
        org.jboss.dmr.ModelNode modelNode27 = org.jboss.dmr.ModelNode.fromJSONString("1.0");
        org.jboss.dmr.ModelNode modelNode28 = modelNode27.setEmptyObject();
        modelNode25.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode32 = modelNode27.set("\"\\\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\\\"\"", 100);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.set("hi!", 0.0d);
        org.jboss.dmr.Property property39 = new org.jboss.dmr.Property("", modelNode38);
        java.lang.String[] strArray40 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode41 = modelNode38.get(strArray40);
        org.jboss.dmr.ModelNode modelNode42 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int43 = modelNode42.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.setExpression("hi!", "hi!");
        java.lang.String str48 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode44);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList49 = modelNode44.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode50 = modelNode42.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList49);
        org.jboss.dmr.ModelNode modelNode51 = modelNode41.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList49);
        int int52 = modelNode41.asInt();
        org.jboss.dmr.ModelNode modelNode54 = modelNode41.get((int) 'J');
        org.jboss.dmr.ModelNode modelNode55 = modelNode54.clone();
        org.jboss.dmr.ModelNode modelNode56 = modelNode27.set("Expressi", modelNode54);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode58 = modelNode54.require("LONG");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'LONG' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str48, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode56);
    }

    @Test
    public void test07694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07694");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        int int12 = longModelValue1.asInt((int) 'l');
        long long14 = longModelValue1.asLong(2L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test07695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07695");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        org.jboss.dmr.ModelNode modelNode15 = objectModelValue7.getChild("(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))");
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.add("(\"hi!\" => 0.0)", (long) 32);
        java.lang.Boolean boolean19 = modelNode15.asBooleanOrNull();
        org.jboss.dmr.ModelNode modelNode21 = modelNode15.add((int) (byte) 0);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(modelNode21);
    }

    @Test
    public void test07696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07696");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        boolean boolean4 = stringModelValue1.equals((java.lang.Object) (-1.0d));
        java.lang.String str5 = stringModelValue1.asString();
        java.lang.String str6 = stringModelValue1.asString();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = stringModelValue1.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str5, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str6, "(\"\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test07697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07697");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue5.copy();
        boolean boolean19 = listModelValue5.asBoolean(true);
        boolean boolean21 = listModelValue5.has(32);
        long long23 = listModelValue5.asLong((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = listModelValue5.insertChild((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
    }

    @Test
    public void test07698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07698");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        java.lang.String str8 = listModelValue7.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList9 = listModelValue7.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList10 = modelNode0.asList(modelNodeList9);
        org.jboss.dmr.ModelNode modelNode11 = modelNode0.addEmptyList();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str15 = modelNode13.asString("true");
        org.jboss.dmr.ModelNode modelNode18 = modelNode13.set("expression \"hi!\"", (int) (short) -1);
        org.jboss.dmr.ModelNode modelNode19 = modelNode0.add(modelNode18);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = modelNode18.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList9);
        org.junit.Assert.assertNotNull(modelNodeList10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10" + "'", str15, "10");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
    }

    @Test
    public void test07699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07699");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long10 = booleanModelValue9.asLong();
        org.jboss.dmr.ValueExpression valueExpression11 = booleanModelValue9.asExpression();
        java.lang.String str12 = valueExpression11.toString();
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression15 = expressionValue14.asExpression();
        boolean boolean16 = valueExpression11.equals(valueExpression15);
        java.lang.String str17 = valueExpression15.resolveString();
        org.jboss.dmr.ModelNode modelNode18 = modelNode3.set("Expression \"1\"", valueExpression15);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode22.asList();
        org.jboss.dmr.ModelNode modelNode26 = modelNode22.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType27 = modelNode22.getType();
        org.jboss.dmr.ModelNode modelNode28 = modelNode18.set(modelType27);
        java.lang.String str29 = modelNode28.asString();
        boolean boolean31 = modelNode28.hasDefined(52);
        org.jboss.dmr.ModelType modelType32 = org.jboss.dmr.ModelType.LIST;
        org.jboss.dmr.ModelNode modelNode33 = modelNode28.set(modelType32);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode34 = modelNode28.asObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Expression \"true\"" + "'", str12, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertTrue("'" + modelType27 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType27.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PROPERTY" + "'", str29, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + modelType32 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType32.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(modelNode33);
    }

    @Test
    public void test07700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07700");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        boolean boolean4 = stringModelValue1.equals((java.lang.Object) (-1.0d));
        java.lang.String str5 = stringModelValue1.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent6 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) modelEvent6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue13 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean14 = stringModelValue11.equals(stringModelValue13);
        byte[] byteArray15 = stringModelValue13.asBytes();
        java.lang.Object obj16 = null;
        boolean boolean17 = stringModelValue13.equals(obj16);
        boolean boolean19 = stringModelValue13.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean20 = stringModelValue9.equals(stringModelValue13);
        boolean boolean21 = stringModelValue1.equals(stringModelValue13);
        java.io.PrintWriter printWriter22 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue13.format(printWriter22, 97, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str5, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent6 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent6.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test07701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07701");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        boolean boolean11 = bigDecimalModelValue7.asBoolean(false);
        int int12 = bigDecimalModelValue7.asInt();
        org.jboss.dmr.ValueExpression valueExpression13 = bigDecimalModelValue7.asExpression();
        org.jboss.dmr.ValueExpression valueExpression14 = bigDecimalModelValue7.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger18 = booleanModelValue17.asBigInteger();
        java.math.BigInteger bigInteger19 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue20 = new org.jboss.dmr.BigIntegerModelValue(bigInteger19);
        org.jboss.dmr.BooleanModelValue booleanModelValue21 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double22 = booleanModelValue21.asDouble();
        org.jboss.dmr.ModelValue modelValue23 = booleanModelValue21.copy();
        java.math.BigInteger bigInteger24 = booleanModelValue21.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue25 = new org.jboss.dmr.BigIntegerModelValue(bigInteger24);
        int int27 = bigIntegerModelValue25.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double29 = booleanModelValue28.asDouble();
        org.jboss.dmr.ModelValue modelValue30 = booleanModelValue28.copy();
        java.math.BigInteger bigInteger31 = booleanModelValue28.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue32 = new org.jboss.dmr.BigIntegerModelValue(bigInteger31);
        java.lang.String str33 = bigIntegerModelValue32.asString();
        java.math.BigInteger bigInteger34 = bigIntegerModelValue32.asBigInteger();
        boolean boolean35 = bigIntegerModelValue25.equals(bigIntegerModelValue32);
        double double37 = bigIntegerModelValue25.asDouble(0.0d);
        long long39 = bigIntegerModelValue25.asLong((long) 52);
        boolean boolean41 = bigIntegerModelValue25.asBoolean(false);
        boolean boolean42 = bigIntegerModelValue20.equals(bigIntegerModelValue25);
        boolean boolean43 = valueExpression14.equals((java.lang.Object) bigIntegerModelValue25);
        java.math.BigInteger bigInteger44 = bigIntegerModelValue25.asBigInteger();
        java.lang.String str45 = bigIntegerModelValue25.asString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(booleanModelValue21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
    }

    @Test
    public void test07702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07702");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression2 = expressionValue1.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str5 = expressionValue4.toString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        boolean boolean12 = expressionValue4.equals((java.lang.Object) property11);
        boolean boolean13 = expressionValue1.equals(expressionValue4);
        org.jboss.dmr.ModelType modelType14 = org.jboss.dmr.ModelType.PROPERTY;
        char char15 = modelType14.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue16 = org.jboss.dmr.TypeModelValue.of(modelType14);
        org.jboss.dmr.ValueExpression valueExpression17 = typeModelValue16.asExpression();
        org.jboss.dmr.stream.ModelEvent modelEvent18 = org.jboss.dmr.stream.ModelEvent.TYPE;
        boolean boolean19 = valueExpression17.equals((java.lang.Object) modelEvent18);
        boolean boolean20 = expressionValue1.equals((java.lang.Object) boolean19);
        org.jboss.dmr.ExpressionValue expressionValue22 = new org.jboss.dmr.ExpressionValue("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelValue modelValue23 = expressionValue22.resolve();
        boolean boolean24 = expressionValue1.equals(expressionValue22);
        java.io.PrintWriter printWriter25 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.format(printWriter25, 1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "expression \"hi!\"" + "'", str5, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType14.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'p' + "'", char15 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue16);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertTrue("'" + modelEvent18 + "' != '" + org.jboss.dmr.stream.ModelEvent.TYPE + "'", modelEvent18.equals(org.jboss.dmr.stream.ModelEvent.TYPE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07703");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        int int3 = longModelValue1.asInt();
        java.math.BigDecimal bigDecimal4 = longModelValue1.asBigDecimal();
        org.jboss.dmr.StringModelValue stringModelValue6 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray7 = stringModelValue6.asBytes();
        byte[] byteArray8 = stringModelValue6.asBytes();
        boolean boolean9 = longModelValue1.equals((java.lang.Object) stringModelValue6);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger10 = stringModelValue6.asBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" \"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07704");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        long long11 = longModelValue5.asLong();
        org.jboss.dmr.ValueExpression valueExpression12 = longModelValue5.asExpression();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(valueExpression12);
    }

    @Test
    public void test07705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07705");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromJSONString("1.0");
        org.jboss.dmr.IntModelValue intModelValue3 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long5 = intModelValue3.asLong((long) 'b');
        java.lang.String str6 = intModelValue3.asString();
        java.math.BigInteger bigInteger7 = intModelValue3.asBigInteger();
        boolean boolean9 = intModelValue3.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue11 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long13 = intModelValue11.asLong((long) 'b');
        java.lang.String str14 = intModelValue11.asString();
        boolean boolean15 = intModelValue3.equals(intModelValue11);
        byte[] byteArray16 = intModelValue11.asBytes();
        org.jboss.dmr.ModelValue modelValue17 = intModelValue11.clone();
        java.math.BigInteger bigInteger18 = intModelValue11.asBigInteger();
        org.jboss.dmr.ModelNode modelNode19 = modelNode1.set(bigInteger18);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "32" + "'", str6, "32");
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "32" + "'", str14, "32");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(modelNode19);
    }

    @Test
    public void test07706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07706");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter13.writeInt((int) (byte) 10);
        org.jboss.dmr.stream.ModelWriter modelWriter16 = modelWriter15.writeListEnd();
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double18 = booleanModelValue17.asDouble();
        org.jboss.dmr.ModelValue modelValue19 = booleanModelValue17.copy();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue21 = new org.jboss.dmr.BigIntegerModelValue(bigInteger20);
        java.lang.String str22 = bigIntegerModelValue21.asString();
        long long24 = bigIntegerModelValue21.asLong(32L);
        double double25 = bigIntegerModelValue21.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue26 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double27 = booleanModelValue26.asDouble();
        org.jboss.dmr.ModelValue modelValue28 = booleanModelValue26.copy();
        java.math.BigInteger bigInteger29 = booleanModelValue26.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue30 = new org.jboss.dmr.BigIntegerModelValue(bigInteger29);
        double double32 = bigIntegerModelValue30.asDouble((double) 'b');
        boolean boolean33 = bigIntegerModelValue21.equals(bigIntegerModelValue30);
        org.jboss.dmr.ValueExpression valueExpression34 = bigIntegerModelValue21.asExpression();
        java.math.BigInteger bigInteger35 = bigIntegerModelValue21.asBigInteger();
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode(bigInteger35);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter37 = modelWriter16.writeBigInteger(bigInteger35);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(modelWriter16);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(valueExpression34);
        org.junit.Assert.assertNotNull(bigInteger35);
    }

    @Test
    public void test07707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07707");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        int int3 = longModelValue1.asInt();
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        double double9 = longModelValue6.asDouble((double) 32L);
        boolean boolean10 = longModelValue6.asBoolean();
        boolean boolean11 = longModelValue1.equals(longModelValue6);
        java.math.BigInteger bigInteger12 = longModelValue6.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.String> strSet14 = bigIntegerModelValue13.getKeys();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "52" + "'", str4, "52");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test07708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07708");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        double double7 = bigIntegerModelValue4.asDouble();
        double double9 = bigIntegerModelValue4.asDouble(8.0d);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.PROPERTY;
        char char11 = modelType10.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue12 = org.jboss.dmr.TypeModelValue.of(modelType10);
        boolean boolean13 = typeModelValue12.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression14 = typeModelValue12.asExpression();
        boolean boolean15 = bigIntegerModelValue4.equals((java.lang.Object) typeModelValue12);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList20 = modelNode19.asList();
        org.jboss.dmr.ModelType modelType21 = modelNode19.getType();
        org.jboss.dmr.TypeModelValue typeModelValue22 = org.jboss.dmr.TypeModelValue.of(modelType21);
        boolean boolean24 = typeModelValue22.asBoolean(false);
        boolean boolean25 = typeModelValue12.equals(typeModelValue22);
        org.jboss.dmr.ModelType modelType26 = org.jboss.dmr.ModelType.PROPERTY;
        char char27 = modelType26.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue28 = org.jboss.dmr.TypeModelValue.of(modelType26);
        boolean boolean29 = typeModelValue28.asBoolean();
        java.lang.String str30 = typeModelValue28.asString();
        boolean boolean31 = typeModelValue12.equals(typeModelValue28);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory33 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream34 = null;
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream(inputStream34, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream36);
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory33.newModelReader((java.io.InputStream) inputStream37);
        java.io.OutputStream outputStream39 = null;
        org.jboss.dmr.Base64.OutputStream outputStream40 = new org.jboss.dmr.Base64.OutputStream(outputStream39);
        org.jboss.dmr.Base64.OutputStream outputStream41 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40);
        outputStream40.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter44 = modelStreamFactory33.newModelWriter((java.io.OutputStream) outputStream40);
        org.jboss.dmr.stream.ModelWriter modelWriter45 = modelWriter44.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter47 = modelWriter44.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter49 = modelWriter47.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelWriter47.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter53 = modelWriter51.writeLong(100L);
        typeModelValue28.write(modelWriter53);
        org.jboss.dmr.ModelType modelType55 = org.jboss.dmr.ModelType.PROPERTY;
        char char56 = modelType55.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue57 = org.jboss.dmr.TypeModelValue.of(modelType55);
        org.jboss.dmr.ModelType modelType58 = org.jboss.dmr.ModelType.PROPERTY;
        char char59 = modelType58.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue60 = org.jboss.dmr.TypeModelValue.of(modelType58);
        org.jboss.dmr.ModelType modelType61 = org.jboss.dmr.ModelType.PROPERTY;
        char char62 = modelType61.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue63 = org.jboss.dmr.TypeModelValue.of(modelType61);
        boolean boolean64 = typeModelValue60.equals(typeModelValue63);
        java.lang.String str65 = typeModelValue63.asString();
        org.jboss.dmr.ModelType modelType66 = org.jboss.dmr.ModelType.PROPERTY;
        char char67 = modelType66.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue68 = org.jboss.dmr.TypeModelValue.of(modelType66);
        org.jboss.dmr.ModelType modelType69 = org.jboss.dmr.ModelType.PROPERTY;
        char char70 = modelType69.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue71 = org.jboss.dmr.TypeModelValue.of(modelType69);
        boolean boolean72 = typeModelValue68.equals(typeModelValue71);
        java.lang.String str73 = typeModelValue71.asString();
        boolean boolean75 = typeModelValue71.asBoolean(true);
        boolean boolean76 = typeModelValue63.equals(typeModelValue71);
        org.jboss.dmr.ValueExpression valueExpression77 = typeModelValue71.asExpression();
        org.jboss.dmr.ModelType modelType78 = org.jboss.dmr.ModelType.PROPERTY;
        char char79 = modelType78.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue80 = org.jboss.dmr.TypeModelValue.of(modelType78);
        org.jboss.dmr.ModelType modelType81 = org.jboss.dmr.ModelType.PROPERTY;
        char char82 = modelType81.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue83 = org.jboss.dmr.TypeModelValue.of(modelType81);
        boolean boolean84 = typeModelValue80.equals(typeModelValue83);
        boolean boolean85 = typeModelValue71.equals(typeModelValue80);
        org.jboss.dmr.ModelType modelType86 = org.jboss.dmr.ModelType.PROPERTY;
        char char87 = modelType86.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue88 = org.jboss.dmr.TypeModelValue.of(modelType86);
        boolean boolean89 = typeModelValue88.asBoolean();
        boolean boolean90 = typeModelValue71.equals(typeModelValue88);
        org.jboss.dmr.ValueExpression valueExpression91 = typeModelValue88.asExpression();
        boolean boolean92 = typeModelValue57.equals(typeModelValue88);
        boolean boolean93 = typeModelValue88.asBoolean();
        boolean boolean94 = typeModelValue28.equals(typeModelValue88);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'p' + "'", char11 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNodeList20);
        org.junit.Assert.assertTrue("'" + modelType21 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType21.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + modelType26 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType26.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + 'p' + "'", char27 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PROPERTY" + "'", str30, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory33);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertNotNull(modelWriter44);
        org.junit.Assert.assertNotNull(modelWriter45);
        org.junit.Assert.assertNotNull(modelWriter47);
        org.junit.Assert.assertNotNull(modelWriter49);
        org.junit.Assert.assertNotNull(modelWriter51);
        org.junit.Assert.assertNotNull(modelWriter53);
        org.junit.Assert.assertTrue("'" + modelType55 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType55.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char56 + "' != '" + 'p' + "'", char56 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue57);
        org.junit.Assert.assertTrue("'" + modelType58 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType58.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char59 + "' != '" + 'p' + "'", char59 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue60);
        org.junit.Assert.assertTrue("'" + modelType61 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType61.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char62 + "' != '" + 'p' + "'", char62 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PROPERTY" + "'", str65, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType66 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType66.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char67 + "' != '" + 'p' + "'", char67 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue68);
        org.junit.Assert.assertTrue("'" + modelType69 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType69.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char70 + "' != '" + 'p' + "'", char70 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PROPERTY" + "'", str73, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(valueExpression77);
        org.junit.Assert.assertTrue("'" + modelType78 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType78.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char79 + "' != '" + 'p' + "'", char79 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue80);
        org.junit.Assert.assertTrue("'" + modelType81 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType81.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + 'p' + "'", char82 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + modelType86 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType86.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char87 + "' != '" + 'p' + "'", char87 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(valueExpression91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test07709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07709");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        int int3 = longModelValue1.asInt();
        org.jboss.dmr.ValueExpression valueExpression4 = longModelValue1.asExpression();
        double double5 = longModelValue1.asDouble();
        org.jboss.dmr.LongModelValue longModelValue7 = new org.jboss.dmr.LongModelValue(1L);
        long long9 = longModelValue7.asLong((long) (short) 0);
        java.lang.String str10 = longModelValue7.asString();
        byte[] byteArray11 = longModelValue7.asBytes();
        org.jboss.dmr.ModelType modelType12 = longModelValue7.getType();
        long long14 = longModelValue7.asLong(1L);
        boolean boolean15 = longModelValue1.equals(longModelValue7);
        org.jboss.dmr.ValueExpression valueExpression16 = longModelValue1.asExpression();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(valueExpression16);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 52.0d + "'", double5 == 52.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType12 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType12.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(valueExpression16);
    }

    @Test
    public void test07710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07710");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        int int5 = objectModelValue0.asInt();
        org.jboss.dmr.ObjectModelValue objectModelValue6 = null;
        boolean boolean7 = objectModelValue0.equals(objectModelValue6);
        boolean boolean9 = objectModelValue0.has("{\n    \"EXPRESSION_VALUE\" : 35\n}");
        org.jboss.dmr.ModelNode modelNode10 = objectModelValue0.asObject();
        boolean boolean12 = objectModelValue0.asBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = objectModelValue0.requireChild("TYPE_MODEL_VALUE");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'TYPE_MODEL_VALUE' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07711");
        java.lang.String str1 = org.jboss.dmr.ValueExpression.quote("PROPERTY");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PROPERTY" + "'", str1, "PROPERTY");
    }

    @Test
    public void test07712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07712");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        java.math.BigInteger bigInteger15 = bigIntegerModelValue11.asBigInteger();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(bigInteger15);
    }

    @Test
    public void test07713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07713");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode19 = modelNode18.setEmptyList();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long22 = modelNode21.asLong();
        org.jboss.dmr.ValueExpression valueExpression23 = modelNode21.asExpression();
        java.math.BigDecimal bigDecimal24 = valueExpression23.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode18.set(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode27 = modelNode13.set(bigDecimal24);
        long long29 = modelNode27.asLong(100L);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
    }

    @Test
    public void test07714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07714");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ExpressionValue expressionValue12 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str13 = expressionValue12.asString();
        boolean boolean14 = expressionValue1.equals(expressionValue12);
        org.jboss.dmr.ModelValue modelValue15 = expressionValue1.resolve();
        java.lang.String str16 = expressionValue1.asString();
        org.jboss.dmr.ModelValue modelValue17 = expressionValue1.resolve();
        java.io.PrintWriter printWriter18 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.format(printWriter18, (-1), false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(modelValue17);
    }

    @Test
    public void test07715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07715");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((-1));
        double double3 = intModelValue1.asDouble((double) 35L);
        long long5 = intModelValue1.asLong(10L);
        long long7 = intModelValue1.asLong((long) 'p');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test07716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07716");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        boolean boolean41 = modelNode27.isProtected();
        org.jboss.dmr.ModelNode modelNode44 = modelNode27.set("", (double) 8);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode(1L);
        org.jboss.dmr.ValueExpression valueExpression48 = modelNode47.asExpression();
        org.jboss.dmr.ModelNode modelNode49 = modelNode44.set("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwACM=", valueExpression48);
        // The following exception was thrown during execution in test generation
        try {
            long long50 = modelNode44.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(valueExpression48);
        org.junit.Assert.assertNotNull(modelNode49);
    }

    @Test
    public void test07717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07717");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue8 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue8.asObject();
        java.util.Set<java.lang.String> strSet10 = objectModelValue8.getKeys();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue8.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean13 = objectModelValue8.asBoolean();
        int int15 = objectModelValue8.asInt((int) 'b');
        int int17 = objectModelValue8.asInt((int) '#');
        boolean boolean18 = objectModelValue0.equals(objectModelValue8);
        int int19 = objectModelValue8.asInt();
        java.util.Set<java.lang.String> strSet20 = objectModelValue8.getKeys();
        org.jboss.dmr.ModelValue modelValue21 = objectModelValue8.copy();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(modelValue21);
    }

    @Test
    public void test07718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07718");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        boolean boolean18 = listModelValue13.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray19 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean20 = listModelValue13.equals((java.lang.Object) modelNodeArray19);
        boolean boolean21 = typeModelValue5.equals((java.lang.Object) listModelValue13);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue13.resolve();
        org.jboss.dmr.ModelNode modelNode23 = listModelValue13.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList24 = listModelValue13.asPropertyList();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(modelNodeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(propertyList24);
    }

    @Test
    public void test07719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07719");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        boolean boolean11 = propertyModelValue7.has("AAAAIA==");
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        java.lang.String str13 = propertyModelValue7.asString();
        org.jboss.dmr.ModelNode modelNode15 = propertyModelValue7.getChild((int) (byte) 0);
        org.jboss.dmr.stream.ModelWriter modelWriter16 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue7.write(modelWriter16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=\" => (\"hi!\" => expression \"hi!\"))" + "'", str13, "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=\" => (\"hi!\" => expression \"hi!\"))");
        org.junit.Assert.assertNotNull(modelNode15);
    }

    @Test
    public void test07720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07720");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ExpressionValue expressionValue12 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean15 = expressionValue12.equals(expressionValue14);
        org.jboss.dmr.ExpressionValue expressionValue17 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression18 = expressionValue17.asExpression();
        boolean boolean19 = expressionValue12.equals(expressionValue17);
        org.jboss.dmr.ValueExpression valueExpression20 = expressionValue17.asExpression();
        boolean boolean21 = expressionValue8.equals(expressionValue17);
        org.jboss.dmr.ValueExpression valueExpression22 = expressionValue8.asExpression();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(valueExpression22);
    }

    @Test
    public void test07721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07721");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(bigDecimal4);
        org.jboss.dmr.ModelNode modelNode7 = modelNode5.set((double) (byte) 0);
        java.lang.String str8 = modelNode5.toString();
        byte[] byteArray9 = modelNode5.asBytes();
        org.jboss.dmr.ValueExpression valueExpression10 = modelNode5.asExpression();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0.0" + "'", str8, "0.0");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(valueExpression10);
    }

    @Test
    public void test07722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07722");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream19);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream22 = null;
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) (byte) 100);
        org.jboss.dmr.StringModelValue stringModelValue28 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue30 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean31 = stringModelValue28.equals(stringModelValue30);
        byte[] byteArray32 = stringModelValue30.asBytes();
        boolean boolean34 = org.jboss.dmr.Base64.encodeToFile(byteArray32, "org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        int int37 = inputStream26.read(byteArray32, 10, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = inputStream20.read(byteArray32, (int) ' ', (int) 'b');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test07723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07723");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        int int10 = intModelValue5.asInt();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) intModelValue5);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str16 = modelNode14.asString("true");
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long20 = modelNode19.asLong();
        org.jboss.dmr.ValueExpression valueExpression21 = modelNode19.asExpression();
        java.math.BigDecimal bigDecimal22 = valueExpression21.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode(bigDecimal22);
        org.jboss.dmr.ModelNode modelNode25 = modelNode23.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode26 = modelNode14.setNoCopy("35", modelNode25);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        org.jboss.dmr.Property property33 = new org.jboss.dmr.Property("", modelNode32);
        boolean boolean35 = modelNode32.hasDefined((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode36 = modelNode26.setNoCopy("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4", modelNode32);
        org.jboss.dmr.ModelNode modelNode37 = modelNode11.setNoCopy("false", modelNode26);
        org.jboss.dmr.ModelNode modelNode40 = modelNode26.set("", "{}");
        org.jboss.dmr.ModelType modelType41 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode42 = new org.jboss.dmr.ModelNode(modelType41);
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.set("hi!", 0.0d);
        org.jboss.dmr.Property property48 = new org.jboss.dmr.Property("", modelNode47);
        org.jboss.dmr.ModelNode modelNode49 = modelNode42.set(property48);
        java.lang.String str50 = property48.getName();
        org.jboss.dmr.Property property51 = property48.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue52 = new org.jboss.dmr.PropertyModelValue(property51);
        org.jboss.dmr.ModelNode modelNode53 = modelNode26.set(property51);
        java.lang.String str54 = modelNode53.asStringOrNull();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "10" + "'", str16, "10");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertTrue("'" + modelType41 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType41.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str54, "(\"\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test07724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07724");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        boolean boolean11 = propertyModelValue7.has("AAAAIA==");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue7.asList();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = propertyModelValue7.getChild("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNodeList12);
    }

    @Test
    public void test07725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07725");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue0.asObject();
        int int7 = objectModelValue0.asInt();
        org.jboss.dmr.ModelValue modelValue8 = objectModelValue0.resolve();
        org.jboss.dmr.ModelValue modelValue9 = objectModelValue0.protect();
        int int11 = objectModelValue0.asInt((int) (byte) 0);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(modelValue8);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test07726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07726");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double2 = longModelValue1.asDouble();
        java.lang.String str3 = longModelValue1.asString();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1" + "'", str3, "-1");
    }

    @Test
    public void test07727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07727");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        org.jboss.dmr.ModelNode modelNode15 = objectModelValue7.getChild("(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))");
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.add("(\"hi!\" => 0.0)", (long) 32);
        org.jboss.dmr.ModelNode modelNode21 = org.jboss.dmr.ModelNode.fromJSONString("[1]");
        org.jboss.dmr.ModelNode modelNode23 = modelNode21.add(true);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.get(strArray30);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue37);
        org.jboss.dmr.ModelValue modelValue39 = listModelValue37.resolve();
        int int41 = listModelValue37.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList42 = listModelValue37.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList43 = modelNode31.asPropertyList(propertyList42);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode48 = modelNode45.set("hi!", 0.0d);
        org.jboss.dmr.Property property49 = new org.jboss.dmr.Property("", modelNode48);
        java.lang.String[] strArray50 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.get(strArray50);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode55 = modelNode52.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList56 = modelNode55.asList();
        org.jboss.dmr.ListModelValue listModelValue57 = new org.jboss.dmr.ListModelValue(modelNodeList56);
        org.jboss.dmr.ModelNode modelNode58 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue57);
        org.jboss.dmr.ModelValue modelValue59 = listModelValue57.resolve();
        int int61 = listModelValue57.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList62 = listModelValue57.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList63 = modelNode51.asPropertyList(propertyList62);
        modelNode31.setNoCopy(modelNode51);
        boolean boolean65 = modelNode51.isProtected();
        org.jboss.dmr.ModelNode modelNode68 = modelNode51.set("", (double) 8);
        org.jboss.dmr.ModelNode modelNode71 = new org.jboss.dmr.ModelNode(1L);
        org.jboss.dmr.ValueExpression valueExpression72 = modelNode71.asExpression();
        org.jboss.dmr.ModelNode modelNode73 = modelNode68.set("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwACM=", valueExpression72);
        java.lang.String str74 = valueExpression72.resolveString();
        org.jboss.dmr.ModelNode modelNode75 = modelNode21.set(valueExpression72);
        org.jboss.dmr.ModelNode modelNode76 = modelNode18.add("32", valueExpression72);
        org.jboss.dmr.ModelNode modelNode77 = modelNode76.resolve();
        org.jboss.dmr.ModelNode modelNode78 = modelNode77.clear();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(propertyList42);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNodeList56);
        org.junit.Assert.assertNotNull(modelValue59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(propertyList62);
        org.junit.Assert.assertNotNull(propertyList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(valueExpression72);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1" + "'", str74, "1");
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertNotNull(modelNode77);
        org.junit.Assert.assertNotNull(modelNode78);
    }

    @Test
    public void test07728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07728");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.get(strArray11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = modelNode12.asPropertyList(propertyList23);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList43 = listModelValue38.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList44 = modelNode32.asPropertyList(propertyList43);
        modelNode12.setNoCopy(modelNode32);
        org.jboss.dmr.ModelNode modelNode46 = modelNode2.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode12);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("", modelNode51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode54 = modelNode51.get(strArray53);
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int56 = modelNode55.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.setExpression("hi!", "hi!");
        java.lang.String str61 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode57);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = modelNode57.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode63 = modelNode55.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        org.jboss.dmr.ModelNode modelNode64 = modelNode54.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode2.asList(modelNodeList62);
        org.jboss.dmr.PropertyModelValue propertyModelValue67 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode2, false);
        org.jboss.dmr.ModelType modelType68 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode69 = new org.jboss.dmr.ModelNode(modelType68);
        org.jboss.dmr.ModelNode modelNode71 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode74 = modelNode71.set("hi!", 0.0d);
        org.jboss.dmr.Property property75 = new org.jboss.dmr.Property("", modelNode74);
        org.jboss.dmr.ModelNode modelNode76 = modelNode69.set(property75);
        org.jboss.dmr.PropertyModelValue propertyModelValue77 = new org.jboss.dmr.PropertyModelValue(property75);
        org.jboss.dmr.ModelValue modelValue78 = propertyModelValue77.copy();
        boolean boolean79 = propertyModelValue67.equals(propertyModelValue77);
        boolean boolean81 = propertyModelValue77.has("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        java.lang.String str82 = propertyModelValue77.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList83 = propertyModelValue77.asList();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str61, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertTrue("'" + modelType68 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType68.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertNotNull(modelValue78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str82, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNodeList83);
    }

    @Test
    public void test07729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07729");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        java.math.BigInteger bigInteger4 = longModelValue1.asBigInteger();
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue((-1L));
        long long8 = longModelValue6.asLong((long) (byte) -1);
        int int10 = longModelValue6.asInt(0);
        boolean boolean11 = longModelValue1.equals((java.lang.Object) longModelValue6);
        byte[] byteArray12 = longModelValue6.asBytes();
        long long13 = longModelValue6.asLong();
        java.io.DataOutput dataOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            longModelValue6.writeExternal(dataOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test07730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07730");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.setEmptyList();
        boolean boolean16 = modelNode14.asBoolean(false);
        int int18 = modelNode14.asInt((int) (byte) -1);
        org.jboss.dmr.ModelNode modelNode21 = modelNode14.set("AAAAAAAAAAE=", "");
        java.math.BigInteger bigInteger22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode23 = modelNode14.set(bigInteger22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newValue is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(modelNode21);
    }

    @Test
    public void test07731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07731");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        org.jboss.dmr.Validation.validate(modelNode0, "[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelType modelType6 = modelNode0.getType();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ListModelValue listModelValue8 = new org.jboss.dmr.ListModelValue(modelNodeList7);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property9 = listModelValue8.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType6.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNodeList7);
    }

    @Test
    public void test07732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07732");
        org.jboss.dmr.ModelNode modelNode2 = org.jboss.dmr.ModelNode.fromString("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"");
        org.jboss.dmr.ModelNode modelNode4 = modelNode2.setExpression("AAAAIA==");
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", modelNode4);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode4);
    }

    @Test
    public void test07733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07733");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        java.lang.String str9 = property7.getName();
        org.jboss.dmr.Property property10 = property7.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.Property property12 = propertyModelValue11.asProperty();
        java.lang.String str13 = propertyModelValue11.asString();
        org.jboss.dmr.Property property14 = propertyModelValue11.asProperty();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str13, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test07734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07734");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        long long7 = bigDecimalModelValue6.asLong();
        long long8 = bigDecimalModelValue6.asLong();
        long long10 = bigDecimalModelValue6.asLong((long) 'b');
        boolean boolean11 = bigDecimalModelValue6.asBoolean();
        boolean boolean12 = bigDecimalModelValue6.asBoolean();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07735");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        long long5 = intModelValue1.asLong();
        long long6 = intModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression7 = intModelValue1.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver8 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal9 = valueExpression7.resolveBigDecimal(valueExpressionResolver8);
        org.jboss.dmr.ExpressionValue expressionValue10 = new org.jboss.dmr.ExpressionValue(valueExpression7);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertNotNull(bigDecimal9);
    }

    @Test
    public void test07736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07736");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter12.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter15.writeBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            modelWriter17.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(modelWriter17);
    }

    @Test
    public void test07737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07737");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        long long7 = listModelValue5.asLong();
        java.util.List<org.jboss.dmr.Property> propertyList8 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode9 = listModelValue5.asObject();
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode(modelType10);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        org.jboss.dmr.Property property17 = new org.jboss.dmr.Property("", modelNode16);
        org.jboss.dmr.ModelNode modelNode18 = modelNode11.set(property17);
        org.jboss.dmr.ModelNode modelNode19 = property17.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue20 = new org.jboss.dmr.PropertyModelValue(property17);
        org.jboss.dmr.ModelValue modelValue21 = propertyModelValue20.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList22 = propertyModelValue20.asList();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        java.lang.String str28 = modelNode24.toString();
        org.jboss.dmr.ModelNode modelNode29 = modelNode24.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode34 = modelNode31.set("hi!", 0.0d);
        org.jboss.dmr.Property property35 = new org.jboss.dmr.Property("", modelNode34);
        org.jboss.dmr.ModelNode modelNode36 = modelNode24.set(property35);
        org.jboss.dmr.PropertyModelValue propertyModelValue38 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode36, false);
        java.util.Set<java.lang.String> strSet39 = propertyModelValue38.getKeys();
        org.jboss.dmr.ModelValue modelValue40 = propertyModelValue38.copy();
        boolean boolean41 = propertyModelValue20.equals(propertyModelValue38);
        org.jboss.dmr.ModelValue modelValue42 = propertyModelValue20.protect();
        org.jboss.dmr.ModelNode modelNode43 = propertyModelValue20.asObject();
        boolean boolean44 = listModelValue5.equals((java.lang.Object) modelNode43);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode45 = modelNode43.addEmptyList();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(propertyList8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType10.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelValue21);
        org.junit.Assert.assertNotNull(modelNodeList22);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"hi!\" => 0.0)" + "'", str28, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(modelValue42);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test07738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07738");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        int int34 = inputStream26.read(byteArray30, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (-1));
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader41 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream38);
        java.io.OutputStream outputStream42 = null;
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream(outputStream42);
        outputStream43.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream46 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream45);
        outputStream46.flushBase64();
        outputStream46.flushBase64();
        outputStream46.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter50 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream46);
        java.io.InputStream inputStream51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelReader modelReader52 = modelStreamFactory1.newModelReader(inputStream51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelReader41);
        org.junit.Assert.assertNotNull(modelWriter50);
    }

    @Test
    public void test07739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07739");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression14 = expressionValue13.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str17 = expressionValue16.toString();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        boolean boolean24 = expressionValue16.equals((java.lang.Object) property23);
        boolean boolean25 = expressionValue13.equals(expressionValue16);
        boolean boolean26 = expressionValue8.equals((java.lang.Object) boolean25);
        org.jboss.dmr.ExpressionValue expressionValue28 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str29 = expressionValue28.asString();
        java.lang.Throwable throwable31 = null;
        org.jboss.dmr.stream.ModelException modelException32 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable31);
        org.jboss.dmr.stream.ModelException modelException33 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException32);
        org.jboss.dmr.stream.ModelException modelException34 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException32);
        java.lang.Throwable throwable36 = null;
        org.jboss.dmr.stream.ModelException modelException37 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable36);
        org.jboss.dmr.stream.ModelException modelException38 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException37);
        java.lang.Throwable throwable40 = null;
        org.jboss.dmr.stream.ModelException modelException41 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable40);
        org.jboss.dmr.stream.ModelException modelException42 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException41);
        modelException37.addSuppressed((java.lang.Throwable) modelException41);
        java.lang.Throwable[] throwableArray44 = modelException41.getSuppressed();
        modelException34.addSuppressed((java.lang.Throwable) modelException41);
        boolean boolean46 = expressionValue28.equals((java.lang.Object) modelException41);
        boolean boolean47 = expressionValue8.equals(expressionValue28);
        java.io.DataOutput dataOutput48 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue28.writeExternal(dataOutput48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "expression \"hi!\"" + "'", str17, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test07740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07740");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        boolean boolean4 = modelNode3.isDefined();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set(true);
        java.lang.String str7 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) true);
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "rO0ABXNyABFqYXZhLmxhbmcuQm9vbGVhbs0gcoDVnPruAgABWgAFdmFsdWV4cAE=" + "'", str7, "rO0ABXNyABFqYXZhLmxhbmcuQm9vbGVhbs0gcoDVnPruAgABWgAFdmFsdWV4cAE=");
    }

    @Test
    public void test07741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07741");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        double double6 = booleanModelValue1.asDouble((double) 1.0f);
        java.math.BigInteger bigInteger7 = booleanModelValue1.asBigInteger();
        int int9 = booleanModelValue1.asInt((int) (short) 1);
        java.lang.String str10 = booleanModelValue1.asString();
        java.lang.String str11 = booleanModelValue1.asString();
        java.math.BigDecimal bigDecimal12 = booleanModelValue1.asBigDecimal();
        int int14 = booleanModelValue1.asInt((int) (short) 10);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "false" + "'", str10, "false");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "false" + "'", str11, "false");
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test07742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07742");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.set((int) '#');
        boolean boolean4 = modelNode1.isProtected();
        java.math.BigDecimal bigDecimal5 = modelNode1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        int int8 = bigDecimalModelValue6.asInt((int) 'p');
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long11 = modelNode10.asLong();
        org.jboss.dmr.ValueExpression valueExpression12 = modelNode10.asExpression();
        java.math.BigDecimal bigDecimal13 = valueExpression12.resolveBigDecimal();
        java.lang.String str14 = valueExpression12.getExpressionString();
        java.math.BigDecimal bigDecimal15 = valueExpression12.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue16 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal15);
        int int18 = bigDecimalModelValue16.asInt(0);
        org.jboss.dmr.ModelValue modelValue19 = bigDecimalModelValue16.protect();
        boolean boolean20 = bigDecimalModelValue6.equals(bigDecimalModelValue16);
        double double21 = bigDecimalModelValue6.asDouble();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1.0" + "'", str14, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
    }

    @Test
    public void test07743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07743");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        boolean boolean2 = objectModelValue0.asBoolean(false);
        int int3 = objectModelValue0.asInt();
        org.jboss.dmr.ModelValue modelValue4 = objectModelValue0.protect();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(modelValue4);
    }

    @Test
    public void test07744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07744");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelNode modelNode12 = modelNode11.clone();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.lang.String str18 = modelNode14.toString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode14.set(property25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode11.set("\"35\"", modelNode14);
        org.jboss.dmr.ModelNode modelNode30 = modelNode11.setExpression("(\"hi!\" => 0.0)", "100.0");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Double double31 = modelNode30.asDoubleOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(\"hi!\" => 0.0)" + "'", str18, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode30);
    }

    @Test
    public void test07745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07745");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = org.jboss.dmr.Base64.decode(byteArray0, (int) 'p', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07746");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.ModelNode modelNode15 = modelNode14.resolve();
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode20 = modelNode19.setEmptyList();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long23 = modelNode22.asLong();
        org.jboss.dmr.ValueExpression valueExpression24 = modelNode22.asExpression();
        java.math.BigDecimal bigDecimal25 = valueExpression24.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode(bigDecimal25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode19.set(bigDecimal25);
        org.jboss.dmr.ModelNode modelNode28 = modelNode14.set(bigDecimal25);
        org.jboss.dmr.ModelType modelType30 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode(modelType30);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        org.jboss.dmr.Property property37 = new org.jboss.dmr.Property("", modelNode36);
        org.jboss.dmr.ModelNode modelNode38 = modelNode31.set(property37);
        org.jboss.dmr.ModelNode modelNode39 = property37.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue40 = new org.jboss.dmr.PropertyModelValue(property37);
        java.util.List<org.jboss.dmr.Property> propertyList41 = propertyModelValue40.asPropertyList();
        org.jboss.dmr.ModelNode modelNode43 = propertyModelValue40.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode44 = modelNode43.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue47 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long48 = booleanModelValue47.asLong();
        org.jboss.dmr.ValueExpression valueExpression49 = booleanModelValue47.asExpression();
        java.lang.String str50 = valueExpression49.toString();
        org.jboss.dmr.ExpressionValue expressionValue52 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression53 = expressionValue52.asExpression();
        boolean boolean54 = valueExpression49.equals(valueExpression53);
        org.jboss.dmr.LongModelValue longModelValue56 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal57 = longModelValue56.asBigDecimal();
        int int58 = longModelValue56.asInt();
        org.jboss.dmr.ValueExpression valueExpression59 = longModelValue56.asExpression();
        boolean boolean60 = valueExpression53.equals(valueExpression59);
        int int61 = valueExpression59.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue63 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression64 = expressionValue63.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver65 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str66 = valueExpression64.resolveString(valueExpressionResolver65);
        java.math.BigInteger bigInteger67 = valueExpression59.resolveBigInteger(valueExpressionResolver65);
        org.jboss.dmr.ModelNode modelNode68 = modelNode43.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression59);
        org.jboss.dmr.ModelNode modelNode69 = modelNode28.set("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression59);
        org.jboss.dmr.PropertyModelValue propertyModelValue70 = new org.jboss.dmr.PropertyModelValue("-1.0", modelNode28);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode72 = propertyModelValue70.getChild((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + modelType30 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType30.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(propertyList41);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(booleanModelValue47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(valueExpression49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Expression \"true\"" + "'", str50, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(valueExpression59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(valueExpression64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode69);
    }

    @Test
    public void test07747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07747");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.set((int) '#');
        boolean boolean4 = modelNode1.isProtected();
        java.math.BigDecimal bigDecimal5 = modelNode1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        int int8 = bigDecimalModelValue6.asInt((int) 'p');
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long11 = modelNode10.asLong();
        org.jboss.dmr.ValueExpression valueExpression12 = modelNode10.asExpression();
        java.math.BigDecimal bigDecimal13 = valueExpression12.resolveBigDecimal();
        java.lang.String str14 = valueExpression12.getExpressionString();
        java.math.BigDecimal bigDecimal15 = valueExpression12.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue16 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal15);
        int int18 = bigDecimalModelValue16.asInt(0);
        org.jboss.dmr.ModelValue modelValue19 = bigDecimalModelValue16.protect();
        boolean boolean20 = bigDecimalModelValue6.equals(bigDecimalModelValue16);
        double double22 = bigDecimalModelValue16.asDouble((double) 32);
        java.math.BigDecimal bigDecimal23 = bigDecimalModelValue16.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long26 = modelNode25.asLong();
        org.jboss.dmr.ValueExpression valueExpression27 = modelNode25.asExpression();
        java.math.BigDecimal bigDecimal28 = valueExpression27.resolveBigDecimal();
        java.lang.String str29 = valueExpression27.getExpressionString();
        java.math.BigDecimal bigDecimal30 = valueExpression27.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue31 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal30);
        int int33 = bigDecimalModelValue31.asInt(0);
        java.math.BigInteger bigInteger34 = bigDecimalModelValue31.asBigInteger();
        boolean boolean35 = bigDecimalModelValue31.asBoolean();
        boolean boolean36 = bigDecimalModelValue16.equals(bigDecimalModelValue31);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1.0" + "'", str14, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1.0" + "'", str29, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test07748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07748");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        int int12 = longModelValue1.asInt((int) 'l');
        java.math.BigDecimal bigDecimal13 = longModelValue1.asBigDecimal();
        boolean boolean14 = longModelValue1.asBoolean();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07749");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        int int34 = inputStream26.read(byteArray30, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (-1));
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader41 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream38);
        java.io.OutputStream outputStream42 = null;
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream(outputStream42);
        outputStream43.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream47 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream45, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream47);
        outputStream48.resumeEncoding();
        outputStream48.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream48);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory53 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream54 = null;
        org.jboss.dmr.Base64.InputStream inputStream56 = new org.jboss.dmr.Base64.InputStream(inputStream54, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue58 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str59 = longModelValue58.asString();
        byte[] byteArray60 = longModelValue58.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue61 = new org.jboss.dmr.BytesModelValue(byteArray60);
        int int64 = inputStream56.read(byteArray60, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream56, (-1));
        org.jboss.dmr.stream.ModelReader modelReader67 = modelStreamFactory53.newModelReader((java.io.InputStream) inputStream66);
        java.io.InputStream inputStream68 = null;
        org.jboss.dmr.Base64.InputStream inputStream70 = new org.jboss.dmr.Base64.InputStream(inputStream68, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue72 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str73 = longModelValue72.asString();
        byte[] byteArray74 = longModelValue72.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue75 = new org.jboss.dmr.BytesModelValue(byteArray74);
        int int78 = inputStream70.read(byteArray74, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.stream.ModelReader modelReader79 = modelStreamFactory53.newModelReader((java.io.InputStream) inputStream70);
        org.jboss.dmr.Base64.InputStream inputStream81 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream70, (int) (byte) -1);
        org.jboss.dmr.stream.ModelReader modelReader82 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream70);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray83 = modelReader82.getBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't bytes");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelReader41);
        org.junit.Assert.assertNotNull(modelWriter51);
        org.junit.Assert.assertNotNull(modelStreamFactory53);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(modelReader67);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(modelReader79);
        org.junit.Assert.assertNotNull(modelReader82);
    }

    @Test
    public void test07750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07750");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        int int10 = intModelValue5.asInt();
        int int12 = intModelValue5.asInt(32);
        org.jboss.dmr.DoubleModelValue doubleModelValue14 = new org.jboss.dmr.DoubleModelValue((double) (byte) -1);
        org.jboss.dmr.DoubleModelValue doubleModelValue16 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int18 = doubleModelValue16.asInt((int) 'l');
        java.math.BigDecimal bigDecimal19 = doubleModelValue16.asBigDecimal();
        boolean boolean20 = doubleModelValue14.equals(doubleModelValue16);
        boolean boolean21 = intModelValue5.equals((java.lang.Object) doubleModelValue14);
        org.jboss.dmr.IntModelValue intModelValue23 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str24 = intModelValue23.asString();
        double double26 = intModelValue23.asDouble((double) 2);
        java.math.BigDecimal bigDecimal27 = intModelValue23.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue28 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal27);
        long long29 = bigDecimalModelValue28.asLong();
        long long30 = bigDecimalModelValue28.asLong();
        int int32 = bigDecimalModelValue28.asInt((-1));
        boolean boolean33 = intModelValue5.equals((java.lang.Object) bigDecimalModelValue28);
        boolean boolean35 = bigDecimalModelValue28.asBoolean(false);
        double double36 = bigDecimalModelValue28.asDouble();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "32" + "'", str24, "32");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 32.0d + "'", double36 == 32.0d);
    }

    @Test
    public void test07751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07751");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        java.io.InputStream inputStream22 = null;
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24);
        org.jboss.dmr.stream.ModelReader modelReader26 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream24);
        java.io.OutputStream outputStream27 = null;
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream(outputStream27);
        outputStream28.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream28);
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        outputStream30.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream34);
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream34);
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream34);
        org.jboss.dmr.Base64.OutputStream outputStream39 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream34, (int) 'I');
        org.jboss.dmr.Base64.OutputStream outputStream41 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream39, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            outputStream41.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelReader26);
        org.junit.Assert.assertNotNull(modelWriter35);
    }

    @Test
    public void test07752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07752");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream15);
        outputStream15.resumeEncoding();
        outputStream15.resumeEncoding();
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream15);
        // The following exception was thrown during execution in test generation
        try {
            modelWriter19.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter19);
    }

    @Test
    public void test07753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07753");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        long long3 = booleanModelValue1.asLong();
        boolean boolean5 = booleanModelValue1.asBoolean(false);
        long long7 = booleanModelValue1.asLong(3L);
        int int8 = booleanModelValue1.asInt();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = booleanModelValue1.getChild("-1.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test07754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07754");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        long long3 = longModelValue1.asLong((long) (byte) -1);
        double double4 = longModelValue1.asDouble();
        double double5 = longModelValue1.asDouble();
        long long6 = longModelValue1.asLong();
        int int8 = longModelValue1.asInt((int) 'I');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test07755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07755");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        boolean boolean12 = modelNode9.equals((java.lang.Object) 100L);
        boolean boolean13 = modelNode1.equals(modelNode9);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("", modelNode18);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.get(strArray20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int23 = modelNode22.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.setExpression("hi!", "hi!");
        java.lang.String str28 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode24);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList29 = modelNode24.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode30 = modelNode22.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode32 = modelNode9.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode34 = modelNode9.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.PropertyModelValue propertyModelValue36 = new org.jboss.dmr.PropertyModelValue("1.0", modelNode9, false);
        java.io.InputStream inputStream37 = null;
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream(inputStream37, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue41 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str42 = longModelValue41.asString();
        byte[] byteArray43 = longModelValue41.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue44 = new org.jboss.dmr.BytesModelValue(byteArray43);
        int int47 = inputStream39.read(byteArray43, (int) (short) 1, (int) (byte) -1);
        java.lang.String str48 = org.jboss.dmr.Base64.encodeBytes(byteArray43);
        org.jboss.dmr.ModelNode modelNode49 = modelNode9.set(byteArray43);
        org.jboss.dmr.LongModelValue longModelValue51 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str52 = longModelValue51.asString();
        byte[] byteArray53 = longModelValue51.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue54 = new org.jboss.dmr.BytesModelValue(byteArray53);
        java.lang.String str55 = bytesModelValue54.asString();
        int int56 = bytesModelValue54.asInt();
        int int57 = bytesModelValue54.asInt();
        org.jboss.dmr.LongModelValue longModelValue59 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str60 = longModelValue59.asString();
        byte[] byteArray61 = longModelValue59.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue62 = new org.jboss.dmr.BytesModelValue(byteArray61);
        double double63 = bytesModelValue62.asDouble();
        boolean boolean64 = bytesModelValue54.equals(bytesModelValue62);
        byte[] byteArray65 = bytesModelValue62.asBytes();
        java.math.BigDecimal bigDecimal66 = bytesModelValue62.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode67 = modelNode49.set(bigDecimal66);
        org.jboss.dmr.LongModelValue longModelValue69 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str70 = longModelValue69.asString();
        byte[] byteArray71 = longModelValue69.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue72 = new org.jboss.dmr.BytesModelValue(byteArray71);
        java.math.BigDecimal bigDecimal73 = bytesModelValue72.asBigDecimal();
        java.math.BigInteger bigInteger74 = bytesModelValue72.asBigInteger();
        java.math.BigInteger bigInteger75 = bytesModelValue72.asBigInteger();
        byte[] byteArray76 = bytesModelValue72.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode77 = modelNode67.add(byteArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str28, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "AAAAAAAAAAE=" + "'", str48, "AAAAAAAAAAE=");
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str55, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4.9E-324d + "'", double63 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test07756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07756");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        long long7 = intModelValue1.asLong((long) ' ');
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        java.lang.String str13 = bytesModelValue12.asString();
        int int14 = bytesModelValue12.asInt();
        int int15 = bytesModelValue12.asInt();
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        double double21 = bytesModelValue20.asDouble();
        boolean boolean22 = bytesModelValue12.equals(bytesModelValue20);
        org.jboss.dmr.LongModelValue longModelValue24 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str25 = longModelValue24.asString();
        byte[] byteArray26 = longModelValue24.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue27 = new org.jboss.dmr.BytesModelValue(byteArray26);
        boolean boolean28 = bytesModelValue20.equals(bytesModelValue27);
        java.math.BigInteger bigInteger29 = bytesModelValue27.asBigInteger();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory31 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream32 = null;
        org.jboss.dmr.Base64.InputStream inputStream34 = new org.jboss.dmr.Base64.InputStream(inputStream32, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream34);
        org.jboss.dmr.stream.ModelReader modelReader36 = modelStreamFactory31.newModelReader((java.io.InputStream) inputStream35);
        java.io.OutputStream outputStream37 = null;
        org.jboss.dmr.Base64.OutputStream outputStream38 = new org.jboss.dmr.Base64.OutputStream(outputStream37);
        org.jboss.dmr.Base64.OutputStream outputStream39 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream38);
        outputStream38.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter42 = modelStreamFactory31.newModelWriter((java.io.OutputStream) outputStream38);
        org.jboss.dmr.stream.ModelWriter modelWriter43 = modelWriter42.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue45 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray46 = intModelValue45.asBytes();
        int int48 = intModelValue45.asInt(0);
        java.math.BigInteger bigInteger49 = intModelValue45.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter50 = modelWriter43.writeBigInteger(bigInteger49);
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelWriter43.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter53 = modelWriter51.writeLong((long) (short) -1);
        bytesModelValue27.write(modelWriter51);
        org.jboss.dmr.stream.ModelWriter modelWriter56 = modelWriter51.writeDouble((double) 1);
        intModelValue1.write(modelWriter51);
        org.jboss.dmr.IntModelValue intModelValue59 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long61 = intModelValue59.asLong((long) 'b');
        java.lang.String str62 = intModelValue59.asString();
        java.math.BigInteger bigInteger63 = intModelValue59.asBigInteger();
        byte[] byteArray64 = intModelValue59.asBytes();
        long long66 = intModelValue59.asLong((long) 8);
        boolean boolean68 = intModelValue59.equals((java.lang.Object) 97L);
        java.math.BigDecimal bigDecimal69 = intModelValue59.asBigDecimal();
        org.jboss.dmr.stream.ModelWriter modelWriter70 = modelWriter51.writeBigDecimal(bigDecimal69);
        org.jboss.dmr.stream.ModelWriter modelWriter71 = modelWriter51.writeObjectStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter73 = modelWriter51.writeLong(0L);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting OBJECT_END or STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str13, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(modelStreamFactory31);
        org.junit.Assert.assertNotNull(modelReader36);
        org.junit.Assert.assertNotNull(modelWriter42);
        org.junit.Assert.assertNotNull(modelWriter43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(modelWriter50);
        org.junit.Assert.assertNotNull(modelWriter51);
        org.junit.Assert.assertNotNull(modelWriter53);
        org.junit.Assert.assertNotNull(modelWriter56);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 32L + "'", long61 == 32L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "32" + "'", str62, "32");
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 32L + "'", long66 == 32L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(modelWriter70);
        org.junit.Assert.assertNotNull(modelWriter71);
    }

    @Test
    public void test07757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07757");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        boolean boolean2 = modelNode0.hasDefined("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add((long) (byte) 1);
        boolean boolean5 = modelNode4.isDefined();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test07758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07758");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        boolean boolean20 = bytesModelValue12.equals(bytesModelValue19);
        java.math.BigInteger bigInteger21 = bytesModelValue19.asBigInteger();
        double double23 = bytesModelValue19.asDouble((double) 32);
        org.jboss.dmr.LongModelValue longModelValue25 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str26 = longModelValue25.asString();
        byte[] byteArray27 = longModelValue25.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue28 = new org.jboss.dmr.BytesModelValue(byteArray27);
        java.lang.String str29 = bytesModelValue28.asString();
        int int30 = bytesModelValue28.asInt();
        int int31 = bytesModelValue28.asInt();
        org.jboss.dmr.LongModelValue longModelValue33 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str34 = longModelValue33.asString();
        byte[] byteArray35 = longModelValue33.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue36 = new org.jboss.dmr.BytesModelValue(byteArray35);
        double double37 = bytesModelValue36.asDouble();
        boolean boolean38 = bytesModelValue28.equals(bytesModelValue36);
        org.jboss.dmr.LongModelValue longModelValue40 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str41 = longModelValue40.asString();
        byte[] byteArray42 = longModelValue40.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue43 = new org.jboss.dmr.BytesModelValue(byteArray42);
        boolean boolean44 = bytesModelValue36.equals(bytesModelValue43);
        boolean boolean45 = bytesModelValue19.equals(bytesModelValue43);
        java.io.DataOutput dataOutput46 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue43.writeExternal(dataOutput46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4.9E-324d + "'", double23 == 4.9E-324d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str29, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4.9E-324d + "'", double37 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test07759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07759");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.jboss.dmr.Base64.decodeFromFile("{ \"\" : { \"hi!\" : 0.0 } }");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Error decoding from file { \"\" : { \"hi!\" : 0.0 } }");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07760");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.lang.String str5 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode1);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode1.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set((double) 0);
        boolean boolean9 = modelNode1.isProtected();
        org.jboss.dmr.ModelNode modelNode12 = modelNode1.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", 0L);
        org.jboss.dmr.Property property13 = new org.jboss.dmr.Property("rO0ABXQAA2hpIQ==", modelNode1);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = modelNode1.asInt(112);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode12);
    }

    @Test
    public void test07761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07761");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) '4');
        boolean boolean3 = intModelValue1.asBoolean(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test07762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07762");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double12 = booleanModelValue11.asDouble();
        org.jboss.dmr.ModelValue modelValue13 = booleanModelValue11.copy();
        java.math.BigInteger bigInteger14 = booleanModelValue11.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue15 = new org.jboss.dmr.BigIntegerModelValue(bigInteger14);
        java.lang.String str16 = bigIntegerModelValue15.asString();
        long long18 = bigIntegerModelValue15.asLong(32L);
        double double19 = bigIntegerModelValue15.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double21 = booleanModelValue20.asDouble();
        org.jboss.dmr.ModelValue modelValue22 = booleanModelValue20.copy();
        java.math.BigInteger bigInteger23 = booleanModelValue20.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = new org.jboss.dmr.BigIntegerModelValue(bigInteger23);
        double double26 = bigIntegerModelValue24.asDouble((double) 'b');
        boolean boolean27 = bigIntegerModelValue15.equals(bigIntegerModelValue24);
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double29 = booleanModelValue28.asDouble();
        org.jboss.dmr.ModelValue modelValue30 = booleanModelValue28.copy();
        java.math.BigInteger bigInteger31 = booleanModelValue28.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue32 = new org.jboss.dmr.BigIntegerModelValue(bigInteger31);
        long long34 = bigIntegerModelValue32.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue35 = null;
        boolean boolean36 = bigIntegerModelValue32.equals(bigIntegerModelValue35);
        boolean boolean37 = bigIntegerModelValue15.equals(bigIntegerModelValue32);
        java.math.BigDecimal bigDecimal38 = bigIntegerModelValue15.asBigDecimal();
        boolean boolean39 = bigIntegerModelValue4.equals(bigIntegerModelValue15);
        double double40 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.ValueExpression valueExpression41 = bigIntegerModelValue4.asExpression();
        java.math.BigDecimal bigDecimal42 = valueExpression41.resolveBigDecimal();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression41);
        org.junit.Assert.assertNotNull(bigDecimal42);
    }

    @Test
    public void test07763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07763");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue6 = new org.jboss.dmr.BigIntegerModelValue(bigInteger5);
        long long8 = bigIntegerModelValue6.asLong(2L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
    }

    @Test
    public void test07764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07764");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        int int7 = objectModelValue0.asInt((int) 'b');
        int int9 = objectModelValue0.asInt((int) '#');
        java.io.PrintWriter printWriter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.format(printWriter10, 8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test07765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07765");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.get(strArray10);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asList();
        org.jboss.dmr.ListModelValue listModelValue17 = new org.jboss.dmr.ListModelValue(modelNodeList16);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue17);
        org.jboss.dmr.ModelValue modelValue19 = listModelValue17.resolve();
        int int21 = listModelValue17.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue17.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList23 = modelNode11.asPropertyList(propertyList22);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.get(strArray30);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue37);
        org.jboss.dmr.ModelValue modelValue39 = listModelValue37.resolve();
        int int41 = listModelValue37.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList42 = listModelValue37.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList43 = modelNode31.asPropertyList(propertyList42);
        modelNode11.setNoCopy(modelNode31);
        org.jboss.dmr.ModelNode modelNode45 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode11);
        boolean boolean46 = modelNode11.isDefined();
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode50 = modelNode47.set("hi!", 0.0d);
        java.lang.String str51 = modelNode47.toString();
        org.jboss.dmr.ModelNode modelNode52 = modelNode47.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode54 = modelNode47.set(100);
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode59 = modelNode57.set((int) '#');
        org.jboss.dmr.ModelNode modelNode60 = modelNode47.setNoCopy("EXPRESSION_VALUE", modelNode59);
        org.jboss.dmr.ModelNode modelNode61 = modelNode60.resolve();
        org.jboss.dmr.ModelType modelType62 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode(modelType62);
        org.jboss.dmr.ModelNode modelNode65 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode68 = modelNode65.set("hi!", 0.0d);
        org.jboss.dmr.Property property69 = new org.jboss.dmr.Property("", modelNode68);
        org.jboss.dmr.ModelNode modelNode70 = modelNode63.set(property69);
        org.jboss.dmr.PropertyModelValue propertyModelValue71 = new org.jboss.dmr.PropertyModelValue(property69);
        org.jboss.dmr.PropertyModelValue propertyModelValue72 = new org.jboss.dmr.PropertyModelValue(property69);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList73 = propertyModelValue72.asList();
        org.jboss.dmr.ModelNode modelNode74 = modelNode61.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList73);
        org.jboss.dmr.ModelNode modelNode75 = modelNode11.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList73);
        java.lang.String str77 = modelNode11.asString("(\"expression \\\"hi!\\\"\" => -1)");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(propertyList42);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(\"hi!\" => 0.0)" + "'", str51, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertTrue("'" + modelType62 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType62.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNodeList73);
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[(\"\" => (\"hi!\" => 0.0))]" + "'", str77, "[(\"\" => (\"hi!\" => 0.0))]");
    }

    @Test
    public void test07766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07766");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue7);
        long long9 = listModelValue7.asLong();
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue7.asPropertyList();
        org.jboss.dmr.ModelValue modelValue11 = listModelValue7.protect();
        boolean boolean13 = listModelValue7.asBoolean(false);
        java.util.List<org.jboss.dmr.Property> propertyList14 = listModelValue7.asPropertyList();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.Property> propertyList15 = modelNode1.asPropertyList(propertyList14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(propertyList14);
    }

    @Test
    public void test07767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07767");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        double double16 = bigIntegerModelValue4.asDouble(0.0d);
        double double18 = bigIntegerModelValue4.asDouble((double) 100.0f);
        java.math.BigInteger bigInteger19 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.ValueExpression valueExpression20 = bigIntegerModelValue4.asExpression();
        java.lang.String str21 = valueExpression20.toString();
        org.jboss.dmr.ExpressionValue expressionValue23 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression24 = expressionValue23.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver25 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str26 = valueExpression24.resolveString(valueExpressionResolver25);
        java.lang.String str28 = valueExpressionResolver25.resolvePart("{ \"35\" : 0.0 }");
        java.lang.String str30 = valueExpressionResolver25.resolvePart("{\n    \"EXPRESSION_VALUE\" : 35\n}");
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long33 = modelNode32.asLong();
        org.jboss.dmr.ValueExpression valueExpression34 = modelNode32.asExpression();
        java.math.BigDecimal bigDecimal35 = valueExpression34.resolveBigDecimal();
        java.lang.String str36 = valueExpression34.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue38 = new org.jboss.dmr.LongModelValue(1L);
        long long40 = longModelValue38.asLong((long) (short) 0);
        java.lang.String str41 = longModelValue38.asString();
        org.jboss.dmr.ValueExpression valueExpression42 = longModelValue38.asExpression();
        int int43 = valueExpression42.resolveInt();
        boolean boolean44 = valueExpression34.equals(valueExpression42);
        java.lang.String str45 = valueExpressionResolver25.resolve(valueExpression34);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = valueExpression20.resolveBoolean(valueExpressionResolver25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Expression \"1\"" + "'", str21, "Expression \"1\"");
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(valueExpression34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1.0" + "'", str36, "1.0");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(valueExpression42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1.0" + "'", str45, "1.0");
    }

    @Test
    public void test07768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07768");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBoolean();
        boolean boolean19 = modelReader15.isListStart();
        boolean boolean20 = modelReader15.isPropertyStart();
        boolean boolean21 = modelReader15.isType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = modelReader15.getExpression();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't expression");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07769");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        java.lang.String str15 = listModelValue14.asString();
        long long16 = listModelValue14.asLong();
        int int18 = listModelValue14.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue19 = listModelValue14.protect();
        boolean boolean21 = listModelValue14.has((int) (short) 100);
        boolean boolean22 = listModelValue5.equals(listModelValue14);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = listModelValue5.asList();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory25 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream26 = null;
        org.jboss.dmr.Base64.InputStream inputStream28 = new org.jboss.dmr.Base64.InputStream(inputStream26, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream29 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream28);
        org.jboss.dmr.stream.ModelReader modelReader30 = modelStreamFactory25.newModelReader((java.io.InputStream) inputStream29);
        java.io.OutputStream outputStream31 = null;
        org.jboss.dmr.Base64.OutputStream outputStream32 = new org.jboss.dmr.Base64.OutputStream(outputStream31);
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        outputStream32.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter36 = modelStreamFactory25.newModelWriter((java.io.OutputStream) outputStream32);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelWriter36.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter39 = modelWriter37.writeInt((int) (byte) 10);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelWriter37.writePropertyStart();
        org.jboss.dmr.stream.ModelWriter modelWriter42 = modelWriter40.writeString("H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.jboss.dmr.BooleanModelValue booleanModelValue43 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double44 = booleanModelValue43.asDouble();
        org.jboss.dmr.ModelValue modelValue45 = booleanModelValue43.copy();
        java.math.BigInteger bigInteger46 = booleanModelValue43.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue47 = new org.jboss.dmr.BigIntegerModelValue(bigInteger46);
        java.lang.String str48 = bigIntegerModelValue47.asString();
        java.math.BigInteger bigInteger49 = bigIntegerModelValue47.asBigInteger();
        java.math.BigInteger bigInteger50 = bigIntegerModelValue47.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelWriter42.writeBigInteger(bigInteger50);
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.write(modelWriter51);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting PROPERTY_END");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str15, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertNotNull(modelStreamFactory25);
        org.junit.Assert.assertNotNull(modelReader30);
        org.junit.Assert.assertNotNull(modelWriter36);
        org.junit.Assert.assertNotNull(modelWriter37);
        org.junit.Assert.assertNotNull(modelWriter39);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter42);
        org.junit.Assert.assertNotNull(booleanModelValue43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(modelWriter51);
    }

    @Test
    public void test07770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07770");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        long long7 = listModelValue5.asLong();
        java.util.List<org.jboss.dmr.Property> propertyList8 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int10 = modelNode9.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode16 = modelNode9.set(valueExpression14);
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode(valueExpression14);
        boolean boolean19 = listModelValue5.equals((java.lang.Object) modelNode18);
        java.math.BigDecimal bigDecimal21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode22 = modelNode18.add("0.0", bigDecimal21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(propertyList8);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07771");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        org.jboss.dmr.ValueExpression valueExpression18 = stringModelValue11.asExpression();
        org.jboss.dmr.StringModelValue stringModelValue20 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue22 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue24 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean25 = stringModelValue22.equals(stringModelValue24);
        byte[] byteArray26 = stringModelValue24.asBytes();
        java.lang.Object obj27 = null;
        boolean boolean28 = stringModelValue24.equals(obj27);
        boolean boolean30 = stringModelValue24.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean31 = stringModelValue20.equals(stringModelValue24);
        boolean boolean32 = stringModelValue11.equals(stringModelValue24);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType33 = stringModelValue24.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.jboss.dmr.ModelType.(\"\" => (\"hi!\" => 0.0))");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test07772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07772");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        byte[] byteArray8 = intModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression9 = intModelValue1.asExpression();
        byte[] byteArray10 = intModelValue1.asBytes();
        java.math.BigDecimal bigDecimal11 = intModelValue1.asBigDecimal();
        java.math.BigInteger bigInteger12 = intModelValue1.asBigInteger();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test07773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07773");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        int int13 = objectModelValue7.asInt();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        java.lang.String str15 = objectModelValue7.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue16 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode17 = objectModelValue16.asObject();
        java.util.Set<java.lang.String> strSet18 = objectModelValue16.getKeys();
        org.jboss.dmr.ModelNode modelNode20 = objectModelValue16.removeChild("hi!");
        int int21 = objectModelValue16.asInt();
        org.jboss.dmr.ObjectModelValue objectModelValue22 = null;
        boolean boolean23 = objectModelValue16.equals(objectModelValue22);
        boolean boolean25 = objectModelValue16.has("{\n    \"EXPRESSION_VALUE\" : 35\n}");
        boolean boolean26 = objectModelValue7.equals(objectModelValue16);
        org.jboss.dmr.ModelNode modelNode28 = objectModelValue7.removeChild("{}");
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(modelNode20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(modelNode28);
    }

    @Test
    public void test07774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07774");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue12 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long13 = booleanModelValue12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = booleanModelValue12.asExpression();
        java.lang.String str15 = valueExpression14.toString();
        org.jboss.dmr.ExpressionValue expressionValue17 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression18 = expressionValue17.asExpression();
        boolean boolean19 = valueExpression14.equals(valueExpression18);
        org.jboss.dmr.LongModelValue longModelValue21 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal22 = longModelValue21.asBigDecimal();
        int int23 = longModelValue21.asInt();
        org.jboss.dmr.ValueExpression valueExpression24 = longModelValue21.asExpression();
        boolean boolean25 = valueExpression18.equals(valueExpression24);
        int int26 = valueExpression24.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue28 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression29 = expressionValue28.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver30 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str31 = valueExpression29.resolveString(valueExpressionResolver30);
        java.math.BigInteger bigInteger32 = valueExpression24.resolveBigInteger(valueExpressionResolver30);
        java.lang.String str34 = valueExpressionResolver30.resolvePart("1L");
        java.lang.String str36 = valueExpressionResolver30.resolvePart("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==");
        boolean boolean37 = bigIntegerModelValue4.equals((java.lang.Object) valueExpressionResolver30);
        java.lang.String str39 = valueExpressionResolver30.resolvePart("(\"hi!\" => 0.0)");
        org.jboss.dmr.ExpressionValue expressionValue41 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue43 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean44 = expressionValue41.equals(expressionValue43);
        org.jboss.dmr.ExpressionValue expressionValue46 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue48 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean49 = expressionValue46.equals(expressionValue48);
        boolean boolean50 = expressionValue41.equals(expressionValue48);
        org.jboss.dmr.ExpressionValue expressionValue52 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str53 = expressionValue52.asString();
        boolean boolean54 = expressionValue41.equals(expressionValue52);
        org.jboss.dmr.ModelValue modelValue55 = expressionValue41.resolve();
        org.jboss.dmr.ExpressionValue expressionValue57 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression58 = expressionValue57.asExpression();
        boolean boolean59 = expressionValue41.equals(expressionValue57);
        org.jboss.dmr.ModelValue modelValue60 = expressionValue57.resolve();
        org.jboss.dmr.ValueExpression valueExpression61 = expressionValue57.asExpression();
        java.lang.String str62 = valueExpressionResolver30.resolve(valueExpression61);
        java.lang.String str64 = valueExpressionResolver30.resolvePart("[(\"hi!\" => expression \"hi!\"),\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\",false,(\"H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA\" => bytes {\n    0x28, 0x22, 0x22, 0x20, 0x3d, 0x3e, 0x20, 0x28,\n    0x22, 0x68, 0x69, 0x21, 0x22, 0x20, 0x3d, 0x3e,\n    0x20, 0x30, 0x2e, 0x30, 0x29, 0x29\n})]");
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanModelValue12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Expression \"true\"" + "'", str15, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(modelValue55);
        org.junit.Assert.assertNotNull(valueExpression58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(modelValue60);
        org.junit.Assert.assertNotNull(valueExpression61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test07775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07775");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(false);
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("(\"expression \\\"hi!\\\"\" => -1)", "big decimal 1.0");
        org.junit.Assert.assertNotNull(modelNode4);
    }

    @Test
    public void test07776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07776");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        org.jboss.dmr.ModelValue modelValue17 = objectModelValue15.protect();
        java.util.List<org.jboss.dmr.Property> propertyList18 = objectModelValue15.asPropertyList();
        org.jboss.dmr.ModelValue modelValue19 = objectModelValue15.copy();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList20 = objectModelValue15.asList();
        boolean boolean21 = bytesModelValue12.equals((java.lang.Object) modelNodeList20);
        java.io.DataOutput dataOutput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue12.writeExternal(dataOutput22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(modelNodeList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07777");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = stringModelValue1.asInt((int) 'b');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07778");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        byte[] byteArray3 = intModelValue1.asBytes();
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue(10);
        boolean boolean6 = intModelValue1.equals(intModelValue5);
        java.math.BigInteger bigInteger7 = intModelValue1.asBigInteger();
        java.lang.String str8 = intModelValue1.asString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
    }

    @Test
    public void test07779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07779");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        int int13 = listModelValue5.asInt();
        java.lang.String str14 = listModelValue5.asString();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        boolean boolean17 = listModelValue5.equals((java.lang.Object) modelType15);
        boolean boolean19 = listModelValue5.asBoolean(false);
        java.io.PrintWriter printWriter20 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.formatAsJSON(printWriter20, (-1), true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType15.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test07780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07780");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        int int3 = longModelValue1.asInt();
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        double double9 = longModelValue6.asDouble((double) 32L);
        boolean boolean10 = longModelValue6.asBoolean();
        boolean boolean11 = longModelValue1.equals(longModelValue6);
        java.math.BigInteger bigInteger12 = longModelValue6.asBigInteger();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode(bigInteger12);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "52" + "'", str4, "52");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test07781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07781");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isUndefined();
        boolean boolean19 = modelReader15.isBytes();
        boolean boolean20 = modelReader15.isBigInteger();
        boolean boolean21 = modelReader15.isPropertyStart();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = modelReader15.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't double");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07782");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        long long4 = doubleModelValue1.asLong((long) (short) -1);
        double double6 = doubleModelValue1.asDouble(0.0d);
        java.math.BigInteger bigInteger7 = doubleModelValue1.asBigInteger();
        double double8 = doubleModelValue1.asDouble();
        java.math.BigDecimal bigDecimal9 = doubleModelValue1.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression10 = doubleModelValue1.asExpression();
        boolean boolean11 = doubleModelValue1.asBoolean();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07783");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        long long4 = doubleModelValue1.asLong((long) (short) -1);
        double double6 = doubleModelValue1.asDouble(0.0d);
        java.math.BigInteger bigInteger7 = doubleModelValue1.asBigInteger();
        double double8 = doubleModelValue1.asDouble();
        java.math.BigDecimal bigDecimal9 = doubleModelValue1.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression10 = doubleModelValue1.asExpression();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory12 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream13 = null;
        org.jboss.dmr.Base64.InputStream inputStream15 = new org.jboss.dmr.Base64.InputStream(inputStream13, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream15);
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory12.newModelReader((java.io.InputStream) inputStream16);
        java.io.OutputStream outputStream18 = null;
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream(outputStream18);
        org.jboss.dmr.Base64.OutputStream outputStream20 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream19);
        outputStream19.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelStreamFactory12.newModelWriter((java.io.OutputStream) outputStream19);
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelWriter23.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelWriter23.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter26.writeBoolean(true);
        doubleModelValue1.write(modelWriter26);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter26.writeListEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter31 = modelWriter26.writeObjectStart();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertNotNull(modelStreamFactory12);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter24);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertNotNull(modelWriter28);
        org.junit.Assert.assertNotNull(modelWriter30);
    }

    @Test
    public void test07784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07784");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.setExpression("hi!", "hi!");
        java.lang.String str6 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode2);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode2.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList7);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.resolve();
        boolean boolean10 = modelNode0.asBoolean();
        org.jboss.dmr.DoubleModelValue doubleModelValue13 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long14 = doubleModelValue13.asLong();
        long long16 = doubleModelValue13.asLong((long) 32);
        java.math.BigInteger bigInteger17 = doubleModelValue13.asBigInteger();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode(bigInteger17);
        org.jboss.dmr.ModelNode modelNode19 = modelNode0.set("{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined}", bigInteger17);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str6, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(modelNode19);
    }

    @Test
    public void test07785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07785");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.ModelNode modelNode8 = modelNode3.set((double) 'a');
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue(1L);
        long long12 = longModelValue10.asLong((long) (short) 0);
        java.lang.String str13 = longModelValue10.asString();
        org.jboss.dmr.ValueExpression valueExpression14 = longModelValue10.asExpression();
        int int15 = valueExpression14.resolveInt();
        org.jboss.dmr.ModelNode modelNode16 = modelNode3.set(valueExpression14);
        java.lang.String str17 = valueExpression14.toString();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList22 = modelNode21.asList();
        org.jboss.dmr.ListModelValue listModelValue23 = new org.jboss.dmr.ListModelValue(modelNodeList22);
        java.lang.String str24 = listModelValue23.asString();
        boolean boolean26 = listModelValue23.equals((java.lang.Object) true);
        boolean boolean27 = listModelValue23.asBoolean();
        boolean boolean29 = listModelValue23.asBoolean(false);
        boolean boolean30 = valueExpression14.equals((java.lang.Object) boolean29);
        java.lang.String str31 = valueExpression14.resolveString();
        java.math.BigDecimal bigDecimal32 = valueExpression14.resolveBigDecimal();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Expression \"1\"" + "'", str17, "Expression \"1\"");
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNodeList22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str24, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(bigDecimal32);
    }

    @Test
    public void test07786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07786");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.protect();
        java.util.List<org.jboss.dmr.Property> propertyList3 = objectModelValue0.asPropertyList();
        org.jboss.dmr.ModelValue modelValue4 = objectModelValue0.copy();
        boolean boolean5 = objectModelValue0.asBoolean();
        boolean boolean7 = objectModelValue0.has(112);
        java.util.Set<java.lang.String> strSet8 = objectModelValue0.getKeys();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(propertyList3);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test07787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07787");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, 0);
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, (int) 'J');
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = org.jboss.dmr.ModelNode.fromBase64((java.io.InputStream) inputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07788");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBoolean();
        boolean boolean19 = modelReader15.isListStart();
        boolean boolean20 = modelReader15.isPropertyStart();
        boolean boolean21 = modelReader15.isBytes();
        boolean boolean22 = modelReader15.isBytes();
        boolean boolean23 = modelReader15.isLong();
        boolean boolean24 = modelReader15.isUndefined();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07789");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        int int3 = booleanModelValue1.asInt();
        org.jboss.dmr.DoubleModelValue doubleModelValue5 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long6 = doubleModelValue5.asLong();
        boolean boolean7 = doubleModelValue5.asBoolean();
        boolean boolean8 = booleanModelValue1.equals((java.lang.Object) doubleModelValue5);
        org.jboss.dmr.ValueExpression valueExpression9 = booleanModelValue1.asExpression();
        byte[] byteArray10 = booleanModelValue1.asBytes();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
    }

    @Test
    public void test07790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07790");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        byte[] byteArray3 = booleanModelValue1.asBytes();
        boolean boolean4 = booleanModelValue1.asBoolean();
        java.lang.String str5 = booleanModelValue1.asString();
        java.math.BigDecimal bigDecimal6 = booleanModelValue1.asBigDecimal();
        long long8 = booleanModelValue1.asLong((long) (byte) 0);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test07791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07791");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        java.lang.String str8 = stringModelValue1.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = stringModelValue1.asDouble((double) 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Expression \"true\"\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\"Expression \\\"true\\\"\"" + "'", str8, "\"Expression \\\"true\\\"\"");
    }

    @Test
    public void test07792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07792");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode2 = modelNode0.clone();
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        java.lang.String str7 = modelNode3.toString();
        org.jboss.dmr.ModelNode modelNode8 = modelNode3.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode10 = modelNode3.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.lang.String str15 = modelNode11.toString();
        org.jboss.dmr.ModelNode modelNode16 = modelNode11.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = modelNode11.set(property22);
        java.lang.String str24 = modelNode23.asString();
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList29 = modelNode28.asList();
        org.jboss.dmr.ListModelValue listModelValue30 = new org.jboss.dmr.ListModelValue(modelNodeList29);
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue30);
        org.jboss.dmr.ModelValue modelValue32 = listModelValue30.resolve();
        int int34 = listModelValue30.asInt((int) (byte) 100);
        boolean boolean35 = listModelValue30.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = listModelValue30.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode23.asList(modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = modelNode10.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList36);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList39 = modelNode2.asList(modelNodeList36);
        org.jboss.dmr.ListModelValue listModelValue40 = new org.jboss.dmr.ListModelValue(modelNodeList39);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(\"hi!\" => 0.0)" + "'", str7, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(\"hi!\" => 0.0)" + "'", str15, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str24, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNodeList29);
        org.junit.Assert.assertNotNull(modelValue32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNodeList39);
    }

    @Test
    public void test07793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07793");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue9 = new org.jboss.dmr.ExpressionValue(valueExpression8);
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        int int13 = longModelValue11.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue15 = new org.jboss.dmr.LongModelValue((-1L));
        long long17 = longModelValue15.asLong((long) (byte) -1);
        double double19 = longModelValue15.asDouble((double) 10.0f);
        boolean boolean20 = longModelValue11.equals(longModelValue15);
        byte[] byteArray21 = longModelValue11.asBytes();
        boolean boolean22 = expressionValue9.equals((java.lang.Object) byteArray21);
        org.jboss.dmr.ModelValue modelValue23 = expressionValue9.resolve();
        java.io.PrintWriter printWriter24 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue9.format(printWriter24, 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(modelValue23);
    }

    @Test
    public void test07794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07794");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.lang.String str5 = objectModelValue0.asString();
        boolean boolean7 = objectModelValue0.has("H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        double double12 = longModelValue9.asDouble((double) 32L);
        int int14 = longModelValue9.asInt((int) (short) 10);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory16 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream17 = null;
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream(inputStream17, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream19);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory16.newModelReader((java.io.InputStream) inputStream20);
        java.io.OutputStream outputStream22 = null;
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream(outputStream22);
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream23);
        outputStream23.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelStreamFactory16.newModelWriter((java.io.OutputStream) outputStream23);
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter27.writeListStart();
        longModelValue9.write(modelWriter27);
        objectModelValue0.write(modelWriter27);
        long long32 = objectModelValue0.asLong(2L);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        boolean boolean37 = modelNode35.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.PropertyModelValue propertyModelValue38 = new org.jboss.dmr.PropertyModelValue("TYPE_MODEL_VALUE", modelNode35);
        boolean boolean39 = objectModelValue0.equals((java.lang.Object) modelNode35);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode41 = modelNode35.require("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory16);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07795");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.Set<java.lang.String> strSet16 = propertyModelValue15.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList17 = propertyModelValue15.asPropertyList();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode19 = propertyModelValue15.getChild((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(propertyList17);
    }

    @Test
    public void test07796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07796");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression5 = stringModelValue4.asExpression();
        boolean boolean7 = stringModelValue4.equals((java.lang.Object) (-1.0d));
        java.lang.String str8 = stringModelValue4.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent9 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean10 = stringModelValue4.equals((java.lang.Object) modelEvent9);
        org.jboss.dmr.StringModelValue stringModelValue12 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue14 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean17 = stringModelValue14.equals(stringModelValue16);
        byte[] byteArray18 = stringModelValue16.asBytes();
        java.lang.Object obj19 = null;
        boolean boolean20 = stringModelValue16.equals(obj19);
        boolean boolean22 = stringModelValue16.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean23 = stringModelValue12.equals(stringModelValue16);
        boolean boolean24 = stringModelValue4.equals(stringModelValue16);
        boolean boolean25 = stringModelValue1.equals(stringModelValue16);
        org.jboss.dmr.StringModelValue stringModelValue27 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray28 = stringModelValue27.asBytes();
        org.jboss.dmr.LongModelValue longModelValue30 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal31 = longModelValue30.asBigDecimal();
        byte[] byteArray32 = longModelValue30.asBytes();
        boolean boolean33 = stringModelValue27.equals((java.lang.Object) byteArray32);
        java.lang.String str34 = stringModelValue27.toString();
        boolean boolean35 = stringModelValue16.equals(stringModelValue27);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal36 = stringModelValue16.asBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str8, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent9 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent9.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\"Expression \\\"true\\\"\"" + "'", str34, "\"Expression \\\"true\\\"\"");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07797");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue7.getChild((int) (short) 0);
        org.jboss.dmr.BooleanModelValue booleanModelValue16 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double17 = booleanModelValue16.asDouble();
        org.jboss.dmr.ModelValue modelValue18 = booleanModelValue16.copy();
        java.math.BigInteger bigInteger19 = booleanModelValue16.asBigInteger();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode(bigInteger19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode(bigInteger19);
        java.math.BigDecimal bigDecimal22 = modelNode21.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode23 = modelNode14.set("Expression \"PROPERTY\"", bigDecimal22);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = modelNode14.add((int) 'i');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(booleanModelValue16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test07798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07798");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))", (int) (short) 0);
        org.jboss.dmr.ModelType modelType5 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(modelType5);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode6.set(property12);
        org.jboss.dmr.ModelNode modelNode14 = property12.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue(property12);
        java.util.List<org.jboss.dmr.Property> propertyList16 = propertyModelValue15.asPropertyList();
        boolean boolean17 = modelNode1.equals((java.lang.Object) propertyModelValue15);
        org.jboss.dmr.stream.ModelWriter modelWriter18 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue15.write(modelWriter18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType5.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(propertyList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07799");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        java.math.BigInteger bigInteger6 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(bigInteger6);
        java.math.BigInteger bigInteger8 = modelNode7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("0.0");
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(modelNode10);
    }

    @Test
    public void test07800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07800");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (int) (short) 10);
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6);
        // The following exception was thrown during execution in test generation
        try {
            inputStream7.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07801");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        double double6 = booleanModelValue1.asDouble((double) 1.0f);
        boolean boolean8 = booleanModelValue1.asBoolean(false);
        org.jboss.dmr.ValueExpression valueExpression9 = booleanModelValue1.asExpression();
        long long10 = booleanModelValue1.asLong();
        org.jboss.dmr.BooleanModelValue booleanModelValue12 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray13 = booleanModelValue12.asBytes();
        java.lang.String str14 = booleanModelValue12.asString();
        int int15 = booleanModelValue12.asInt();
        long long16 = booleanModelValue12.asLong();
        org.jboss.dmr.IntModelValue intModelValue18 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str19 = intModelValue18.asString();
        double double21 = intModelValue18.asDouble((double) 2);
        java.math.BigDecimal bigDecimal22 = intModelValue18.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode(bigDecimal22);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode(bigDecimal22);
        boolean boolean25 = booleanModelValue12.equals((java.lang.Object) modelNode24);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList30 = modelNode29.asList();
        org.jboss.dmr.ModelNode modelNode33 = modelNode29.setExpression("hi!", "(\"hi!\" => 0.0)");
        boolean boolean34 = booleanModelValue12.equals((java.lang.Object) modelNode33);
        boolean boolean35 = booleanModelValue1.equals((java.lang.Object) modelNode33);
        int int36 = booleanModelValue1.asInt();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(booleanModelValue12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "true" + "'", str14, "true");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32" + "'", str19, "32");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 32.0d + "'", double21 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNodeList30);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test07802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07802");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter12.writeInt((int) '4');
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList20 = modelNode19.asList();
        org.jboss.dmr.ListModelValue listModelValue21 = new org.jboss.dmr.ListModelValue(modelNodeList20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue21);
        org.jboss.dmr.ModelValue modelValue23 = listModelValue21.resolve();
        int int25 = listModelValue21.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList26 = listModelValue21.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList27 = listModelValue21.asPropertyList();
        java.lang.String str28 = listModelValue21.asString();
        int int29 = listModelValue21.asInt();
        java.lang.String str30 = listModelValue21.asString();
        org.jboss.dmr.ModelType modelType31 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode(modelType31);
        boolean boolean33 = listModelValue21.equals((java.lang.Object) modelType31);
        org.jboss.dmr.TypeModelValue typeModelValue34 = org.jboss.dmr.TypeModelValue.of(modelType31);
        org.jboss.dmr.TypeModelValue typeModelValue35 = org.jboss.dmr.TypeModelValue.of(modelType31);
        org.jboss.dmr.stream.ModelWriter modelWriter36 = modelWriter12.writeType(modelType31);
        org.jboss.dmr.ObjectModelValue objectModelValue37 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode38 = objectModelValue37.asObject();
        org.jboss.dmr.ModelValue modelValue39 = objectModelValue37.protect();
        org.jboss.dmr.StringModelValue stringModelValue41 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory43 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream44 = null;
        org.jboss.dmr.Base64.InputStream inputStream46 = new org.jboss.dmr.Base64.InputStream(inputStream44, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream47 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream46);
        org.jboss.dmr.stream.ModelReader modelReader48 = modelStreamFactory43.newModelReader((java.io.InputStream) inputStream47);
        java.io.OutputStream outputStream49 = null;
        org.jboss.dmr.Base64.OutputStream outputStream50 = new org.jboss.dmr.Base64.OutputStream(outputStream49);
        org.jboss.dmr.Base64.OutputStream outputStream51 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream50);
        outputStream50.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter54 = modelStreamFactory43.newModelWriter((java.io.OutputStream) outputStream50);
        org.jboss.dmr.stream.ModelWriter modelWriter55 = modelWriter54.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter57 = modelWriter55.writeInt((int) (byte) 10);
        stringModelValue41.write(modelWriter57);
        objectModelValue37.write(modelWriter57);
        org.jboss.dmr.IntModelValue intModelValue61 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long63 = intModelValue61.asLong((long) 'b');
        java.lang.String str64 = intModelValue61.asString();
        java.math.BigInteger bigInteger65 = intModelValue61.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter66 = modelWriter57.writeBigInteger(bigInteger65);
        org.jboss.dmr.stream.ModelWriter modelWriter67 = modelWriter12.writeBigInteger(bigInteger65);
        org.jboss.dmr.ModelNode modelNode69 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long70 = modelNode69.asLong();
        org.jboss.dmr.ValueExpression valueExpression71 = modelNode69.asExpression();
        java.math.BigDecimal bigDecimal72 = valueExpression71.resolveBigDecimal();
        java.lang.String str73 = valueExpression71.getExpressionString();
        java.math.BigDecimal bigDecimal74 = valueExpression71.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue75 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal74);
        boolean boolean76 = bigDecimalModelValue75.asBoolean();
        long long77 = bigDecimalModelValue75.asLong();
        java.lang.String str78 = bigDecimalModelValue75.asString();
        java.math.BigInteger bigInteger79 = bigDecimalModelValue75.asBigInteger();
        int int81 = bigDecimalModelValue75.asInt(0);
        int int82 = bigDecimalModelValue75.asInt();
        int int84 = bigDecimalModelValue75.asInt((int) 'd');
        java.math.BigDecimal bigDecimal85 = bigDecimalModelValue75.asBigDecimal();
        org.jboss.dmr.stream.ModelWriter modelWriter86 = modelWriter67.writeBigDecimal(bigDecimal85);
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNodeList20);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(propertyList26);
        org.junit.Assert.assertNotNull(propertyList27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str28, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str30, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType31 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType31.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(typeModelValue34);
        org.junit.Assert.assertNotNull(typeModelValue35);
        org.junit.Assert.assertNotNull(modelWriter36);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertNotNull(modelStreamFactory43);
        org.junit.Assert.assertNotNull(modelReader48);
        org.junit.Assert.assertNotNull(modelWriter54);
        org.junit.Assert.assertNotNull(modelWriter55);
        org.junit.Assert.assertNotNull(modelWriter57);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 32L + "'", long63 == 32L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "32" + "'", str64, "32");
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(modelWriter66);
        org.junit.Assert.assertNotNull(modelWriter67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(valueExpression71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1.0" + "'", str73, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1.0" + "'", str78, "1.0");
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(modelWriter86);
    }

    @Test
    public void test07803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07803");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        double double7 = bigIntegerModelValue4.asDouble();
        double double9 = bigIntegerModelValue4.asDouble(8.0d);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.PROPERTY;
        char char11 = modelType10.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue12 = org.jboss.dmr.TypeModelValue.of(modelType10);
        boolean boolean13 = typeModelValue12.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression14 = typeModelValue12.asExpression();
        boolean boolean15 = bigIntegerModelValue4.equals((java.lang.Object) typeModelValue12);
        java.math.BigInteger bigInteger16 = bigIntegerModelValue4.asBigInteger();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'p' + "'", char11 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
    }

    @Test
    public void test07804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07804");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        boolean boolean3 = objectModelValue0.asBoolean();
        java.lang.String str4 = objectModelValue0.asString();
        org.jboss.dmr.ModelValue modelValue5 = objectModelValue0.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = objectModelValue0.asList();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue0.removeChild("52L");
        int int10 = objectModelValue0.asInt((int) ' ');
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNull(modelNode8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test07805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07805");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("BYTES_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) stringModelValue1);
        java.io.PrintWriter printWriter3 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue1.format(printWriter3, 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07806");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.math.BigInteger bigInteger16 = bytesModelValue12.asBigInteger();
        org.jboss.dmr.LongModelValue longModelValue18 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str19 = longModelValue18.asString();
        byte[] byteArray20 = longModelValue18.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue21 = new org.jboss.dmr.BytesModelValue(byteArray20);
        double double22 = bytesModelValue21.asDouble();
        boolean boolean23 = bytesModelValue12.equals(bytesModelValue21);
        long long24 = bytesModelValue21.asLong();
        java.io.DataOutput dataOutput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue21.writeExternal(dataOutput25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.9E-324d + "'", double22 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
    }

    @Test
    public void test07807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07807");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        int int10 = intModelValue5.asInt();
        int int12 = intModelValue5.asInt(32);
        org.jboss.dmr.DoubleModelValue doubleModelValue14 = new org.jboss.dmr.DoubleModelValue((double) (byte) -1);
        org.jboss.dmr.DoubleModelValue doubleModelValue16 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int18 = doubleModelValue16.asInt((int) 'l');
        java.math.BigDecimal bigDecimal19 = doubleModelValue16.asBigDecimal();
        boolean boolean20 = doubleModelValue14.equals(doubleModelValue16);
        boolean boolean21 = intModelValue5.equals((java.lang.Object) doubleModelValue14);
        org.jboss.dmr.IntModelValue intModelValue23 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str24 = intModelValue23.asString();
        double double26 = intModelValue23.asDouble((double) 2);
        java.math.BigDecimal bigDecimal27 = intModelValue23.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue28 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal27);
        long long29 = bigDecimalModelValue28.asLong();
        long long30 = bigDecimalModelValue28.asLong();
        int int32 = bigDecimalModelValue28.asInt((-1));
        boolean boolean33 = intModelValue5.equals((java.lang.Object) bigDecimalModelValue28);
        double double35 = bigDecimalModelValue28.asDouble((double) 10.0f);
        org.jboss.dmr.BooleanModelValue booleanModelValue36 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double37 = booleanModelValue36.asDouble();
        org.jboss.dmr.ModelValue modelValue38 = booleanModelValue36.copy();
        java.math.BigInteger bigInteger39 = booleanModelValue36.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue40 = new org.jboss.dmr.BigIntegerModelValue(bigInteger39);
        java.lang.String str41 = bigIntegerModelValue40.asString();
        long long43 = bigIntegerModelValue40.asLong(32L);
        double double44 = bigIntegerModelValue40.asDouble();
        long long46 = bigIntegerModelValue40.asLong((long) '4');
        int int48 = bigIntegerModelValue40.asInt(1);
        boolean boolean49 = bigIntegerModelValue40.asBoolean();
        org.jboss.dmr.BooleanModelValue booleanModelValue50 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double51 = booleanModelValue50.asDouble();
        org.jboss.dmr.ModelValue modelValue52 = booleanModelValue50.copy();
        java.math.BigInteger bigInteger53 = booleanModelValue50.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue54 = new org.jboss.dmr.BigIntegerModelValue(bigInteger53);
        long long56 = bigIntegerModelValue54.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue57 = null;
        boolean boolean58 = bigIntegerModelValue54.equals(bigIntegerModelValue57);
        boolean boolean59 = bigIntegerModelValue40.equals(bigIntegerModelValue54);
        boolean boolean60 = bigDecimalModelValue28.equals((java.lang.Object) bigIntegerModelValue40);
        long long61 = bigDecimalModelValue28.asLong();
        java.io.PrintWriter printWriter62 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue28.writeJSONString(printWriter62, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "32" + "'", str24, "32");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 32.0d + "'", double35 == 32.0d);
        org.junit.Assert.assertNotNull(booleanModelValue36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue38);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(booleanModelValue50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue52);
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 32L + "'", long61 == 32L);
    }

    @Test
    public void test07808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07808");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        double double16 = bigIntegerModelValue4.asDouble(0.0d);
        double double18 = bigIntegerModelValue4.asDouble((double) 100.0f);
        java.math.BigInteger bigInteger19 = bigIntegerModelValue4.asBigInteger();
        java.math.BigInteger bigInteger20 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.BooleanModelValue booleanModelValue22 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray23 = booleanModelValue22.asBytes();
        java.lang.String str24 = booleanModelValue22.asString();
        int int25 = booleanModelValue22.asInt();
        long long26 = booleanModelValue22.asLong();
        boolean boolean28 = booleanModelValue22.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger29 = booleanModelValue22.asBigInteger();
        java.math.BigInteger bigInteger30 = booleanModelValue22.asBigInteger();
        java.math.BigDecimal bigDecimal31 = booleanModelValue22.asBigDecimal();
        boolean boolean32 = bigIntegerModelValue4.equals((java.lang.Object) bigDecimal31);
        int int34 = bigIntegerModelValue4.asInt((int) (short) -1);
        java.math.BigDecimal bigDecimal35 = bigIntegerModelValue4.asBigDecimal();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(booleanModelValue22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "true" + "'", str24, "true");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(bigDecimal35);
    }

    @Test
    public void test07809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07809");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        java.util.List<org.jboss.dmr.Property> propertyList7 = objectModelValue0.asPropertyList();
        boolean boolean9 = objectModelValue0.asBoolean(false);
        org.jboss.dmr.ObjectModelValue objectModelValue10 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode11 = objectModelValue10.asObject();
        java.util.Set<java.lang.String> strSet12 = objectModelValue10.getKeys();
        org.jboss.dmr.ModelNode modelNode14 = objectModelValue10.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean15 = objectModelValue10.asBoolean();
        org.jboss.dmr.ModelNode modelNode17 = objectModelValue10.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue18 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue18.asObject();
        java.util.Set<java.lang.String> strSet20 = objectModelValue18.getKeys();
        org.jboss.dmr.ModelNode modelNode22 = objectModelValue18.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean23 = objectModelValue18.asBoolean();
        int int25 = objectModelValue18.asInt((int) 'b');
        int int27 = objectModelValue18.asInt((int) '#');
        boolean boolean28 = objectModelValue10.equals(objectModelValue18);
        int int29 = objectModelValue18.asInt();
        java.util.Set<java.lang.String> strSet30 = objectModelValue18.getKeys();
        long long32 = objectModelValue18.asLong((long) 0);
        org.jboss.dmr.ModelType modelType33 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode(modelType33);
        org.jboss.dmr.LongModelValue longModelValue37 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str38 = longModelValue37.asString();
        byte[] byteArray39 = longModelValue37.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue40 = new org.jboss.dmr.BytesModelValue(byteArray39);
        java.lang.String str41 = bytesModelValue40.asString();
        int int42 = bytesModelValue40.asInt();
        long long44 = bytesModelValue40.asLong((long) (short) 1);
        long long45 = bytesModelValue40.asLong();
        java.math.BigDecimal bigDecimal46 = bytesModelValue40.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode47 = modelNode34.set("32", bigDecimal46);
        boolean boolean48 = objectModelValue18.equals((java.lang.Object) bigDecimal46);
        boolean boolean49 = objectModelValue18.asBoolean();
        boolean boolean50 = objectModelValue0.equals(objectModelValue18);
        java.util.Set<java.lang.String> strSet51 = objectModelValue0.getKeys();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(propertyList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + modelType33 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType33.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str41, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test07810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07810");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.BooleanModelValue booleanModelValue6 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger7 = booleanModelValue6.asBigInteger();
        byte[] byteArray8 = booleanModelValue6.asBytes();
        boolean boolean10 = org.jboss.dmr.Base64.encodeToFile(byteArray8, "1L");
        boolean boolean12 = org.jboss.dmr.Base64.encodeToFile(byteArray8, "[(\"hi!\" => 0.0)]");
        outputStream4.write(byteArray8);
        outputStream4.write((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            outputStream4.flushBase64();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07811");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.toString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.resolve();
        java.lang.String str9 = modelNode8.toString();
        boolean boolean10 = valueExpression3.equals((java.lang.Object) str9);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Expression \"1.0\"" + "'", str5, "Expression \"1.0\"");
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07812");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isPropertyStart();
        boolean boolean23 = modelReader15.isObjectEnd();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = modelReader15.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't string");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07813");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.get(strArray11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = modelNode12.asPropertyList(propertyList23);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList43 = listModelValue38.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList44 = modelNode32.asPropertyList(propertyList43);
        modelNode12.setNoCopy(modelNode32);
        org.jboss.dmr.ModelNode modelNode46 = modelNode2.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode12);
        boolean boolean47 = modelNode12.isDefined();
        org.jboss.dmr.PropertyModelValue propertyModelValue49 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==", modelNode12, true);
        java.lang.String str50 = modelNode12.asString();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode52 = modelNode12.remove("{\n    \"hi!\" : {\n        \"EXPRESSION_VALUE\" : \"hi!\"\n    }\n}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(\"hi!\" => 0.0)" + "'", str50, "(\"hi!\" => 0.0)");
    }

    @Test
    public void test07814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07814");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("\"[{}]\"");
        org.junit.Assert.assertNotNull(modelNode1);
    }

    @Test
    public void test07815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07815");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        int int13 = listModelValue5.asInt();
        org.jboss.dmr.ModelValue modelValue14 = listModelValue5.resolve();
        java.util.List<org.jboss.dmr.Property> propertyList15 = listModelValue5.asPropertyList();
        long long16 = listModelValue5.asLong();
        int int17 = listModelValue5.asInt();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertNotNull(propertyList15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test07816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07816");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory12 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream13 = null;
        org.jboss.dmr.Base64.InputStream inputStream15 = new org.jboss.dmr.Base64.InputStream(inputStream13, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream15);
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory12.newModelReader((java.io.InputStream) inputStream16);
        java.io.OutputStream outputStream18 = null;
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream(outputStream18);
        org.jboss.dmr.Base64.OutputStream outputStream20 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream19);
        outputStream19.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelStreamFactory12.newModelWriter((java.io.OutputStream) outputStream19);
        longModelValue1.write(modelWriter23);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = longModelValue1.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory12);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelWriter23);
    }

    @Test
    public void test07817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07817");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        long long5 = intModelValue1.asLong();
        java.lang.String str6 = intModelValue1.asString();
        int int7 = intModelValue1.asInt();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "32" + "'", str6, "32");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
    }

    @Test
    public void test07818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07818");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isBoolean();
        boolean boolean21 = modelReader15.isType();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07819");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set("\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\"", "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        java.lang.String str7 = modelNode5.toJSONString(false);
        boolean boolean9 = modelNode5.hasDefined("rO0ABXNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5n\nLk51bWJlcoaslR0LlOCLAgAAeHAAAABk");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{\n    \"\\\"\\\\\\\"(\\\\\\\\\\\\\\\"hi!\\\\\\\\\\\\\\\" => 0.0)\\\\\\\"\\\"\" : \"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\"\n}" + "'", str7, "{\n    \"\\\"\\\\\\\"(\\\\\\\\\\\\\\\"hi!\\\\\\\\\\\\\\\" => 0.0)\\\\\\\"\\\"\" : \"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\"\n}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07820");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression2 = expressionValue1.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str5 = expressionValue4.toString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        boolean boolean12 = expressionValue4.equals((java.lang.Object) property11);
        boolean boolean13 = expressionValue1.equals(expressionValue4);
        org.jboss.dmr.ModelType modelType14 = org.jboss.dmr.ModelType.PROPERTY;
        char char15 = modelType14.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue16 = org.jboss.dmr.TypeModelValue.of(modelType14);
        org.jboss.dmr.ValueExpression valueExpression17 = typeModelValue16.asExpression();
        org.jboss.dmr.stream.ModelEvent modelEvent18 = org.jboss.dmr.stream.ModelEvent.TYPE;
        boolean boolean19 = valueExpression17.equals((java.lang.Object) modelEvent18);
        boolean boolean20 = expressionValue1.equals((java.lang.Object) boolean19);
        org.jboss.dmr.ValueExpression valueExpression21 = expressionValue1.asExpression();
        org.jboss.dmr.DoubleModelValue doubleModelValue23 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long24 = doubleModelValue23.asLong();
        boolean boolean26 = doubleModelValue23.asBoolean(true);
        int int27 = doubleModelValue23.asInt();
        org.jboss.dmr.LongModelValue longModelValue29 = new org.jboss.dmr.LongModelValue(1L);
        long long31 = longModelValue29.asLong((long) (short) 0);
        double double32 = longModelValue29.asDouble();
        boolean boolean33 = doubleModelValue23.equals((java.lang.Object) longModelValue29);
        java.math.BigDecimal bigDecimal34 = longModelValue29.asBigDecimal();
        org.jboss.dmr.ExpressionValue expressionValue36 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue38 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean39 = expressionValue36.equals(expressionValue38);
        org.jboss.dmr.ExpressionValue expressionValue41 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue43 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean44 = expressionValue41.equals(expressionValue43);
        boolean boolean45 = expressionValue36.equals(expressionValue43);
        org.jboss.dmr.ModelValue modelValue46 = expressionValue36.resolve();
        java.lang.String str47 = expressionValue36.asString();
        org.jboss.dmr.ModelValue modelValue48 = expressionValue36.resolve();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory50 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream51 = null;
        org.jboss.dmr.Base64.InputStream inputStream53 = new org.jboss.dmr.Base64.InputStream(inputStream51, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream54 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream53);
        org.jboss.dmr.stream.ModelReader modelReader55 = modelStreamFactory50.newModelReader((java.io.InputStream) inputStream54);
        java.io.OutputStream outputStream56 = null;
        org.jboss.dmr.Base64.OutputStream outputStream57 = new org.jboss.dmr.Base64.OutputStream(outputStream56);
        org.jboss.dmr.Base64.OutputStream outputStream58 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream57);
        outputStream57.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter61 = modelStreamFactory50.newModelWriter((java.io.OutputStream) outputStream57);
        org.jboss.dmr.stream.ModelWriter modelWriter62 = modelWriter61.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter64 = modelWriter62.writeInt((int) (byte) 10);
        expressionValue36.write(modelWriter62);
        longModelValue29.write(modelWriter62);
        org.jboss.dmr.IntModelValue intModelValue68 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str69 = intModelValue68.asString();
        byte[] byteArray70 = intModelValue68.asBytes();
        boolean boolean72 = intModelValue68.has("\"35\"");
        java.math.BigInteger bigInteger73 = intModelValue68.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter74 = modelWriter62.writeBigInteger(bigInteger73);
        expressionValue1.write(modelWriter74);
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "expression \"hi!\"" + "'", str5, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType14.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'p' + "'", char15 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue16);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertTrue("'" + modelEvent18 + "' != '" + org.jboss.dmr.stream.ModelEvent.TYPE + "'", modelEvent18.equals(org.jboss.dmr.stream.ModelEvent.TYPE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(modelValue46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(modelValue48);
        org.junit.Assert.assertNotNull(modelStreamFactory50);
        org.junit.Assert.assertNotNull(modelReader55);
        org.junit.Assert.assertNotNull(modelWriter61);
        org.junit.Assert.assertNotNull(modelWriter62);
        org.junit.Assert.assertNotNull(modelWriter64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "32" + "'", str69, "32");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(modelWriter74);
    }

    @Test
    public void test07821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07821");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        java.lang.String[] strArray48 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode49 = modelNode46.get(strArray48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode28.get(strArray48);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode50, true);
        org.jboss.dmr.ModelNode modelNode55 = modelNode50.set("{}", (long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode56 = modelNode55.add();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode55);
    }

    @Test
    public void test07822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07822");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        boolean boolean5 = modelNode1.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set(false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(modelNode7);
    }

    @Test
    public void test07823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07823");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream19.resumeEncoding();
        outputStream19.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream19);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory24 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream25 = null;
        org.jboss.dmr.Base64.InputStream inputStream27 = new org.jboss.dmr.Base64.InputStream(inputStream25, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue29 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str30 = longModelValue29.asString();
        byte[] byteArray31 = longModelValue29.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue32 = new org.jboss.dmr.BytesModelValue(byteArray31);
        int int35 = inputStream27.read(byteArray31, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream27, (-1));
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory24.newModelReader((java.io.InputStream) inputStream37);
        java.io.InputStream inputStream39 = null;
        org.jboss.dmr.Base64.InputStream inputStream41 = new org.jboss.dmr.Base64.InputStream(inputStream39, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream42 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream41);
        org.jboss.dmr.Base64.InputStream inputStream43 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream42);
        org.jboss.dmr.stream.ModelReader modelReader44 = modelStreamFactory24.newModelReader((java.io.InputStream) inputStream43);
        org.jboss.dmr.stream.ModelReader modelReader45 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream43);
        org.jboss.dmr.Base64.InputStream inputStream46 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream43);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode47 = org.jboss.dmr.ModelNode.fromBase64((java.io.InputStream) inputStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertNotNull(modelStreamFactory24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertNotNull(modelReader44);
        org.junit.Assert.assertNotNull(modelReader45);
    }

    @Test
    public void test07824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07824");
        org.jboss.dmr.stream.ModelException modelException3 = new org.jboss.dmr.stream.ModelException("\"35\"");
        org.jboss.dmr.stream.ModelException modelException4 = new org.jboss.dmr.stream.ModelException("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}", (java.lang.Throwable) modelException3);
        java.lang.Throwable throwable6 = null;
        org.jboss.dmr.stream.ModelException modelException7 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable6);
        org.jboss.dmr.stream.ModelException modelException8 = new org.jboss.dmr.stream.ModelException(throwable6);
        java.lang.Throwable throwable10 = null;
        org.jboss.dmr.stream.ModelException modelException11 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable10);
        org.jboss.dmr.stream.ModelException modelException12 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException11);
        org.jboss.dmr.stream.ModelException modelException13 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException11);
        java.lang.Throwable throwable15 = null;
        org.jboss.dmr.stream.ModelException modelException16 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable15);
        org.jboss.dmr.stream.ModelException modelException17 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException16);
        java.lang.Throwable throwable19 = null;
        org.jboss.dmr.stream.ModelException modelException20 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable19);
        org.jboss.dmr.stream.ModelException modelException21 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException20);
        modelException16.addSuppressed((java.lang.Throwable) modelException20);
        java.lang.Throwable[] throwableArray23 = modelException20.getSuppressed();
        modelException13.addSuppressed((java.lang.Throwable) modelException20);
        modelException8.addSuppressed((java.lang.Throwable) modelException20);
        modelException3.addSuppressed((java.lang.Throwable) modelException20);
        org.jboss.dmr.stream.ModelException modelException27 = new org.jboss.dmr.stream.ModelException("rO0ABXNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRM\nZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFn\nbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7/\n///+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAABAXg=", (java.lang.Throwable) modelException3);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test07825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07825");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) 100);
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.setExpression("hi!", "hi!");
        java.lang.String str6 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode2);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode2.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set((double) 0);
        boolean boolean10 = modelNode2.isProtected();
        java.math.BigInteger bigInteger11 = modelNode2.asBigIntegerOrNull();
        boolean boolean12 = doubleModelValue1.equals((java.lang.Object) modelNode2);
        org.jboss.dmr.IntModelValue intModelValue15 = new org.jboss.dmr.IntModelValue(10);
        java.math.BigInteger bigInteger16 = intModelValue15.asBigInteger();
        org.jboss.dmr.ModelNode modelNode17 = modelNode2.set("rO0ABXNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRM\nZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFn\nbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7/\n///+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAABAXg=", bigInteger16);
        org.jboss.dmr.ModelNode modelNode20 = modelNode2.set("{\n    \"EXPRESSION_VALUE\" : {\n        \"\" : {\n            \"hi!\" : 0.0\n        }\n    }\n}", (long) (byte) 0);
        java.io.OutputStream outputStream21 = null;
        org.jboss.dmr.Base64.OutputStream outputStream22 = new org.jboss.dmr.Base64.OutputStream(outputStream21);
        outputStream22.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream22);
        org.jboss.dmr.Base64.OutputStream outputStream25 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream24);
        outputStream25.flushBase64();
        outputStream25.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream25);
        // The following exception was thrown during execution in test generation
        try {
            modelNode20.writeExternal((java.io.OutputStream) outputStream25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str6, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode20);
    }

    @Test
    public void test07826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07826");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        byte[] byteArray3 = booleanModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression4 = booleanModelValue1.asExpression();
        java.io.ObjectInput objectInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression4.readExternal(objectInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(valueExpression4);
    }

    @Test
    public void test07827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07827");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) (short) 100);
        int int9 = longModelValue1.asInt((int) ' ');
        org.jboss.dmr.ValueExpression valueExpression10 = longModelValue1.asExpression();
        java.io.ObjectInput objectInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression10.readExternal(objectInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(valueExpression10);
    }

    @Test
    public void test07828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07828");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.get(strArray11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = modelNode12.asPropertyList(propertyList23);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList43 = listModelValue38.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList44 = modelNode32.asPropertyList(propertyList43);
        modelNode12.setNoCopy(modelNode32);
        org.jboss.dmr.ModelNode modelNode46 = modelNode2.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode12);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("", modelNode51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode54 = modelNode51.get(strArray53);
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int56 = modelNode55.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.setExpression("hi!", "hi!");
        java.lang.String str61 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode57);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = modelNode57.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode63 = modelNode55.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        org.jboss.dmr.ModelNode modelNode64 = modelNode54.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode2.asList(modelNodeList62);
        org.jboss.dmr.PropertyModelValue propertyModelValue67 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode2, false);
        org.jboss.dmr.ModelNode modelNode69 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode72 = modelNode69.set("hi!", 0.0d);
        org.jboss.dmr.Property property73 = new org.jboss.dmr.Property("", modelNode72);
        org.jboss.dmr.Property property74 = property73.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue75 = new org.jboss.dmr.PropertyModelValue(property74);
        org.jboss.dmr.ModelValue modelValue76 = propertyModelValue75.resolve();
        boolean boolean77 = propertyModelValue67.equals(propertyModelValue75);
        org.jboss.dmr.stream.ModelWriter modelWriter78 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue75.write(modelWriter78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str61, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(modelValue76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test07829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07829");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBigInteger();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isPropertyStart();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07830");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) 10);
        boolean boolean3 = modelNode1.has("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test07831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07831");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int10 = modelNode9.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.clone();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setNoCopy("35", modelNode11);
        org.jboss.dmr.ObjectModelValue objectModelValue13 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode14 = objectModelValue13.asObject();
        org.jboss.dmr.ModelValue modelValue15 = objectModelValue13.protect();
        org.jboss.dmr.ModelValue modelValue16 = objectModelValue13.resolve();
        boolean boolean18 = objectModelValue13.asBoolean(true);
        java.util.List<org.jboss.dmr.Property> propertyList19 = objectModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode7.asPropertyList(propertyList19);
        org.jboss.dmr.BooleanModelValue booleanModelValue21 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double22 = booleanModelValue21.asDouble();
        org.jboss.dmr.ModelValue modelValue23 = booleanModelValue21.copy();
        java.math.BigInteger bigInteger24 = booleanModelValue21.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue25 = new org.jboss.dmr.BigIntegerModelValue(bigInteger24);
        long long27 = bigIntegerModelValue25.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue28 = null;
        boolean boolean29 = bigIntegerModelValue25.equals(bigIntegerModelValue28);
        org.jboss.dmr.ValueExpression valueExpression30 = bigIntegerModelValue25.asExpression();
        org.jboss.dmr.ModelNode modelNode31 = modelNode7.set(valueExpression30);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = modelNode31.asBoolean(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(booleanModelValue21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertNotNull(modelNode31);
    }

    @Test
    public void test07832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07832");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str5 = modelNode3.asString("true");
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long9 = modelNode8.asLong();
        org.jboss.dmr.ValueExpression valueExpression10 = modelNode8.asExpression();
        java.math.BigDecimal bigDecimal11 = valueExpression10.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode(bigDecimal11);
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode15 = modelNode3.setNoCopy("35", modelNode14);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        boolean boolean24 = modelNode21.hasDefined((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode25 = modelNode15.setNoCopy("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4", modelNode21);
        boolean boolean26 = expressionValue1.equals((java.lang.Object) modelNode21);
        org.jboss.dmr.ModelValue modelValue27 = expressionValue1.clone();
        org.jboss.dmr.ValueExpression valueExpression28 = expressionValue1.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger29 = valueExpression28.resolveBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"TYPE_MO\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "10" + "'", str5, "10");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertNotNull(valueExpression28);
    }

    @Test
    public void test07833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07833");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        boolean boolean12 = listModelValue5.asBoolean(true);
        boolean boolean14 = listModelValue5.asBoolean(false);
        java.io.DataOutput dataOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.writeExternal(dataOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07834");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        org.jboss.dmr.BooleanModelValue booleanModelValue6 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double7 = booleanModelValue6.asDouble();
        org.jboss.dmr.ModelValue modelValue8 = booleanModelValue6.copy();
        java.math.BigInteger bigInteger9 = booleanModelValue6.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue10 = new org.jboss.dmr.BigIntegerModelValue(bigInteger9);
        int int12 = bigIntegerModelValue10.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.lang.String str17 = modelNode13.toString();
        org.jboss.dmr.ModelNode modelNode18 = modelNode13.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode20 = modelNode13.set(100);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        java.lang.String str25 = modelNode21.toString();
        org.jboss.dmr.ModelNode modelNode26 = modelNode21.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        org.jboss.dmr.Property property32 = new org.jboss.dmr.Property("", modelNode31);
        org.jboss.dmr.ModelNode modelNode33 = modelNode21.set(property32);
        java.lang.String str34 = modelNode33.asString();
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList39 = modelNode38.asList();
        org.jboss.dmr.ListModelValue listModelValue40 = new org.jboss.dmr.ListModelValue(modelNodeList39);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue40);
        org.jboss.dmr.ModelValue modelValue42 = listModelValue40.resolve();
        int int44 = listModelValue40.asInt((int) (byte) 100);
        boolean boolean45 = listModelValue40.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList46 = listModelValue40.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode33.asList(modelNodeList46);
        org.jboss.dmr.ModelNode modelNode48 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList46);
        boolean boolean49 = bigIntegerModelValue10.equals((java.lang.Object) modelNode20);
        boolean boolean50 = bigIntegerModelValue4.equals(bigIntegerModelValue10);
        boolean boolean52 = bigIntegerModelValue10.equals((java.lang.Object) "{}");
        org.jboss.dmr.ValueExpression valueExpression53 = bigIntegerModelValue10.asExpression();
        org.jboss.dmr.ValueExpression valueExpression54 = bigIntegerModelValue10.asExpression();
        long long55 = bigIntegerModelValue10.asLong();
        boolean boolean57 = bigIntegerModelValue10.asBoolean(false);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(booleanModelValue6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue8);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(\"hi!\" => 0.0)" + "'", str17, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(\"hi!\" => 0.0)" + "'", str25, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str34, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNodeList39);
        org.junit.Assert.assertNotNull(modelValue42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(modelNodeList46);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(valueExpression53);
        org.junit.Assert.assertNotNull(valueExpression54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test07835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07835");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        boolean boolean5 = valueExpression3.equals((java.lang.Object) 'p');
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue(valueExpression3);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(valueExpression3);
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        java.lang.String str14 = bigIntegerModelValue13.asString();
        java.math.BigInteger bigInteger15 = bigIntegerModelValue13.asBigInteger();
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(bigInteger15);
        java.lang.String str18 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) bigInteger15, (int) (short) 1);
        org.jboss.dmr.ModelNode modelNode19 = modelNode7.set("{ \"35\" : 0.0 }", bigInteger15);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.setExpression("hi!", "hi!");
        java.lang.String str24 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode20);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode20.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode27 = modelNode20.set((double) 0);
        org.jboss.dmr.ModelNode modelNode28 = modelNode20.clear();
        int int30 = modelNode28.asInt(112);
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode34 = modelNode31.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList35 = modelNode34.asList();
        org.jboss.dmr.ModelNode modelNode38 = modelNode34.setExpression("hi!", "(\"hi!\" => 0.0)");
        java.util.Set<java.lang.String> strSet39 = modelNode38.keys();
        boolean boolean40 = modelNode28.equals(modelNode38);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        boolean boolean45 = modelNode43.has("PROPERTY_VALUE");
        boolean boolean46 = modelNode43.isProtected();
        org.jboss.dmr.ModelNode modelNode47 = modelNode38.setNoCopy("1", modelNode43);
        boolean boolean48 = modelNode7.equals(modelNode38);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "rO0ABXNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRM\nZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFn\nbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7/\n///+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAABAXg=" + "'", str18, "rO0ABXNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRM\nZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFn\nbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7/\n///+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAABAXg=");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str24, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 112 + "'", int30 == 112);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNodeList35);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test07836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07836");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(true);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream16);
        org.jboss.dmr.stream.ModelReader modelReader18 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream19 = null;
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream(inputStream19, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream21);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream21);
        // The following exception was thrown during execution in test generation
        try {
            inputStream21.mark((int) 's');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader18);
        org.junit.Assert.assertNotNull(modelReader23);
    }

    @Test
    public void test07837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07837");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        java.lang.String str6 = modelNode4.toJSONString(false);
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.addEmptyList();
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1]" + "'", str6, "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
    }

    @Test
    public void test07838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07838");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean5 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.ValueExpression valueExpression6 = stringModelValue1.asExpression();
        org.jboss.dmr.ModelType modelType7 = stringModelValue1.getType();
        java.io.DataOutput dataOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue1.writeExternal(dataOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertTrue("'" + modelType7 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType7.equals(org.jboss.dmr.ModelType.STRING));
    }

    @Test
    public void test07839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07839");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) 'a');
        int int9 = longModelValue1.asInt((int) '4');
        java.lang.String str10 = longModelValue1.asString();
        long long11 = longModelValue1.asLong();
        double double13 = longModelValue1.asDouble((double) 52);
        long long15 = longModelValue1.asLong((long) 10);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) longModelValue1);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode18 = modelNode16.get("\"{\\n    \\\"BYTES_VALUE\\\" : \\\"AAAAAAAAAAE=\\\"\\n}\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test07840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07840");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        int int6 = doubleModelValue1.asInt(2);
        double double8 = doubleModelValue1.asDouble(0.0d);
        org.jboss.dmr.DoubleModelValue doubleModelValue10 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long11 = doubleModelValue10.asLong();
        boolean boolean12 = doubleModelValue10.asBoolean();
        byte[] byteArray13 = doubleModelValue10.asBytes();
        int int15 = doubleModelValue10.asInt((int) ' ');
        long long16 = doubleModelValue10.asLong();
        org.jboss.dmr.ValueExpression valueExpression17 = doubleModelValue10.asExpression();
        java.math.BigInteger bigInteger18 = doubleModelValue10.asBigInteger();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode22.asList();
        org.jboss.dmr.ListModelValue listModelValue24 = new org.jboss.dmr.ListModelValue(modelNodeList23);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue24);
        org.jboss.dmr.ModelValue modelValue26 = listModelValue24.resolve();
        int int28 = listModelValue24.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList29 = listModelValue24.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList30 = listModelValue24.asList();
        long long31 = listModelValue24.asLong();
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        java.lang.String str38 = listModelValue37.asString();
        long long39 = listModelValue37.asLong();
        int int41 = listModelValue37.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue42 = listModelValue37.protect();
        boolean boolean44 = listModelValue37.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue45 = listModelValue37.resolve();
        boolean boolean46 = listModelValue37.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = listModelValue37.asList();
        boolean boolean48 = listModelValue24.equals(listModelValue37);
        java.util.List<org.jboss.dmr.Property> propertyList49 = listModelValue24.asPropertyList();
        boolean boolean50 = doubleModelValue10.equals((java.lang.Object) propertyList49);
        double double52 = doubleModelValue10.asDouble((double) '4');
        boolean boolean53 = doubleModelValue1.equals(doubleModelValue10);
        org.jboss.dmr.ValueExpression valueExpression54 = doubleModelValue10.asExpression();
        org.jboss.dmr.DoubleModelValue doubleModelValue56 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long57 = doubleModelValue56.asLong();
        boolean boolean58 = doubleModelValue56.asBoolean();
        byte[] byteArray59 = doubleModelValue56.asBytes();
        double double60 = doubleModelValue56.asDouble();
        org.jboss.dmr.ValueExpression valueExpression61 = doubleModelValue56.asExpression();
        org.jboss.dmr.ValueExpression valueExpression62 = doubleModelValue56.asExpression();
        boolean boolean63 = valueExpression54.equals(valueExpression62);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver64 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long65 = valueExpression54.resolveLong(valueExpressionResolver64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertNotNull(modelValue26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(propertyList29);
        org.junit.Assert.assertNotNull(modelNodeList30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str38, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(modelValue42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(modelValue45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(propertyList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(valueExpression54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertNotNull(valueExpression61);
        org.junit.Assert.assertNotNull(valueExpression62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test07841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07841");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str5 = longModelValue4.asString();
        byte[] byteArray6 = longModelValue4.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue7 = new org.jboss.dmr.BytesModelValue(byteArray6);
        int int10 = inputStream2.read(byteArray6, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2, (-1));
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2, (int) 'p');
        // The following exception was thrown during execution in test generation
        try {
            inputStream14.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test07842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07842");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        boolean boolean7 = modelReader6.isListStart();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = modelReader6.getBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't bytes");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07843");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asList();
        org.jboss.dmr.ListModelValue listModelValue6 = new org.jboss.dmr.ListModelValue(modelNodeList5);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue6);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode13 = modelNode7.set("Expression \"true\"", modelNode12);
        java.util.List<org.jboss.dmr.Property> propertyList14 = modelNode13.asPropertyList();
        org.jboss.dmr.PropertyModelValue propertyModelValue16 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==", modelNode13, true);
        java.util.Set<java.lang.String> strSet17 = propertyModelValue16.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = propertyModelValue16.asInt((int) 'J');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertNotNull(strSet17);
    }

    @Test
    public void test07844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07844");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        org.jboss.dmr.ModelType modelType5 = org.jboss.dmr.ModelType.PROPERTY;
        char char6 = modelType5.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue7 = org.jboss.dmr.TypeModelValue.of(modelType5);
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        boolean boolean11 = typeModelValue7.equals(typeModelValue10);
        java.lang.String str12 = typeModelValue10.asString();
        org.jboss.dmr.ValueExpression valueExpression13 = typeModelValue10.asExpression();
        org.jboss.dmr.ModelType modelType14 = typeModelValue10.asType();
        boolean boolean16 = typeModelValue10.asBoolean(true);
        java.lang.String str17 = typeModelValue10.asString();
        boolean boolean18 = typeModelValue10.asBoolean();
        boolean boolean19 = intModelValue1.equals((java.lang.Object) typeModelValue10);
        org.jboss.dmr.ValueExpression valueExpression20 = intModelValue1.asExpression();
        java.lang.String str21 = valueExpression20.toString();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType5.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'p' + "'", char6 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue7);
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PROPERTY" + "'", str12, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType14.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PROPERTY" + "'", str17, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Expression \"32\"" + "'", str21, "Expression \"32\"");
    }

    @Test
    public void test07845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07845");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        byte[] byteArray7 = bytesModelValue4.asBytes();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        java.lang.String str13 = bytesModelValue12.asString();
        int int14 = bytesModelValue12.asInt();
        int int15 = bytesModelValue12.asInt();
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        double double21 = bytesModelValue20.asDouble();
        boolean boolean22 = bytesModelValue12.equals(bytesModelValue20);
        byte[] byteArray23 = bytesModelValue20.asBytes();
        java.math.BigInteger bigInteger24 = bytesModelValue20.asBigInteger();
        boolean boolean25 = bytesModelValue4.equals(bytesModelValue20);
        int int27 = bytesModelValue20.asInt((int) 'J');
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory29 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream30 = null;
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream(inputStream30, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream32);
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory29.newModelReader((java.io.InputStream) inputStream33);
        java.io.OutputStream outputStream35 = null;
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream(outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream36);
        outputStream36.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelStreamFactory29.newModelWriter((java.io.OutputStream) outputStream36);
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelWriter40.writeListStart();
        bytesModelValue20.write(modelWriter41);
        org.jboss.dmr.stream.ModelWriter modelWriter43 = modelWriter41.writeObjectStart();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str13, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory29);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter41);
        org.junit.Assert.assertNotNull(modelWriter43);
    }

    @Test
    public void test07846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07846");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.lang.String str5 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode1);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode1);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
    }

    @Test
    public void test07847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07847");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        int int6 = booleanModelValue1.asInt(52);
        double double7 = booleanModelValue1.asDouble();
        double double9 = booleanModelValue1.asDouble((double) 'e');
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test07848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07848");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        long long3 = longModelValue1.asLong((long) (byte) -1);
        boolean boolean5 = longModelValue1.asBoolean(false);
        java.io.OutputStream outputStream6 = null;
        org.jboss.dmr.Base64.OutputStream outputStream7 = new org.jboss.dmr.Base64.OutputStream(outputStream6);
        outputStream7.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream11 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream9, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream12 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream11);
        outputStream12.resumeEncoding();
        boolean boolean14 = longModelValue1.equals((java.lang.Object) outputStream12);
        double double15 = longModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
    }

    @Test
    public void test07849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07849");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue6 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long7 = booleanModelValue6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = booleanModelValue6.asExpression();
        boolean boolean10 = valueExpression8.equals((java.lang.Object) 'p');
        boolean boolean11 = valueExpression3.equals(valueExpression8);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long14 = modelNode13.asLong();
        org.jboss.dmr.ValueExpression valueExpression15 = modelNode13.asExpression();
        java.math.BigDecimal bigDecimal16 = valueExpression15.resolveBigDecimal();
        java.lang.String str17 = valueExpression15.getExpressionString();
        boolean boolean18 = valueExpression8.equals(valueExpression15);
        java.math.BigDecimal bigDecimal19 = valueExpression15.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode(bigDecimal19);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue21 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal19);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(booleanModelValue6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0" + "'", str17, "1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigDecimal19);
    }

    @Test
    public void test07850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07850");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        java.lang.String str10 = bytesModelValue9.asString();
        int int11 = bytesModelValue9.asInt();
        byte[] byteArray12 = bytesModelValue9.asBytes();
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str15 = longModelValue14.asString();
        byte[] byteArray16 = longModelValue14.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue17 = new org.jboss.dmr.BytesModelValue(byteArray16);
        java.lang.String str18 = bytesModelValue17.asString();
        int int19 = bytesModelValue17.asInt();
        int int20 = bytesModelValue17.asInt();
        org.jboss.dmr.LongModelValue longModelValue22 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str23 = longModelValue22.asString();
        byte[] byteArray24 = longModelValue22.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue25 = new org.jboss.dmr.BytesModelValue(byteArray24);
        double double26 = bytesModelValue25.asDouble();
        boolean boolean27 = bytesModelValue17.equals(bytesModelValue25);
        byte[] byteArray28 = bytesModelValue25.asBytes();
        java.math.BigInteger bigInteger29 = bytesModelValue25.asBigInteger();
        boolean boolean30 = bytesModelValue9.equals(bytesModelValue25);
        int int32 = bytesModelValue25.asInt((int) 'J');
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory34 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream35 = null;
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream(inputStream35, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream37);
        org.jboss.dmr.stream.ModelReader modelReader39 = modelStreamFactory34.newModelReader((java.io.InputStream) inputStream38);
        java.io.OutputStream outputStream40 = null;
        org.jboss.dmr.Base64.OutputStream outputStream41 = new org.jboss.dmr.Base64.OutputStream(outputStream40);
        org.jboss.dmr.Base64.OutputStream outputStream42 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream41);
        outputStream41.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter45 = modelStreamFactory34.newModelWriter((java.io.OutputStream) outputStream41);
        org.jboss.dmr.stream.ModelWriter modelWriter46 = modelWriter45.writeListStart();
        bytesModelValue25.write(modelWriter46);
        org.jboss.dmr.BooleanModelValue booleanModelValue49 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray50 = booleanModelValue49.asBytes();
        java.lang.String str51 = booleanModelValue49.asString();
        int int52 = booleanModelValue49.asInt();
        long long53 = booleanModelValue49.asLong();
        boolean boolean55 = booleanModelValue49.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger56 = booleanModelValue49.asBigInteger();
        java.lang.String str57 = booleanModelValue49.asString();
        byte[] byteArray58 = booleanModelValue49.asBytes();
        java.lang.String str60 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) byteArray58, 10);
        org.jboss.dmr.stream.ModelWriter modelWriter61 = modelWriter46.writeBytes(byteArray58);
        booleanModelValue1.write(modelWriter61);
        byte[] byteArray63 = booleanModelValue1.asBytes();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str10, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str18, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.9E-324d + "'", double26 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory34);
        org.junit.Assert.assertNotNull(modelReader39);
        org.junit.Assert.assertNotNull(modelWriter45);
        org.junit.Assert.assertNotNull(modelWriter46);
        org.junit.Assert.assertNotNull(booleanModelValue49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "true" + "'", str51, "true");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "true" + "'", str57, "true");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA" + "'", str60, "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.junit.Assert.assertNotNull(modelWriter61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
    }

    @Test
    public void test07851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07851");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        boolean boolean18 = listModelValue13.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray19 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean20 = listModelValue13.equals((java.lang.Object) modelNodeArray19);
        boolean boolean21 = typeModelValue5.equals((java.lang.Object) listModelValue13);
        boolean boolean22 = typeModelValue5.asBoolean();
        java.lang.String str23 = typeModelValue5.asString();
        boolean boolean24 = typeModelValue5.asBoolean();
        org.jboss.dmr.ModelType modelType25 = org.jboss.dmr.ModelType.PROPERTY;
        char char26 = modelType25.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue27 = org.jboss.dmr.TypeModelValue.of(modelType25);
        boolean boolean28 = typeModelValue27.asBoolean();
        java.lang.String str29 = typeModelValue27.asString();
        boolean boolean31 = typeModelValue27.asBoolean(false);
        boolean boolean32 = typeModelValue5.equals(typeModelValue27);
        org.jboss.dmr.ValueExpression valueExpression33 = typeModelValue5.asExpression();
        java.io.PrintWriter printWriter34 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeModelValue5.formatAsJSON(printWriter34, (int) (short) -1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(modelNodeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PROPERTY" + "'", str23, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + modelType25 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType25.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + 'p' + "'", char26 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PROPERTY" + "'", str29, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(valueExpression33);
    }

    @Test
    public void test07852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07852");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        java.math.BigInteger bigInteger3 = booleanModelValue1.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double6 = booleanModelValue5.asDouble();
        org.jboss.dmr.ModelValue modelValue7 = booleanModelValue5.copy();
        java.math.BigInteger bigInteger8 = booleanModelValue5.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue9 = new org.jboss.dmr.BigIntegerModelValue(bigInteger8);
        int int11 = bigIntegerModelValue9.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue12 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double13 = booleanModelValue12.asDouble();
        org.jboss.dmr.ModelValue modelValue14 = booleanModelValue12.copy();
        java.math.BigInteger bigInteger15 = booleanModelValue12.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue16 = new org.jboss.dmr.BigIntegerModelValue(bigInteger15);
        java.lang.String str17 = bigIntegerModelValue16.asString();
        java.math.BigInteger bigInteger18 = bigIntegerModelValue16.asBigInteger();
        boolean boolean19 = bigIntegerModelValue9.equals(bigIntegerModelValue16);
        double double21 = bigIntegerModelValue9.asDouble(0.0d);
        long long23 = bigIntegerModelValue9.asLong((long) 52);
        boolean boolean25 = bigIntegerModelValue9.asBoolean(false);
        boolean boolean26 = bigIntegerModelValue4.equals(bigIntegerModelValue9);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode28 = bigIntegerModelValue9.requireChild("");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test07853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07853");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode1);
        org.jboss.dmr.ModelValue modelValue16 = propertyModelValue15.protect();
        java.lang.String str17 = propertyModelValue15.asString();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode19 = propertyModelValue15.requireChild("(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\" => (\"hi!\" => 0.0))");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\" => (\"hi!\" => 0.0))' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(\"Expression \\\"true\\\"\" => (\"EXPRESSION_VALUE\" => 35))" + "'", str17, "(\"Expression \\\"true\\\"\" => (\"EXPRESSION_VALUE\" => 35))");
    }

    @Test
    public void test07854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07854");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"");
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.setExpression("AAAAIA==");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        java.lang.String str10 = valueExpression8.getExpressionString();
        java.math.BigDecimal bigDecimal11 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue12 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal11);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue13 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal11);
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.set("\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"", bigDecimal11);
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger18 = booleanModelValue17.asBigInteger();
        byte[] byteArray19 = booleanModelValue17.asBytes();
        org.jboss.dmr.ValueExpression valueExpression20 = booleanModelValue17.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode21 = modelNode1.add("(\"expression \\\"hi!\\\"\" => bytes {\n    0x01\n})", valueExpression20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0" + "'", str10, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertNotNull(valueExpression20);
    }

    @Test
    public void test07855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07855");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        boolean boolean6 = bigIntegerModelValue4.asBoolean();
        long long7 = bigIntegerModelValue4.asLong();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test07856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07856");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        long long4 = objectModelValue0.asLong((long) 0);
        org.jboss.dmr.ModelValue modelValue5 = objectModelValue0.copy();
        boolean boolean6 = objectModelValue0.asBoolean();
        java.util.List<org.jboss.dmr.Property> propertyList7 = objectModelValue0.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(propertyList7);
    }

    @Test
    public void test07857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07857");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("1");
        boolean boolean5 = objectModelValue0.asBoolean();
        int int7 = objectModelValue0.asInt(0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList8 = objectModelValue0.asList();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.setExpression("hi!", "hi!");
        java.lang.String str14 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode10);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode10.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode17 = modelNode10.set((double) 0);
        org.jboss.dmr.ModelNode modelNode18 = modelNode10.clear();
        org.jboss.dmr.IntModelValue intModelValue21 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long23 = intModelValue21.asLong((long) 'b');
        java.lang.String str24 = intModelValue21.asString();
        java.math.BigInteger bigInteger25 = intModelValue21.asBigInteger();
        org.jboss.dmr.ModelNode modelNode26 = modelNode18.add("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", bigInteger25);
        org.jboss.dmr.Property property28 = new org.jboss.dmr.Property("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => bytes {\n    0xb6, 0xbb, 0x9e\n})", modelNode18, true);
        boolean boolean29 = objectModelValue0.equals((java.lang.Object) property28);
        org.jboss.dmr.ModelNode modelNode30 = objectModelValue0.asObject();
        // The following exception was thrown during execution in test generation
        try {
            double double31 = objectModelValue0.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(modelNodeList8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str14, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "32" + "'", str24, "32");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(modelNode30);
    }

    @Test
    public void test07858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07858");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        double double6 = booleanModelValue1.asDouble((double) 1.0f);
        boolean boolean8 = booleanModelValue1.asBoolean(false);
        int int10 = booleanModelValue1.asInt(1);
        int int12 = booleanModelValue1.asInt(10);
        boolean boolean14 = booleanModelValue1.asBoolean(true);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07859");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode(false);
        org.jboss.dmr.DoubleModelValue doubleModelValue6 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long7 = doubleModelValue6.asLong();
        boolean boolean8 = doubleModelValue6.asBoolean();
        byte[] byteArray9 = doubleModelValue6.asBytes();
        org.jboss.dmr.ModelNode modelNode10 = modelNode4.set(byteArray9);
        org.jboss.dmr.ModelNode modelNode11 = modelNode1.set("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"", byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode13 = modelNode1.require("(\"hi!\" => 0.0)");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '(\"hi!\" => 0.0)' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode11);
    }

    @Test
    public void test07860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07860");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asList();
        org.jboss.dmr.ListModelValue listModelValue6 = new org.jboss.dmr.ListModelValue(modelNodeList5);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue6);
        int int9 = modelNode7.asInt(8);
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode7, true);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode12 = modelNode7.addEmptyObject();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test07861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07861");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) 'a');
        int int9 = longModelValue1.asInt((int) '4');
        java.lang.String str10 = longModelValue1.asString();
        long long11 = longModelValue1.asLong();
        double double12 = longModelValue1.asDouble();
        java.lang.String str13 = longModelValue1.asString();
        double double14 = longModelValue1.asDouble();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test07862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07862");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue6 = new org.jboss.dmr.BigIntegerModelValue(bigInteger5);
        int int7 = bigIntegerModelValue6.asInt();
        java.lang.String str8 = bigIntegerModelValue6.asString();
        boolean boolean9 = bigIntegerModelValue6.asBoolean();
        int int10 = bigIntegerModelValue6.asInt();
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double12 = booleanModelValue11.asDouble();
        org.jboss.dmr.ModelValue modelValue13 = booleanModelValue11.copy();
        java.math.BigInteger bigInteger14 = booleanModelValue11.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue15 = new org.jboss.dmr.BigIntegerModelValue(bigInteger14);
        int int17 = bigIntegerModelValue15.asInt((int) (short) 1);
        boolean boolean18 = bigIntegerModelValue6.equals(bigIntegerModelValue15);
        org.jboss.dmr.ValueExpression valueExpression19 = bigIntegerModelValue15.asExpression();
        java.math.BigDecimal bigDecimal20 = valueExpression19.resolveBigDecimal();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertNotNull(bigDecimal20);
    }

    @Test
    public void test07863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07863");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        boolean boolean12 = listModelValue5.asBoolean(false);
        java.util.List<org.jboss.dmr.Property> propertyList13 = listModelValue5.asPropertyList();
        boolean boolean15 = listModelValue5.has((int) 'J');
        java.io.DataOutput dataOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.writeExternal(dataOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(propertyList13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07864");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        java.io.InputStream inputStream22 = null;
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24);
        org.jboss.dmr.stream.ModelReader modelReader26 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream24);
        java.io.OutputStream outputStream27 = null;
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream(outputStream27);
        outputStream28.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream28);
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        outputStream30.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream34);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelWriter35.writeExpression("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        modelWriter37.close();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter39 = modelWriter37.writeObjectEnd();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: DMR writer have been closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelReader26);
        org.junit.Assert.assertNotNull(modelWriter35);
        org.junit.Assert.assertNotNull(modelWriter37);
    }

    @Test
    public void test07865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07865");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.lang.String str6 = modelNode2.toString();
        org.jboss.dmr.ModelNode modelNode7 = modelNode2.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set(100);
        org.jboss.dmr.ModelNode modelNode10 = modelNode1.add(modelNode2);
        org.jboss.dmr.ModelType modelType12 = org.jboss.dmr.ModelType.BYTES;
        char char13 = modelType12.getTypeChar();
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType12);
        org.jboss.dmr.PropertyModelValue propertyModelValue16 = new org.jboss.dmr.PropertyModelValue("Expression \"1\"", modelNode1, false);
        org.jboss.dmr.ModelNode modelNode17 = propertyModelValue16.asObject();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode22.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode22, false);
        boolean boolean27 = propertyModelValue25.has("10.0");
        org.jboss.dmr.ModelNode modelNode29 = propertyModelValue25.getChild(0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList30 = propertyModelValue25.asList();
        boolean boolean31 = propertyModelValue16.equals(propertyModelValue25);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + modelType12 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType12.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + 'b' + "'", char13 == 'b');
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNodeList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test07866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07866");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        org.jboss.dmr.ObjectModelValue objectModelValue6 = null;
        boolean boolean7 = objectModelValue4.equals(objectModelValue6);
        boolean boolean8 = objectModelValue0.equals(objectModelValue6);
        org.jboss.dmr.ModelNode modelNode10 = objectModelValue0.getChild("{ \"35\" : 0.0 }");
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.add("10.0", (double) 32L);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode13);
    }

    @Test
    public void test07867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07867");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        org.jboss.dmr.ModelValue modelValue11 = listModelValue5.protect();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = listModelValue5.asList();
        long long14 = listModelValue5.asLong((long) (short) 100);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue20);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue20.resolve();
        int int24 = listModelValue20.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList25 = listModelValue20.asPropertyList();
        long long27 = listModelValue20.asLong((long) ' ');
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = listModelValue20.asList();
        boolean boolean29 = listModelValue5.equals(listModelValue20);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test07868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07868");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        java.lang.String str3 = stringModelValue1.asString();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = stringModelValue1.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Expression \"true\"\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Expression \"true\"" + "'", str3, "Expression \"true\"");
    }

    @Test
    public void test07869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07869");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set(property11);
        org.jboss.dmr.ModelType modelType13 = org.jboss.dmr.ModelType.BOOLEAN;
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.set(modelType13);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(modelType16);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        org.jboss.dmr.ModelNode modelNode24 = modelNode17.set(property23);
        org.jboss.dmr.ModelNode modelNode25 = property23.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue(property23);
        java.util.List<org.jboss.dmr.Property> propertyList27 = propertyModelValue26.asPropertyList();
        org.jboss.dmr.ModelNode modelNode29 = propertyModelValue26.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode30 = modelNode29.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue33 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long34 = booleanModelValue33.asLong();
        org.jboss.dmr.ValueExpression valueExpression35 = booleanModelValue33.asExpression();
        java.lang.String str36 = valueExpression35.toString();
        org.jboss.dmr.ExpressionValue expressionValue38 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression39 = expressionValue38.asExpression();
        boolean boolean40 = valueExpression35.equals(valueExpression39);
        org.jboss.dmr.LongModelValue longModelValue42 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal43 = longModelValue42.asBigDecimal();
        int int44 = longModelValue42.asInt();
        org.jboss.dmr.ValueExpression valueExpression45 = longModelValue42.asExpression();
        boolean boolean46 = valueExpression39.equals(valueExpression45);
        int int47 = valueExpression45.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue49 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression50 = expressionValue49.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver51 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str52 = valueExpression50.resolveString(valueExpressionResolver51);
        java.math.BigInteger bigInteger53 = valueExpression45.resolveBigInteger(valueExpressionResolver51);
        org.jboss.dmr.ModelNode modelNode54 = modelNode29.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression45);
        org.jboss.dmr.ModelNode modelNode57 = modelNode54.add("AQ==", false);
        org.jboss.dmr.ModelType modelType58 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode59 = new org.jboss.dmr.ModelNode(modelType58);
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.set("hi!", 0.0d);
        org.jboss.dmr.Property property65 = new org.jboss.dmr.Property("", modelNode64);
        org.jboss.dmr.ModelNode modelNode66 = modelNode59.set(property65);
        org.jboss.dmr.PropertyModelValue propertyModelValue67 = new org.jboss.dmr.PropertyModelValue(property65);
        org.jboss.dmr.PropertyModelValue propertyModelValue68 = new org.jboss.dmr.PropertyModelValue(property65);
        org.jboss.dmr.ModelNode modelNode69 = modelNode54.add(property65);
        org.jboss.dmr.ModelNode modelNode70 = modelNode54.addEmptyObject();
        org.jboss.dmr.ModelNode modelNode71 = modelNode12.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3CUQ/8AAAAAAAAHg=", modelNode54);
        org.jboss.dmr.ModelNode modelNode73 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue75 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger76 = booleanModelValue75.asBigInteger();
        org.jboss.dmr.ModelNode modelNode77 = modelNode73.add(bigInteger76);
        org.jboss.dmr.ModelNode modelNode78 = modelNode73.clone();
        org.jboss.dmr.BooleanModelValue booleanModelValue79 = org.jboss.dmr.BooleanModelValue.TRUE;
        java.math.BigInteger bigInteger80 = booleanModelValue79.asBigInteger();
        boolean boolean81 = booleanModelValue79.asBoolean();
        java.math.BigInteger bigInteger82 = booleanModelValue79.asBigInteger();
        org.jboss.dmr.ModelNode modelNode83 = modelNode78.add(bigInteger82);
        org.jboss.dmr.Property property84 = new org.jboss.dmr.Property("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", modelNode78);
        org.jboss.dmr.ModelNode modelNode85 = modelNode71.set(property84);
        org.jboss.dmr.ModelNode modelNode86 = property84.getValue();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + modelType13 + "' != '" + org.jboss.dmr.ModelType.BOOLEAN + "'", modelType13.equals(org.jboss.dmr.ModelType.BOOLEAN));
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType16.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(propertyList27);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(booleanModelValue33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(valueExpression35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Expression \"true\"" + "'", str36, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(valueExpression45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(valueExpression50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertTrue("'" + modelType58 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType58.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(booleanModelValue75);
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(modelNode77);
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertNotNull(booleanModelValue79);
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertNotNull(modelNode85);
        org.junit.Assert.assertNotNull(modelNode86);
    }

    @Test
    public void test07870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07870");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream5 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3, (int) (byte) -1);
        outputStream3.write((int) 'Z');
    }

    @Test
    public void test07871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07871");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean5 = stringModelValue1.equals(stringModelValue3);
        byte[] byteArray6 = stringModelValue1.asBytes();
        java.lang.String str7 = stringModelValue1.asString();
        byte[] byteArray8 = stringModelValue1.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = org.jboss.dmr.Base64.encodeBytes(byteArray8, 112, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 112");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str7, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
    }

    @Test
    public void test07872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07872");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelNode modelNode7 = modelNode3.setExpression("hi!", "(\"hi!\" => 0.0)");
        org.jboss.dmr.ModelNode modelNode9 = modelNode3.set(10L);
        org.jboss.dmr.ModelType modelType10 = modelNode9.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode12 = modelNode9.remove("rO0ABXQABiJBQT09Ig==");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType10.equals(org.jboss.dmr.ModelType.LONG));
    }

    @Test
    public void test07873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07873");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        org.jboss.dmr.ModelType modelType11 = longModelValue1.getType();
        double double13 = longModelValue1.asDouble((double) 100.0f);
        long long14 = longModelValue1.asLong();
        boolean boolean16 = longModelValue1.asBoolean(true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType11.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test07874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07874");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        byte[] byteArray21 = org.jboss.dmr.Base64.decode("true");
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int26 = inputStream18.read(byteArray21, (int) 'l', 0);
        org.jboss.dmr.stream.ModelReader modelReader27 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory29 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream30 = null;
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream(inputStream30, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream32);
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory29.newModelReader((java.io.InputStream) inputStream33);
        java.io.OutputStream outputStream35 = null;
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream(outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream36);
        outputStream36.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelStreamFactory29.newModelWriter((java.io.OutputStream) outputStream36);
        outputStream36.write(2);
        org.jboss.dmr.stream.ModelWriter modelWriter43 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream36);
        org.jboss.dmr.stream.ModelWriter modelWriter45 = modelWriter43.writeBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter46 = modelWriter45.writePropertyStart();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(modelReader27);
        org.junit.Assert.assertNotNull(modelStreamFactory29);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter43);
        org.junit.Assert.assertNotNull(modelWriter45);
    }

    @Test
    public void test07875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07875");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asList();
        org.jboss.dmr.ListModelValue listModelValue15 = new org.jboss.dmr.ListModelValue(modelNodeList14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue15);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue15.resolve();
        int int19 = listModelValue15.asInt((int) (byte) 100);
        boolean boolean20 = bigDecimalModelValue7.equals((java.lang.Object) listModelValue15);
        org.jboss.dmr.ModelValue modelValue21 = listModelValue15.resolve();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property22 = listModelValue15.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(modelValue21);
    }

    @Test
    public void test07876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07876");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long4 = modelNode3.asLong();
        org.jboss.dmr.ValueExpression valueExpression5 = modelNode3.asExpression();
        java.math.BigDecimal bigDecimal6 = valueExpression5.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(valueExpression5);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode10 = modelNode9.clear();
        boolean boolean11 = valueExpression5.equals((java.lang.Object) modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.setEmptyObject();
        org.jboss.dmr.DoubleModelValue doubleModelValue14 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        boolean boolean15 = doubleModelValue14.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression16 = doubleModelValue14.asExpression();
        org.jboss.dmr.ModelNode modelNode17 = modelNode12.set(valueExpression16);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertNotNull(modelNode17);
    }

    @Test
    public void test07877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07877");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) (short) 100);
        boolean boolean9 = longModelValue1.asBoolean(true);
        boolean boolean11 = longModelValue1.asBoolean(true);
        byte[] byteArray12 = longModelValue1.asBytes();
        long long14 = longModelValue1.asLong((long) '4');
        java.math.BigDecimal bigDecimal15 = longModelValue1.asBigDecimal();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal15);
    }

    @Test
    public void test07878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07878");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        long long8 = bytesModelValue4.asLong((long) (short) 1);
        long long9 = bytesModelValue4.asLong();
        java.math.BigDecimal bigDecimal10 = bytesModelValue4.asBigDecimal();
        java.lang.String str11 = bytesModelValue4.toString();
        long long12 = bytesModelValue4.asLong();
        double double14 = bytesModelValue4.asDouble((double) (short) 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}" + "'", str11, "bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4.9E-324d + "'", double14 == 4.9E-324d);
    }

    @Test
    public void test07879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07879");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        java.math.BigInteger bigInteger6 = bigIntegerModelValue4.asBigInteger();
        java.math.BigInteger bigInteger7 = bigIntegerModelValue4.asBigInteger();
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        org.jboss.dmr.Validation.validate(modelNode9, "[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelType modelType15 = modelNode9.getType();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode9.asListOrEmpty();
        boolean boolean17 = bigIntegerModelValue4.equals((java.lang.Object) modelNodeList16);
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList16);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType15.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07880");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression5 = stringModelValue4.asExpression();
        boolean boolean7 = stringModelValue4.equals((java.lang.Object) (-1.0d));
        java.lang.String str8 = stringModelValue4.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent9 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean10 = stringModelValue4.equals((java.lang.Object) modelEvent9);
        org.jboss.dmr.StringModelValue stringModelValue12 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue14 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean17 = stringModelValue14.equals(stringModelValue16);
        byte[] byteArray18 = stringModelValue16.asBytes();
        java.lang.Object obj19 = null;
        boolean boolean20 = stringModelValue16.equals(obj19);
        boolean boolean22 = stringModelValue16.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean23 = stringModelValue12.equals(stringModelValue16);
        boolean boolean24 = stringModelValue4.equals(stringModelValue16);
        boolean boolean25 = stringModelValue1.equals(stringModelValue16);
        org.jboss.dmr.StringModelValue stringModelValue27 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression28 = stringModelValue27.asExpression();
        boolean boolean30 = stringModelValue27.equals((java.lang.Object) (-1.0d));
        java.lang.String str31 = stringModelValue27.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent32 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean33 = stringModelValue27.equals((java.lang.Object) modelEvent32);
        org.jboss.dmr.StringModelValue stringModelValue35 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue37 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue39 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean40 = stringModelValue37.equals(stringModelValue39);
        byte[] byteArray41 = stringModelValue39.asBytes();
        java.lang.Object obj42 = null;
        boolean boolean43 = stringModelValue39.equals(obj42);
        boolean boolean45 = stringModelValue39.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean46 = stringModelValue35.equals(stringModelValue39);
        boolean boolean47 = stringModelValue27.equals(stringModelValue39);
        boolean boolean48 = stringModelValue1.equals(stringModelValue39);
        org.jboss.dmr.StringModelValue stringModelValue50 = new org.jboss.dmr.StringModelValue("");
        boolean boolean51 = stringModelValue1.equals(stringModelValue50);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = stringModelValue1.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str8, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent9 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent9.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str31, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent32 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent32.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test07881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07881");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(bigDecimal5);
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.clear();
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.clone();
        int int10 = modelNode7.asInt((int) (byte) 1);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long14 = modelNode13.asLong();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("", modelNode20);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.get(strArray22);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode27.asList();
        org.jboss.dmr.ListModelValue listModelValue29 = new org.jboss.dmr.ListModelValue(modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue29);
        org.jboss.dmr.ModelValue modelValue31 = listModelValue29.resolve();
        int int33 = listModelValue29.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList34 = listModelValue29.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList35 = modelNode23.asPropertyList(propertyList34);
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.set("hi!", 0.0d);
        org.jboss.dmr.Property property41 = new org.jboss.dmr.Property("", modelNode40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.get(strArray42);
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList48 = modelNode47.asList();
        org.jboss.dmr.ListModelValue listModelValue49 = new org.jboss.dmr.ListModelValue(modelNodeList48);
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue49);
        org.jboss.dmr.ModelValue modelValue51 = listModelValue49.resolve();
        int int53 = listModelValue49.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList54 = listModelValue49.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList55 = modelNode43.asPropertyList(propertyList54);
        modelNode23.setNoCopy(modelNode43);
        org.jboss.dmr.ModelNode modelNode57 = modelNode13.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode23);
        org.jboss.dmr.ModelNode modelNode59 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode62 = modelNode59.set("hi!", 0.0d);
        org.jboss.dmr.Property property63 = new org.jboss.dmr.Property("", modelNode62);
        java.lang.String[] strArray64 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode65 = modelNode62.get(strArray64);
        org.jboss.dmr.ModelNode modelNode66 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int67 = modelNode66.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode68 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode71 = modelNode68.setExpression("hi!", "hi!");
        java.lang.String str72 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode68);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList73 = modelNode68.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode74 = modelNode66.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList73);
        org.jboss.dmr.ModelNode modelNode75 = modelNode65.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList73);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList76 = modelNode13.asList(modelNodeList73);
        org.jboss.dmr.PropertyModelValue propertyModelValue78 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode13, false);
        org.jboss.dmr.Property property79 = propertyModelValue78.asProperty();
        org.jboss.dmr.ModelNode modelNode80 = modelNode7.add(property79);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelValue31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(propertyList34);
        org.junit.Assert.assertNotNull(propertyList35);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNodeList48);
        org.junit.Assert.assertNotNull(modelValue51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(propertyList54);
        org.junit.Assert.assertNotNull(propertyList55);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(modelNode65);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str72, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList73);
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertNotNull(modelNodeList76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(modelNode80);
    }

    @Test
    public void test07882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07882");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        java.math.BigInteger bigInteger6 = booleanModelValue1.asBigInteger();
        byte[] byteArray7 = booleanModelValue1.asBytes();
        double double8 = booleanModelValue1.asDouble();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test07883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07883");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        org.jboss.dmr.BooleanModelValue booleanModelValue19 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger20 = booleanModelValue19.asBigInteger();
        byte[] byteArray21 = booleanModelValue19.asBytes();
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "1L");
        boolean boolean25 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "[(\"hi!\" => 0.0)]");
        outputStream17.write(byteArray21);
        outputStream17.write((int) (short) 0);
        outputStream17.resumeEncoding();
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream17);
        java.io.Reader reader31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelReader modelReader32 = modelStreamFactory1.newModelReader(reader31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(booleanModelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(modelWriter30);
    }

    @Test
    public void test07884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07884");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelNode modelNode7 = modelNode3.setExpression("hi!", "(\"hi!\" => 0.0)");
        boolean boolean9 = modelNode3.hasDefined(0);
        org.jboss.dmr.ObjectModelValue objectModelValue10 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode11 = objectModelValue10.asObject();
        java.util.Set<java.lang.String> strSet12 = objectModelValue10.getKeys();
        boolean boolean14 = objectModelValue10.has((int) 'a');
        boolean boolean16 = objectModelValue10.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue17 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode18 = objectModelValue17.asObject();
        java.util.Set<java.lang.String> strSet19 = objectModelValue17.getKeys();
        boolean boolean21 = objectModelValue17.has((int) 'a');
        boolean boolean22 = objectModelValue10.equals(objectModelValue17);
        org.jboss.dmr.ModelNode modelNode23 = objectModelValue17.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList24 = objectModelValue17.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList25 = modelNode3.asPropertyList(propertyList24);
        org.jboss.dmr.ModelNode modelNode28 = modelNode3.set("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => bytes {\n    0xb6, 0xbb, 0x9e\n})", 0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(modelNode28);
    }

    @Test
    public void test07885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07885");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.setEmptyList();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.PropertyModelValue propertyModelValue18 = new org.jboss.dmr.PropertyModelValue("0.0", modelNode17);
        java.lang.String str20 = modelNode17.asString("\"\\\"1L\\\"\"");
        org.jboss.dmr.ModelNode modelNode21 = modelNode14.addNoCopy(modelNode17);
        java.util.List<org.jboss.dmr.Property> propertyList22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.Property> propertyList23 = modelNode17.asPropertyList(propertyList22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "true" + "'", str20, "true");
        org.junit.Assert.assertNotNull(modelNode21);
    }

    @Test
    public void test07886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07886");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ListModelValue listModelValue16 = new org.jboss.dmr.ListModelValue(modelNodeList15);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue16);
        org.jboss.dmr.ModelValue modelValue18 = listModelValue16.resolve();
        int int20 = listModelValue16.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList21 = listModelValue16.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue16.asPropertyList();
        boolean boolean23 = listModelValue5.equals(listModelValue16);
        int int24 = listModelValue16.asInt();
        java.io.PrintWriter printWriter25 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue16.format(printWriter25, (int) 'i', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(propertyList21);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test07887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07887");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int8 = bytesModelValue4.asInt((int) 'a');
        int int9 = bytesModelValue4.asInt();
        byte[] byteArray10 = bytesModelValue4.asBytes();
        double double12 = bytesModelValue4.asDouble((-1.0d));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 4.9E-324d + "'", double12 == 4.9E-324d);
    }

    @Test
    public void test07888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07888");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("(\"Expression \\\"true\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0)))", false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory5 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream6 = null;
        org.jboss.dmr.Base64.InputStream inputStream8 = new org.jboss.dmr.Base64.InputStream(inputStream6, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str11 = longModelValue10.asString();
        byte[] byteArray12 = longModelValue10.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue13 = new org.jboss.dmr.BytesModelValue(byteArray12);
        int int16 = inputStream8.read(byteArray12, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream8, (-1));
        org.jboss.dmr.stream.ModelReader modelReader19 = modelStreamFactory5.newModelReader((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = modelNodeFactory0.readFrom((java.io.InputStream) inputStream23, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelStreamFactory5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(modelReader19);
    }

    @Test
    public void test07889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07889");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelValue modelValue11 = propertyModelValue10.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue10.asList();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.lang.String str18 = modelNode14.toString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode14.set(property25);
        org.jboss.dmr.PropertyModelValue propertyModelValue28 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode26, false);
        org.jboss.dmr.Property property29 = propertyModelValue28.asProperty();
        boolean boolean30 = propertyModelValue10.equals(propertyModelValue28);
        org.jboss.dmr.ModelValue modelValue31 = propertyModelValue28.protect();
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.set("hi!", 0.0d);
        java.lang.String str39 = modelNode35.toString();
        org.jboss.dmr.ModelNode modelNode40 = modelNode35.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode42 = modelNode35.set(100);
        org.jboss.dmr.ModelNode modelNode43 = modelNode34.add(modelNode35);
        org.jboss.dmr.ModelType modelType45 = org.jboss.dmr.ModelType.BYTES;
        char char46 = modelType45.getTypeChar();
        org.jboss.dmr.ModelNode modelNode47 = modelNode34.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType45);
        org.jboss.dmr.PropertyModelValue propertyModelValue49 = new org.jboss.dmr.PropertyModelValue("Expression \"1\"", modelNode34, false);
        java.util.Set<java.lang.String> strSet50 = modelNode34.keys();
        org.jboss.dmr.PropertyModelValue propertyModelValue52 = new org.jboss.dmr.PropertyModelValue("\"\\\"1L\\\"\"", modelNode34, true);
        boolean boolean53 = propertyModelValue28.equals(propertyModelValue52);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode55 = propertyModelValue28.getChild("big decimal 1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(\"hi!\" => 0.0)" + "'", str18, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(modelValue31);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(\"hi!\" => 0.0)" + "'", str39, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertTrue("'" + modelType45 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType45.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char46 + "' != '" + 'b' + "'", char46 == 'b');
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test07890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07890");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression5 = stringModelValue4.asExpression();
        boolean boolean7 = stringModelValue4.equals((java.lang.Object) (-1.0d));
        java.lang.String str8 = stringModelValue4.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent9 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean10 = stringModelValue4.equals((java.lang.Object) modelEvent9);
        org.jboss.dmr.StringModelValue stringModelValue12 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue14 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean17 = stringModelValue14.equals(stringModelValue16);
        byte[] byteArray18 = stringModelValue16.asBytes();
        java.lang.Object obj19 = null;
        boolean boolean20 = stringModelValue16.equals(obj19);
        boolean boolean22 = stringModelValue16.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean23 = stringModelValue12.equals(stringModelValue16);
        boolean boolean24 = stringModelValue4.equals(stringModelValue16);
        boolean boolean25 = stringModelValue1.equals(stringModelValue16);
        org.jboss.dmr.StringModelValue stringModelValue27 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray28 = stringModelValue27.asBytes();
        org.jboss.dmr.LongModelValue longModelValue30 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal31 = longModelValue30.asBigDecimal();
        byte[] byteArray32 = longModelValue30.asBytes();
        boolean boolean33 = stringModelValue27.equals((java.lang.Object) byteArray32);
        java.lang.String str34 = stringModelValue27.toString();
        boolean boolean35 = stringModelValue16.equals(stringModelValue27);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = stringModelValue27.asBoolean(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str8, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent9 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent9.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\"Expression \\\"true\\\"\"" + "'", str34, "\"Expression \\\"true\\\"\"");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07891");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str2 = expressionValue1.toString();
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.set("hi!", 0.0d);
        org.jboss.dmr.Property property8 = new org.jboss.dmr.Property("", modelNode7);
        boolean boolean9 = expressionValue1.equals((java.lang.Object) property8);
        java.lang.String str10 = expressionValue1.asString();
        java.io.DataOutput dataOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.writeExternal(dataOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "expression \"hi!\"" + "'", str2, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test07892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07892");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str4 = modelNode2.asString("true");
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.Property> propertyList6 = modelNode2.asPropertyListOrEmpty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10" + "'", str4, "10");
    }

    @Test
    public void test07893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07893");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = propertyModelValue7.getChild("(\"Expression \\\"true\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0)))");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelValue12);
    }

    @Test
    public void test07894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07894");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode3 = objectModelValue0.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue0.getChild("[(\"hi!\" => 0.0)]");
        java.util.List<org.jboss.dmr.Property> propertyList6 = objectModelValue0.asPropertyList();
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue0.protect();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode11 = modelNode10.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue12 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue12.asObject();
        java.util.Set<java.lang.String> strSet14 = objectModelValue12.getKeys();
        boolean boolean16 = objectModelValue12.has((int) 'a');
        boolean boolean18 = objectModelValue12.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue19 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode20 = objectModelValue19.asObject();
        java.util.Set<java.lang.String> strSet21 = objectModelValue19.getKeys();
        boolean boolean23 = objectModelValue19.has((int) 'a');
        boolean boolean24 = objectModelValue12.equals(objectModelValue19);
        org.jboss.dmr.ModelNode modelNode25 = objectModelValue19.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = objectModelValue19.asList();
        org.jboss.dmr.ModelNode modelNode27 = modelNode10.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList26);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode10, true);
        org.jboss.dmr.ModelNode modelNode32 = modelNode10.add("H4sIAAAAAAAAANv/gQEMALshig4IAAAA", (double) 10);
        boolean boolean33 = objectModelValue0.equals((java.lang.Object) modelNode32);
        org.jboss.dmr.BooleanModelValue booleanModelValue35 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double36 = booleanModelValue35.asDouble();
        org.jboss.dmr.ModelValue modelValue37 = booleanModelValue35.copy();
        java.math.BigInteger bigInteger38 = booleanModelValue35.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue39 = new org.jboss.dmr.BigIntegerModelValue(bigInteger38);
        int int41 = bigIntegerModelValue39.asInt((int) (short) 1);
        int int42 = bigIntegerModelValue39.asInt();
        org.jboss.dmr.BooleanModelValue booleanModelValue43 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double44 = booleanModelValue43.asDouble();
        org.jboss.dmr.ModelValue modelValue45 = booleanModelValue43.copy();
        java.math.BigInteger bigInteger46 = booleanModelValue43.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue47 = new org.jboss.dmr.BigIntegerModelValue(bigInteger46);
        double double49 = bigIntegerModelValue47.asDouble((double) 'b');
        java.lang.String str50 = bigIntegerModelValue47.asString();
        org.jboss.dmr.ValueExpression valueExpression51 = bigIntegerModelValue47.asExpression();
        boolean boolean53 = bigIntegerModelValue47.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue54 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double55 = booleanModelValue54.asDouble();
        org.jboss.dmr.ModelValue modelValue56 = booleanModelValue54.copy();
        java.math.BigInteger bigInteger57 = booleanModelValue54.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue58 = new org.jboss.dmr.BigIntegerModelValue(bigInteger57);
        java.lang.String str59 = bigIntegerModelValue58.asString();
        long long61 = bigIntegerModelValue58.asLong(32L);
        double double62 = bigIntegerModelValue58.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue63 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double64 = booleanModelValue63.asDouble();
        org.jboss.dmr.ModelValue modelValue65 = booleanModelValue63.copy();
        java.math.BigInteger bigInteger66 = booleanModelValue63.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue67 = new org.jboss.dmr.BigIntegerModelValue(bigInteger66);
        double double69 = bigIntegerModelValue67.asDouble((double) 'b');
        boolean boolean70 = bigIntegerModelValue58.equals(bigIntegerModelValue67);
        org.jboss.dmr.BooleanModelValue booleanModelValue71 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double72 = booleanModelValue71.asDouble();
        org.jboss.dmr.ModelValue modelValue73 = booleanModelValue71.copy();
        java.math.BigInteger bigInteger74 = booleanModelValue71.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue75 = new org.jboss.dmr.BigIntegerModelValue(bigInteger74);
        long long77 = bigIntegerModelValue75.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue78 = null;
        boolean boolean79 = bigIntegerModelValue75.equals(bigIntegerModelValue78);
        boolean boolean80 = bigIntegerModelValue58.equals(bigIntegerModelValue75);
        java.math.BigDecimal bigDecimal81 = bigIntegerModelValue58.asBigDecimal();
        boolean boolean82 = bigIntegerModelValue47.equals(bigIntegerModelValue58);
        int int84 = bigIntegerModelValue58.asInt((int) (byte) -1);
        boolean boolean85 = bigIntegerModelValue39.equals(bigIntegerModelValue58);
        long long86 = bigIntegerModelValue58.asLong();
        java.math.BigDecimal bigDecimal87 = bigIntegerModelValue58.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode88 = modelNode32.add("expression \"hi!\"", bigDecimal87);
        java.io.OutputStream outputStream89 = null;
        org.jboss.dmr.Base64.OutputStream outputStream90 = new org.jboss.dmr.Base64.OutputStream(outputStream89);
        org.jboss.dmr.Base64.OutputStream outputStream91 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream90);
        // The following exception was thrown during execution in test generation
        try {
            modelNode88.writeExternal((java.io.OutputStream) outputStream91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(propertyList6);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(booleanModelValue35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(valueExpression51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(booleanModelValue54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue56);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue65);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(booleanModelValue71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue73);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(modelNode88);
    }

    @Test
    public void test07895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07895");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        byte[] byteArray5 = stringModelValue3.asBytes();
        org.jboss.dmr.ValueExpression valueExpression6 = stringModelValue3.asExpression();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long9 = modelNode8.asLong();
        org.jboss.dmr.ValueExpression valueExpression10 = modelNode8.asExpression();
        java.math.BigDecimal bigDecimal11 = valueExpression10.resolveBigDecimal();
        java.lang.String str12 = valueExpression10.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        long long16 = longModelValue14.asLong((long) (short) 0);
        java.lang.String str17 = longModelValue14.asString();
        org.jboss.dmr.ValueExpression valueExpression18 = longModelValue14.asExpression();
        int int19 = valueExpression18.resolveInt();
        boolean boolean20 = valueExpression10.equals(valueExpression18);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long23 = modelNode22.asLong();
        org.jboss.dmr.ValueExpression valueExpression24 = modelNode22.asExpression();
        java.math.BigDecimal bigDecimal25 = valueExpression24.resolveBigDecimal();
        java.lang.String str26 = valueExpression24.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        long long30 = longModelValue28.asLong((long) (short) 0);
        java.lang.String str31 = longModelValue28.asString();
        org.jboss.dmr.ValueExpression valueExpression32 = longModelValue28.asExpression();
        int int33 = valueExpression32.resolveInt();
        boolean boolean34 = valueExpression24.equals(valueExpression32);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver35 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue37 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long38 = booleanModelValue37.asLong();
        org.jboss.dmr.ValueExpression valueExpression39 = booleanModelValue37.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue40 = new org.jboss.dmr.ExpressionValue(valueExpression39);
        java.lang.String str41 = valueExpression39.getExpressionString();
        java.lang.String str42 = valueExpressionResolver35.resolve(valueExpression39);
        long long43 = valueExpression32.resolveLong(valueExpressionResolver35);
        org.jboss.dmr.ExpressionValue expressionValue45 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue47 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean48 = expressionValue45.equals(expressionValue47);
        org.jboss.dmr.ExpressionValue expressionValue50 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue52 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean53 = expressionValue50.equals(expressionValue52);
        boolean boolean54 = expressionValue45.equals(expressionValue52);
        org.jboss.dmr.ValueExpression valueExpression55 = expressionValue52.asExpression();
        java.lang.String str56 = valueExpressionResolver35.resolve(valueExpression55);
        java.lang.String str57 = valueExpression10.resolveString(valueExpressionResolver35);
        java.lang.String str58 = valueExpression6.resolveString(valueExpressionResolver35);
        java.io.ObjectOutput objectOutput59 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression6.writeExternal(objectOutput59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0" + "'", str12, "1.0");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1.0" + "'", str26, "1.0");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver35);
        org.junit.Assert.assertNotNull(booleanModelValue37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(valueExpression39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "true" + "'", str41, "true");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "true" + "'", str42, "true");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(valueExpression55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1.0" + "'", str57, "1.0");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str58, "(\"\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test07896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07896");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("[(\"hi!\" => 0.0)]");
        java.lang.String str2 = expressionValue1.asString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str2, "[(\"hi!\" => 0.0)]");
    }

    @Test
    public void test07897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07897");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        boolean boolean11 = propertyModelValue7.has("AAAAIA==");
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        java.lang.String str13 = propertyModelValue7.asString();
        org.jboss.dmr.ModelNode modelNode15 = propertyModelValue7.getChild((int) (byte) 0);
        java.util.List<org.jboss.dmr.Property> propertyList16 = propertyModelValue7.asPropertyList();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger17 = propertyModelValue7.asBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=\" => (\"hi!\" => expression \"hi!\"))" + "'", str13, "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=\" => (\"hi!\" => expression \"hi!\"))");
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(propertyList16);
    }

    @Test
    public void test07898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07898");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode4 = modelNode3.setEmptyList();
        boolean boolean6 = modelNode4.asBoolean(true);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07899");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((-1.0d));
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.clear();
        org.jboss.dmr.Property property4 = new org.jboss.dmr.Property("35", modelNode3);
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set(112);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode6);
    }

    @Test
    public void test07900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07900");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromJSONString("org.jboss.dmr.stream.ModelException: (\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unexpected character 'o' while reading DMR stream");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07901");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj1 = org.jboss.dmr.Base64.decodeToObject("{\n    \"EXPRESSION_VALUE\" : {\n        \"\" : {\n            \"hi!\" : 0.0\n        }\n    }\n}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Bad Base64 input character at 0: 123(decimal)");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07902");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        int int6 = longModelValue1.asInt();
        int int7 = longModelValue1.asInt();
        long long9 = longModelValue1.asLong(2L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test07903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07903");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode22 = modelNode7.setExpression("\"(\\\"hi!\\\" => 0.0)\"", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelNode modelNode25 = modelNode7.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", (double) 0.0f);
        boolean boolean27 = modelNode7.hasDefined((int) 'b');
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger28 = modelNode7.asBigIntegerOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07904");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        boolean boolean7 = booleanModelValue1.equals((java.lang.Object) '4');
        int int9 = booleanModelValue1.asInt((int) (short) 100);
        byte[] byteArray10 = booleanModelValue1.asBytes();
        boolean boolean12 = org.jboss.dmr.Base64.encodeToFile(byteArray10, "{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined,\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => undefined}");
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07905");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        int int11 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode("(\"hi!\" => 0.0)");
        java.io.OutputStream outputStream14 = null;
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream(outputStream14);
        outputStream15.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream15);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream17);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue23 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger24 = booleanModelValue23.asBigInteger();
        byte[] byteArray25 = booleanModelValue23.asBytes();
        org.jboss.dmr.ModelNode modelNode26 = modelNode20.set("expression \"hi!\"", byteArray25);
        outputStream17.write(byteArray25);
        org.jboss.dmr.ModelNode modelNode28 = modelNode13.set(byteArray25);
        org.jboss.dmr.ModelNode modelNode31 = modelNode13.setExpression("AAAAAAAAAAE=", "");
        org.jboss.dmr.IntModelValue intModelValue34 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str35 = intModelValue34.asString();
        double double37 = intModelValue34.asDouble((double) 2);
        java.math.BigDecimal bigDecimal38 = intModelValue34.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode(bigDecimal38);
        org.jboss.dmr.ModelNode modelNode40 = modelNode13.set("{}", bigDecimal38);
        modelNode1.setNoCopy(modelNode13);
        org.jboss.dmr.ModelNode modelNode42 = modelNode1.asObject();
        org.jboss.dmr.ModelNode modelNode43 = modelNode1.resolve();
        java.io.PrintWriter printWriter44 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode1.format(printWriter44, 52, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(booleanModelValue23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "32" + "'", str35, "32");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 32.0d + "'", double37 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode43);
    }

    @Test
    public void test07906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07906");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        int int3 = booleanModelValue1.asInt();
        int int5 = booleanModelValue1.asInt(1);
        double double7 = booleanModelValue1.asDouble((double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode9 = booleanModelValue1.insertChild(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test07907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07907");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.lang.String str11 = modelNode7.toString();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(100);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        java.lang.String str28 = modelNode27.asString();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        boolean boolean39 = listModelValue34.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = listModelValue34.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = modelNode27.asList(modelNodeList40);
        org.jboss.dmr.ModelNode modelNode42 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList40);
        boolean boolean43 = bigIntegerModelValue4.equals((java.lang.Object) modelNode14);
        int int44 = bigIntegerModelValue4.asInt();
        int int45 = bigIntegerModelValue4.asInt();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode47 = bigIntegerModelValue4.removeChild((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"hi!\" => 0.0)" + "'", str11, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str28, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(modelNodeList40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test07908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07908");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = propertyModelValue10.asList();
        java.util.List<org.jboss.dmr.Property> propertyList12 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelValue modelValue13 = propertyModelValue10.protect();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = propertyModelValue10.asBoolean(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertNotNull(modelValue13);
    }

    @Test
    public void test07909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07909");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("(\"rO0ABXA=\" => bytes {\n    0x40, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n})");
        org.junit.Assert.assertNotNull(modelNode1);
    }

    @Test
    public void test07910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07910");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        long long10 = bigIntegerModelValue4.asLong((long) '4');
        org.jboss.dmr.ValueExpression valueExpression11 = bigIntegerModelValue4.asExpression();
        java.lang.String str12 = bigIntegerModelValue4.asString();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
    }

    @Test
    public void test07911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07911");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        double double9 = bigIntegerModelValue4.asDouble();
        long long10 = bigIntegerModelValue4.asLong();
        java.math.BigInteger bigInteger11 = bigIntegerModelValue4.asBigInteger();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(bigInteger11);
    }

    @Test
    public void test07912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07912");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        java.math.BigInteger bigInteger3 = booleanModelValue1.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double6 = booleanModelValue5.asDouble();
        org.jboss.dmr.ModelValue modelValue7 = booleanModelValue5.copy();
        java.math.BigInteger bigInteger8 = booleanModelValue5.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue9 = new org.jboss.dmr.BigIntegerModelValue(bigInteger8);
        int int11 = bigIntegerModelValue9.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue12 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double13 = booleanModelValue12.asDouble();
        org.jboss.dmr.ModelValue modelValue14 = booleanModelValue12.copy();
        java.math.BigInteger bigInteger15 = booleanModelValue12.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue16 = new org.jboss.dmr.BigIntegerModelValue(bigInteger15);
        java.lang.String str17 = bigIntegerModelValue16.asString();
        java.math.BigInteger bigInteger18 = bigIntegerModelValue16.asBigInteger();
        boolean boolean19 = bigIntegerModelValue9.equals(bigIntegerModelValue16);
        double double21 = bigIntegerModelValue9.asDouble(0.0d);
        long long23 = bigIntegerModelValue9.asLong((long) 52);
        boolean boolean25 = bigIntegerModelValue9.asBoolean(false);
        boolean boolean26 = bigIntegerModelValue4.equals(bigIntegerModelValue9);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) bigIntegerModelValue9);
        int int29 = bigIntegerModelValue9.asInt((int) '4');
        java.lang.String str30 = bigIntegerModelValue9.asString();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
    }

    @Test
    public void test07913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07913");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue7);
        org.jboss.dmr.ModelValue modelValue9 = listModelValue7.resolve();
        int int11 = listModelValue7.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList12 = listModelValue7.asPropertyList();
        boolean boolean13 = intModelValue1.equals((java.lang.Object) listModelValue7);
        java.math.BigDecimal bigDecimal14 = intModelValue1.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) intModelValue1);
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long18 = booleanModelValue17.asLong();
        org.jboss.dmr.ValueExpression valueExpression19 = booleanModelValue17.asExpression();
        boolean boolean21 = valueExpression19.equals((java.lang.Object) 'p');
        org.jboss.dmr.ExpressionValue expressionValue22 = new org.jboss.dmr.ExpressionValue(valueExpression19);
        org.jboss.dmr.BooleanModelValue booleanModelValue23 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double24 = booleanModelValue23.asDouble();
        org.jboss.dmr.ModelValue modelValue25 = booleanModelValue23.copy();
        java.math.BigInteger bigInteger26 = booleanModelValue23.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue27 = new org.jboss.dmr.BigIntegerModelValue(bigInteger26);
        double double29 = bigIntegerModelValue27.asDouble((double) 'b');
        int int30 = bigIntegerModelValue27.asInt();
        org.jboss.dmr.ValueExpression valueExpression31 = bigIntegerModelValue27.asExpression();
        boolean boolean32 = valueExpression19.equals((java.lang.Object) valueExpression31);
        boolean boolean33 = intModelValue1.equals((java.lang.Object) boolean32);
        long long35 = intModelValue1.asLong(11975582L);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(booleanModelValue23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 32L + "'", long35 == 32L);
    }

    @Test
    public void test07914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07914");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue6 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long7 = booleanModelValue6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = booleanModelValue6.asExpression();
        boolean boolean10 = valueExpression8.equals((java.lang.Object) 'p');
        boolean boolean11 = valueExpression3.equals(valueExpression8);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode(valueExpression3);
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.set(false);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(false);
        org.jboss.dmr.ModelNode modelNode18 = modelNode12.set("\"\\\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\\\"\"", modelNode17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode22.asList();
        java.lang.String str25 = modelNode22.asString("true");
        org.jboss.dmr.ModelNode modelNode27 = modelNode22.set((double) 'a');
        org.jboss.dmr.IntModelValue intModelValue29 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str30 = intModelValue29.asString();
        double double32 = intModelValue29.asDouble((double) 2);
        java.math.BigDecimal bigDecimal33 = intModelValue29.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue34 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal33);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue35 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal33);
        org.jboss.dmr.ModelNode modelNode36 = modelNode27.set(bigDecimal33);
        org.jboss.dmr.ModelType modelType37 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode(modelType37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode(modelType37);
        org.jboss.dmr.ModelNode modelNode40 = modelNode36.set(modelType37);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode46.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue49 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode46, false);
        boolean boolean51 = propertyModelValue49.has("10.0");
        org.jboss.dmr.ModelNode modelNode53 = propertyModelValue49.getChild(0);
        org.jboss.dmr.ModelNode modelNode54 = modelNode53.clone();
        org.jboss.dmr.ModelNode modelNode56 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode59 = modelNode56.set("hi!", 0.0d);
        java.lang.String str60 = modelNode56.toString();
        org.jboss.dmr.ModelNode modelNode61 = modelNode56.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode66 = modelNode63.set("hi!", 0.0d);
        org.jboss.dmr.Property property67 = new org.jboss.dmr.Property("", modelNode66);
        org.jboss.dmr.ModelNode modelNode68 = modelNode56.set(property67);
        org.jboss.dmr.ModelNode modelNode69 = modelNode53.set("\"35\"", modelNode56);
        org.jboss.dmr.ModelNode modelNode72 = modelNode69.setExpression("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BWQAAjMyeA==", "AQ==");
        org.jboss.dmr.ModelNode modelNode75 = modelNode72.set("(\"hi!\" => 0.0)", "");
        org.jboss.dmr.ModelNode modelNode76 = modelNode36.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==", modelNode72);
        boolean boolean77 = modelNode12.equals(modelNode36);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(booleanModelValue6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(\"hi!\" => 0.0)" + "'", str25, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "32" + "'", str30, "32");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 32.0d + "'", double32 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertTrue("'" + modelType37 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType37.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(\"hi!\" => 0.0)" + "'", str60, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test07915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07915");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asListOrEmpty();
        java.lang.String[] strArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = modelNode3.hasDefined(strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
    }

    @Test
    public void test07916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07916");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        boolean boolean8 = typeModelValue5.asBoolean();
        org.jboss.dmr.ModelType modelType9 = typeModelValue5.asType();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory11 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream12 = null;
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream12, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        int int22 = inputStream14.read(byteArray18, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream14, (-1));
        org.jboss.dmr.stream.ModelReader modelReader25 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream24);
        boolean boolean26 = modelReader25.isLong();
        boolean boolean27 = modelReader25.isBigDecimal();
        boolean boolean28 = modelReader25.isDouble();
        boolean boolean29 = modelReader25.isPropertyStart();
        boolean boolean30 = typeModelValue5.equals((java.lang.Object) modelReader25);
        org.jboss.dmr.ObjectModelValue objectModelValue31 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode32 = objectModelValue31.asObject();
        java.util.Set<java.lang.String> strSet33 = objectModelValue31.getKeys();
        org.jboss.dmr.ModelNode modelNode35 = objectModelValue31.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = objectModelValue31.asList();
        org.jboss.dmr.ModelNode modelNode38 = objectModelValue31.getChild("\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\"");
        org.jboss.dmr.ModelNode modelNode40 = modelNode38.add((long) 'a');
        boolean boolean41 = typeModelValue5.equals((java.lang.Object) 'a');
        org.jboss.dmr.ModelType modelType42 = typeModelValue5.asType();
        java.io.PrintWriter printWriter43 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeModelValue5.formatAsJSON(printWriter43, 52, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelStreamFactory11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(modelReader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + modelType42 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType42.equals(org.jboss.dmr.ModelType.PROPERTY));
    }

    @Test
    public void test07917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07917");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        long long5 = objectModelValue0.asLong();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.removeChild("52");
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long10 = modelNode9.asLong();
        org.jboss.dmr.ValueExpression valueExpression11 = modelNode9.asExpression();
        java.math.BigDecimal bigDecimal12 = valueExpression11.resolveBigDecimal();
        java.lang.String str13 = valueExpression11.getExpressionString();
        java.math.BigDecimal bigDecimal14 = valueExpression11.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue15 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal14);
        java.math.BigInteger bigInteger16 = bigDecimalModelValue15.asBigInteger();
        org.jboss.dmr.ObjectModelValue objectModelValue17 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode18 = objectModelValue17.asObject();
        java.util.Set<java.lang.String> strSet19 = objectModelValue17.getKeys();
        org.jboss.dmr.ModelNode modelNode21 = objectModelValue17.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean22 = objectModelValue17.asBoolean();
        org.jboss.dmr.ModelNode modelNode24 = objectModelValue17.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue25 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode26 = objectModelValue25.asObject();
        java.util.Set<java.lang.String> strSet27 = objectModelValue25.getKeys();
        org.jboss.dmr.ModelNode modelNode29 = objectModelValue25.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean30 = objectModelValue25.asBoolean();
        int int32 = objectModelValue25.asInt((int) 'b');
        int int34 = objectModelValue25.asInt((int) '#');
        boolean boolean35 = objectModelValue17.equals(objectModelValue25);
        org.jboss.dmr.ModelValue modelValue36 = objectModelValue25.resolve();
        boolean boolean37 = bigDecimalModelValue15.equals((java.lang.Object) modelValue36);
        boolean boolean38 = objectModelValue0.equals((java.lang.Object) bigDecimalModelValue15);
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode((double) (short) 100);
        org.jboss.dmr.Validation.validate(modelNode40, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory44 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream45 = null;
        org.jboss.dmr.Base64.InputStream inputStream47 = new org.jboss.dmr.Base64.InputStream(inputStream45, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream48 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream47);
        org.jboss.dmr.stream.ModelReader modelReader49 = modelStreamFactory44.newModelReader((java.io.InputStream) inputStream48);
        java.io.OutputStream outputStream50 = null;
        org.jboss.dmr.Base64.OutputStream outputStream51 = new org.jboss.dmr.Base64.OutputStream(outputStream50);
        org.jboss.dmr.Base64.OutputStream outputStream52 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream51);
        outputStream51.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter55 = modelStreamFactory44.newModelWriter((java.io.OutputStream) outputStream51);
        org.jboss.dmr.stream.ModelWriter modelWriter56 = modelWriter55.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter58 = modelWriter55.writeInt((int) '4');
        org.jboss.dmr.ModelNode modelNode59 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode62 = modelNode59.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList63 = modelNode62.asList();
        org.jboss.dmr.ListModelValue listModelValue64 = new org.jboss.dmr.ListModelValue(modelNodeList63);
        org.jboss.dmr.ModelNode modelNode65 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue64);
        org.jboss.dmr.ModelValue modelValue66 = listModelValue64.resolve();
        int int68 = listModelValue64.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList69 = listModelValue64.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList70 = listModelValue64.asPropertyList();
        java.lang.String str71 = listModelValue64.asString();
        int int72 = listModelValue64.asInt();
        java.lang.String str73 = listModelValue64.asString();
        org.jboss.dmr.ModelType modelType74 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode75 = new org.jboss.dmr.ModelNode(modelType74);
        boolean boolean76 = listModelValue64.equals((java.lang.Object) modelType74);
        org.jboss.dmr.TypeModelValue typeModelValue77 = org.jboss.dmr.TypeModelValue.of(modelType74);
        org.jboss.dmr.TypeModelValue typeModelValue78 = org.jboss.dmr.TypeModelValue.of(modelType74);
        org.jboss.dmr.stream.ModelWriter modelWriter79 = modelWriter55.writeType(modelType74);
        modelNode40.write(modelWriter79);
        org.jboss.dmr.stream.ModelWriter modelWriter81 = modelWriter79.writeUndefined();
        bigDecimalModelValue15.write(modelWriter81);
        // The following exception was thrown during execution in test generation
        try {
            modelWriter81.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(modelNode7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0" + "'", str13, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(modelNode21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(modelNode29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory44);
        org.junit.Assert.assertNotNull(modelReader49);
        org.junit.Assert.assertNotNull(modelWriter55);
        org.junit.Assert.assertNotNull(modelWriter56);
        org.junit.Assert.assertNotNull(modelWriter58);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNotNull(modelNodeList63);
        org.junit.Assert.assertNotNull(modelValue66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(propertyList69);
        org.junit.Assert.assertNotNull(propertyList70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str71, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str73, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType74 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType74.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(typeModelValue77);
        org.junit.Assert.assertNotNull(typeModelValue78);
        org.junit.Assert.assertNotNull(modelWriter79);
        org.junit.Assert.assertNotNull(modelWriter81);
    }

    @Test
    public void test07918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07918");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.StringModelValue stringModelValue6 = new org.jboss.dmr.StringModelValue("(\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))");
        boolean boolean7 = stringModelValue3.equals(stringModelValue6);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger8 = stringModelValue6.asBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07919");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        int int11 = listModelValue5.asInt((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode12 = listModelValue5.asObject();
        boolean boolean14 = listModelValue5.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue20);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue20.resolve();
        int int24 = listModelValue20.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList25 = listModelValue20.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = listModelValue20.asList();
        long long27 = listModelValue20.asLong();
        boolean boolean28 = listModelValue5.equals(listModelValue20);
        long long29 = listModelValue5.asLong();
        org.jboss.dmr.ModelNode modelNode30 = listModelValue5.asObject();
        long long32 = modelNode30.asLong((long) (short) 10);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
    }

    @Test
    public void test07920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07920");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = modelNode7.asLong((long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
    }

    @Test
    public void test07921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07921");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        java.util.Set<java.lang.String> strSet13 = objectModelValue0.getKeys();
        boolean boolean15 = objectModelValue0.asBoolean(false);
        java.lang.String str16 = objectModelValue0.asString();
        java.io.DataOutput dataOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.writeExternal(dataOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
    }

    @Test
    public void test07922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07922");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.get(strArray10);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asList();
        org.jboss.dmr.ListModelValue listModelValue17 = new org.jboss.dmr.ListModelValue(modelNodeList16);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue17);
        org.jboss.dmr.ModelValue modelValue19 = listModelValue17.resolve();
        int int21 = listModelValue17.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue17.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList23 = modelNode11.asPropertyList(propertyList22);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.get(strArray30);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue37);
        org.jboss.dmr.ModelValue modelValue39 = listModelValue37.resolve();
        int int41 = listModelValue37.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList42 = listModelValue37.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList43 = modelNode31.asPropertyList(propertyList42);
        modelNode11.setNoCopy(modelNode31);
        org.jboss.dmr.ModelNode modelNode45 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode11);
        org.jboss.dmr.ModelNode modelNode47 = modelNode11.set(false);
        org.jboss.dmr.LongModelValue longModelValue49 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str50 = longModelValue49.asString();
        byte[] byteArray51 = longModelValue49.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue52 = new org.jboss.dmr.BytesModelValue(byteArray51);
        java.lang.String str53 = bytesModelValue52.asString();
        int int54 = bytesModelValue52.asInt();
        long long56 = bytesModelValue52.asLong((long) (short) 1);
        long long57 = bytesModelValue52.asLong();
        byte[] byteArray58 = bytesModelValue52.asBytes();
        org.jboss.dmr.ModelNode modelNode59 = modelNode11.set(byteArray58);
        org.jboss.dmr.ModelNode modelNode60 = modelNode59.setEmptyList();
        org.jboss.dmr.IntModelValue intModelValue63 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long65 = intModelValue63.asLong((long) 'b');
        java.lang.String str66 = intModelValue63.asString();
        java.math.BigDecimal bigDecimal67 = intModelValue63.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode68 = modelNode59.add("(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")", bigDecimal67);
        org.jboss.dmr.ModelNode modelNode71 = modelNode59.add("\"{\n    \\\"EXPRESSION_VALUE\\\" : 35\n}\"", true);
        org.jboss.dmr.ModelNode modelNode74 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue77 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger78 = booleanModelValue77.asBigInteger();
        byte[] byteArray79 = booleanModelValue77.asBytes();
        org.jboss.dmr.ModelNode modelNode80 = modelNode74.set("expression \"hi!\"", byteArray79);
        java.lang.String str82 = org.jboss.dmr.Base64.encodeBytes(byteArray79, 1);
        org.jboss.dmr.ModelNode modelNode83 = modelNode59.set("Expression \"1.0\"", byteArray79);
        org.jboss.dmr.IntModelValue intModelValue85 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long87 = intModelValue85.asLong((long) 'b');
        java.lang.String str88 = intModelValue85.asString();
        java.math.BigInteger bigInteger89 = intModelValue85.asBigInteger();
        double double91 = intModelValue85.asDouble(0.0d);
        double double92 = intModelValue85.asDouble();
        boolean boolean93 = intModelValue85.asBoolean();
        java.math.BigDecimal bigDecimal94 = intModelValue85.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode95 = modelNode59.set(bigDecimal94);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(propertyList42);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str53, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 32L + "'", long65 == 32L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "32" + "'", str66, "32");
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(booleanModelValue77);
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1]");
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "AQ==" + "'", str82, "AQ==");
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 32L + "'", long87 == 32L);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "32" + "'", str88, "32");
        org.junit.Assert.assertNotNull(bigInteger89);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 32.0d + "'", double91 == 32.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 32.0d + "'", double92 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(modelNode95);
    }

    @Test
    public void test07923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07923");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelType modelType5 = modelNode3.getType();
        java.lang.String str7 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode3, (int) 'e');
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType5.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3D3AAA2hpIUQAAAAA\nAAAAAHg=" + "'", str7, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3D3AAA2hpIUQAAAAA\nAAAAAHg=");
    }

    @Test
    public void test07924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07924");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        double double16 = bigIntegerModelValue4.asDouble(0.0d);
        int int17 = bigIntegerModelValue4.asInt();
        org.jboss.dmr.BooleanModelValue booleanModelValue18 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double19 = booleanModelValue18.asDouble();
        org.jboss.dmr.ModelValue modelValue20 = booleanModelValue18.copy();
        java.math.BigInteger bigInteger21 = booleanModelValue18.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue22 = new org.jboss.dmr.BigIntegerModelValue(bigInteger21);
        java.lang.String str23 = bigIntegerModelValue22.asString();
        java.math.BigInteger bigInteger24 = bigIntegerModelValue22.asBigInteger();
        java.math.BigInteger bigInteger25 = bigIntegerModelValue22.asBigInteger();
        double double26 = bigIntegerModelValue22.asDouble();
        int int28 = bigIntegerModelValue22.asInt(32);
        boolean boolean29 = bigIntegerModelValue4.equals(bigIntegerModelValue22);
        org.jboss.dmr.ValueExpression valueExpression30 = bigIntegerModelValue4.asExpression();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(valueExpression30);
    }

    @Test
    public void test07925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07925");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelValue modelValue11 = propertyModelValue10.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue10.asList();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.lang.String str18 = modelNode14.toString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode14.set(property25);
        org.jboss.dmr.PropertyModelValue propertyModelValue28 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode26, false);
        org.jboss.dmr.Property property29 = propertyModelValue28.asProperty();
        boolean boolean30 = propertyModelValue10.equals(propertyModelValue28);
        org.jboss.dmr.ModelValue modelValue31 = propertyModelValue28.protect();
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.set("hi!", 0.0d);
        java.lang.String str39 = modelNode35.toString();
        org.jboss.dmr.ModelNode modelNode40 = modelNode35.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode42 = modelNode35.set(100);
        org.jboss.dmr.ModelNode modelNode43 = modelNode34.add(modelNode35);
        org.jboss.dmr.ModelType modelType45 = org.jboss.dmr.ModelType.BYTES;
        char char46 = modelType45.getTypeChar();
        org.jboss.dmr.ModelNode modelNode47 = modelNode34.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType45);
        org.jboss.dmr.PropertyModelValue propertyModelValue49 = new org.jboss.dmr.PropertyModelValue("Expression \"1\"", modelNode34, false);
        java.util.Set<java.lang.String> strSet50 = modelNode34.keys();
        org.jboss.dmr.PropertyModelValue propertyModelValue52 = new org.jboss.dmr.PropertyModelValue("\"\\\"1L\\\"\"", modelNode34, true);
        boolean boolean53 = propertyModelValue28.equals(propertyModelValue52);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode55 = propertyModelValue28.removeChild("H4sIAAAAAAAAAFvzloG1uIhBICuxLFEvJzEvXc8lvzQpJ7Vh8yEvzezfLEwMjC4MrGWJOaWpFSjK/Epzk1KL2tZMleWe8qCbiYGhosD+AwMYAAAkVvhKVAAAAA==");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(\"hi!\" => 0.0)" + "'", str18, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(modelValue31);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(\"hi!\" => 0.0)" + "'", str39, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertTrue("'" + modelType45 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType45.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char46 + "' != '" + 'b' + "'", char46 == 'b');
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test07926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07926");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        double double9 = bigDecimalModelValue7.asDouble((double) 'p');
        boolean boolean10 = bigDecimalModelValue7.asBoolean();
        long long11 = bigDecimalModelValue7.asLong();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test07927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07927");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double3 = longModelValue1.asDouble();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test07928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07928");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelValue modelValue8 = listModelValue5.protect();
        long long9 = listModelValue5.asLong();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelValue8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test07929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07929");
        java.lang.Object obj1 = org.jboss.dmr.Base64.decodeToObject("H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.junit.Assert.assertNotNull(obj1);
    }

    @Test
    public void test07930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07930");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.LongModelValue longModelValue12 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue12.asLong();
        byte[] byteArray14 = longModelValue12.asBytes();
        org.jboss.dmr.ModelNode modelNode15 = modelNode0.add("EXPRESSION_VALUE", byteArray14);
        org.jboss.dmr.ModelNode modelNode17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode18 = modelNode0.setNoCopy("(\"Expression \\\"true\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0)))", modelNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode15);
    }

    @Test
    public void test07931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07931");
        org.jboss.dmr.ObjectModelValue objectModelValue1 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode2 = objectModelValue1.asObject();
        org.jboss.dmr.ModelValue modelValue3 = objectModelValue1.copy();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue4.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean9 = objectModelValue4.asBoolean();
        int int11 = objectModelValue4.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue4.asObject();
        boolean boolean13 = objectModelValue1.equals(objectModelValue4);
        org.jboss.dmr.ObjectModelValue objectModelValue14 = null;
        boolean boolean15 = objectModelValue1.equals(objectModelValue14);
        org.jboss.dmr.ObjectModelValue objectModelValue16 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode17 = objectModelValue16.asObject();
        java.util.Set<java.lang.String> strSet18 = objectModelValue16.getKeys();
        boolean boolean20 = objectModelValue16.has((int) 'a');
        boolean boolean22 = objectModelValue16.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue23 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode24 = objectModelValue23.asObject();
        java.util.Set<java.lang.String> strSet25 = objectModelValue23.getKeys();
        boolean boolean27 = objectModelValue23.has((int) 'a');
        boolean boolean28 = objectModelValue16.equals(objectModelValue23);
        org.jboss.dmr.ModelNode modelNode29 = objectModelValue23.asObject();
        org.jboss.dmr.ModelNode modelNode31 = objectModelValue23.getChild("(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))");
        org.jboss.dmr.ModelNode modelNode34 = modelNode31.set("\"org.jboss.dmr.stream.ModelException: (\\\"Expression \\\\\\\"1\\\\\\\"\\\" => (\\\"org.jboss.dmr.stream.ModelException: [(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => BYTES))\"", "");
        boolean boolean35 = objectModelValue1.equals((java.lang.Object) modelNode34);
        org.jboss.dmr.IntModelValue intModelValue37 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long39 = intModelValue37.asLong((long) 'b');
        org.jboss.dmr.ValueExpression valueExpression40 = intModelValue37.asExpression();
        byte[] byteArray41 = intModelValue37.asBytes();
        org.jboss.dmr.ModelNode modelNode42 = modelNode34.set(byteArray41);
        org.jboss.dmr.PropertyModelValue propertyModelValue43 = new org.jboss.dmr.PropertyModelValue("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQACkVYUFJFU1NJT04=", modelNode42);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelValue3);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 32L + "'", long39 == 32L);
        org.junit.Assert.assertNotNull(valueExpression40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(modelNode42);
    }

    @Test
    public void test07932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07932");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        double double15 = bigIntegerModelValue13.asDouble((double) 'b');
        boolean boolean16 = bigIntegerModelValue4.equals(bigIntegerModelValue13);
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double18 = booleanModelValue17.asDouble();
        org.jboss.dmr.ModelValue modelValue19 = booleanModelValue17.copy();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue21 = new org.jboss.dmr.BigIntegerModelValue(bigInteger20);
        long long23 = bigIntegerModelValue21.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = null;
        boolean boolean25 = bigIntegerModelValue21.equals(bigIntegerModelValue24);
        boolean boolean26 = bigIntegerModelValue4.equals(bigIntegerModelValue21);
        org.jboss.dmr.ModelValue modelValue27 = bigIntegerModelValue21.resolve();
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double29 = booleanModelValue28.asDouble();
        org.jboss.dmr.ModelValue modelValue30 = booleanModelValue28.copy();
        java.math.BigInteger bigInteger31 = booleanModelValue28.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue32 = new org.jboss.dmr.BigIntegerModelValue(bigInteger31);
        double double34 = bigIntegerModelValue32.asDouble((double) 'b');
        int int35 = bigIntegerModelValue32.asInt();
        boolean boolean36 = bigIntegerModelValue32.asBoolean();
        boolean boolean37 = bigIntegerModelValue21.equals(bigIntegerModelValue32);
        java.lang.String str38 = bigIntegerModelValue32.asString();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
    }

    @Test
    public void test07933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07933");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.LongModelValue longModelValue7 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str8 = longModelValue7.asString();
        double double10 = longModelValue7.asDouble((double) 32L);
        int int12 = longModelValue7.asInt((int) (short) 10);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory14 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream15 = null;
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream(inputStream15, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream17);
        org.jboss.dmr.stream.ModelReader modelReader19 = modelStreamFactory14.newModelReader((java.io.InputStream) inputStream18);
        java.io.OutputStream outputStream20 = null;
        org.jboss.dmr.Base64.OutputStream outputStream21 = new org.jboss.dmr.Base64.OutputStream(outputStream20);
        org.jboss.dmr.Base64.OutputStream outputStream22 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream21);
        outputStream21.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter25 = modelStreamFactory14.newModelWriter((java.io.OutputStream) outputStream21);
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelWriter25.writeListStart();
        longModelValue7.write(modelWriter25);
        listModelValue5.write(modelWriter25);
        long long30 = listModelValue5.asLong((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode32 = listModelValue5.requireChild((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [100]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory14);
        org.junit.Assert.assertNotNull(modelReader19);
        org.junit.Assert.assertNotNull(modelWriter25);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
    }

    @Test
    public void test07934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07934");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        java.math.BigInteger bigInteger4 = longModelValue1.asBigInteger();
        double double6 = longModelValue1.asDouble((double) 1L);
        java.lang.String str7 = longModelValue1.asString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
    }

    @Test
    public void test07935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07935");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        long long7 = listModelValue5.asLong();
        java.util.List<org.jboss.dmr.Property> propertyList8 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int10 = modelNode9.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode16 = modelNode9.set(valueExpression14);
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode(valueExpression14);
        boolean boolean19 = listModelValue5.equals((java.lang.Object) modelNode18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long22 = modelNode21.asLong();
        org.jboss.dmr.ValueExpression valueExpression23 = modelNode21.asExpression();
        java.math.BigDecimal bigDecimal24 = valueExpression23.resolveBigDecimal();
        java.lang.String str25 = valueExpression23.getExpressionString();
        java.math.BigDecimal bigDecimal26 = valueExpression23.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue27 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal26);
        int int29 = bigDecimalModelValue27.asInt(0);
        int int30 = bigDecimalModelValue27.asInt();
        int int31 = bigDecimalModelValue27.asInt();
        java.lang.String str32 = bigDecimalModelValue27.asString();
        java.lang.String str33 = bigDecimalModelValue27.asString();
        long long34 = bigDecimalModelValue27.asLong();
        java.math.BigInteger bigInteger35 = bigDecimalModelValue27.asBigInteger();
        org.jboss.dmr.ModelNode modelNode36 = modelNode18.set(bigInteger35);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(propertyList8);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1.0" + "'", str25, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0" + "'", str32, "1.0");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1.0" + "'", str33, "1.0");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(modelNode36);
    }

    @Test
    public void test07936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07936");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue8 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue8.asObject();
        java.util.Set<java.lang.String> strSet10 = objectModelValue8.getKeys();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue8.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean13 = objectModelValue8.asBoolean();
        int int15 = objectModelValue8.asInt((int) 'b');
        int int17 = objectModelValue8.asInt((int) '#');
        boolean boolean18 = objectModelValue0.equals(objectModelValue8);
        org.jboss.dmr.ModelValue modelValue19 = objectModelValue8.resolve();
        org.jboss.dmr.ModelNode modelNode21 = objectModelValue8.removeChild("\"bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}\"");
        org.jboss.dmr.ModelNode modelNode23 = objectModelValue8.getChild("");
        org.jboss.dmr.ObjectModelValue objectModelValue24 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode25 = objectModelValue24.asObject();
        java.util.Set<java.lang.String> strSet26 = objectModelValue24.getKeys();
        boolean boolean28 = objectModelValue24.has((int) 'a');
        boolean boolean30 = objectModelValue24.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue31 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode32 = objectModelValue31.asObject();
        java.util.Set<java.lang.String> strSet33 = objectModelValue31.getKeys();
        boolean boolean35 = objectModelValue31.has((int) 'a');
        boolean boolean36 = objectModelValue24.equals(objectModelValue31);
        org.jboss.dmr.ModelNode modelNode37 = objectModelValue31.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = objectModelValue31.asList();
        org.jboss.dmr.ObjectModelValue objectModelValue39 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode40 = objectModelValue39.asObject();
        org.jboss.dmr.ModelValue modelValue41 = objectModelValue39.protect();
        long long42 = objectModelValue39.asLong();
        boolean boolean44 = objectModelValue39.has("(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")");
        boolean boolean45 = objectModelValue39.asBoolean();
        boolean boolean46 = objectModelValue31.equals(objectModelValue39);
        boolean boolean47 = objectModelValue8.equals(objectModelValue31);
        java.io.PrintWriter printWriter48 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue31.format(printWriter48, (int) 'b', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelValue41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test07937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07937");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelType modelType5 = modelNode3.getType();
        org.jboss.dmr.TypeModelValue typeModelValue6 = org.jboss.dmr.TypeModelValue.of(modelType5);
        org.jboss.dmr.ModelType modelType7 = org.jboss.dmr.ModelType.PROPERTY;
        char char8 = modelType7.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue9 = org.jboss.dmr.TypeModelValue.of(modelType7);
        java.lang.String str10 = typeModelValue9.asString();
        boolean boolean11 = typeModelValue6.equals(typeModelValue9);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory13 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream14 = null;
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream(inputStream14, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream16);
        org.jboss.dmr.stream.ModelReader modelReader18 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream17);
        java.io.OutputStream outputStream19 = null;
        org.jboss.dmr.Base64.OutputStream outputStream20 = new org.jboss.dmr.Base64.OutputStream(outputStream19);
        org.jboss.dmr.Base64.OutputStream outputStream21 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream20);
        outputStream20.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelStreamFactory13.newModelWriter((java.io.OutputStream) outputStream20);
        java.io.OutputStream outputStream25 = null;
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream(outputStream25);
        outputStream26.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream26);
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream28, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        outputStream31.resumeEncoding();
        outputStream31.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter34 = modelStreamFactory13.newModelWriter((java.io.OutputStream) outputStream31);
        typeModelValue9.write(modelWriter34);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter37 = modelWriter34.writeExpression("[97L]");
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType5.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue6);
        org.junit.Assert.assertTrue("'" + modelType7 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType7.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + 'p' + "'", char8 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY" + "'", str10, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory13);
        org.junit.Assert.assertNotNull(modelReader18);
        org.junit.Assert.assertNotNull(modelWriter24);
        org.junit.Assert.assertNotNull(modelWriter34);
    }

    @Test
    public void test07938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07938");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        boolean boolean7 = booleanModelValue1.equals((java.lang.Object) '4');
        long long9 = booleanModelValue1.asLong((long) (short) 0);
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long12 = booleanModelValue11.asLong();
        org.jboss.dmr.ValueExpression valueExpression13 = booleanModelValue11.asExpression();
        java.lang.String str14 = valueExpression13.toString();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression17 = expressionValue16.asExpression();
        boolean boolean18 = valueExpression13.equals(valueExpression17);
        java.lang.String str19 = valueExpression17.resolveString();
        boolean boolean20 = booleanModelValue1.equals((java.lang.Object) str19);
        int int21 = booleanModelValue1.asInt();
        int int23 = booleanModelValue1.asInt(2);
        long long24 = booleanModelValue1.asLong();
        org.jboss.dmr.BooleanModelValue booleanModelValue25 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double26 = booleanModelValue25.asDouble();
        org.jboss.dmr.ModelValue modelValue27 = booleanModelValue25.copy();
        java.math.BigInteger bigInteger28 = booleanModelValue25.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue29 = new org.jboss.dmr.BigIntegerModelValue(bigInteger28);
        double double31 = bigIntegerModelValue29.asDouble((double) 'b');
        double double32 = bigIntegerModelValue29.asDouble();
        double double34 = bigIntegerModelValue29.asDouble(8.0d);
        org.jboss.dmr.ModelType modelType35 = org.jboss.dmr.ModelType.PROPERTY;
        char char36 = modelType35.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue37 = org.jboss.dmr.TypeModelValue.of(modelType35);
        boolean boolean38 = typeModelValue37.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression39 = typeModelValue37.asExpression();
        boolean boolean40 = bigIntegerModelValue29.equals((java.lang.Object) typeModelValue37);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode44.asList();
        org.jboss.dmr.ModelType modelType46 = modelNode44.getType();
        org.jboss.dmr.TypeModelValue typeModelValue47 = org.jboss.dmr.TypeModelValue.of(modelType46);
        boolean boolean49 = typeModelValue47.asBoolean(false);
        boolean boolean50 = typeModelValue37.equals(typeModelValue47);
        org.jboss.dmr.ModelType modelType51 = org.jboss.dmr.ModelType.PROPERTY;
        char char52 = modelType51.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue53 = org.jboss.dmr.TypeModelValue.of(modelType51);
        boolean boolean54 = typeModelValue53.asBoolean();
        java.lang.String str55 = typeModelValue53.asString();
        boolean boolean56 = typeModelValue37.equals(typeModelValue53);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory58 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream59 = null;
        org.jboss.dmr.Base64.InputStream inputStream61 = new org.jboss.dmr.Base64.InputStream(inputStream59, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream62 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream61);
        org.jboss.dmr.stream.ModelReader modelReader63 = modelStreamFactory58.newModelReader((java.io.InputStream) inputStream62);
        java.io.OutputStream outputStream64 = null;
        org.jboss.dmr.Base64.OutputStream outputStream65 = new org.jboss.dmr.Base64.OutputStream(outputStream64);
        org.jboss.dmr.Base64.OutputStream outputStream66 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream65);
        outputStream65.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter69 = modelStreamFactory58.newModelWriter((java.io.OutputStream) outputStream65);
        org.jboss.dmr.stream.ModelWriter modelWriter70 = modelWriter69.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter72 = modelWriter69.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter74 = modelWriter72.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter76 = modelWriter72.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter78 = modelWriter76.writeLong(100L);
        typeModelValue53.write(modelWriter78);
        booleanModelValue1.write(modelWriter78);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Expression \"true\"" + "'", str14, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(booleanModelValue25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + modelType35 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType35.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char36 + "' != '" + 'p' + "'", char36 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(valueExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertTrue("'" + modelType46 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType46.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + modelType51 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType51.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char52 + "' != '" + 'p' + "'", char52 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PROPERTY" + "'", str55, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory58);
        org.junit.Assert.assertNotNull(modelReader63);
        org.junit.Assert.assertNotNull(modelWriter69);
        org.junit.Assert.assertNotNull(modelWriter70);
        org.junit.Assert.assertNotNull(modelWriter72);
        org.junit.Assert.assertNotNull(modelWriter74);
        org.junit.Assert.assertNotNull(modelWriter76);
        org.junit.Assert.assertNotNull(modelWriter78);
    }

    @Test
    public void test07939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07939");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue6 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean7 = stringModelValue4.equals(stringModelValue6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        boolean boolean10 = stringModelValue6.equals(stringModelValue9);
        org.jboss.dmr.StringModelValue stringModelValue12 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue14 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression15 = stringModelValue14.asExpression();
        boolean boolean16 = stringModelValue12.equals(stringModelValue14);
        boolean boolean17 = stringModelValue9.equals(stringModelValue14);
        boolean boolean18 = stringModelValue1.equals(stringModelValue14);
        java.io.PrintWriter printWriter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue1.writeJSONString(printWriter19, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07940");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.clear();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.lang.String str14 = modelNode10.toString();
        org.jboss.dmr.ModelNode modelNode15 = modelNode10.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode17 = modelNode10.set(100);
        org.jboss.dmr.ModelNode modelNode18 = modelNode9.add(modelNode10);
        int int20 = modelNode10.asInt(2);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.lang.String str27 = modelNode23.toString();
        org.jboss.dmr.ModelNode modelNode28 = modelNode23.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode30 = modelNode23.set(100);
        org.jboss.dmr.ModelNode modelNode31 = modelNode22.add(modelNode23);
        org.jboss.dmr.Property property32 = new org.jboss.dmr.Property("", modelNode23);
        java.lang.String str33 = property32.getName();
        org.jboss.dmr.Property property34 = property32.clone();
        java.lang.String str35 = property32.getName();
        org.jboss.dmr.ModelNode modelNode36 = modelNode10.set(property32);
        org.jboss.dmr.ModelNode modelNode37 = modelNode0.set(property32);
        org.jboss.dmr.Property property38 = property32.clone();
        org.jboss.dmr.Property property39 = property38.clone();
        java.lang.String str40 = property39.getName();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(\"hi!\" => 0.0)" + "'", str14, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(\"hi!\" => 0.0)" + "'", str27, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test07941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07941");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode6 = modelNode0.add((double) 100);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode11 = modelNode10.setEmptyList();
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.asObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.get("Expression \"true\"");
        boolean boolean15 = modelNode6.equals(modelNode12);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(modelType16);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        org.jboss.dmr.ModelNode modelNode24 = modelNode17.set(property23);
        org.jboss.dmr.ModelNode modelNode25 = property23.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue(property23);
        org.jboss.dmr.ModelValue modelValue27 = propertyModelValue26.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = propertyModelValue26.asList();
        org.jboss.dmr.ModelNode modelNode29 = modelNode6.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode6.resolve();
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType16.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
    }

    @Test
    public void test07942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07942");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelValue modelValue2 = expressionValue1.copy();
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str5 = expressionValue4.toString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        boolean boolean12 = expressionValue4.equals((java.lang.Object) property11);
        org.jboss.dmr.ModelValue modelValue13 = expressionValue4.copy();
        org.jboss.dmr.ModelValue modelValue14 = expressionValue4.resolve();
        boolean boolean15 = expressionValue1.equals(expressionValue4);
        java.io.PrintWriter printWriter16 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.format(printWriter16, (int) 'p', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "expression \"hi!\"" + "'", str5, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07943");
        java.io.Serializable serializable0 = null;
        java.lang.String str2 = org.jboss.dmr.Base64.encodeObject(serializable0, (int) 'd');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rO0ABXA=" + "'", str2, "rO0ABXA=");
    }

    @Test
    public void test07944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07944");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.ModelNode modelNode8 = modelNode3.set((double) 'a');
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str11 = intModelValue10.asString();
        double double13 = intModelValue10.asDouble((double) 2);
        java.math.BigDecimal bigDecimal14 = intModelValue10.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue15 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal14);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue16 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal14);
        org.jboss.dmr.ModelNode modelNode17 = modelNode8.set(bigDecimal14);
        org.jboss.dmr.ModelType modelType18 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode(modelType18);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode(modelType18);
        org.jboss.dmr.ModelNode modelNode21 = modelNode17.set(modelType18);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode27.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue30 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode27, false);
        boolean boolean32 = propertyModelValue30.has("10.0");
        org.jboss.dmr.ModelNode modelNode34 = propertyModelValue30.getChild(0);
        org.jboss.dmr.ModelNode modelNode35 = modelNode34.clone();
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.set("hi!", 0.0d);
        java.lang.String str41 = modelNode37.toString();
        org.jboss.dmr.ModelNode modelNode42 = modelNode37.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.set("hi!", 0.0d);
        org.jboss.dmr.Property property48 = new org.jboss.dmr.Property("", modelNode47);
        org.jboss.dmr.ModelNode modelNode49 = modelNode37.set(property48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode34.set("\"35\"", modelNode37);
        org.jboss.dmr.ModelNode modelNode53 = modelNode50.setExpression("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BWQAAjMyeA==", "AQ==");
        org.jboss.dmr.ModelNode modelNode56 = modelNode53.set("(\"hi!\" => 0.0)", "");
        org.jboss.dmr.ModelNode modelNode57 = modelNode17.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==", modelNode53);
        boolean boolean58 = modelNode17.isDefined();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertTrue("'" + modelType18 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType18.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(\"hi!\" => 0.0)" + "'", str41, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test07945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07945");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("1L");
        byte[] byteArray2 = stringModelValue1.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = stringModelValue1.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"1L\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[49, 76]");
    }

    @Test
    public void test07946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07946");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(bigInteger3);
        boolean boolean6 = modelNode5.isProtected();
        org.jboss.dmr.ModelNode modelNode7 = modelNode5.clone();
        org.jboss.dmr.ModelNode modelNode10 = modelNode5.set("[{ \"hi!\" : { \"EXPRESSION_VALUE\" : \"hi!\" } },\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\"]", "(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ValueExpression valueExpression11 = modelNode10.asExpression();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode10);
    }

    @Test
    public void test07947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07947");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double3 = longModelValue1.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        byte[] byteArray8 = longModelValue5.asBytes();
        boolean boolean9 = longModelValue1.equals(longModelValue5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.String> strSet10 = longModelValue1.getKeys();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07948");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.LongModelValue longModelValue12 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue12.asLong();
        byte[] byteArray14 = longModelValue12.asBytes();
        org.jboss.dmr.ModelNode modelNode15 = modelNode0.add("EXPRESSION_VALUE", byteArray14);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long19 = modelNode18.asLong();
        org.jboss.dmr.ValueExpression valueExpression20 = modelNode18.asExpression();
        java.math.BigDecimal bigDecimal21 = valueExpression20.resolveBigDecimal();
        java.lang.String str22 = valueExpression20.getExpressionString();
        java.math.BigDecimal bigDecimal23 = valueExpression20.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue24 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal23);
        boolean boolean25 = bigDecimalModelValue24.asBoolean();
        long long26 = bigDecimalModelValue24.asLong();
        java.lang.String str27 = bigDecimalModelValue24.asString();
        java.math.BigInteger bigInteger28 = bigDecimalModelValue24.asBigInteger();
        org.jboss.dmr.ModelNode modelNode29 = modelNode15.add("rO0ABXNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRM\nZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFn\nbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7/\n///+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAABAXg=", bigInteger28);
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long32 = modelNode31.asLong();
        org.jboss.dmr.ValueExpression valueExpression33 = modelNode31.asExpression();
        java.math.BigDecimal bigDecimal34 = valueExpression33.resolveBigDecimal();
        java.lang.String str35 = valueExpression33.getExpressionString();
        java.math.BigDecimal bigDecimal36 = valueExpression33.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue37 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal36);
        boolean boolean38 = bigDecimalModelValue37.asBoolean();
        long long39 = bigDecimalModelValue37.asLong();
        java.lang.String str40 = bigDecimalModelValue37.asString();
        org.jboss.dmr.ModelNode modelNode42 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long43 = modelNode42.asLong();
        org.jboss.dmr.ValueExpression valueExpression44 = modelNode42.asExpression();
        java.math.BigDecimal bigDecimal45 = valueExpression44.resolveBigDecimal();
        java.lang.String str46 = valueExpression44.getExpressionString();
        java.math.BigDecimal bigDecimal47 = valueExpression44.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue48 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal47);
        boolean boolean49 = bigDecimalModelValue48.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression50 = bigDecimalModelValue48.asExpression();
        int int51 = bigDecimalModelValue48.asInt();
        long long52 = bigDecimalModelValue48.asLong();
        boolean boolean53 = bigDecimalModelValue37.equals(bigDecimalModelValue48);
        java.math.BigDecimal bigDecimal54 = bigDecimalModelValue48.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode55 = modelNode29.set(bigDecimal54);
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode((double) 2);
        org.jboss.dmr.ModelNode modelNode59 = modelNode57.set(false);
        modelNode55.setNoCopy(modelNode59);
        java.io.ObjectInput objectInput61 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode59.readExternal(objectInput61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1.0" + "'", str22, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0" + "'", str27, "1.0");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(valueExpression33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1.0" + "'", str35, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1.0" + "'", str40, "1.0");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(valueExpression44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1.0" + "'", str46, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(valueExpression50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode59);
    }

    @Test
    public void test07949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07949");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        double double15 = bigIntegerModelValue13.asDouble((double) 'b');
        boolean boolean16 = bigIntegerModelValue4.equals(bigIntegerModelValue13);
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double18 = booleanModelValue17.asDouble();
        org.jboss.dmr.ModelValue modelValue19 = booleanModelValue17.copy();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue21 = new org.jboss.dmr.BigIntegerModelValue(bigInteger20);
        long long23 = bigIntegerModelValue21.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = null;
        boolean boolean25 = bigIntegerModelValue21.equals(bigIntegerModelValue24);
        boolean boolean26 = bigIntegerModelValue4.equals(bigIntegerModelValue21);
        org.jboss.dmr.ModelValue modelValue27 = bigIntegerModelValue21.resolve();
        long long29 = bigIntegerModelValue21.asLong(35L);
        long long30 = bigIntegerModelValue21.asLong();
        int int31 = bigIntegerModelValue21.asInt();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test07950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07950");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        int int10 = intModelValue5.asInt();
        int int12 = intModelValue5.asInt(32);
        org.jboss.dmr.DoubleModelValue doubleModelValue14 = new org.jboss.dmr.DoubleModelValue((double) (byte) -1);
        org.jboss.dmr.DoubleModelValue doubleModelValue16 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int18 = doubleModelValue16.asInt((int) 'l');
        java.math.BigDecimal bigDecimal19 = doubleModelValue16.asBigDecimal();
        boolean boolean20 = doubleModelValue14.equals(doubleModelValue16);
        boolean boolean21 = intModelValue5.equals((java.lang.Object) doubleModelValue14);
        byte[] byteArray22 = doubleModelValue14.asBytes();
        boolean boolean24 = doubleModelValue14.asBoolean(false);
        int int26 = doubleModelValue14.asInt((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-65, -16, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test07951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07951");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        java.lang.String[] strArray48 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode49 = modelNode46.get(strArray48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode28.get(strArray48);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode50, true);
        org.jboss.dmr.PropertyModelValue propertyModelValue53 = new org.jboss.dmr.PropertyModelValue(property52);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList54 = propertyModelValue53.asList();
        java.io.PrintWriter printWriter55 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue53.formatAsJSON(printWriter55, (int) (byte) -1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNodeList54);
    }

    @Test
    public void test07952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07952");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(bigDecimal5);
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.clear();
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.clone();
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long12 = intModelValue10.asLong((long) 'b');
        java.lang.String str13 = intModelValue10.asString();
        java.math.BigDecimal bigDecimal14 = intModelValue10.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode15 = modelNode7.add(bigDecimal14);
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double18 = booleanModelValue17.asDouble();
        org.jboss.dmr.ModelValue modelValue19 = booleanModelValue17.copy();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue21 = new org.jboss.dmr.BigIntegerModelValue(bigInteger20);
        java.lang.String str22 = bigIntegerModelValue21.asString();
        java.math.BigInteger bigInteger23 = bigIntegerModelValue21.asBigInteger();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode(bigInteger23);
        org.jboss.dmr.LongModelValue longModelValue26 = new org.jboss.dmr.LongModelValue((-1L));
        long long28 = longModelValue26.asLong((long) (byte) -1);
        int int30 = longModelValue26.asInt(0);
        org.jboss.dmr.ValueExpression valueExpression31 = longModelValue26.asExpression();
        org.jboss.dmr.ModelNode modelNode32 = modelNode24.set(valueExpression31);
        java.lang.String str34 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) valueExpression31, (int) (byte) 10);
        org.jboss.dmr.ModelNode modelNode35 = modelNode7.set("Expression \"10.0\"", valueExpression31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer int36 = modelNode7.asIntOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32" + "'", str13, "32");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "H4sIAAAAAAAAAFvzloG1uIhBNr8oXS8rKb+4WC8lt0gvLDGnNNW1oqAotbg4Mz/vj9r8R3l9E2J4GBgqCspZGJh0DSsAkLuCFDkAAAA=" + "'", str34, "H4sIAAAAAAAAAFvzloG1uIhBNr8oXS8rKb+4WC8lt0gvLDGnNNW1oqAotbg4Mz/vj9r8R3l9E2J4GBgqCspZGJh0DSsAkLuCFDkAAAA=");
        org.junit.Assert.assertNotNull(modelNode35);
    }

    @Test
    public void test07953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07953");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        boolean boolean7 = booleanModelValue1.equals((java.lang.Object) '4');
        boolean boolean8 = booleanModelValue1.asBoolean();
        int int9 = booleanModelValue1.asInt();
        java.io.PrintWriter printWriter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            booleanModelValue1.writeString(printWriter10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test07954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07954");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double3 = longModelValue1.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        byte[] byteArray8 = longModelValue5.asBytes();
        boolean boolean9 = longModelValue1.equals(longModelValue5);
        java.lang.String str10 = longModelValue1.asString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1" + "'", str10, "-1");
    }

    @Test
    public void test07955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07955");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        boolean boolean18 = listModelValue13.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray19 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean20 = listModelValue13.equals((java.lang.Object) modelNodeArray19);
        boolean boolean21 = typeModelValue5.equals((java.lang.Object) listModelValue13);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue13.resolve();
        org.jboss.dmr.ModelValue modelValue23 = listModelValue13.protect();
        java.lang.Throwable throwable25 = null;
        org.jboss.dmr.stream.ModelException modelException26 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable25);
        org.jboss.dmr.stream.ModelException modelException27 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException26);
        java.lang.Throwable throwable29 = null;
        org.jboss.dmr.stream.ModelException modelException30 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable29);
        org.jboss.dmr.stream.ModelException modelException31 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException30);
        modelException26.addSuppressed((java.lang.Throwable) modelException30);
        boolean boolean33 = listModelValue13.equals((java.lang.Object) modelException26);
        org.jboss.dmr.ModelType modelType34 = listModelValue13.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode36 = listModelValue13.requireChild((int) 'J');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [74]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(modelNodeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + modelType34 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType34.equals(org.jboss.dmr.ModelType.LIST));
    }

    @Test
    public void test07956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07956");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        org.jboss.dmr.ModelNode modelNode6 = modelNodeFactory0.readFrom("0.0", true);
        org.jboss.dmr.ModelNode modelNode9 = modelNodeFactory0.readFrom("(\"hi!\" => expression \"hi!\")", false);
        org.jboss.dmr.ModelNode modelNode12 = modelNodeFactory0.readFrom("\"{\n    \\\"hi!\\\" : {\n        \\\"EXPRESSION_VALUE\\\" : \\\"hi!\\\"\n    }\n}\"", true);
        java.io.Reader reader13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode15 = modelNodeFactory0.readFrom(reader13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode12);
    }

    @Test
    public void test07957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07957");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        boolean boolean5 = valueExpression3.equals((java.lang.Object) 'p');
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue(valueExpression3);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(valueExpression3);
        org.jboss.dmr.BooleanModelValue booleanModelValue8 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double9 = booleanModelValue8.asDouble();
        org.jboss.dmr.ModelValue modelValue10 = booleanModelValue8.copy();
        java.math.BigInteger bigInteger11 = booleanModelValue8.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue12 = new org.jboss.dmr.BigIntegerModelValue(bigInteger11);
        double double14 = bigIntegerModelValue12.asDouble((double) 'b');
        java.lang.String str15 = bigIntegerModelValue12.asString();
        org.jboss.dmr.ValueExpression valueExpression16 = bigIntegerModelValue12.asExpression();
        boolean boolean18 = bigIntegerModelValue12.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long21 = booleanModelValue20.asLong();
        org.jboss.dmr.ValueExpression valueExpression22 = booleanModelValue20.asExpression();
        java.lang.String str23 = valueExpression22.toString();
        org.jboss.dmr.ExpressionValue expressionValue25 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression26 = expressionValue25.asExpression();
        boolean boolean27 = valueExpression22.equals(valueExpression26);
        org.jboss.dmr.LongModelValue longModelValue29 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal30 = longModelValue29.asBigDecimal();
        int int31 = longModelValue29.asInt();
        org.jboss.dmr.ValueExpression valueExpression32 = longModelValue29.asExpression();
        boolean boolean33 = valueExpression26.equals(valueExpression32);
        int int34 = valueExpression32.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue36 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression37 = expressionValue36.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver38 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str39 = valueExpression37.resolveString(valueExpressionResolver38);
        java.math.BigInteger bigInteger40 = valueExpression32.resolveBigInteger(valueExpressionResolver38);
        java.lang.String str42 = valueExpressionResolver38.resolvePart("1L");
        java.lang.String str44 = valueExpressionResolver38.resolvePart("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==");
        boolean boolean45 = bigIntegerModelValue12.equals((java.lang.Object) valueExpressionResolver38);
        java.lang.String str47 = valueExpressionResolver38.resolvePart("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => (\"[(\\\"hi!\\\" => 0.0)]\" => PROPERTY))");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger48 = valueExpression3.resolveBigInteger(valueExpressionResolver38);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"true\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(booleanModelValue8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Expression \"true\"" + "'", str23, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(valueExpression37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test07958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07958");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set(property11);
        org.jboss.dmr.ModelNode modelNode15 = modelNode0.setExpression("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", "true");
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("", modelNode20);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.get(strArray22);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int25 = modelNode24.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.setExpression("hi!", "hi!");
        java.lang.String str30 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode26);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = modelNode26.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode32 = modelNode24.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList31);
        org.jboss.dmr.ModelNode modelNode33 = modelNode23.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList31);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList34 = modelNode15.asList(modelNodeList31);
        java.lang.String str36 = modelNode15.asString("(\"hi!\" => 0.0)");
        java.lang.String str38 = modelNode15.toJSONString(false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = modelNode15.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str30, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNodeList34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")" + "'", str36, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{\n    \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : {\n        \"EXPRESSION_VALUE\" : \"true\"\n    }\n}" + "'", str38, "{\n    \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : {\n        \"EXPRESSION_VALUE\" : \"true\"\n    }\n}");
    }

    @Test
    public void test07959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07959");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        long long5 = objectModelValue0.asLong();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue0.asObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType7 = modelNode6.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(modelNode6);
    }

    @Test
    public void test07960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07960");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6);
        org.jboss.dmr.stream.ModelReader modelReader8 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream7);
        java.io.OutputStream outputStream9 = null;
        org.jboss.dmr.Base64.OutputStream outputStream10 = new org.jboss.dmr.Base64.OutputStream(outputStream9);
        org.jboss.dmr.Base64.OutputStream outputStream11 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream10);
        outputStream10.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter14 = modelStreamFactory3.newModelWriter((java.io.OutputStream) outputStream10);
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter14.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter15.writeInt((int) (byte) 10);
        stringModelValue1.write(modelWriter17);
        byte[] byteArray19 = stringModelValue1.asBytes();
        java.lang.String str20 = stringModelValue1.asString();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = stringModelValue1.asInt(97);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertNotNull(modelReader8);
        org.junit.Assert.assertNotNull(modelWriter14);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str20, "(\"\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test07961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07961");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue7.getChild((int) (short) 0);
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue18 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean19 = expressionValue16.equals(expressionValue18);
        org.jboss.dmr.ExpressionValue expressionValue21 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression22 = expressionValue21.asExpression();
        boolean boolean23 = expressionValue16.equals(expressionValue21);
        java.lang.String str24 = expressionValue16.asString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory26 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream27 = null;
        org.jboss.dmr.Base64.InputStream inputStream29 = new org.jboss.dmr.Base64.InputStream(inputStream27, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream30 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream29);
        org.jboss.dmr.stream.ModelReader modelReader31 = modelStreamFactory26.newModelReader((java.io.InputStream) inputStream30);
        java.io.OutputStream outputStream32 = null;
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream(outputStream32);
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream33);
        outputStream33.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelStreamFactory26.newModelWriter((java.io.OutputStream) outputStream33);
        org.jboss.dmr.stream.ModelWriter modelWriter38 = modelWriter37.writeListStart();
        expressionValue16.write(modelWriter38);
        propertyModelValue7.write(modelWriter38);
        org.jboss.dmr.ModelNode modelNode41 = propertyModelValue7.asObject();
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.PropertyModelValue propertyModelValue45 = new org.jboss.dmr.PropertyModelValue("0.0", modelNode44);
        org.jboss.dmr.StringModelValue stringModelValue47 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray48 = stringModelValue47.asBytes();
        org.jboss.dmr.ModelNode modelNode49 = modelNode44.set(byteArray48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode41.set(byteArray48);
        java.lang.String str51 = org.jboss.dmr.Base64.encodeBytes(byteArray48);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(modelStreamFactory26);
        org.junit.Assert.assertNotNull(modelReader31);
        org.junit.Assert.assertNotNull(modelWriter37);
        org.junit.Assert.assertNotNull(modelWriter38);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "RXhwcmVzc2lvbiAidHJ1ZSI=" + "'", str51, "RXhwcmVzc2lvbiAidHJ1ZSI=");
    }

    @Test
    public void test07962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07962");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        java.lang.String str8 = modelNode5.asString("true");
        org.jboss.dmr.ModelNode modelNode10 = modelNode5.set((double) 'a');
        long long11 = modelNode5.asLong();
        boolean boolean12 = modelNode1.equals(modelNode5);
        org.jboss.dmr.ObjectModelValue objectModelValue14 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode15 = objectModelValue14.asObject();
        java.util.Set<java.lang.String> strSet16 = objectModelValue14.getKeys();
        org.jboss.dmr.ModelNode modelNode18 = objectModelValue14.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue14.asObject();
        boolean boolean20 = modelNode19.isProtected();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long24 = modelNode23.asLong();
        org.jboss.dmr.ValueExpression valueExpression25 = modelNode23.asExpression();
        java.math.BigDecimal bigDecimal26 = valueExpression25.resolveBigDecimal();
        java.lang.String str27 = valueExpression25.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue29 = new org.jboss.dmr.LongModelValue(1L);
        long long31 = longModelValue29.asLong((long) (short) 0);
        java.lang.String str32 = longModelValue29.asString();
        org.jboss.dmr.ValueExpression valueExpression33 = longModelValue29.asExpression();
        int int34 = valueExpression33.resolveInt();
        boolean boolean35 = valueExpression25.equals(valueExpression33);
        org.jboss.dmr.ModelNode modelNode36 = modelNode19.set("AAAAZA==", valueExpression25);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver37 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.ValueExpression valueExpression39 = new org.jboss.dmr.ValueExpression("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        java.lang.String str40 = valueExpressionResolver37.resolve(valueExpression39);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        boolean boolean49 = modelNode46.equals((java.lang.Object) 100L);
        org.jboss.dmr.Property property51 = new org.jboss.dmr.Property("[(\"hi!\" => 0.0)]", modelNode46, false);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver53 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue55 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long56 = booleanModelValue55.asLong();
        org.jboss.dmr.ValueExpression valueExpression57 = booleanModelValue55.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue58 = new org.jboss.dmr.ExpressionValue(valueExpression57);
        java.lang.String str59 = valueExpression57.getExpressionString();
        java.lang.String str60 = valueExpressionResolver53.resolve(valueExpression57);
        org.jboss.dmr.ModelNode modelNode61 = modelNode46.set("1L", valueExpression57);
        java.lang.String str62 = valueExpressionResolver37.resolve(valueExpression57);
        org.jboss.dmr.DoubleModelValue doubleModelValue64 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        boolean boolean65 = doubleModelValue64.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression66 = doubleModelValue64.asExpression();
        java.lang.String str67 = valueExpressionResolver37.resolve(valueExpression66);
        java.lang.String str69 = valueExpressionResolver37.resolvePart("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQACkVYUFJFU1NJT04=");
        java.math.BigDecimal bigDecimal70 = valueExpression25.resolveBigDecimal(valueExpressionResolver37);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode71 = modelNode5.add("(\"Expression \\\"true\\\"\" => BIG_DECIMAL)", valueExpression25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"hi!\" => 0.0)" + "'", str8, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 97L + "'", long11 == 97L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(valueExpression25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0" + "'", str27, "1.0");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(valueExpression33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(valueExpressionResolver37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))" + "'", str40, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver53);
        org.junit.Assert.assertNotNull(booleanModelValue55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(valueExpression57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "true" + "'", str59, "true");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "true" + "'", str60, "true");
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "true" + "'", str62, "true");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(valueExpression66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "10.0" + "'", str67, "10.0");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(bigDecimal70);
    }

    @Test
    public void test07963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07963");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        boolean boolean8 = listModelValue5.equals((java.lang.Object) true);
        boolean boolean9 = listModelValue5.asBoolean();
        boolean boolean11 = listModelValue5.asBoolean(false);
        org.jboss.dmr.ModelValue modelValue12 = listModelValue5.protect();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList20 = modelNode19.asList();
        org.jboss.dmr.ListModelValue listModelValue21 = new org.jboss.dmr.ListModelValue(modelNodeList20);
        long long22 = listModelValue21.asLong();
        long long23 = listModelValue21.asLong();
        boolean boolean25 = listModelValue21.asBoolean(false);
        boolean boolean26 = listModelValue5.equals(listModelValue21);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = modelNode30.asList();
        org.jboss.dmr.ListModelValue listModelValue32 = new org.jboss.dmr.ListModelValue(modelNodeList31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue32);
        org.jboss.dmr.ModelValue modelValue34 = listModelValue32.resolve();
        int int36 = listModelValue32.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList37 = listModelValue32.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue32.asPropertyList();
        java.lang.String str39 = listModelValue32.asString();
        int int40 = listModelValue32.asInt();
        org.jboss.dmr.ModelValue modelValue41 = listModelValue32.resolve();
        org.jboss.dmr.ModelNode modelNode42 = listModelValue32.asObject();
        boolean boolean43 = listModelValue21.equals(listModelValue32);
        org.jboss.dmr.ModelValue modelValue44 = listModelValue32.protect();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelNodeList20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertNotNull(modelValue34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(propertyList37);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str39, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(modelValue41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(modelValue44);
    }

    @Test
    public void test07964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07964");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue(10.0d);
        long long3 = doubleModelValue1.asLong((long) (byte) 100);
        long long4 = doubleModelValue1.asLong();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
    }

    @Test
    public void test07965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07965");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue(32.0d);
        org.jboss.dmr.ValueExpression valueExpression2 = doubleModelValue1.asExpression();
        int int3 = doubleModelValue1.asInt();
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test07966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07966");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        double double6 = booleanModelValue1.asDouble((double) 1.0f);
        java.math.BigInteger bigInteger7 = booleanModelValue1.asBigInteger();
        int int9 = booleanModelValue1.asInt((int) (short) 1);
        int int11 = booleanModelValue1.asInt(52);
        boolean boolean13 = booleanModelValue1.asBoolean(true);
        java.lang.String str14 = booleanModelValue1.asString();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "false" + "'", str14, "false");
    }

    @Test
    public void test07967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07967");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double12 = booleanModelValue11.asDouble();
        org.jboss.dmr.ModelValue modelValue13 = booleanModelValue11.copy();
        java.math.BigInteger bigInteger14 = booleanModelValue11.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue15 = new org.jboss.dmr.BigIntegerModelValue(bigInteger14);
        java.lang.String str16 = bigIntegerModelValue15.asString();
        long long18 = bigIntegerModelValue15.asLong(32L);
        double double19 = bigIntegerModelValue15.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double21 = booleanModelValue20.asDouble();
        org.jboss.dmr.ModelValue modelValue22 = booleanModelValue20.copy();
        java.math.BigInteger bigInteger23 = booleanModelValue20.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = new org.jboss.dmr.BigIntegerModelValue(bigInteger23);
        double double26 = bigIntegerModelValue24.asDouble((double) 'b');
        boolean boolean27 = bigIntegerModelValue15.equals(bigIntegerModelValue24);
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double29 = booleanModelValue28.asDouble();
        org.jboss.dmr.ModelValue modelValue30 = booleanModelValue28.copy();
        java.math.BigInteger bigInteger31 = booleanModelValue28.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue32 = new org.jboss.dmr.BigIntegerModelValue(bigInteger31);
        long long34 = bigIntegerModelValue32.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue35 = null;
        boolean boolean36 = bigIntegerModelValue32.equals(bigIntegerModelValue35);
        boolean boolean37 = bigIntegerModelValue15.equals(bigIntegerModelValue32);
        java.math.BigDecimal bigDecimal38 = bigIntegerModelValue15.asBigDecimal();
        boolean boolean39 = bigIntegerModelValue4.equals(bigIntegerModelValue15);
        double double40 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue41 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double42 = booleanModelValue41.asDouble();
        org.jboss.dmr.ModelValue modelValue43 = booleanModelValue41.copy();
        java.math.BigInteger bigInteger44 = booleanModelValue41.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue45 = new org.jboss.dmr.BigIntegerModelValue(bigInteger44);
        int int47 = bigIntegerModelValue45.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        java.lang.String str52 = modelNode48.toString();
        org.jboss.dmr.ModelNode modelNode53 = modelNode48.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode55 = modelNode48.set(100);
        org.jboss.dmr.ModelNode modelNode56 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode59 = modelNode56.set("hi!", 0.0d);
        java.lang.String str60 = modelNode56.toString();
        org.jboss.dmr.ModelNode modelNode61 = modelNode56.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode66 = modelNode63.set("hi!", 0.0d);
        org.jboss.dmr.Property property67 = new org.jboss.dmr.Property("", modelNode66);
        org.jboss.dmr.ModelNode modelNode68 = modelNode56.set(property67);
        java.lang.String str69 = modelNode68.asString();
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode73 = modelNode70.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList74 = modelNode73.asList();
        org.jboss.dmr.ListModelValue listModelValue75 = new org.jboss.dmr.ListModelValue(modelNodeList74);
        org.jboss.dmr.ModelNode modelNode76 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue75);
        org.jboss.dmr.ModelValue modelValue77 = listModelValue75.resolve();
        int int79 = listModelValue75.asInt((int) (byte) 100);
        boolean boolean80 = listModelValue75.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList81 = listModelValue75.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList82 = modelNode68.asList(modelNodeList81);
        org.jboss.dmr.ModelNode modelNode83 = modelNode55.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList81);
        boolean boolean84 = bigIntegerModelValue45.equals((java.lang.Object) modelNode55);
        double double85 = bigIntegerModelValue45.asDouble();
        org.jboss.dmr.LongModelValue longModelValue87 = new org.jboss.dmr.LongModelValue((-1L));
        long long89 = longModelValue87.asLong((long) (byte) -1);
        byte[] byteArray90 = longModelValue87.asBytes();
        boolean boolean91 = bigIntegerModelValue45.equals((java.lang.Object) byteArray90);
        boolean boolean92 = bigIntegerModelValue4.equals(bigIntegerModelValue45);
        long long93 = bigIntegerModelValue4.asLong();
        java.io.DataOutput dataOutput94 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigIntegerModelValue4.writeExternal(dataOutput94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(\"hi!\" => 0.0)" + "'", str52, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(\"hi!\" => 0.0)" + "'", str60, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str69, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertNotNull(modelNodeList74);
        org.junit.Assert.assertNotNull(modelValue77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(modelNodeList81);
        org.junit.Assert.assertNotNull(modelNodeList82);
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
    }

    @Test
    public void test07968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07968");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isPropertyStart();
        boolean boolean17 = modelReader15.isType();
        boolean boolean18 = modelReader15.isListStart();
        boolean boolean19 = modelReader15.isBigDecimal();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07969");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.Validation.validate(modelNode1, "10.0");
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal7 = longModelValue6.asBigDecimal();
        int int8 = longModelValue6.asInt();
        org.jboss.dmr.ValueExpression valueExpression9 = longModelValue6.asExpression();
        long long11 = longModelValue6.asLong((long) 1);
        java.math.BigInteger bigInteger12 = longModelValue6.asBigInteger();
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set("[2L]", bigInteger12);
        boolean boolean15 = modelNode13.hasDefined((int) 'i');
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07970");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long4 = modelNode3.asLong();
        org.jboss.dmr.ValueExpression valueExpression5 = modelNode3.asExpression();
        java.math.BigDecimal bigDecimal6 = valueExpression5.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(valueExpression5);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode10 = modelNode9.clear();
        boolean boolean11 = valueExpression5.equals((java.lang.Object) modelNode10);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        boolean boolean20 = modelNode17.equals((java.lang.Object) 100L);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("[(\"hi!\" => 0.0)]", modelNode17, false);
        org.jboss.dmr.Property property23 = property22.clone();
        org.jboss.dmr.ModelNode modelNode24 = modelNode10.add(property22);
        org.jboss.dmr.ModelNode modelNode26 = modelNode10.set((double) (short) -1);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
    }

    @Test
    public void test07971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07971");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode3 = objectModelValue0.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue0.getChild("[(\"hi!\" => 0.0)]");
        java.util.List<org.jboss.dmr.Property> propertyList6 = objectModelValue0.asPropertyList();
        boolean boolean7 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelValue modelValue9 = objectModelValue0.copy(false);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(propertyList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(modelValue9);
    }

    @Test
    public void test07972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07972");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelValue modelValue11 = propertyModelValue10.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue10.asList();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.lang.String str18 = modelNode14.toString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode14.set(property25);
        org.jboss.dmr.PropertyModelValue propertyModelValue28 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode26, false);
        java.util.Set<java.lang.String> strSet29 = propertyModelValue28.getKeys();
        org.jboss.dmr.ModelValue modelValue30 = propertyModelValue28.copy();
        boolean boolean31 = propertyModelValue10.equals(propertyModelValue28);
        java.io.PrintWriter printWriter32 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue28.formatAsJSON(printWriter32, (int) ' ', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(\"hi!\" => 0.0)" + "'", str18, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test07973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07973");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream19.resumeEncoding();
        outputStream19.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream19);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        int int33 = inputStream25.read(byteArray29, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (-1));
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (int) 'p');
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream25);
        boolean boolean39 = modelReader38.isListEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType40 = modelReader38.getType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07974");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long15 = modelNode14.asLong();
        org.jboss.dmr.ValueExpression valueExpression16 = modelNode14.asExpression();
        java.math.BigDecimal bigDecimal17 = valueExpression16.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode(bigDecimal17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode(bigDecimal17);
        boolean boolean20 = propertyModelValue7.equals((java.lang.Object) modelNode19);
        org.jboss.dmr.ModelNode modelNode23 = modelNode19.setExpression("(\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))", "big decimal 1");
        org.jboss.dmr.ModelNode modelNode26 = modelNode19.setExpression("\"{\n    \\\"hi!\\\" : {\n        \\\"EXPRESSION_VALUE\\\" : \\\"hi!\\\"\n    }\n}\"", "H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKg3KeA\nwaWaSwEIlKI1YpQ8TIo9HeHA1xEJ2MYoKdjaKSRlpitk5pWkpqcWKRgbacYqKVgpGHLVFjAwRDFU\nAABKHkXaewAAAA==");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode26);
    }

    @Test
    public void test07975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07975");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isDouble();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = modelReader15.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't double");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07976");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        org.jboss.dmr.ValueExpression valueExpression18 = stringModelValue11.asExpression();
        java.lang.String str19 = stringModelValue11.asString();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = stringModelValue11.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str19, "(\"\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test07977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07977");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.resolve();
        java.lang.String str3 = modelNode1.asString();
        java.math.BigDecimal bigDecimal4 = modelNode1.asBigDecimal();
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertNotNull(bigDecimal4);
    }

    @Test
    public void test07978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07978");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(bigDecimal4);
        org.jboss.dmr.ModelNode modelNode7 = modelNode5.set((double) (byte) 0);
        java.lang.String str8 = modelNode5.toString();
        boolean boolean10 = modelNode5.has("\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\"");
        java.math.BigInteger bigInteger11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode12 = modelNode5.add(bigInteger11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0.0" + "'", str8, "0.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07979");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        boolean boolean16 = objectModelValue15.asBoolean();
        int int18 = objectModelValue15.asInt(0);
        org.jboss.dmr.ModelValue modelValue20 = objectModelValue15.copy(false);
        boolean boolean21 = objectModelValue7.equals(objectModelValue15);
        org.jboss.dmr.ModelValue modelValue22 = objectModelValue15.resolve();
        org.jboss.dmr.ModelValue modelValue23 = objectModelValue15.resolve();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property24 = objectModelValue15.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(modelValue23);
    }

    @Test
    public void test07980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07980");
        java.lang.Throwable throwable2 = null;
        org.jboss.dmr.stream.ModelException modelException3 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable2);
        org.jboss.dmr.stream.ModelException modelException4 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException3);
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException3);
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", (java.lang.Throwable) modelException3);
        java.lang.Throwable[] throwableArray7 = modelException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = modelException6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test07981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07981");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        int int11 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode("(\"hi!\" => 0.0)");
        java.io.OutputStream outputStream14 = null;
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream(outputStream14);
        outputStream15.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream15);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream17);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue23 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger24 = booleanModelValue23.asBigInteger();
        byte[] byteArray25 = booleanModelValue23.asBytes();
        org.jboss.dmr.ModelNode modelNode26 = modelNode20.set("expression \"hi!\"", byteArray25);
        outputStream17.write(byteArray25);
        org.jboss.dmr.ModelNode modelNode28 = modelNode13.set(byteArray25);
        org.jboss.dmr.ModelNode modelNode31 = modelNode13.setExpression("AAAAAAAAAAE=", "");
        org.jboss.dmr.IntModelValue intModelValue34 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str35 = intModelValue34.asString();
        double double37 = intModelValue34.asDouble((double) 2);
        java.math.BigDecimal bigDecimal38 = intModelValue34.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode(bigDecimal38);
        org.jboss.dmr.ModelNode modelNode40 = modelNode13.set("{}", bigDecimal38);
        modelNode1.setNoCopy(modelNode13);
        org.jboss.dmr.ModelNode modelNode42 = modelNode1.asObject();
        org.jboss.dmr.ModelNode modelNode43 = modelNode1.resolve();
        org.jboss.dmr.stream.ModelWriter modelWriter44 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode1.write(modelWriter44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(booleanModelValue23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "32" + "'", str35, "32");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 32.0d + "'", double37 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode43);
    }

    @Test
    public void test07982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07982");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isBytes();
        boolean boolean24 = modelReader15.isObjectStart();
        boolean boolean25 = modelReader15.isObjectStart();
        boolean boolean26 = modelReader15.isLong();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07983");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        int int15 = intModelValue9.asInt(112);
        double double17 = intModelValue9.asDouble((double) '#');
        double double18 = intModelValue9.asDouble();
        org.jboss.dmr.ValueExpression valueExpression19 = intModelValue9.asExpression();
        org.jboss.dmr.ValueExpression valueExpression20 = intModelValue9.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue21 = new org.jboss.dmr.ExpressionValue(valueExpression20);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertNotNull(valueExpression20);
    }

    @Test
    public void test07984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07984");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        int int9 = bytesModelValue4.asInt(112);
        int int10 = bytesModelValue4.asInt();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ListModelValue listModelValue16 = new org.jboss.dmr.ListModelValue(modelNodeList15);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue16);
        org.jboss.dmr.ModelValue modelValue18 = listModelValue16.resolve();
        int int20 = listModelValue16.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList21 = listModelValue16.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue16.asPropertyList();
        java.lang.String str23 = listModelValue16.asString();
        int int24 = listModelValue16.asInt();
        java.lang.String str25 = listModelValue16.asString();
        org.jboss.dmr.ModelType modelType26 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode(modelType26);
        boolean boolean28 = listModelValue16.equals((java.lang.Object) modelType26);
        boolean boolean30 = listModelValue16.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode32 = listModelValue16.requireChild((int) (short) 0);
        boolean boolean33 = bytesModelValue4.equals((java.lang.Object) modelNode32);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode35 = modelNode32.add((long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(propertyList21);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str23, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str25, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType26 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType26.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07985");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode1);
        boolean boolean17 = modelNode1.hasDefined((int) (short) 10);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07986");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("");
        java.io.DataOutput dataOutput2 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.writeExternal(dataOutput2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07987");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 1.0f);
        byte[] byteArray2 = modelNode1.asBytes();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[63, -16, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test07988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07988");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger6 = booleanModelValue5.asBigInteger();
        byte[] byteArray7 = booleanModelValue5.asBytes();
        org.jboss.dmr.ModelNode modelNode8 = modelNode2.set("expression \"hi!\"", byteArray7);
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => (\"[(\\\"hi!\\\" => 0.0)]\" => PROPERTY))", modelNode8, true);
        java.lang.String str11 = modelNode8.asStringOrNull();
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"expression \\\"hi!\\\"\" => bytes {\n    0x01\n})" + "'", str11, "(\"expression \\\"hi!\\\"\" => bytes {\n    0x01\n})");
    }

    @Test
    public void test07989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07989");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression2 = expressionValue1.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str5 = expressionValue4.toString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        boolean boolean12 = expressionValue4.equals((java.lang.Object) property11);
        boolean boolean13 = expressionValue1.equals(expressionValue4);
        org.jboss.dmr.ModelType modelType14 = org.jboss.dmr.ModelType.PROPERTY;
        char char15 = modelType14.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue16 = org.jboss.dmr.TypeModelValue.of(modelType14);
        org.jboss.dmr.ValueExpression valueExpression17 = typeModelValue16.asExpression();
        org.jboss.dmr.stream.ModelEvent modelEvent18 = org.jboss.dmr.stream.ModelEvent.TYPE;
        boolean boolean19 = valueExpression17.equals((java.lang.Object) modelEvent18);
        boolean boolean20 = expressionValue1.equals((java.lang.Object) boolean19);
        org.jboss.dmr.ExpressionValue expressionValue22 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression23 = expressionValue22.asExpression();
        boolean boolean24 = expressionValue1.equals(expressionValue22);
        org.jboss.dmr.BooleanModelValue booleanModelValue25 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double26 = booleanModelValue25.asDouble();
        org.jboss.dmr.ModelValue modelValue27 = booleanModelValue25.copy();
        java.math.BigInteger bigInteger28 = booleanModelValue25.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue29 = new org.jboss.dmr.BigIntegerModelValue(bigInteger28);
        java.lang.String str30 = bigIntegerModelValue29.asString();
        long long32 = bigIntegerModelValue29.asLong(32L);
        double double33 = bigIntegerModelValue29.asDouble();
        long long35 = bigIntegerModelValue29.asLong((long) '4');
        int int37 = bigIntegerModelValue29.asInt(1);
        boolean boolean38 = expressionValue22.equals((java.lang.Object) bigIntegerModelValue29);
        org.jboss.dmr.ExpressionValue expressionValue40 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str41 = expressionValue40.toString();
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        boolean boolean48 = expressionValue40.equals((java.lang.Object) property47);
        org.jboss.dmr.ModelValue modelValue49 = expressionValue40.copy();
        org.jboss.dmr.ModelValue modelValue50 = expressionValue40.resolve();
        boolean boolean51 = bigIntegerModelValue29.equals((java.lang.Object) modelValue50);
        org.jboss.dmr.ValueExpression valueExpression52 = bigIntegerModelValue29.asExpression();
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "expression \"hi!\"" + "'", str5, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType14.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'p' + "'", char15 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue16);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertTrue("'" + modelEvent18 + "' != '" + org.jboss.dmr.stream.ModelEvent.TYPE + "'", modelEvent18.equals(org.jboss.dmr.stream.ModelEvent.TYPE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanModelValue25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "expression \"hi!\"" + "'", str41, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(modelValue49);
        org.junit.Assert.assertNotNull(modelValue50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(valueExpression52);
    }

    @Test
    public void test07990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07990");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.lang.String str5 = objectModelValue0.asString();
        boolean boolean7 = objectModelValue0.has("H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.jboss.dmr.ModelValue modelValue8 = objectModelValue0.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = objectModelValue0.requireChild((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [1]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelValue8);
    }

    @Test
    public void test07991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07991");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        boolean boolean3 = intModelValue1.has(32);
        long long5 = intModelValue1.asLong(0L);
        java.io.DataOutput dataOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            intModelValue1.writeExternal(dataOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
    }

    @Test
    public void test07992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07992");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = listModelValue5.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode27, false);
        org.jboss.dmr.Property property30 = propertyModelValue29.asProperty();
        boolean boolean31 = listModelValue5.equals((java.lang.Object) propertyModelValue29);
        org.jboss.dmr.ModelValue modelValue32 = listModelValue5.copy();
        int int34 = listModelValue5.asInt((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray35 = listModelValue5.asBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(modelValue32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test07993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07993");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        int int9 = bytesModelValue4.asInt(112);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory11 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream12 = null;
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream12, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream15 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream14);
        org.jboss.dmr.stream.ModelReader modelReader16 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream15);
        java.io.OutputStream outputStream17 = null;
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream(outputStream17);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream18.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory11.newModelWriter((java.io.OutputStream) outputStream18);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter22.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue25 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray26 = intModelValue25.asBytes();
        int int28 = intModelValue25.asInt(0);
        java.math.BigInteger bigInteger29 = intModelValue25.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter23.writeBigInteger(bigInteger29);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long33 = modelNode32.asLong();
        org.jboss.dmr.ValueExpression valueExpression34 = modelNode32.asExpression();
        java.math.BigDecimal bigDecimal35 = valueExpression34.resolveBigDecimal();
        java.lang.String str36 = valueExpression34.getExpressionString();
        java.math.BigDecimal bigDecimal37 = valueExpression34.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue38 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal37);
        boolean boolean39 = bigDecimalModelValue38.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression40 = bigDecimalModelValue38.asExpression();
        int int41 = bigDecimalModelValue38.asInt();
        long long42 = bigDecimalModelValue38.asLong();
        double double43 = bigDecimalModelValue38.asDouble();
        java.math.BigInteger bigInteger44 = bigDecimalModelValue38.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter45 = modelWriter30.writeBigInteger(bigInteger44);
        bytesModelValue4.write(modelWriter30);
        java.math.BigInteger bigInteger47 = bytesModelValue4.asBigInteger();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory11);
        org.junit.Assert.assertNotNull(modelReader16);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(valueExpression34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1.0" + "'", str36, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(valueExpression40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(modelWriter45);
        org.junit.Assert.assertNotNull(bigInteger47);
    }

    @Test
    public void test07994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07994");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode16 = modelNode0.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        java.lang.String str17 = modelNode16.asStringOrNull();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode19 = modelNode16.require("H4sIAAAAAAAAAFvzloG1uIhBNr8oXS8rKb+4WC8lt0gvLDGnNNW1oqAotbg4Mz/vj9r8R3l9E2J4GBgqCspZGJh0DSsAkLuCFDkAAAA=");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'H4sIAAAAAAAAAFvzloG1uIhBNr8oXS8rKb+4WC8lt0gvLDGnNNW1oqAotbg4Mz/vj9r8R3l9E2J4GBgqCspZGJh0DSsAkLuCFDkAAAA=' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")" + "'", str17, "(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")");
    }

    @Test
    public void test07995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07995");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = stringModelValue1.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Expression \"true\"\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
    }

    @Test
    public void test07996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07996");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6);
        org.jboss.dmr.stream.ModelReader modelReader8 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream7);
        java.io.OutputStream outputStream9 = null;
        org.jboss.dmr.Base64.OutputStream outputStream10 = new org.jboss.dmr.Base64.OutputStream(outputStream9);
        org.jboss.dmr.Base64.OutputStream outputStream11 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream10);
        outputStream10.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter14 = modelStreamFactory3.newModelWriter((java.io.OutputStream) outputStream10);
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter14.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter15.writeInt((int) (byte) 10);
        stringModelValue1.write(modelWriter17);
        org.jboss.dmr.stream.ModelWriter modelWriter20 = modelWriter17.writeBoolean(false);
        org.jboss.dmr.stream.ModelWriter modelWriter21 = modelWriter20.writePropertyStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter22 = modelWriter20.writeListEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertNotNull(modelReader8);
        org.junit.Assert.assertNotNull(modelWriter14);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter20);
        org.junit.Assert.assertNotNull(modelWriter21);
    }

    @Test
    public void test07997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07997");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.resolve();
        java.lang.String str4 = modelNode2.asString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode2.set((long) 52);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.setExpression("hi!", "hi!");
        java.lang.String str12 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode8);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode8.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode15 = modelNode8.set((double) 0);
        org.jboss.dmr.ModelType modelType17 = org.jboss.dmr.ModelType.PROPERTY;
        char char18 = modelType17.getTypeChar();
        org.jboss.dmr.ModelNode modelNode19 = modelNode8.set("[(\"hi!\" => 0.0)]", modelType17);
        org.jboss.dmr.Property property20 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode19);
        org.jboss.dmr.ModelNode modelNode21 = modelNode6.set(property20);
        org.jboss.dmr.ModelNode modelNode23 = modelNode6.set(false);
        org.jboss.dmr.Property property24 = new org.jboss.dmr.Property("undefined", modelNode23);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str12, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + modelType17 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType17.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'p' + "'", char18 == 'p');
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test07998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07998");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        org.jboss.dmr.BooleanModelValue booleanModelValue19 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger20 = booleanModelValue19.asBigInteger();
        byte[] byteArray21 = booleanModelValue19.asBytes();
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "1L");
        boolean boolean25 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "[(\"hi!\" => 0.0)]");
        outputStream17.write(byteArray21);
        outputStream17.write((int) (short) 0);
        outputStream17.resumeEncoding();
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream17);
        java.io.Writer writer31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter32 = modelStreamFactory1.newModelWriter(writer31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(booleanModelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(modelWriter30);
    }

    @Test
    public void test07999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07999");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isObjectEnd();
        boolean boolean19 = modelReader15.isType();
        boolean boolean20 = modelReader15.isLong();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = modelReader15.getBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't boolean");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test08000");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) 'd');
    }
}

