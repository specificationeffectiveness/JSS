package org.jboss.dmr;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        org.jboss.dmr.ModelType modelType1 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(modelType1);
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.set("hi!", 0.0d);
        org.jboss.dmr.Property property8 = new org.jboss.dmr.Property("", modelNode7);
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set(property8);
        org.jboss.dmr.ModelNode modelNode10 = property8.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property8);
        java.util.List<org.jboss.dmr.Property> propertyList12 = propertyModelValue11.asPropertyList();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue11.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = modelNode14.setEmptyList();
        boolean boolean17 = modelNode15.asBoolean(false);
        org.jboss.dmr.ObjectModelValue objectModelValue19 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode20 = objectModelValue19.asObject();
        org.jboss.dmr.ModelNode modelNode22 = objectModelValue19.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode24 = objectModelValue19.getChild("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("PROPERTY_VALUE", modelNode24);
        modelNode15.setNoCopy(modelNode24);
        org.jboss.dmr.ModelNode modelNode28 = modelNode24.set(false);
        org.jboss.dmr.PropertyModelValue propertyModelValue30 = new org.jboss.dmr.PropertyModelValue("org.jboss.dmr.stream.ModelException: (\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))", modelNode28, true);
        org.jboss.dmr.ModelNode modelNode33 = modelNode28.set("//////////8=", true);
        org.junit.Assert.assertTrue("'" + modelType1 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType1.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode33);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((-1));
        java.math.BigDecimal bigDecimal7 = doubleModelValue1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue8 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal7);
        boolean boolean10 = bigDecimalModelValue8.equals((java.lang.Object) (byte) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        boolean boolean4 = stringModelValue1.equals((java.lang.Object) (-1.0d));
        java.lang.String str5 = stringModelValue1.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent6 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) modelEvent6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue13 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean14 = stringModelValue11.equals(stringModelValue13);
        byte[] byteArray15 = stringModelValue13.asBytes();
        java.lang.Object obj16 = null;
        boolean boolean17 = stringModelValue13.equals(obj16);
        boolean boolean19 = stringModelValue13.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean20 = stringModelValue9.equals(stringModelValue13);
        boolean boolean21 = stringModelValue1.equals(stringModelValue13);
        org.jboss.dmr.StringModelValue stringModelValue22 = null;
        boolean boolean23 = stringModelValue1.equals(stringModelValue22);
        java.io.PrintWriter printWriter24 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue1.format(printWriter24, (int) (short) 10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str5, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent6 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent6.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        boolean boolean12 = listModelValue5.asBoolean(true);
        int int14 = listModelValue5.asInt(1);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue20);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue20.resolve();
        int int24 = listModelValue20.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList25 = listModelValue20.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList26 = listModelValue20.asPropertyList();
        org.jboss.dmr.ModelNode modelNode28 = listModelValue20.getChild((int) (short) 0);
        boolean boolean29 = listModelValue20.asBoolean();
        org.jboss.dmr.ModelValue modelValue30 = listModelValue20.copy();
        boolean boolean31 = listModelValue5.equals(listModelValue20);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property32 = listModelValue20.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(propertyList26);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.lang.String str11 = modelNode7.toString();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(100);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        java.lang.String str28 = modelNode27.asString();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        boolean boolean39 = listModelValue34.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = listModelValue34.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = modelNode27.asList(modelNodeList40);
        org.jboss.dmr.ModelNode modelNode42 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList40);
        boolean boolean43 = bigIntegerModelValue4.equals((java.lang.Object) modelNode14);
        org.jboss.dmr.ModelType modelType44 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode(modelType44);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode50 = modelNode47.set("hi!", 0.0d);
        org.jboss.dmr.Property property51 = new org.jboss.dmr.Property("", modelNode50);
        org.jboss.dmr.ModelNode modelNode52 = modelNode45.set(property51);
        org.jboss.dmr.PropertyModelValue propertyModelValue53 = new org.jboss.dmr.PropertyModelValue(property51);
        org.jboss.dmr.PropertyModelValue propertyModelValue54 = new org.jboss.dmr.PropertyModelValue(property51);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList55 = propertyModelValue54.asList();
        boolean boolean56 = bigIntegerModelValue4.equals((java.lang.Object) propertyModelValue54);
        double double58 = bigIntegerModelValue4.asDouble((double) 10);
        java.math.BigInteger bigInteger59 = bigIntegerModelValue4.asBigInteger();
        java.math.BigInteger bigInteger60 = bigIntegerModelValue4.asBigInteger();
        boolean boolean62 = bigIntegerModelValue4.asBoolean(false);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"hi!\" => 0.0)" + "'", str11, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str28, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(modelNodeList40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + modelType44 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType44.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertNotNull(modelNodeList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigInteger60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        int int3 = booleanModelValue1.asInt();
        int int5 = booleanModelValue1.asInt(1);
        double double7 = booleanModelValue1.asDouble((double) (-1L));
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory9 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream10 = null;
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream(inputStream10, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream13 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream12);
        org.jboss.dmr.stream.ModelReader modelReader14 = modelStreamFactory9.newModelReader((java.io.InputStream) inputStream13);
        java.io.OutputStream outputStream15 = null;
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream(outputStream15);
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        outputStream16.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter20 = modelStreamFactory9.newModelWriter((java.io.OutputStream) outputStream16);
        java.io.OutputStream outputStream21 = null;
        org.jboss.dmr.Base64.OutputStream outputStream22 = new org.jboss.dmr.Base64.OutputStream(outputStream21);
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream22);
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream23);
        outputStream23.resumeEncoding();
        outputStream23.resumeEncoding();
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelStreamFactory9.newModelWriter((java.io.OutputStream) outputStream23);
        org.jboss.dmr.StringModelValue stringModelValue29 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray30 = stringModelValue29.asBytes();
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelWriter27.writeBytes(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            booleanModelValue1.write(modelWriter27);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(modelStreamFactory9);
        org.junit.Assert.assertNotNull(modelReader14);
        org.junit.Assert.assertNotNull(modelWriter20);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(modelWriter31);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.lang.String str18 = modelNode14.toString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode21 = modelNode14.set(100);
        org.jboss.dmr.ModelNode modelNode22 = modelNode13.add(modelNode14);
        org.jboss.dmr.ModelType modelType24 = org.jboss.dmr.ModelType.BYTES;
        char char25 = modelType24.getTypeChar();
        org.jboss.dmr.ModelNode modelNode26 = modelNode13.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType24);
        org.jboss.dmr.TypeModelValue typeModelValue27 = org.jboss.dmr.TypeModelValue.of(modelType24);
        org.jboss.dmr.TypeModelValue typeModelValue28 = org.jboss.dmr.TypeModelValue.of(modelType24);
        org.jboss.dmr.stream.ModelWriter modelWriter29 = modelWriter12.writeType(modelType24);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter12.writeObjectEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(\"hi!\" => 0.0)" + "'", str18, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + modelType24 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType24.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + 'b' + "'", char25 == 'b');
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(typeModelValue27);
        org.junit.Assert.assertNotNull(typeModelValue28);
        org.junit.Assert.assertNotNull(modelWriter29);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        long long6 = bigIntegerModelValue4.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue7 = null;
        boolean boolean8 = bigIntegerModelValue4.equals(bigIntegerModelValue7);
        org.jboss.dmr.ValueExpression valueExpression9 = bigIntegerModelValue4.asExpression();
        boolean boolean11 = bigIntegerModelValue4.has((int) (byte) -1);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode24.asList();
        org.jboss.dmr.ListModelValue listModelValue26 = new org.jboss.dmr.ListModelValue(modelNodeList25);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue26);
        org.jboss.dmr.ModelValue modelValue28 = listModelValue26.resolve();
        int int30 = listModelValue26.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList31 = listModelValue26.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList32 = modelNode20.asPropertyList(propertyList31);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        org.jboss.dmr.Property property38 = new org.jboss.dmr.Property("", modelNode37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.get(strArray39);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode44.asList();
        org.jboss.dmr.ListModelValue listModelValue46 = new org.jboss.dmr.ListModelValue(modelNodeList45);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue46);
        org.jboss.dmr.ModelValue modelValue48 = listModelValue46.resolve();
        int int50 = listModelValue46.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList51 = listModelValue46.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList52 = modelNode40.asPropertyList(propertyList51);
        modelNode20.setNoCopy(modelNode40);
        org.jboss.dmr.ModelNode modelNode55 = modelNode40.set((long) 100);
        org.jboss.dmr.ModelType modelType56 = modelNode55.getType();
        boolean boolean58 = modelNode55.has("[97L]");
        org.jboss.dmr.PropertyModelValue propertyModelValue59 = new org.jboss.dmr.PropertyModelValue("Expression \"hi!\"", modelNode55);
        java.util.Set<java.lang.String> strSet60 = propertyModelValue59.getKeys();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList61 = propertyModelValue59.asList();
        org.jboss.dmr.IntModelValue intModelValue63 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str64 = intModelValue63.asString();
        double double66 = intModelValue63.asDouble((double) 2);
        java.math.BigInteger bigInteger67 = intModelValue63.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue68 = new org.jboss.dmr.BigIntegerModelValue(bigInteger67);
        int int69 = bigIntegerModelValue68.asInt();
        boolean boolean70 = propertyModelValue59.equals((java.lang.Object) bigIntegerModelValue68);
        org.jboss.dmr.BooleanModelValue booleanModelValue71 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double72 = booleanModelValue71.asDouble();
        org.jboss.dmr.ModelValue modelValue73 = booleanModelValue71.copy();
        java.math.BigInteger bigInteger74 = booleanModelValue71.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue75 = new org.jboss.dmr.BigIntegerModelValue(bigInteger74);
        double double77 = bigIntegerModelValue75.asDouble((double) 'b');
        int int78 = bigIntegerModelValue75.asInt();
        org.jboss.dmr.ValueExpression valueExpression79 = bigIntegerModelValue75.asExpression();
        boolean boolean80 = bigIntegerModelValue68.equals(bigIntegerModelValue75);
        boolean boolean81 = bigIntegerModelValue4.equals(bigIntegerModelValue75);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelValue28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(propertyList31);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertNotNull(modelValue48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(propertyList51);
        org.junit.Assert.assertNotNull(propertyList52);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertTrue("'" + modelType56 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType56.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(modelNodeList61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "32" + "'", str64, "32");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 32.0d + "'", double66 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 32 + "'", int69 == 32);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(booleanModelValue71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue73);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(valueExpression79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.InputStream inputStream13 = null;
        org.jboss.dmr.Base64.InputStream inputStream15 = new org.jboss.dmr.Base64.InputStream(inputStream13, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        int int23 = inputStream15.read(byteArray19, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream15, (-1));
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25);
        org.jboss.dmr.stream.ModelReader modelReader27 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream25);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = inputStream25.markSupported();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(modelReader27);
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.setEmptyList();
        boolean boolean16 = modelNode14.asBoolean(false);
        int int18 = modelNode14.asInt((int) (byte) -1);
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.setEmptyList();
        org.jboss.dmr.ModelNode modelNode20 = modelNode19.clone();
        java.io.PrintWriter printWriter21 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode19.writeJSONString(printWriter21, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long4 = modelNode3.asLong();
        org.jboss.dmr.ValueExpression valueExpression5 = modelNode3.asExpression();
        java.math.BigDecimal bigDecimal6 = valueExpression5.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(valueExpression5);
        java.lang.String str8 = valueExpression5.getExpressionString();
        java.lang.String str9 = valueExpression5.resolveString();
        org.jboss.dmr.ExpressionValue expressionValue10 = new org.jboss.dmr.ExpressionValue(valueExpression5);
        java.io.PrintWriter printWriter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue10.format(printWriter11, (int) 'a', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1.0" + "'", str8, "1.0");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1.0" + "'", str9, "1.0");
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = modelNode4.asLong(100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        int int13 = listModelValue5.asInt();
        java.lang.String str14 = listModelValue5.asString();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode15 = listModelValue5.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        org.jboss.dmr.Property property16 = propertyModelValue15.asProperty();
        org.jboss.dmr.LongModelValue longModelValue18 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double20 = longModelValue18.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue22 = new org.jboss.dmr.LongModelValue((-1L));
        long long24 = longModelValue22.asLong((long) (byte) -1);
        byte[] byteArray25 = longModelValue22.asBytes();
        boolean boolean26 = longModelValue18.equals(longModelValue22);
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        long long30 = longModelValue28.asLong((long) (short) 0);
        java.math.BigInteger bigInteger31 = longModelValue28.asBigInteger();
        boolean boolean32 = longModelValue22.equals(longModelValue28);
        boolean boolean33 = propertyModelValue15.equals((java.lang.Object) longModelValue28);
        java.lang.String str35 = longModelValue28.toJSONString(true);
        byte[] byteArray36 = longModelValue28.asBytes();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue(0.0d);
        byte[] byteArray2 = doubleModelValue1.asBytes();
        long long4 = doubleModelValue1.asLong(0L);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isBigInteger();
        boolean boolean21 = modelReader15.isUndefined();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelEvent modelEvent22 = modelReader15.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(112);
        boolean boolean2 = modelNode1.isDefined();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromJSONString("1.0");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelType modelType3 = modelNode2.getType();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue8 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue8.asObject();
        java.util.Set<java.lang.String> strSet10 = objectModelValue8.getKeys();
        boolean boolean12 = objectModelValue8.has((int) 'a');
        boolean boolean14 = objectModelValue8.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        java.util.Set<java.lang.String> strSet17 = objectModelValue15.getKeys();
        boolean boolean19 = objectModelValue15.has((int) 'a');
        boolean boolean20 = objectModelValue8.equals(objectModelValue15);
        org.jboss.dmr.ModelNode modelNode21 = objectModelValue15.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList22 = objectModelValue15.asList();
        org.jboss.dmr.ModelNode modelNode23 = modelNode6.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList22);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode6, true);
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue(property25);
        org.jboss.dmr.ModelValue modelValue27 = propertyModelValue26.copy();
        boolean boolean28 = modelNode2.equals((java.lang.Object) propertyModelValue26);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode30 = propertyModelValue26.getChild("[(\"hi!\" => 0.0)]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.OBJECT + "'", modelType3.equals(org.jboss.dmr.ModelType.OBJECT));
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNodeList22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        boolean boolean14 = objectModelValue0.has("Expression \"hi!\"");
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue0.getChild("{ \"BYTES_VALUE\" : { \"EXPRESSION_VALUE\" : \"1.0\" } }");
        boolean boolean17 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue0.getChild("Expression \"0.0\"");
        java.io.PrintWriter printWriter20 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.format(printWriter20, 10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(modelNode19);
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str3 = modelNode1.asString("true");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(bigDecimal9);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.setNoCopy("35", modelNode12);
        boolean boolean15 = modelNode12.hasDefined("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.ModelNode modelNode17 = modelNode12.set("\"bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}\"");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode19 = modelNode17.remove("\"true\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(modelNode17);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        long long7 = bigDecimalModelValue6.asLong();
        long long8 = bigDecimalModelValue6.asLong();
        long long10 = bigDecimalModelValue6.asLong((long) 'b');
        java.io.OutputStream outputStream11 = null;
        org.jboss.dmr.Base64.OutputStream outputStream12 = new org.jboss.dmr.Base64.OutputStream(outputStream11);
        outputStream12.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream12);
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        outputStream15.flushBase64();
        outputStream15.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream15);
        boolean boolean19 = bigDecimalModelValue6.equals((java.lang.Object) outputStream18);
        org.jboss.dmr.ValueExpression valueExpression20 = bigDecimalModelValue6.asExpression();
        long long21 = valueExpression20.resolveLong();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 32L + "'", long21 == 32L);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        double double5 = doubleModelValue1.asDouble();
        org.jboss.dmr.ValueExpression valueExpression6 = doubleModelValue1.asExpression();
        org.jboss.dmr.ValueExpression valueExpression7 = doubleModelValue1.asExpression();
        double double9 = doubleModelValue1.asDouble(100.0d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue8 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode5, false);
        boolean boolean10 = propertyModelValue8.has("10.0");
        org.jboss.dmr.ModelNode modelNode12 = propertyModelValue8.getChild(0);
        org.jboss.dmr.PropertyModelValue propertyModelValue14 = new org.jboss.dmr.PropertyModelValue("Expression \"1\"", modelNode12, true);
        java.util.Set<java.lang.String> strSet15 = propertyModelValue14.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList16 = propertyModelValue14.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(propertyList16);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("{\n    \"TYPE_MODEL_VALUE\" => undefined,\n    \"[(\\\"hi!\\\" => 0.0)]\" => undefined,\n    \"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => undefined\n}");
        java.io.DataOutput dataOutput2 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue1.writeExternal(dataOutput2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(10);
        boolean boolean3 = intModelValue1.asBoolean(false);
        byte[] byteArray4 = intModelValue1.asBytes();
        java.lang.String str5 = intModelValue1.asString();
        java.lang.String str6 = intModelValue1.asString();
        long long8 = intModelValue1.asLong((long) 52);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long11 = modelNode10.asLong();
        org.jboss.dmr.ValueExpression valueExpression12 = modelNode10.asExpression();
        java.math.BigDecimal bigDecimal13 = valueExpression12.resolveBigDecimal();
        java.lang.String str14 = valueExpression12.getExpressionString();
        java.math.BigDecimal bigDecimal15 = valueExpression12.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue16 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal15);
        boolean boolean17 = bigDecimalModelValue16.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression18 = bigDecimalModelValue16.asExpression();
        org.jboss.dmr.ValueExpression valueExpression19 = bigDecimalModelValue16.asExpression();
        boolean boolean20 = intModelValue1.equals((java.lang.Object) valueExpression19);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "10" + "'", str5, "10");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10" + "'", str6, "10");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1.0" + "'", str14, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) (short) 100);
        int int9 = longModelValue1.asInt((int) ' ');
        org.jboss.dmr.ValueExpression valueExpression10 = longModelValue1.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = valueExpression10.resolveLong(valueExpressionResolver11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(valueExpression10);
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        java.util.List<org.jboss.dmr.Property> propertyList7 = objectModelValue0.asPropertyList();
        long long8 = objectModelValue0.asLong();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList9 = objectModelValue0.asList();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) objectModelValue0);
        boolean boolean12 = objectModelValue0.has("");
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(propertyList7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(modelNodeList9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        java.lang.String str9 = property7.getName();
        org.jboss.dmr.Property property10 = property7.clone();
        java.lang.String str11 = property7.getName();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        org.jboss.dmr.ModelType modelType1 = org.jboss.dmr.ModelType.forChar('s');
        org.junit.Assert.assertTrue("'" + modelType1 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType1.equals(org.jboss.dmr.ModelType.STRING));
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        java.lang.String str15 = intModelValue1.toJSONString(true);
        boolean boolean16 = intModelValue1.asBoolean();
        org.jboss.dmr.IntModelValue intModelValue18 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long20 = intModelValue18.asLong((long) 'b');
        java.lang.String str21 = intModelValue18.asString();
        java.math.BigInteger bigInteger22 = intModelValue18.asBigInteger();
        double double24 = intModelValue18.asDouble(0.0d);
        double double25 = intModelValue18.asDouble();
        long long26 = intModelValue18.asLong();
        boolean boolean27 = intModelValue1.equals(intModelValue18);
        boolean boolean29 = intModelValue1.asBoolean(false);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "32" + "'", str15, "32");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "32" + "'", str21, "32");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 32.0d + "'", double24 == 32.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.resolve();
        java.lang.String str3 = modelNode1.asString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set((long) 52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.setExpression("hi!", "hi!");
        java.lang.String str11 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode7.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set((double) 0);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.PROPERTY;
        char char17 = modelType16.getTypeChar();
        org.jboss.dmr.ModelNode modelNode18 = modelNode7.set("[(\"hi!\" => 0.0)]", modelType16);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode18);
        org.jboss.dmr.ModelNode modelNode20 = modelNode5.set(property19);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode22 = modelNode20.add("\"TYPE_MODEL_VALUE\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str11, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType16.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'p' + "'", char17 == 'p');
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'b');
        java.lang.String str3 = modelNode1.toJSONString(true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "98" + "'", str3, "98");
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        java.lang.String str15 = listModelValue14.asString();
        long long16 = listModelValue14.asLong();
        int int18 = listModelValue14.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue19 = listModelValue14.protect();
        boolean boolean21 = listModelValue14.has((int) (short) 100);
        boolean boolean22 = listModelValue5.equals(listModelValue14);
        boolean boolean24 = listModelValue5.has((int) (short) -1);
        long long25 = listModelValue5.asLong();
        java.lang.String str26 = listModelValue5.asString();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ValueExpression valueExpression27 = listModelValue5.asExpression();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str15, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str26, "[(\"hi!\" => 0.0)]");
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        long long8 = bytesModelValue4.asLong((long) (short) 1);
        long long9 = bytesModelValue4.asLong();
        java.math.BigDecimal bigDecimal10 = bytesModelValue4.asBigDecimal();
        java.lang.String str11 = bytesModelValue4.toString();
        long long12 = bytesModelValue4.asLong();
        org.jboss.dmr.ModelValue modelValue13 = bytesModelValue4.protect();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.String> strSet14 = modelValue13.getKeys();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}" + "'", str11, "bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(modelValue13);
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory14 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream15 = null;
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream(inputStream15, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream17);
        org.jboss.dmr.stream.ModelReader modelReader19 = modelStreamFactory14.newModelReader((java.io.InputStream) inputStream18);
        java.io.OutputStream outputStream20 = null;
        org.jboss.dmr.Base64.OutputStream outputStream21 = new org.jboss.dmr.Base64.OutputStream(outputStream20);
        org.jboss.dmr.Base64.OutputStream outputStream22 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream21);
        outputStream21.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter25 = modelStreamFactory14.newModelWriter((java.io.OutputStream) outputStream21);
        java.io.OutputStream outputStream26 = null;
        org.jboss.dmr.Base64.OutputStream outputStream27 = new org.jboss.dmr.Base64.OutputStream(outputStream26);
        outputStream27.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream29 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream27);
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream29, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream32 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream31);
        outputStream32.resumeEncoding();
        outputStream32.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelStreamFactory14.newModelWriter((java.io.OutputStream) outputStream32);
        java.io.InputStream inputStream36 = null;
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream(inputStream36, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue40 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str41 = longModelValue40.asString();
        byte[] byteArray42 = longModelValue40.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue43 = new org.jboss.dmr.BytesModelValue(byteArray42);
        int int46 = inputStream38.read(byteArray42, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream48 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38, (-1));
        org.jboss.dmr.Base64.InputStream inputStream50 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38, (int) 'p');
        org.jboss.dmr.stream.ModelReader modelReader51 = modelStreamFactory14.newModelReader((java.io.InputStream) inputStream38);
        org.jboss.dmr.Base64.InputStream inputStream53 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38, 10);
        org.jboss.dmr.stream.ModelReader modelReader54 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream38);
        java.io.Reader reader55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelReader modelReader56 = modelStreamFactory1.newModelReader(reader55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelStreamFactory14);
        org.junit.Assert.assertNotNull(modelReader19);
        org.junit.Assert.assertNotNull(modelWriter25);
        org.junit.Assert.assertNotNull(modelWriter35);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(modelReader51);
        org.junit.Assert.assertNotNull(modelReader54);
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        org.jboss.dmr.ListModelValue listModelValue0 = new org.jboss.dmr.ListModelValue();
        int int2 = listModelValue0.asInt((int) (byte) 10);
        org.jboss.dmr.ModelValue modelValue3 = listModelValue0.resolve();
        org.jboss.dmr.ModelValue modelValue4 = listModelValue0.protect();
        org.jboss.dmr.ModelValue modelValue5 = listModelValue0.protect();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(modelValue3);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertNotNull(modelValue5);
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double3 = longModelValue1.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        byte[] byteArray8 = longModelValue5.asBytes();
        boolean boolean9 = longModelValue1.equals(longModelValue5);
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue11.asLong((long) (short) 0);
        java.math.BigInteger bigInteger14 = longModelValue11.asBigInteger();
        boolean boolean15 = longModelValue5.equals(longModelValue11);
        int int17 = longModelValue11.asInt((int) (byte) 100);
        boolean boolean19 = longModelValue11.asBoolean(true);
        int int21 = longModelValue11.asInt(0);
        int int22 = longModelValue11.asInt();
        double double24 = longModelValue11.asDouble((double) 0.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ModelValue modelValue12 = expressionValue8.resolve();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(modelValue12);
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        int int13 = bigIntegerModelValue11.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue14 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double15 = booleanModelValue14.asDouble();
        org.jboss.dmr.ModelValue modelValue16 = booleanModelValue14.copy();
        java.math.BigInteger bigInteger17 = booleanModelValue14.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue18 = new org.jboss.dmr.BigIntegerModelValue(bigInteger17);
        java.lang.String str19 = bigIntegerModelValue18.asString();
        java.math.BigInteger bigInteger20 = bigIntegerModelValue18.asBigInteger();
        boolean boolean21 = bigIntegerModelValue11.equals(bigIntegerModelValue18);
        int int22 = bigIntegerModelValue18.asInt();
        boolean boolean23 = bigIntegerModelValue4.equals(bigIntegerModelValue18);
        boolean boolean25 = bigIntegerModelValue4.asBoolean(true);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.StringModelValue stringModelValue6 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        boolean boolean7 = stringModelValue3.equals(stringModelValue6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression12 = stringModelValue11.asExpression();
        boolean boolean13 = stringModelValue9.equals(stringModelValue11);
        boolean boolean14 = stringModelValue6.equals(stringModelValue11);
        java.lang.String str15 = stringModelValue11.asString();
        org.jboss.dmr.BooleanModelValue booleanModelValue16 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double17 = booleanModelValue16.asDouble();
        org.jboss.dmr.ModelValue modelValue18 = booleanModelValue16.copy();
        java.math.BigInteger bigInteger19 = booleanModelValue16.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue20 = new org.jboss.dmr.BigIntegerModelValue(bigInteger19);
        double double22 = bigIntegerModelValue20.asDouble((double) 'b');
        double double23 = bigIntegerModelValue20.asDouble();
        double double25 = bigIntegerModelValue20.asDouble(8.0d);
        org.jboss.dmr.ModelType modelType26 = org.jboss.dmr.ModelType.PROPERTY;
        char char27 = modelType26.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue28 = org.jboss.dmr.TypeModelValue.of(modelType26);
        boolean boolean29 = typeModelValue28.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression30 = typeModelValue28.asExpression();
        boolean boolean31 = bigIntegerModelValue20.equals((java.lang.Object) typeModelValue28);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ModelType modelType37 = modelNode35.getType();
        org.jboss.dmr.TypeModelValue typeModelValue38 = org.jboss.dmr.TypeModelValue.of(modelType37);
        boolean boolean40 = typeModelValue38.asBoolean(false);
        boolean boolean41 = typeModelValue28.equals(typeModelValue38);
        org.jboss.dmr.ModelType modelType42 = org.jboss.dmr.ModelType.PROPERTY;
        char char43 = modelType42.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue44 = org.jboss.dmr.TypeModelValue.of(modelType42);
        boolean boolean45 = typeModelValue44.asBoolean();
        java.lang.String str46 = typeModelValue44.asString();
        boolean boolean47 = typeModelValue28.equals(typeModelValue44);
        boolean boolean48 = stringModelValue11.equals((java.lang.Object) typeModelValue44);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = stringModelValue11.asBoolean(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str15, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(booleanModelValue16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + modelType26 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType26.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + 'p' + "'", char27 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertTrue("'" + modelType37 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType37.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + modelType42 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType42.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char43 + "' != '" + 'p' + "'", char43 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PROPERTY" + "'", str46, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        org.jboss.dmr.ModelType modelType5 = org.jboss.dmr.ModelType.PROPERTY;
        char char6 = modelType5.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue7 = org.jboss.dmr.TypeModelValue.of(modelType5);
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        boolean boolean11 = typeModelValue7.equals(typeModelValue10);
        java.lang.String str12 = typeModelValue10.asString();
        org.jboss.dmr.ValueExpression valueExpression13 = typeModelValue10.asExpression();
        org.jboss.dmr.ModelType modelType14 = typeModelValue10.asType();
        boolean boolean16 = typeModelValue10.asBoolean(true);
        java.lang.String str17 = typeModelValue10.asString();
        boolean boolean18 = typeModelValue10.asBoolean();
        boolean boolean19 = intModelValue1.equals((java.lang.Object) typeModelValue10);
        boolean boolean20 = typeModelValue10.asBoolean();
        java.io.DataOutput dataOutput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeModelValue10.writeExternal(dataOutput21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType5.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'p' + "'", char6 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue7);
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PROPERTY" + "'", str12, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType14.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PROPERTY" + "'", str17, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        double double9 = bigDecimalModelValue7.asDouble((double) 'p');
        boolean boolean10 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue7.asExpression();
        long long12 = bigDecimalModelValue7.asLong();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int3 = doubleModelValue1.asInt((int) 'l');
        java.math.BigDecimal bigDecimal4 = doubleModelValue1.asBigDecimal();
        byte[] byteArray5 = doubleModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression6 = doubleModelValue1.asExpression();
        org.jboss.dmr.ValueExpression valueExpression7 = doubleModelValue1.asExpression();
        java.math.BigDecimal bigDecimal8 = valueExpression7.resolveBigDecimal();
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue(1L);
        long long12 = longModelValue10.asLong((long) (short) 0);
        java.lang.String str13 = longModelValue10.asString();
        org.jboss.dmr.ValueExpression valueExpression14 = longModelValue10.asExpression();
        int int15 = valueExpression14.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue(valueExpression14);
        org.jboss.dmr.ExpressionValue expressionValue18 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression19 = expressionValue18.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver20 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str21 = valueExpression19.resolveString(valueExpressionResolver20);
        java.lang.String str23 = valueExpressionResolver20.resolvePart("\"[97L]\"");
        java.math.BigDecimal bigDecimal24 = valueExpression14.resolveBigDecimal(valueExpressionResolver20);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = valueExpression7.resolveInt(valueExpressionResolver20);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"10.0\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(bigDecimal24);
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        org.jboss.dmr.ModelType modelType5 = org.jboss.dmr.ModelType.STRING;
        boolean boolean6 = booleanModelValue1.equals((java.lang.Object) modelType5);
        org.jboss.dmr.TypeModelValue typeModelValue7 = org.jboss.dmr.TypeModelValue.of(modelType5);
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue7.asExpression();
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal11 = longModelValue10.asBigDecimal();
        int int12 = longModelValue10.asInt();
        boolean boolean13 = typeModelValue7.equals((java.lang.Object) longModelValue10);
        int int15 = longModelValue10.asInt((int) 'a');
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType5.equals(org.jboss.dmr.ModelType.STRING));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typeModelValue7);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        org.jboss.dmr.ModelValue modelValue9 = listModelValue5.copy();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory11 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream12 = null;
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream12, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        int int22 = inputStream14.read(byteArray18, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream14, (-1));
        org.jboss.dmr.stream.ModelReader modelReader25 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream24);
        boolean boolean26 = modelReader25.isBigInteger();
        boolean boolean27 = modelReader25.isLong();
        boolean boolean28 = modelReader25.isBigDecimal();
        boolean boolean29 = modelReader25.isUndefined();
        boolean boolean30 = modelReader25.isUndefined();
        boolean boolean31 = modelReader25.isObjectStart();
        boolean boolean32 = modelReader25.isObjectEnd();
        boolean boolean33 = modelReader25.isBytes();
        boolean boolean34 = modelReader25.isDouble();
        boolean boolean35 = modelReader25.isBigInteger();
        boolean boolean36 = modelReader25.isDouble();
        boolean boolean37 = modelReader25.isObjectStart();
        boolean boolean38 = modelReader25.isPropertyStart();
        boolean boolean39 = listModelValue5.equals((java.lang.Object) modelReader25);
        int int41 = listModelValue5.asInt((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode42 = listModelValue5.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(modelStreamFactory11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(modelReader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.String> strSet4 = booleanModelValue1.getKeys();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertNotNull(valueExpression3);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isPropertyStart();
        boolean boolean23 = modelReader15.isListEnd();
        boolean boolean24 = modelReader15.isDouble();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        outputStream3.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream6 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.Base64.OutputStream outputStream7 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream6);
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        double double12 = longModelValue9.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression13 = longModelValue9.asExpression();
        long long15 = longModelValue9.asLong((long) 'a');
        int int17 = longModelValue9.asInt((int) '4');
        java.lang.String str18 = longModelValue9.asString();
        long long19 = longModelValue9.asLong();
        byte[] byteArray20 = longModelValue9.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            outputStream7.write(byteArray20, 0, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isPropertyStart();
        boolean boolean23 = modelReader15.isInt();
        boolean boolean24 = modelReader15.isExpression();
        boolean boolean25 = modelReader15.isObjectStart();
        boolean boolean26 = modelReader15.isLong();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelEvent modelEvent27 = modelReader15.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue0.asObject();
        int int7 = modelNode5.asInt((int) '#');
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isBoolean();
        boolean boolean21 = modelReader15.isListStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType22 = modelReader15.getType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) (short) 10);
        java.io.OutputStream outputStream2 = null;
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream(outputStream2);
        outputStream3.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream5 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.Base64.OutputStream outputStream6 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream5);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger12 = booleanModelValue11.asBigInteger();
        byte[] byteArray13 = booleanModelValue11.asBytes();
        org.jboss.dmr.ModelNode modelNode14 = modelNode8.set("expression \"hi!\"", byteArray13);
        outputStream5.write(byteArray13);
        org.jboss.dmr.BytesModelValue bytesModelValue16 = new org.jboss.dmr.BytesModelValue(byteArray13);
        org.jboss.dmr.ModelType modelType17 = bytesModelValue16.getType();
        long long19 = bytesModelValue16.asLong((long) (-1));
        boolean boolean20 = intModelValue1.equals((java.lang.Object) long19);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType17 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType17.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.set((int) '#');
        java.lang.Boolean boolean4 = modelNode1.asBooleanOrNull();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        java.lang.String str9 = modelNode5.toString();
        org.jboss.dmr.ModelNode modelNode10 = modelNode5.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode12 = modelNode5.set(100);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode17 = modelNode15.set((int) '#');
        org.jboss.dmr.ModelNode modelNode18 = modelNode5.setNoCopy("EXPRESSION_VALUE", modelNode17);
        org.jboss.dmr.ModelNode modelNode19 = modelNode18.resolve();
        org.jboss.dmr.ModelType modelType20 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode(modelType20);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        org.jboss.dmr.Property property27 = new org.jboss.dmr.Property("", modelNode26);
        org.jboss.dmr.ModelNode modelNode28 = modelNode21.set(property27);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue(property27);
        org.jboss.dmr.PropertyModelValue propertyModelValue30 = new org.jboss.dmr.PropertyModelValue(property27);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = propertyModelValue30.asList();
        org.jboss.dmr.ModelNode modelNode32 = modelNode19.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList31);
        org.jboss.dmr.IntModelValue intModelValue35 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str36 = intModelValue35.asString();
        double double38 = intModelValue35.asDouble((double) 2);
        java.math.BigDecimal bigDecimal39 = intModelValue35.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode40 = modelNode32.add("(\"hi!\" => 0.0)", bigDecimal39);
        org.jboss.dmr.ModelNode modelNode41 = modelNode1.set(bigDecimal39);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode42 = modelNode1.addEmptyObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(\"hi!\" => 0.0)" + "'", str9, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + modelType20 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType20.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "32" + "'", str36, "32");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 32.0d + "'", double38 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode41);
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode7 = listModelValue5.asObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.setEmptyObject();
        int int9 = modelNode8.asInt();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 35L);
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        org.jboss.dmr.ModelValue modelValue3 = booleanModelValue1.protect();
        long long4 = booleanModelValue1.asLong();
        byte[] byteArray5 = booleanModelValue1.asBytes();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNotNull(modelValue3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0]");
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        boolean boolean8 = listModelValue5.equals((java.lang.Object) true);
        boolean boolean9 = listModelValue5.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList10 = listModelValue5.asList();
        org.jboss.dmr.ModelValue modelValue11 = listModelValue5.protect();
        org.jboss.dmr.ModelNode modelNode12 = listModelValue5.asObject();
        java.lang.Object obj13 = null;
        boolean boolean14 = listModelValue5.equals(obj13);
        boolean boolean16 = listModelValue5.asBoolean(false);
        java.lang.String str17 = listModelValue5.asString();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(modelNodeList10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str17, "[(\"hi!\" => 0.0)]");
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.resolve();
        java.lang.String str3 = modelNode1.asString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set((long) 52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.setExpression("hi!", "hi!");
        java.lang.String str11 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode7.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set((double) 0);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.PROPERTY;
        char char17 = modelType16.getTypeChar();
        org.jboss.dmr.ModelNode modelNode18 = modelNode7.set("[(\"hi!\" => 0.0)]", modelType16);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode18);
        org.jboss.dmr.ModelNode modelNode20 = modelNode5.set(property19);
        org.jboss.dmr.PropertyModelValue propertyModelValue21 = new org.jboss.dmr.PropertyModelValue(property19);
        org.jboss.dmr.ModelValue modelValue22 = propertyModelValue21.resolve();
        java.io.DataOutput dataOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue21.writeExternal(dataOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str11, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType16.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'p' + "'", char17 == 'p');
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelValue22);
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        boolean boolean11 = modelNode8.equals((java.lang.Object) 100L);
        boolean boolean12 = modelNode0.equals(modelNode8);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int22 = modelNode21.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.setExpression("hi!", "hi!");
        java.lang.String str27 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode23.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode29 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode8.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode33 = modelNode8.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelType modelType34 = modelNode33.getType();
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.set("hi!", 0.0d);
        org.jboss.dmr.Property property40 = new org.jboss.dmr.Property("", modelNode39);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode42 = modelNode39.get(strArray41);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode46.asList();
        org.jboss.dmr.ListModelValue listModelValue48 = new org.jboss.dmr.ListModelValue(modelNodeList47);
        org.jboss.dmr.ModelNode modelNode49 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue48);
        org.jboss.dmr.ModelValue modelValue50 = listModelValue48.resolve();
        int int52 = listModelValue48.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList53 = listModelValue48.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList54 = modelNode42.asPropertyList(propertyList53);
        org.jboss.dmr.ModelNode modelNode57 = modelNode42.setExpression("\"(\\\"hi!\\\" => 0.0)\"", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelNode modelNode60 = modelNode42.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", (double) 0.0f);
        boolean boolean62 = modelNode42.hasDefined((int) 'b');
        org.jboss.dmr.ModelNode modelNode65 = modelNode42.set("Expression \"hi!\"", false);
        org.jboss.dmr.StringModelValue stringModelValue67 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression68 = stringModelValue67.asExpression();
        org.jboss.dmr.ModelNode modelNode69 = new org.jboss.dmr.ModelNode(valueExpression68);
        org.jboss.dmr.ModelNode modelNode71 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode74 = modelNode71.set("hi!", 0.0d);
        org.jboss.dmr.Property property75 = new org.jboss.dmr.Property("", modelNode74);
        java.lang.String[] strArray76 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode77 = modelNode74.get(strArray76);
        boolean boolean78 = modelNode69.has(strArray76);
        boolean boolean79 = modelNode42.has(strArray76);
        org.jboss.dmr.ModelNode modelNode80 = modelNode33.get(strArray76);
        org.jboss.dmr.ModelNode modelNode82 = modelNode80.set(true);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str27, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + modelType34 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType34.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertNotNull(modelValue50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(propertyList53);
        org.junit.Assert.assertNotNull(propertyList54);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(modelNode65);
        org.junit.Assert.assertNotNull(valueExpression68);
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(modelNode77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertNotNull(modelNode82);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        int int6 = booleanModelValue1.asInt(52);
        double double7 = booleanModelValue1.asDouble();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        org.jboss.dmr.Property property13 = new org.jboss.dmr.Property("", modelNode12);
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.get(strArray14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int17 = modelNode16.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.setExpression("hi!", "hi!");
        java.lang.String str22 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode18);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode18.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode24 = modelNode16.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList23);
        org.jboss.dmr.ModelNode modelNode25 = modelNode15.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList23);
        int int26 = modelNode15.asInt();
        org.jboss.dmr.ModelNode modelNode28 = modelNode15.get((int) 'J');
        boolean boolean29 = booleanModelValue1.equals((java.lang.Object) 'J');
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.setExpression("hi!", "hi!");
        java.lang.String str34 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode30);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList35 = modelNode30.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode37 = modelNode30.set((double) 0);
        org.jboss.dmr.ModelType modelType38 = org.jboss.dmr.ModelType.PROPERTY;
        org.jboss.dmr.ModelNode modelNode39 = modelNode30.set(modelType38);
        boolean boolean40 = booleanModelValue1.equals((java.lang.Object) modelNode30);
        org.jboss.dmr.ModelNode modelNode43 = modelNode30.set("rO0ABXVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAJ0AFFyTzBBQlhOeUFCZHZjbWN1YW1KdmMzTXVaRzF5TGsxdlpHVnNUbTlrWlJ3dG9VU2RvNDQvREFBQWVIQjNESEFBQTJocElXVUFBMmhwCklYZz1xAH4AAg==", (long) 2);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str22, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str34, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList35);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertTrue("'" + modelType38 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType38.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(modelNode43);
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        java.math.BigInteger bigInteger1 = booleanModelValue0.asBigInteger();
        boolean boolean2 = booleanModelValue0.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue0.asExpression();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertNotNull(bigInteger1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(valueExpression3);
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int8 = bytesModelValue4.asInt((int) 'a');
        java.lang.String str9 = bytesModelValue4.asString();
        long long10 = bytesModelValue4.asLong();
        org.jboss.dmr.stream.ModelEvent modelEvent11 = org.jboss.dmr.stream.ModelEvent.BIG_INTEGER;
        boolean boolean12 = bytesModelValue4.equals((java.lang.Object) modelEvent11);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str9, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + modelEvent11 + "' != '" + org.jboss.dmr.stream.ModelEvent.BIG_INTEGER + "'", modelEvent11.equals(org.jboss.dmr.stream.ModelEvent.BIG_INTEGER));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode(valueExpression3);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(valueExpression3);
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression5 = stringModelValue4.asExpression();
        boolean boolean7 = stringModelValue4.equals((java.lang.Object) (-1.0d));
        java.lang.String str8 = stringModelValue4.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent9 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean10 = stringModelValue4.equals((java.lang.Object) modelEvent9);
        org.jboss.dmr.StringModelValue stringModelValue12 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue14 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean17 = stringModelValue14.equals(stringModelValue16);
        byte[] byteArray18 = stringModelValue16.asBytes();
        java.lang.Object obj19 = null;
        boolean boolean20 = stringModelValue16.equals(obj19);
        boolean boolean22 = stringModelValue16.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean23 = stringModelValue12.equals(stringModelValue16);
        boolean boolean24 = stringModelValue4.equals(stringModelValue16);
        boolean boolean25 = stringModelValue1.equals(stringModelValue16);
        org.jboss.dmr.StringModelValue stringModelValue27 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression28 = stringModelValue27.asExpression();
        boolean boolean30 = stringModelValue27.equals((java.lang.Object) (-1.0d));
        java.lang.String str31 = stringModelValue27.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent32 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean33 = stringModelValue27.equals((java.lang.Object) modelEvent32);
        org.jboss.dmr.StringModelValue stringModelValue35 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue37 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue39 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean40 = stringModelValue37.equals(stringModelValue39);
        byte[] byteArray41 = stringModelValue39.asBytes();
        java.lang.Object obj42 = null;
        boolean boolean43 = stringModelValue39.equals(obj42);
        boolean boolean45 = stringModelValue39.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean46 = stringModelValue35.equals(stringModelValue39);
        boolean boolean47 = stringModelValue27.equals(stringModelValue39);
        boolean boolean48 = stringModelValue1.equals(stringModelValue39);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = stringModelValue39.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str8, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent9 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent9.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str31, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent32 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent32.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        boolean boolean8 = listModelValue5.equals((java.lang.Object) true);
        boolean boolean9 = listModelValue5.asBoolean();
        boolean boolean11 = listModelValue5.asBoolean(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode13 = listModelValue5.requireChild((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [-1]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        int int7 = bigIntegerModelValue4.asInt();
        double double8 = bigIntegerModelValue4.asDouble();
        java.math.BigInteger bigInteger9 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.ValueExpression valueExpression10 = bigIntegerModelValue4.asExpression();
        org.jboss.dmr.LongModelValue longModelValue12 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str13 = longModelValue12.asString();
        byte[] byteArray14 = longModelValue12.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue15 = new org.jboss.dmr.BytesModelValue(byteArray14);
        java.lang.String str16 = bytesModelValue15.asString();
        int int17 = bytesModelValue15.asInt();
        byte[] byteArray18 = bytesModelValue15.asBytes();
        org.jboss.dmr.LongModelValue longModelValue20 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str21 = longModelValue20.asString();
        byte[] byteArray22 = longModelValue20.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue23 = new org.jboss.dmr.BytesModelValue(byteArray22);
        java.lang.String str24 = bytesModelValue23.asString();
        int int25 = bytesModelValue23.asInt();
        int int26 = bytesModelValue23.asInt();
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        double double32 = bytesModelValue31.asDouble();
        boolean boolean33 = bytesModelValue23.equals(bytesModelValue31);
        byte[] byteArray34 = bytesModelValue31.asBytes();
        java.math.BigInteger bigInteger35 = bytesModelValue31.asBigInteger();
        boolean boolean36 = bytesModelValue15.equals(bytesModelValue31);
        int int38 = bytesModelValue31.asInt((int) 'J');
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory40 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream41 = null;
        org.jboss.dmr.Base64.InputStream inputStream43 = new org.jboss.dmr.Base64.InputStream(inputStream41, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream43);
        org.jboss.dmr.stream.ModelReader modelReader45 = modelStreamFactory40.newModelReader((java.io.InputStream) inputStream44);
        java.io.OutputStream outputStream46 = null;
        org.jboss.dmr.Base64.OutputStream outputStream47 = new org.jboss.dmr.Base64.OutputStream(outputStream46);
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream47);
        outputStream47.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelStreamFactory40.newModelWriter((java.io.OutputStream) outputStream47);
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelWriter51.writeListStart();
        bytesModelValue31.write(modelWriter52);
        org.jboss.dmr.BooleanModelValue booleanModelValue55 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray56 = booleanModelValue55.asBytes();
        java.lang.String str57 = booleanModelValue55.asString();
        int int58 = booleanModelValue55.asInt();
        long long59 = booleanModelValue55.asLong();
        boolean boolean61 = booleanModelValue55.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger62 = booleanModelValue55.asBigInteger();
        java.lang.String str63 = booleanModelValue55.asString();
        byte[] byteArray64 = booleanModelValue55.asBytes();
        java.lang.String str66 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) byteArray64, 10);
        org.jboss.dmr.stream.ModelWriter modelWriter67 = modelWriter52.writeBytes(byteArray64);
        bigIntegerModelValue4.write(modelWriter52);
        org.jboss.dmr.ValueExpression valueExpression69 = bigIntegerModelValue4.asExpression();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str16, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str24, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4.9E-324d + "'", double32 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory40);
        org.junit.Assert.assertNotNull(modelReader45);
        org.junit.Assert.assertNotNull(modelWriter51);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(booleanModelValue55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "true" + "'", str57, "true");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "true" + "'", str63, "true");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA" + "'", str66, "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.junit.Assert.assertNotNull(modelWriter67);
        org.junit.Assert.assertNotNull(valueExpression69);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", byteArray6);
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode(modelType8);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        org.jboss.dmr.Property property15 = new org.jboss.dmr.Property("", modelNode14);
        org.jboss.dmr.ModelNode modelNode16 = modelNode9.set(property15);
        org.jboss.dmr.PropertyModelValue propertyModelValue17 = new org.jboss.dmr.PropertyModelValue(property15);
        org.jboss.dmr.PropertyModelValue propertyModelValue18 = new org.jboss.dmr.PropertyModelValue(property15);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = propertyModelValue18.asList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = propertyModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList21 = modelNode0.asPropertyList(propertyList20);
        java.io.PrintWriter printWriter22 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode0.writeString(printWriter22, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType8.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(propertyList21);
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.resolve();
        java.lang.String str3 = modelNode1.asString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set((long) 52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.setExpression("hi!", "hi!");
        java.lang.String str11 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode7.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set((double) 0);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.PROPERTY;
        char char17 = modelType16.getTypeChar();
        org.jboss.dmr.ModelNode modelNode18 = modelNode7.set("[(\"hi!\" => 0.0)]", modelType16);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode18);
        org.jboss.dmr.ModelNode modelNode20 = modelNode5.set(property19);
        org.jboss.dmr.ModelNode modelNode22 = modelNode5.set(false);
        java.io.PrintWriter printWriter23 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode5.writeString(printWriter23, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str11, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType16.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'p' + "'", char17 == 'p');
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode22);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.lang.String str5 = objectModelValue0.asString();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3CUQ/8AAAAAAAAHg=");
        org.jboss.dmr.ExpressionValue expressionValue10 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue12 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean13 = expressionValue10.equals(expressionValue12);
        org.jboss.dmr.ExpressionValue expressionValue15 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue17 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean18 = expressionValue15.equals(expressionValue17);
        boolean boolean19 = expressionValue10.equals(expressionValue17);
        org.jboss.dmr.ValueExpression valueExpression20 = expressionValue17.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue22 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression23 = expressionValue22.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue25 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str26 = expressionValue25.toString();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        org.jboss.dmr.Property property32 = new org.jboss.dmr.Property("", modelNode31);
        boolean boolean33 = expressionValue25.equals((java.lang.Object) property32);
        boolean boolean34 = expressionValue22.equals(expressionValue25);
        boolean boolean35 = expressionValue17.equals((java.lang.Object) boolean34);
        org.jboss.dmr.ValueExpression valueExpression36 = expressionValue17.asExpression();
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode(valueExpression36);
        org.jboss.dmr.ModelNode modelNode38 = modelNode37.setEmptyList();
        org.jboss.dmr.IntModelValue intModelValue40 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str41 = intModelValue40.asString();
        double double43 = intModelValue40.asDouble((double) 2);
        java.math.BigInteger bigInteger44 = intModelValue40.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue45 = new org.jboss.dmr.BigIntegerModelValue(bigInteger44);
        org.jboss.dmr.ModelNode modelNode46 = modelNode38.set(bigInteger44);
        org.jboss.dmr.ModelNode modelNode47 = modelNode7.set("rO0ABXNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRM\nZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFn\nbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7/\n///+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAABAXg=", modelNode46);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = modelNode7.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "expression \"hi!\"" + "'", str26, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(valueExpression36);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "32" + "'", str41, "32");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 32.0d + "'", double43 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode47);
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) 1);
        org.jboss.dmr.ValueExpression valueExpression2 = longModelValue1.asExpression();
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) valueExpression2, 0);
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3AwABMXg=" + "'", str4, "rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3AwABMXg=");
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.math.BigDecimal bigDecimal5 = bytesModelValue4.asBigDecimal();
        java.math.BigInteger bigInteger6 = bytesModelValue4.asBigInteger();
        java.math.BigInteger bigInteger7 = bytesModelValue4.asBigInteger();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode(bigInteger7);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigInteger7);
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        org.jboss.dmr.ModelNode modelNode6 = modelNodeFactory0.readFrom("0.0", true);
        org.jboss.dmr.ModelNode modelNode9 = modelNodeFactory0.readFrom("(\"hi!\" => expression \"hi!\")", false);
        org.jboss.dmr.ModelNode modelNode12 = modelNodeFactory0.readFrom("\"{\n    \\\"hi!\\\" : {\n        \\\"EXPRESSION_VALUE\\\" : \\\"hi!\\\"\n    }\n}\"", true);
        java.io.Reader reader13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode15 = modelNodeFactory0.readFrom(reader13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode12);
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode8 = org.jboss.dmr.ModelNode.ZERO_LONG;
        boolean boolean10 = modelNode8.asBoolean(false);
        org.jboss.dmr.ModelType modelType11 = modelNode8.getType();
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set(modelType11);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = modelNode0.add((double) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType11.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertNotNull(modelNode12);
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        java.lang.Long long46 = modelNode45.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray47 = new org.jboss.dmr.ModelNode[] { modelNode41, modelNode45 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList48 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48, modelNodeArray47);
        org.jboss.dmr.ModelNode modelNode50 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode52 = modelNode50.set("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode54 = modelNode52.remove("(\"\\\"bytes {\\\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\\\n}\\\"\" => INT)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNull(long46);
        org.junit.Assert.assertNotNull(modelNodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode52);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter14 = modelWriter12.writePropertyStart();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.set("hi!", 0.0d);
        org.jboss.dmr.Property property24 = new org.jboss.dmr.Property("", modelNode23);
        boolean boolean26 = modelNode23.equals((java.lang.Object) 100L);
        boolean boolean27 = modelNode15.equals(modelNode23);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        org.jboss.dmr.Property property33 = new org.jboss.dmr.Property("", modelNode32);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.get(strArray34);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int37 = modelNode36.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode41 = modelNode38.setExpression("hi!", "hi!");
        java.lang.String str42 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode38);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList43 = modelNode38.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode44 = modelNode36.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList43);
        org.jboss.dmr.ModelNode modelNode45 = modelNode35.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList43);
        org.jboss.dmr.ModelNode modelNode46 = modelNode23.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList43);
        org.jboss.dmr.BooleanModelValue booleanModelValue48 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger49 = booleanModelValue48.asBigInteger();
        org.jboss.dmr.ModelNode modelNode50 = modelNode46.add(bigInteger49);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter51 = modelWriter14.writeBigInteger(bigInteger49);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str42, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList43);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(booleanModelValue48);
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(modelNode50);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ModelType modelType9 = typeModelValue5.asType();
        boolean boolean10 = typeModelValue5.asBoolean();
        org.jboss.dmr.ModelType modelType11 = typeModelValue5.asType();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode24.asList();
        org.jboss.dmr.ListModelValue listModelValue26 = new org.jboss.dmr.ListModelValue(modelNodeList25);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue26);
        org.jboss.dmr.ModelValue modelValue28 = listModelValue26.resolve();
        int int30 = listModelValue26.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList31 = listModelValue26.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList32 = modelNode20.asPropertyList(propertyList31);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        org.jboss.dmr.Property property38 = new org.jboss.dmr.Property("", modelNode37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.get(strArray39);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode44.asList();
        org.jboss.dmr.ListModelValue listModelValue46 = new org.jboss.dmr.ListModelValue(modelNodeList45);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue46);
        org.jboss.dmr.ModelValue modelValue48 = listModelValue46.resolve();
        int int50 = listModelValue46.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList51 = listModelValue46.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList52 = modelNode40.asPropertyList(propertyList51);
        modelNode20.setNoCopy(modelNode40);
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode58 = modelNode55.set("hi!", 0.0d);
        org.jboss.dmr.Property property59 = new org.jboss.dmr.Property("", modelNode58);
        java.lang.String[] strArray60 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode61 = modelNode58.get(strArray60);
        org.jboss.dmr.ModelNode modelNode62 = modelNode40.get(strArray60);
        org.jboss.dmr.Property property64 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode62, true);
        org.jboss.dmr.Property property65 = property64.clone();
        boolean boolean66 = typeModelValue5.equals((java.lang.Object) property65);
        org.jboss.dmr.Property property67 = property65.clone();
        org.jboss.dmr.ModelNode modelNode68 = property65.getValue();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelValue28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(propertyList31);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertNotNull(modelValue48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(propertyList51);
        org.junit.Assert.assertNotNull(propertyList52);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(modelNode68);
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelValue modelValue11 = propertyModelValue10.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue10.asList();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.lang.String str18 = modelNode14.toString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode14.set(property25);
        org.jboss.dmr.PropertyModelValue propertyModelValue28 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode26, false);
        org.jboss.dmr.Property property29 = propertyModelValue28.asProperty();
        boolean boolean30 = propertyModelValue10.equals(propertyModelValue28);
        org.jboss.dmr.ModelValue modelValue31 = propertyModelValue28.protect();
        java.lang.String str33 = propertyModelValue28.toJSONString(false);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long36 = modelNode35.asLong();
        org.jboss.dmr.ValueExpression valueExpression37 = modelNode35.asExpression();
        java.math.BigDecimal bigDecimal38 = valueExpression37.resolveBigDecimal();
        java.lang.String str39 = valueExpression37.getExpressionString();
        java.math.BigDecimal bigDecimal40 = valueExpression37.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue41 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal40);
        boolean boolean42 = bigDecimalModelValue41.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression43 = bigDecimalModelValue41.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver44 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        java.math.BigDecimal bigDecimal45 = valueExpression43.resolveBigDecimal(valueExpressionResolver44);
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode(bigDecimal45);
        boolean boolean47 = propertyModelValue28.equals((java.lang.Object) modelNode46);
        java.util.Set<java.lang.String> strSet48 = propertyModelValue28.getKeys();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(\"hi!\" => 0.0)" + "'", str18, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(modelValue31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\n    \"EXPRESSION_VALUE\" : {\n        \"\" : {\n            \"hi!\" : 0.0\n        }\n    }\n}" + "'", str33, "{\n    \"EXPRESSION_VALUE\" : {\n        \"\" : {\n            \"hi!\" : 0.0\n        }\n    }\n}");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(valueExpression37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1.0" + "'", str39, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(valueExpression43);
        org.junit.Assert.assertNotNull(valueExpressionResolver44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.set((int) '#');
        boolean boolean4 = modelNode1.isProtected();
        java.math.BigDecimal bigDecimal5 = modelNode1.asBigDecimal();
        boolean boolean7 = modelNode1.asBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode9 = modelNode1.require("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.jboss.dmr.Base64.decode("\"(\\\"hi!\\\" => 0.0)\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Bad Base64 input character at 0: 34(decimal)");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger10 = booleanModelValue9.asBigInteger();
        byte[] byteArray11 = booleanModelValue9.asBytes();
        org.jboss.dmr.ModelNode modelNode12 = modelNode6.set("expression \"hi!\"", byteArray11);
        outputStream3.write(byteArray11);
        org.jboss.dmr.BytesModelValue bytesModelValue14 = new org.jboss.dmr.BytesModelValue(byteArray11);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) bytesModelValue14);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode20 = modelNode18.set((int) '#');
        java.lang.Boolean boolean21 = modelNode18.asBooleanOrNull();
        org.jboss.dmr.Validation.validate(modelNode18, "1L");
        org.jboss.dmr.ModelNode modelNode24 = modelNode15.set("Expression \"10.0\"", modelNode18);
        double double25 = modelNode18.asDouble();
        java.io.InputStream inputStream26 = null;
        org.jboss.dmr.Base64.InputStream inputStream28 = new org.jboss.dmr.Base64.InputStream(inputStream26, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue30 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str31 = longModelValue30.asString();
        byte[] byteArray32 = longModelValue30.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue33 = new org.jboss.dmr.BytesModelValue(byteArray32);
        int int36 = inputStream28.read(byteArray32, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream28, (-1));
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        // The following exception was thrown during execution in test generation
        try {
            modelNode18.readExternal((java.io.InputStream) inputStream39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        long long3 = intModelValue1.asLong();
        org.jboss.dmr.ModelValue modelValue4 = intModelValue1.protect();
        java.lang.String str5 = intModelValue1.asString();
        double double6 = intModelValue1.asDouble();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.get(strArray13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue20);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue20.resolve();
        int int24 = listModelValue20.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList25 = listModelValue20.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList26 = modelNode14.asPropertyList(propertyList25);
        boolean boolean28 = modelNode14.has(0);
        boolean boolean29 = intModelValue1.equals((java.lang.Object) boolean28);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode31 = intModelValue1.removeChild((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "32" + "'", str5, "32");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 32.0d + "'", double6 == 32.0d);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(propertyList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        java.io.InputStream inputStream22 = null;
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue26 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str27 = longModelValue26.asString();
        byte[] byteArray28 = longModelValue26.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue29 = new org.jboss.dmr.BytesModelValue(byteArray28);
        int int32 = inputStream24.read(byteArray28, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream34 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24, (-1));
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream36);
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream36);
        java.io.OutputStream outputStream39 = null;
        org.jboss.dmr.Base64.OutputStream outputStream40 = new org.jboss.dmr.Base64.OutputStream(outputStream39);
        outputStream40.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream42 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40);
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream42);
        outputStream43.flushBase64();
        outputStream43.resumeEncoding();
        org.jboss.dmr.LongModelValue longModelValue47 = new org.jboss.dmr.LongModelValue(1L);
        long long48 = longModelValue47.asLong();
        byte[] byteArray49 = longModelValue47.asBytes();
        outputStream43.write(byteArray49, 0, (-1));
        org.jboss.dmr.Base64.OutputStream outputStream54 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43, (-1));
        java.nio.charset.Charset charset55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter56 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream54, charset55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        org.jboss.dmr.stream.ModelException modelException1 = new org.jboss.dmr.stream.ModelException("{\"hi!\" => 0.0}");
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        byte[] byteArray14 = intModelValue9.asBytes();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        java.lang.String str21 = listModelValue20.asString();
        long long22 = listModelValue20.asLong();
        java.lang.String str23 = listModelValue20.asString();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode27.asList();
        org.jboss.dmr.ListModelValue listModelValue29 = new org.jboss.dmr.ListModelValue(modelNodeList28);
        java.lang.String str30 = listModelValue29.asString();
        long long31 = listModelValue29.asLong();
        int int33 = listModelValue29.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue34 = listModelValue29.protect();
        boolean boolean36 = listModelValue29.has((int) (short) 100);
        boolean boolean37 = listModelValue20.equals(listModelValue29);
        boolean boolean39 = listModelValue20.has((int) (short) -1);
        long long40 = listModelValue20.asLong();
        java.lang.String str41 = listModelValue20.asString();
        long long42 = listModelValue20.asLong();
        boolean boolean43 = intModelValue9.equals((java.lang.Object) long42);
        int int44 = intModelValue9.asInt();
        boolean boolean46 = intModelValue9.asBoolean(false);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str21, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str23, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str30, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(modelValue34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str41, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(10);
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        org.jboss.dmr.ModelValue modelValue8 = listModelValue7.resolve();
        boolean boolean9 = intModelValue1.equals((java.lang.Object) modelValue8);
        long long11 = intModelValue1.asLong(10L);
        java.math.BigInteger bigInteger12 = intModelValue1.asBigInteger();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelValue8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        java.lang.String str9 = property7.getName();
        org.jboss.dmr.Property property10 = property7.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue11.asList();
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean17 = expressionValue14.equals(expressionValue16);
        org.jboss.dmr.ExpressionValue expressionValue19 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue21 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean22 = expressionValue19.equals(expressionValue21);
        boolean boolean23 = expressionValue14.equals(expressionValue21);
        org.jboss.dmr.ModelValue modelValue24 = expressionValue14.resolve();
        java.lang.String str25 = expressionValue14.asString();
        org.jboss.dmr.ModelValue modelValue26 = expressionValue14.resolve();
        java.lang.String str27 = expressionValue14.asString();
        boolean boolean28 = propertyModelValue11.equals((java.lang.Object) str27);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode30 = propertyModelValue11.getChild(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(modelValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        double double9 = bigDecimalModelValue7.asDouble();
        java.io.PrintWriter printWriter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue7.writeJSONString(printWriter10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isListEnd();
        boolean boolean24 = modelReader15.isPropertyStart();
        boolean boolean25 = modelReader15.isObjectEnd();
        boolean boolean26 = modelReader15.isExpression();
        boolean boolean27 = modelReader15.isBoolean();
        boolean boolean28 = modelReader15.isListEnd();
        boolean boolean29 = modelReader15.isString();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = modelNode16.set(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue24 = new org.jboss.dmr.PropertyModelValue(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue(property22);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = propertyModelValue25.asList();
        org.jboss.dmr.ModelNode modelNode27 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList26);
        org.jboss.dmr.IntModelValue intModelValue30 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str31 = intModelValue30.asString();
        double double33 = intModelValue30.asDouble((double) 2);
        java.math.BigDecimal bigDecimal34 = intModelValue30.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode35 = modelNode27.add("(\"hi!\" => 0.0)", bigDecimal34);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.set("hi!", 0.0d);
        java.lang.String str40 = modelNode36.toString();
        org.jboss.dmr.ModelNode modelNode41 = modelNode36.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode43 = modelNode36.set(100);
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode48 = modelNode46.set((int) '#');
        org.jboss.dmr.ModelNode modelNode49 = modelNode36.setNoCopy("EXPRESSION_VALUE", modelNode48);
        org.jboss.dmr.ModelNode modelNode52 = modelNode36.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode58 = modelNode55.set("hi!", 0.0d);
        java.lang.String str59 = modelNode55.toString();
        org.jboss.dmr.ModelNode modelNode60 = modelNode55.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode62 = modelNode55.set(100);
        org.jboss.dmr.ModelNode modelNode63 = modelNode54.add(modelNode55);
        int int65 = modelNode55.asInt(2);
        org.jboss.dmr.ModelType modelType67 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode68 = modelNode55.set("[(\"hi!\" => 0.0)]", modelType67);
        org.jboss.dmr.ModelNode modelNode69 = modelNode52.set("\"BYTES_VALUE\"", modelType67);
        org.jboss.dmr.ModelNode modelNode70 = modelNode27.add(modelNode69);
        org.jboss.dmr.ModelNode modelNode72 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode73 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode76 = modelNode73.set("hi!", 0.0d);
        java.lang.String str77 = modelNode73.toString();
        org.jboss.dmr.ModelNode modelNode78 = modelNode73.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode80 = modelNode73.set(100);
        org.jboss.dmr.ModelNode modelNode81 = modelNode72.add(modelNode73);
        org.jboss.dmr.ModelNode modelNode83 = modelNode81.set((double) (-1.0f));
        java.math.BigInteger bigInteger84 = modelNode81.asBigIntegerOrNull();
        org.jboss.dmr.ModelNode modelNode85 = modelNode27.add("", modelNode81);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property86 = modelNode81.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType15.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 32.0d + "'", double33 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(\"hi!\" => 0.0)" + "'", str40, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(\"hi!\" => 0.0)" + "'", str59, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + modelType67 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType67.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(\"hi!\" => 0.0)" + "'", str77, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertNotNull(modelNode81);
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(modelNode85);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        boolean boolean7 = booleanModelValue1.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger8 = booleanModelValue1.asBigInteger();
        java.lang.String str9 = booleanModelValue1.asString();
        byte[] byteArray10 = booleanModelValue1.asBytes();
        long long11 = booleanModelValue1.asLong();
        boolean boolean12 = booleanModelValue1.asBoolean();
        java.io.DataOutput dataOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            booleanModelValue1.writeExternal(dataOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode3 = objectModelValue0.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue0.getChild("[(\"hi!\" => 0.0)]");
        java.util.List<org.jboss.dmr.Property> propertyList6 = objectModelValue0.asPropertyList();
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue0.protect();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode11 = modelNode10.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue12 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue12.asObject();
        java.util.Set<java.lang.String> strSet14 = objectModelValue12.getKeys();
        boolean boolean16 = objectModelValue12.has((int) 'a');
        boolean boolean18 = objectModelValue12.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue19 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode20 = objectModelValue19.asObject();
        java.util.Set<java.lang.String> strSet21 = objectModelValue19.getKeys();
        boolean boolean23 = objectModelValue19.has((int) 'a');
        boolean boolean24 = objectModelValue12.equals(objectModelValue19);
        org.jboss.dmr.ModelNode modelNode25 = objectModelValue19.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = objectModelValue19.asList();
        org.jboss.dmr.ModelNode modelNode27 = modelNode10.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList26);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode10, true);
        org.jboss.dmr.ModelNode modelNode32 = modelNode10.add("H4sIAAAAAAAAANv/gQEMALshig4IAAAA", (double) 10);
        boolean boolean33 = objectModelValue0.equals((java.lang.Object) modelNode32);
        java.lang.String str34 = objectModelValue0.asString();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(propertyList6);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined}" + "'", str34, "{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined}");
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        boolean boolean8 = modelNode0.isDefined();
        org.jboss.dmr.ModelNode modelNode10 = modelNode0.set(true);
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set(false);
        java.lang.Boolean boolean13 = modelNode12.asBooleanOrNull();
        boolean boolean14 = modelNode12.asBoolean();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + false + "'", boolean13, false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression5 = stringModelValue4.asExpression();
        boolean boolean7 = stringModelValue4.equals((java.lang.Object) (-1.0d));
        java.lang.String str8 = stringModelValue4.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent9 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean10 = stringModelValue4.equals((java.lang.Object) modelEvent9);
        org.jboss.dmr.StringModelValue stringModelValue12 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue14 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean17 = stringModelValue14.equals(stringModelValue16);
        byte[] byteArray18 = stringModelValue16.asBytes();
        java.lang.Object obj19 = null;
        boolean boolean20 = stringModelValue16.equals(obj19);
        boolean boolean22 = stringModelValue16.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean23 = stringModelValue12.equals(stringModelValue16);
        boolean boolean24 = stringModelValue4.equals(stringModelValue16);
        boolean boolean25 = stringModelValue1.equals(stringModelValue16);
        org.jboss.dmr.StringModelValue stringModelValue27 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression28 = stringModelValue27.asExpression();
        boolean boolean30 = stringModelValue27.equals((java.lang.Object) (-1.0d));
        java.lang.String str31 = stringModelValue27.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent32 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean33 = stringModelValue27.equals((java.lang.Object) modelEvent32);
        org.jboss.dmr.StringModelValue stringModelValue35 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue37 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue39 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean40 = stringModelValue37.equals(stringModelValue39);
        byte[] byteArray41 = stringModelValue39.asBytes();
        java.lang.Object obj42 = null;
        boolean boolean43 = stringModelValue39.equals(obj42);
        boolean boolean45 = stringModelValue39.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean46 = stringModelValue35.equals(stringModelValue39);
        boolean boolean47 = stringModelValue27.equals(stringModelValue39);
        boolean boolean48 = stringModelValue1.equals(stringModelValue39);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType49 = stringModelValue1.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.jboss.dmr.ModelType.(\"\" => (\"hi!\" => 0.0))");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str8, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent9 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent9.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str31, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent32 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent32.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        boolean boolean8 = listModelValue5.equals((java.lang.Object) true);
        boolean boolean9 = listModelValue5.asBoolean();
        long long11 = listModelValue5.asLong((long) (short) 1);
        org.jboss.dmr.ModelNode modelNode12 = listModelValue5.asObject();
        int int13 = listModelValue5.asInt();
        long long14 = listModelValue5.asLong();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        org.jboss.dmr.ModelValue modelValue21 = listModelValue20.resolve();
        boolean boolean23 = listModelValue20.has((int) (byte) -1);
        boolean boolean24 = listModelValue5.equals(listModelValue20);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = listModelValue20.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream15);
        outputStream15.resumeEncoding();
        outputStream15.resumeEncoding();
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream15);
        org.jboss.dmr.StringModelValue stringModelValue21 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray22 = stringModelValue21.asBytes();
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter19.writeBytes(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter25 = modelWriter19.writeLong((long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(modelWriter23);
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.String> strSet3 = stringModelValue1.getKeys();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = listModelValue5.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode27, false);
        org.jboss.dmr.Property property30 = propertyModelValue29.asProperty();
        boolean boolean31 = listModelValue5.equals((java.lang.Object) propertyModelValue29);
        boolean boolean33 = propertyModelValue29.has("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3Fm8AAAABAABwAANo\naSFEAAAAAAAAAAB4");
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.resolve();
        java.lang.String str3 = modelNode1.asString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set((long) 52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.setExpression("hi!", "hi!");
        java.lang.String str11 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode7.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set((double) 0);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.PROPERTY;
        char char17 = modelType16.getTypeChar();
        org.jboss.dmr.ModelNode modelNode18 = modelNode7.set("[(\"hi!\" => 0.0)]", modelType16);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode18);
        org.jboss.dmr.ModelNode modelNode20 = modelNode5.set(property19);
        org.jboss.dmr.PropertyModelValue propertyModelValue21 = new org.jboss.dmr.PropertyModelValue(property19);
        org.jboss.dmr.ModelValue modelValue22 = propertyModelValue21.resolve();
        org.jboss.dmr.ModelNode modelNode23 = propertyModelValue21.asObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = modelNode23.require(112);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [112]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str11, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType16.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'p' + "'", char17 == 'p');
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        int int17 = listModelValue5.asInt();
        org.jboss.dmr.ModelValue modelValue18 = listModelValue5.protect();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(modelValue18);
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.get(strArray11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = modelNode12.asPropertyList(propertyList23);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList43 = listModelValue38.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList44 = modelNode32.asPropertyList(propertyList43);
        modelNode12.setNoCopy(modelNode32);
        org.jboss.dmr.ModelNode modelNode46 = modelNode2.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode12);
        boolean boolean47 = modelNode12.isDefined();
        org.jboss.dmr.PropertyModelValue propertyModelValue49 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==", modelNode12, true);
        boolean boolean51 = propertyModelValue49.has("[1]");
        java.lang.String str52 = propertyModelValue49.asString();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(\"rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==\" => (\"hi!\" => 0.0))" + "'", str52, "(\"rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("[big integer 1,big integer 1]");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = stringModelValue1.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"[big integer 1,big integer 1]\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        long long2 = objectModelValue0.asLong((long) (-1));
        boolean boolean3 = objectModelValue0.asBoolean();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory5 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream6 = null;
        org.jboss.dmr.Base64.InputStream inputStream8 = new org.jboss.dmr.Base64.InputStream(inputStream6, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream8);
        org.jboss.dmr.stream.ModelReader modelReader10 = modelStreamFactory5.newModelReader((java.io.InputStream) inputStream9);
        java.io.OutputStream outputStream11 = null;
        org.jboss.dmr.Base64.OutputStream outputStream12 = new org.jboss.dmr.Base64.OutputStream(outputStream11);
        org.jboss.dmr.Base64.OutputStream outputStream13 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream12);
        outputStream12.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter16 = modelStreamFactory5.newModelWriter((java.io.OutputStream) outputStream12);
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter16.writeListStart();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode20 = modelNode19.resolve();
        java.lang.String str21 = modelNode19.asString();
        org.jboss.dmr.ModelNode modelNode23 = modelNode19.set((long) 52);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.setExpression("hi!", "hi!");
        java.lang.String str29 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode25);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList30 = modelNode25.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode32 = modelNode25.set((double) 0);
        org.jboss.dmr.ModelType modelType34 = org.jboss.dmr.ModelType.PROPERTY;
        char char35 = modelType34.getTypeChar();
        org.jboss.dmr.ModelNode modelNode36 = modelNode25.set("[(\"hi!\" => 0.0)]", modelType34);
        org.jboss.dmr.Property property37 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode36);
        org.jboss.dmr.ModelNode modelNode38 = modelNode23.set(property37);
        org.jboss.dmr.ModelNode modelNode40 = modelNode23.set(false);
        boolean boolean41 = modelNode40.isProtected();
        org.jboss.dmr.ModelType modelType43 = org.jboss.dmr.ModelType.PROPERTY;
        char char44 = modelType43.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue45 = org.jboss.dmr.TypeModelValue.of(modelType43);
        char char46 = modelType43.getTypeChar();
        org.jboss.dmr.ModelNode modelNode47 = modelNode40.set("rO0ABXQAByJbOTdMXSI=", modelType43);
        org.jboss.dmr.stream.ModelWriter modelWriter48 = modelWriter17.writeType(modelType43);
        org.jboss.dmr.stream.ModelWriter modelWriter50 = modelWriter48.writeDouble(112.0d);
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelWriter48.writeLong((long) 10);
        objectModelValue0.write(modelWriter52);
        org.jboss.dmr.ModelValue modelValue55 = objectModelValue0.copy(false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory5);
        org.junit.Assert.assertNotNull(modelReader10);
        org.junit.Assert.assertNotNull(modelWriter16);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "true" + "'", str21, "true");
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str29, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList30);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertTrue("'" + modelType34 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType34.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char35 + "' != '" + 'p' + "'", char35 == 'p');
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + modelType43 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType43.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char44 + "' != '" + 'p' + "'", char44 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue45);
        org.junit.Assert.assertTrue("'" + char46 + "' != '" + 'p' + "'", char46 == 'p');
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelWriter48);
        org.junit.Assert.assertNotNull(modelWriter50);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(modelValue55);
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.lang.String str5 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode1);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode1.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set((double) 0);
        org.jboss.dmr.ModelNode modelNode9 = modelNode1.clear();
        org.jboss.dmr.IntModelValue intModelValue12 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long14 = intModelValue12.asLong((long) 'b');
        java.lang.String str15 = intModelValue12.asString();
        java.math.BigInteger bigInteger16 = intModelValue12.asBigInteger();
        org.jboss.dmr.ModelNode modelNode17 = modelNode9.add("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", bigInteger16);
        java.lang.String str19 = modelNode9.asString("(\"hi!\" => 0.0)");
        org.jboss.dmr.PropertyModelValue propertyModelValue20 = new org.jboss.dmr.PropertyModelValue("{\n    \"EXPRESSION_VALUE\" : {\n        \"\" : {\n            \"hi!\" : 0.0\n        }\n    }\n}", modelNode9);
        org.jboss.dmr.ModelNode modelNode22 = modelNode9.set((int) 'd');
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long25 = modelNode24.asLong();
        org.jboss.dmr.ValueExpression valueExpression26 = modelNode24.asExpression();
        java.math.BigDecimal bigDecimal27 = valueExpression26.resolveBigDecimal();
        java.lang.String str28 = valueExpression26.getExpressionString();
        java.math.BigDecimal bigDecimal29 = valueExpression26.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue30 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal29);
        int int32 = bigDecimalModelValue30.asInt(0);
        java.math.BigDecimal bigDecimal33 = bigDecimalModelValue30.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression34 = bigDecimalModelValue30.asExpression();
        java.math.BigInteger bigInteger35 = bigDecimalModelValue30.asBigInteger();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode36 = modelNode22.add(bigInteger35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "32" + "'", str15, "32");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]" + "'", str19, "[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0" + "'", str28, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(valueExpression34);
        org.junit.Assert.assertNotNull(bigInteger35);
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.lang.String str15 = modelNode11.toString();
        org.jboss.dmr.ModelNode modelNode16 = modelNode11.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = modelNode11.set(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode23, false);
        java.util.Set<java.lang.String> strSet26 = propertyModelValue25.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList27 = propertyModelValue25.asPropertyList();
        java.util.Set<java.lang.String> strSet28 = propertyModelValue25.getKeys();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList29 = propertyModelValue25.asList();
        boolean boolean30 = propertyModelValue9.equals(propertyModelValue25);
        java.lang.String str31 = propertyModelValue25.asString();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(\"hi!\" => 0.0)" + "'", str15, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(propertyList27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(modelNodeList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))" + "'", str31, "(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))");
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        boolean boolean15 = intModelValue9.asBoolean(true);
        boolean boolean16 = intModelValue9.asBoolean();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode6 = modelNodeFactory0.readFrom("", true);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Unexpected EOF while reading DMR stream");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelNode modelNode7 = modelNode3.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        org.jboss.dmr.Property property13 = new org.jboss.dmr.Property("", modelNode12);
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.get(strArray14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList20 = modelNode19.asList();
        org.jboss.dmr.ListModelValue listModelValue21 = new org.jboss.dmr.ListModelValue(modelNodeList20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue21);
        org.jboss.dmr.ModelValue modelValue23 = listModelValue21.resolve();
        int int25 = listModelValue21.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList26 = listModelValue21.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList27 = modelNode15.asPropertyList(propertyList26);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        org.jboss.dmr.Property property33 = new org.jboss.dmr.Property("", modelNode32);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.get(strArray34);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = modelNode39.asList();
        org.jboss.dmr.ListModelValue listModelValue41 = new org.jboss.dmr.ListModelValue(modelNodeList40);
        org.jboss.dmr.ModelNode modelNode42 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue41);
        org.jboss.dmr.ModelValue modelValue43 = listModelValue41.resolve();
        int int45 = listModelValue41.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList46 = listModelValue41.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList47 = modelNode35.asPropertyList(propertyList46);
        modelNode15.setNoCopy(modelNode35);
        org.jboss.dmr.ModelNode modelNode50 = modelNode35.set((long) 100);
        org.jboss.dmr.ModelNode modelNode51 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode54 = modelNode51.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList55 = modelNode54.asListOrEmpty();
        java.lang.String[] strArray58 = new java.lang.String[] { "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" };
        boolean boolean59 = modelNode54.hasDefined(strArray58);
        boolean boolean60 = modelNode50.hasDefined(strArray58);
        boolean boolean61 = modelNode3.hasDefined(strArray58);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNodeList20);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(propertyList26);
        org.junit.Assert.assertNotNull(propertyList27);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNodeList40);
        org.junit.Assert.assertNotNull(modelValue43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(propertyList46);
        org.junit.Assert.assertNotNull(propertyList47);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelNodeList55);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigDecimal bigDecimal10 = bigDecimalModelValue7.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue7.asExpression();
        org.jboss.dmr.ValueExpression valueExpression12 = bigDecimalModelValue7.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = bigDecimalModelValue7.removeChild((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression12);
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.ModelNode modelNode15 = modelNode14.resolve();
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode20 = modelNode19.setEmptyList();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long23 = modelNode22.asLong();
        org.jboss.dmr.ValueExpression valueExpression24 = modelNode22.asExpression();
        java.math.BigDecimal bigDecimal25 = valueExpression24.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode(bigDecimal25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode19.set(bigDecimal25);
        org.jboss.dmr.ModelNode modelNode28 = modelNode14.set(bigDecimal25);
        org.jboss.dmr.ModelType modelType30 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode(modelType30);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        org.jboss.dmr.Property property37 = new org.jboss.dmr.Property("", modelNode36);
        org.jboss.dmr.ModelNode modelNode38 = modelNode31.set(property37);
        org.jboss.dmr.ModelNode modelNode39 = property37.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue40 = new org.jboss.dmr.PropertyModelValue(property37);
        java.util.List<org.jboss.dmr.Property> propertyList41 = propertyModelValue40.asPropertyList();
        org.jboss.dmr.ModelNode modelNode43 = propertyModelValue40.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode44 = modelNode43.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue47 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long48 = booleanModelValue47.asLong();
        org.jboss.dmr.ValueExpression valueExpression49 = booleanModelValue47.asExpression();
        java.lang.String str50 = valueExpression49.toString();
        org.jboss.dmr.ExpressionValue expressionValue52 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression53 = expressionValue52.asExpression();
        boolean boolean54 = valueExpression49.equals(valueExpression53);
        org.jboss.dmr.LongModelValue longModelValue56 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal57 = longModelValue56.asBigDecimal();
        int int58 = longModelValue56.asInt();
        org.jboss.dmr.ValueExpression valueExpression59 = longModelValue56.asExpression();
        boolean boolean60 = valueExpression53.equals(valueExpression59);
        int int61 = valueExpression59.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue63 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression64 = expressionValue63.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver65 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str66 = valueExpression64.resolveString(valueExpressionResolver65);
        java.math.BigInteger bigInteger67 = valueExpression59.resolveBigInteger(valueExpressionResolver65);
        org.jboss.dmr.ModelNode modelNode68 = modelNode43.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression59);
        org.jboss.dmr.ModelNode modelNode69 = modelNode28.set("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression59);
        org.jboss.dmr.PropertyModelValue propertyModelValue70 = new org.jboss.dmr.PropertyModelValue("-1.0", modelNode28);
        org.jboss.dmr.ModelNode modelNode73 = new org.jboss.dmr.ModelNode(false);
        int int75 = modelNode73.asInt(2);
        org.jboss.dmr.ModelNode modelNode77 = modelNode73.set(52);
        org.jboss.dmr.ModelNode modelNode79 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode82 = modelNode79.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList83 = modelNode82.asList();
        org.jboss.dmr.ListModelValue listModelValue84 = new org.jboss.dmr.ListModelValue(modelNodeList83);
        org.jboss.dmr.ModelNode modelNode85 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue84);
        org.jboss.dmr.ModelValue modelValue86 = listModelValue84.resolve();
        int int88 = listModelValue84.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList89 = listModelValue84.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList90 = listModelValue84.asPropertyList();
        org.jboss.dmr.ModelNode modelNode92 = listModelValue84.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode93 = modelNode92.resolve();
        org.jboss.dmr.ModelNode modelNode94 = modelNode77.set("EXPRESSION_VALUE", modelNode93);
        org.jboss.dmr.ModelNode modelNode96 = modelNode93.set(true);
        org.jboss.dmr.Property property98 = new org.jboss.dmr.Property("\"[97L]\"", modelNode96, true);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode99 = modelNode28.add(property98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + modelType30 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType30.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(propertyList41);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(booleanModelValue47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(valueExpression49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Expression \"true\"" + "'", str50, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(valueExpression59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(valueExpression64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(modelNode77);
        org.junit.Assert.assertNotNull(modelNode82);
        org.junit.Assert.assertNotNull(modelNodeList83);
        org.junit.Assert.assertNotNull(modelValue86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(propertyList89);
        org.junit.Assert.assertNotNull(propertyList90);
        org.junit.Assert.assertNotNull(modelNode92);
        org.junit.Assert.assertNotNull(modelNode93);
        org.junit.Assert.assertNotNull(modelNode94);
        org.junit.Assert.assertNotNull(modelNode96);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        byte[] byteArray11 = longModelValue5.asBytes();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) longModelValue5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.String> strSet13 = longModelValue5.getKeys();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, -1, -1, -1, -1, -1, -1, -1]");
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(8);
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ModelNode modelNode9 = modelNode5.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType10 = modelNode5.getType();
        org.jboss.dmr.ModelNode modelNode11 = modelNode1.set(modelNode5);
        org.jboss.dmr.ModelNode modelNode12 = modelNode5.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = modelNode5.add("[1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode12);
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        org.jboss.dmr.ModelNode modelNode6 = modelNodeFactory0.readFrom("0.0", true);
        org.jboss.dmr.ModelNode modelNode9 = modelNodeFactory0.readFrom("(\"hi!\" => expression \"hi!\")", false);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode12 = modelNodeFactory0.readFrom("//////////8=", true);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Unexpected character '/' while reading DMR stream");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode9);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelValue modelValue10 = propertyModelValue9.copy();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = propertyModelValue9.asList();
        java.io.PrintWriter printWriter12 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue9.formatAsJSON(printWriter12, (int) 'a', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertNotNull(modelNodeList11);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        org.jboss.dmr.ObjectModelValue objectModelValue6 = null;
        boolean boolean7 = objectModelValue4.equals(objectModelValue6);
        boolean boolean8 = objectModelValue0.equals(objectModelValue6);
        java.lang.String str9 = objectModelValue0.asString();
        org.jboss.dmr.ModelValue modelValue10 = objectModelValue0.protect();
        java.io.DataOutput dataOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.writeExternal(dataOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNotNull(modelValue10);
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        boolean boolean20 = bytesModelValue12.equals(bytesModelValue19);
        long long21 = bytesModelValue12.asLong();
        int int23 = bytesModelValue12.asInt(8);
        long long24 = bytesModelValue12.asLong();
        double double25 = bytesModelValue12.asDouble();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4.9E-324d + "'", double25 == 4.9E-324d);
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isObjectEnd();
        boolean boolean19 = modelReader15.isType();
        boolean boolean20 = modelReader15.isListStart();
        boolean boolean21 = modelReader15.isPropertyEnd();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal22 = modelReader15.getBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't big decimal");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.resolve();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => big integer 32)", (long) 'b');
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode5);
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelValue modelValue13 = objectModelValue0.resolve();
        org.jboss.dmr.ModelNode modelNode15 = objectModelValue0.getChild("org.jboss.dmr.stream.ModelException: 1");
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(modelNode15);
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        org.jboss.dmr.ModelType modelType1 = org.jboss.dmr.ModelType.PROPERTY;
        char char2 = modelType1.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue3 = org.jboss.dmr.TypeModelValue.of(modelType1);
        org.jboss.dmr.ModelType modelType4 = org.jboss.dmr.ModelType.PROPERTY;
        char char5 = modelType4.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue6 = org.jboss.dmr.TypeModelValue.of(modelType4);
        boolean boolean7 = typeModelValue3.equals(typeModelValue6);
        java.lang.String str8 = typeModelValue6.asString();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        boolean boolean19 = listModelValue14.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray20 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean21 = listModelValue14.equals((java.lang.Object) modelNodeArray20);
        boolean boolean22 = typeModelValue6.equals((java.lang.Object) listModelValue14);
        org.jboss.dmr.ModelValue modelValue23 = listModelValue14.resolve();
        org.jboss.dmr.ModelValue modelValue24 = listModelValue14.protect();
        java.lang.Throwable throwable26 = null;
        org.jboss.dmr.stream.ModelException modelException27 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable26);
        org.jboss.dmr.stream.ModelException modelException28 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException27);
        java.lang.Throwable throwable30 = null;
        org.jboss.dmr.stream.ModelException modelException31 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable30);
        org.jboss.dmr.stream.ModelException modelException32 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException31);
        modelException27.addSuppressed((java.lang.Throwable) modelException31);
        boolean boolean34 = listModelValue14.equals((java.lang.Object) modelException27);
        org.jboss.dmr.stream.ModelException modelException35 = new org.jboss.dmr.stream.ModelException("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", (java.lang.Throwable) modelException27);
        org.jboss.dmr.stream.ModelException modelException36 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException35);
        org.jboss.dmr.stream.ModelException modelException37 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException35);
        org.junit.Assert.assertTrue("'" + modelType1 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType1.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + 'p' + "'", char2 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue3);
        org.junit.Assert.assertTrue("'" + modelType4 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType4.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'p' + "'", char5 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PROPERTY" + "'", str8, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(modelNodeArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str5 = longModelValue4.asString();
        byte[] byteArray6 = longModelValue4.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue7 = new org.jboss.dmr.BytesModelValue(byteArray6);
        java.lang.String str8 = bytesModelValue7.asString();
        int int9 = bytesModelValue7.asInt();
        long long11 = bytesModelValue7.asLong((long) (short) 1);
        long long12 = bytesModelValue7.asLong();
        java.math.BigDecimal bigDecimal13 = bytesModelValue7.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.set("32", bigDecimal13);
        org.jboss.dmr.Property property15 = modelNode14.asProperty();
        java.io.DataOutputStream dataOutputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode14.writeExternal(dataOutputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType0.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str8, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger10 = booleanModelValue9.asBigInteger();
        byte[] byteArray11 = booleanModelValue9.asBytes();
        org.jboss.dmr.ModelNode modelNode12 = modelNode6.set("expression \"hi!\"", byteArray11);
        outputStream3.write(byteArray11);
        org.jboss.dmr.BytesModelValue bytesModelValue14 = new org.jboss.dmr.BytesModelValue(byteArray11);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) bytesModelValue14);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode20 = modelNode18.set((int) '#');
        java.lang.Boolean boolean21 = modelNode18.asBooleanOrNull();
        org.jboss.dmr.Validation.validate(modelNode18, "1L");
        org.jboss.dmr.ModelNode modelNode24 = modelNode15.set("Expression \"10.0\"", modelNode18);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = modelNode24.asInt((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNotNull(modelNode24);
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        double double5 = booleanModelValue1.asDouble((double) 10);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory7 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream8 = null;
        org.jboss.dmr.Base64.InputStream inputStream10 = new org.jboss.dmr.Base64.InputStream(inputStream8, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream10);
        org.jboss.dmr.stream.ModelReader modelReader12 = modelStreamFactory7.newModelReader((java.io.InputStream) inputStream11);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        outputStream14.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter18 = modelStreamFactory7.newModelWriter((java.io.OutputStream) outputStream14);
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelWriter18.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter21 = modelWriter18.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter21.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter25 = modelWriter21.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelWriter25.writeLong(100L);
        booleanModelValue1.write(modelWriter25);
        // The following exception was thrown during execution in test generation
        try {
            modelWriter25.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(modelStreamFactory7);
        org.junit.Assert.assertNotNull(modelReader12);
        org.junit.Assert.assertNotNull(modelWriter18);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(modelWriter21);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter25);
        org.junit.Assert.assertNotNull(modelWriter27);
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) (short) 100);
        boolean boolean9 = longModelValue1.asBoolean(true);
        boolean boolean11 = longModelValue1.asBoolean(true);
        boolean boolean12 = longModelValue1.asBoolean();
        double double13 = longModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        org.jboss.dmr.stream.ModelException modelException1 = new org.jboss.dmr.stream.ModelException("expression \"false\"");
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        org.jboss.dmr.Base64.OutputStream outputStream2 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        outputStream1.suspendEncoding();
        // The following exception was thrown during execution in test generation
        try {
            outputStream1.write(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue8 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue8.asObject();
        java.util.Set<java.lang.String> strSet10 = objectModelValue8.getKeys();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue8.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean13 = objectModelValue8.asBoolean();
        int int15 = objectModelValue8.asInt((int) 'b');
        int int17 = objectModelValue8.asInt((int) '#');
        boolean boolean18 = objectModelValue0.equals(objectModelValue8);
        int int19 = objectModelValue8.asInt();
        java.util.Set<java.lang.String> strSet20 = objectModelValue8.getKeys();
        long long22 = objectModelValue8.asLong((long) 0);
        org.jboss.dmr.ModelType modelType23 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode(modelType23);
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        java.lang.String str31 = bytesModelValue30.asString();
        int int32 = bytesModelValue30.asInt();
        long long34 = bytesModelValue30.asLong((long) (short) 1);
        long long35 = bytesModelValue30.asLong();
        java.math.BigDecimal bigDecimal36 = bytesModelValue30.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode37 = modelNode24.set("32", bigDecimal36);
        boolean boolean38 = objectModelValue8.equals((java.lang.Object) bigDecimal36);
        boolean boolean39 = objectModelValue8.asBoolean();
        java.lang.String str40 = objectModelValue8.asString();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + modelType23 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType23.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str31, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        java.lang.String str13 = listModelValue12.asString();
        long long14 = listModelValue12.asLong();
        int int16 = listModelValue12.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue17 = listModelValue12.protect();
        boolean boolean18 = listModelValue5.equals(listModelValue12);
        org.jboss.dmr.ModelValue modelValue19 = listModelValue5.protect();
        org.jboss.dmr.ModelValue modelValue20 = listModelValue5.resolve();
        int int21 = listModelValue5.asInt();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode23 = listModelValue5.insertChild((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str13, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.setExpression("hi!", "hi!");
        java.lang.String str6 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode2);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode2.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList7);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        org.jboss.dmr.Property property15 = new org.jboss.dmr.Property("", modelNode14);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.get(strArray16);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList22 = modelNode21.asList();
        org.jboss.dmr.ListModelValue listModelValue23 = new org.jboss.dmr.ListModelValue(modelNodeList22);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue23);
        org.jboss.dmr.ModelValue modelValue25 = listModelValue23.resolve();
        int int27 = listModelValue23.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList28 = listModelValue23.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList29 = modelNode17.asPropertyList(propertyList28);
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode34 = modelNode31.set("hi!", 0.0d);
        org.jboss.dmr.Property property35 = new org.jboss.dmr.Property("", modelNode34);
        java.lang.String[] strArray36 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.get(strArray36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode41 = modelNode38.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList42 = modelNode41.asList();
        org.jboss.dmr.ListModelValue listModelValue43 = new org.jboss.dmr.ListModelValue(modelNodeList42);
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue43);
        org.jboss.dmr.ModelValue modelValue45 = listModelValue43.resolve();
        int int47 = listModelValue43.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList48 = listModelValue43.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList49 = modelNode37.asPropertyList(propertyList48);
        modelNode17.setNoCopy(modelNode37);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode55 = modelNode52.set("hi!", 0.0d);
        org.jboss.dmr.Property property56 = new org.jboss.dmr.Property("", modelNode55);
        java.lang.String[] strArray57 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode58 = modelNode55.get(strArray57);
        org.jboss.dmr.ModelNode modelNode59 = modelNode37.get(strArray57);
        org.jboss.dmr.Property property61 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode59, true);
        org.jboss.dmr.ModelNode modelNode62 = modelNode8.add(property61);
        java.lang.String str63 = property61.getName();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str6, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNodeList22);
        org.junit.Assert.assertNotNull(modelValue25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(propertyList28);
        org.junit.Assert.assertNotNull(propertyList29);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNodeList42);
        org.junit.Assert.assertNotNull(modelValue45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(propertyList48);
        org.junit.Assert.assertNotNull(propertyList49);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]" + "'", str63, "org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        org.jboss.dmr.stream.ModelException modelException1 = new org.jboss.dmr.stream.ModelException("Expression \"10.0\"");
        org.jboss.dmr.stream.ModelException modelException3 = new org.jboss.dmr.stream.ModelException("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        modelException1.addSuppressed((java.lang.Throwable) modelException3);
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException3);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.lang.String str11 = modelNode7.toString();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(100);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        java.lang.String str28 = modelNode27.asString();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        boolean boolean39 = listModelValue34.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = listModelValue34.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = modelNode27.asList(modelNodeList40);
        org.jboss.dmr.ModelNode modelNode42 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList40);
        boolean boolean43 = bigIntegerModelValue4.equals((java.lang.Object) modelNode14);
        double double44 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.LongModelValue longModelValue46 = new org.jboss.dmr.LongModelValue((-1L));
        long long48 = longModelValue46.asLong((long) (byte) -1);
        byte[] byteArray49 = longModelValue46.asBytes();
        boolean boolean50 = bigIntegerModelValue4.equals((java.lang.Object) byteArray49);
        boolean boolean51 = bigIntegerModelValue4.asBoolean();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"hi!\" => 0.0)" + "'", str11, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str28, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(modelNodeList40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        double double6 = intModelValue1.asDouble();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int8 = modelNode7.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.setExpression("hi!", "hi!");
        java.lang.String str13 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode9);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode9.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode15 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList14);
        boolean boolean16 = intModelValue1.equals((java.lang.Object) modelNode7);
        java.lang.String str17 = intModelValue1.asString();
        double double19 = intModelValue1.asDouble(2.0d);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 32.0d + "'", double6 == 32.0d);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str13, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32" + "'", str17, "32");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 32.0d + "'", double19 == 32.0d);
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        int int6 = intModelValue1.asInt((int) (byte) 100);
        long long7 = intModelValue1.asLong();
        double double9 = intModelValue1.asDouble((double) 100);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 32.0d + "'", double9 == 32.0d);
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        boolean boolean12 = modelNode9.equals((java.lang.Object) 100L);
        boolean boolean13 = modelNode1.equals(modelNode9);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("", modelNode18);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.get(strArray20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int23 = modelNode22.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.setExpression("hi!", "hi!");
        java.lang.String str28 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode24);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList29 = modelNode24.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode30 = modelNode22.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode32 = modelNode9.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode34 = modelNode9.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.PropertyModelValue propertyModelValue36 = new org.jboss.dmr.PropertyModelValue("1.0", modelNode9, false);
        org.jboss.dmr.ModelValue modelValue37 = propertyModelValue36.protect();
        boolean boolean39 = propertyModelValue36.has("AAAAZA==");
        java.util.List<org.jboss.dmr.Property> propertyList40 = propertyModelValue36.asPropertyList();
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        java.lang.String str45 = modelNode41.toString();
        org.jboss.dmr.ModelNode modelNode46 = modelNode41.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("", modelNode51);
        org.jboss.dmr.ModelNode modelNode53 = modelNode41.set(property52);
        org.jboss.dmr.ModelNode modelNode56 = modelNode41.setExpression("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", "true");
        boolean boolean57 = propertyModelValue36.equals((java.lang.Object) modelNode56);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode59 = propertyModelValue36.getChild(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str28, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelValue37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(\"hi!\" => 0.0)" + "'", str45, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(false);
        int int3 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set(52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue12);
        org.jboss.dmr.ModelValue modelValue14 = listModelValue12.resolve();
        int int16 = listModelValue12.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList17 = listModelValue12.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue12.asPropertyList();
        org.jboss.dmr.ModelNode modelNode20 = listModelValue12.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.resolve();
        org.jboss.dmr.ModelNode modelNode22 = modelNode5.set("EXPRESSION_VALUE", modelNode21);
        org.jboss.dmr.ModelNode modelNode25 = modelNode5.set("1", (double) 1.0f);
        org.jboss.dmr.ModelNode modelNode27 = org.jboss.dmr.ModelNode.fromJSONString("1.0");
        org.jboss.dmr.ModelNode modelNode28 = modelNode27.setEmptyObject();
        modelNode25.setNoCopy(modelNode27);
        org.jboss.dmr.BooleanModelValue booleanModelValue31 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray32 = booleanModelValue31.asBytes();
        java.lang.String str33 = booleanModelValue31.asString();
        int int34 = booleanModelValue31.asInt();
        long long35 = booleanModelValue31.asLong();
        org.jboss.dmr.ValueExpression valueExpression36 = booleanModelValue31.asExpression();
        java.math.BigInteger bigInteger37 = booleanModelValue31.asBigInteger();
        java.math.BigDecimal bigDecimal38 = booleanModelValue31.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode39 = modelNode27.set(bigDecimal38);
        org.jboss.dmr.ObjectModelValue objectModelValue40 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode41 = objectModelValue40.asObject();
        java.util.Set<java.lang.String> strSet42 = objectModelValue40.getKeys();
        boolean boolean44 = objectModelValue40.has((int) 'a');
        boolean boolean46 = objectModelValue40.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue47 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode48 = objectModelValue47.asObject();
        java.util.Set<java.lang.String> strSet49 = objectModelValue47.getKeys();
        boolean boolean51 = objectModelValue47.has((int) 'a');
        boolean boolean52 = objectModelValue40.equals(objectModelValue47);
        org.jboss.dmr.ModelNode modelNode53 = objectModelValue47.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList54 = objectModelValue47.asPropertyList();
        org.jboss.dmr.ObjectModelValue objectModelValue55 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode56 = objectModelValue55.asObject();
        boolean boolean57 = objectModelValue47.equals(objectModelValue55);
        java.lang.String str58 = objectModelValue55.asString();
        java.util.List<org.jboss.dmr.Property> propertyList59 = objectModelValue55.asPropertyList();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.Property> propertyList60 = modelNode39.asPropertyList(propertyList59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(booleanModelValue31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "true" + "'", str33, "true");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(valueExpression36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(propertyList54);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{}" + "'", str58, "{}");
        org.junit.Assert.assertNotNull(propertyList59);
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        long long5 = intModelValue1.asLong();
        long long6 = intModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression7 = intModelValue1.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver8 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal9 = valueExpression7.resolveBigDecimal(valueExpressionResolver8);
        java.lang.String str10 = valueExpression7.resolveString();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "32" + "'", str10, "32");
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = expressionValue3.asList();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        java.lang.String str9 = property7.getName();
        org.jboss.dmr.Property property10 = property7.clone();
        org.jboss.dmr.Property property11 = property10.clone();
        org.jboss.dmr.ModelNode modelNode12 = property10.getValue();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode24.asList();
        org.jboss.dmr.ListModelValue listModelValue26 = new org.jboss.dmr.ListModelValue(modelNodeList25);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue26);
        org.jboss.dmr.ModelValue modelValue28 = listModelValue26.resolve();
        int int30 = listModelValue26.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList31 = listModelValue26.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList32 = modelNode20.asPropertyList(propertyList31);
        org.jboss.dmr.ModelNode modelNode35 = modelNode20.setExpression("\"(\\\"hi!\\\" => 0.0)\"", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = modelNode39.asList();
        java.lang.String str42 = modelNode39.asString("true");
        boolean boolean44 = modelNode39.has("1L");
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode49 = modelNode46.set("hi!", 0.0d);
        org.jboss.dmr.Property property50 = new org.jboss.dmr.Property("", modelNode49);
        java.lang.String[] strArray51 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode52 = modelNode49.get(strArray51);
        boolean boolean53 = modelNode39.has(strArray51);
        boolean boolean54 = modelNode20.has(strArray51);
        boolean boolean55 = modelNode12.has(strArray51);
        org.jboss.dmr.ModelNode modelNode58 = modelNode12.set("Expression \"10.0\"", (double) 8);
        org.jboss.dmr.Validation.validate(modelNode58, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3LWwAAAACcAAAcAAD\naGkhRAAAAAAAAAAAcAAOKCJoaSEiID0+IDAuMClkAAIzMng=");
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelValue28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(propertyList31);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNodeList40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(\"hi!\" => 0.0)" + "'", str42, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(modelNode58);
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isPropertyStart();
        boolean boolean23 = modelReader15.isObjectEnd();
        boolean boolean24 = modelReader15.isObjectStart();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = modelReader15.getBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't boolean");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue0.asObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode6 = modelNode5.addEmptyList();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode5);
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        org.jboss.dmr.ModelValue modelValue10 = bigDecimalModelValue7.protect();
        boolean boolean11 = bigDecimalModelValue7.asBoolean();
        java.math.BigInteger bigInteger12 = bigDecimalModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) bigDecimalModelValue7);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        java.util.Set<java.lang.String> strSet14 = propertyModelValue10.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList15 = propertyModelValue10.asPropertyList();
        java.io.DataOutput dataOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue10.writeExternal(dataOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(propertyList15);
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigInteger();
        boolean boolean18 = modelReader15.isObjectEnd();
        boolean boolean19 = modelReader15.isListEnd();
        boolean boolean20 = modelReader15.isBigDecimal();
        boolean boolean21 = modelReader15.isDouble();
        boolean boolean22 = modelReader15.isExpression();
        boolean boolean23 = modelReader15.isPropertyStart();
        // The following exception was thrown during execution in test generation
        try {
            modelReader15.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been read");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        boolean boolean4 = modelNode1.has((int) '#');
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        boolean boolean9 = modelNode7.has((int) (short) 10);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue13 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger14 = booleanModelValue13.asBigInteger();
        org.jboss.dmr.ModelNode modelNode15 = modelNode11.add(bigInteger14);
        org.jboss.dmr.ModelNode modelNode16 = modelNode11.clone();
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        java.math.BigInteger bigInteger18 = booleanModelValue17.asBigInteger();
        boolean boolean19 = booleanModelValue17.asBoolean();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.ModelNode modelNode21 = modelNode16.add(bigInteger20);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", modelNode16);
        org.jboss.dmr.ModelNode modelNode23 = modelNode7.set(property22);
        org.jboss.dmr.BooleanModelValue booleanModelValue25 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray26 = booleanModelValue25.asBytes();
        org.jboss.dmr.ModelNode modelNode27 = modelNode23.set(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode30 = modelNode27.add("(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))", (int) 'l');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanModelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(booleanModelValue25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertNotNull(modelNode27);
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        java.io.InputStream inputStream22 = null;
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24);
        org.jboss.dmr.stream.ModelReader modelReader26 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream24);
        java.io.OutputStream outputStream27 = null;
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream(outputStream27);
        outputStream28.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream28);
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        outputStream30.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream34);
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream34);
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream34);
        org.jboss.dmr.Base64.OutputStream outputStream39 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream34, (int) 'I');
        org.jboss.dmr.Base64.OutputStream outputStream41 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream39, (int) (short) 1);
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        long long45 = longModelValue43.asLong((long) (short) 0);
        java.lang.String str46 = longModelValue43.asString();
        org.jboss.dmr.ValueExpression valueExpression47 = longModelValue43.asExpression();
        byte[] byteArray48 = longModelValue43.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            outputStream39.write(byteArray48, 1, (int) 'D');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelReader26);
        org.junit.Assert.assertNotNull(modelWriter35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertNotNull(valueExpression47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode3 = objectModelValue0.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue0.getChild("[(\"hi!\" => 0.0)]");
        java.util.List<org.jboss.dmr.Property> propertyList6 = objectModelValue0.asPropertyList();
        boolean boolean7 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue0.getChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        java.lang.String str10 = objectModelValue0.asString();
        org.jboss.dmr.ObjectModelValue objectModelValue11 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue11.asObject();
        java.util.Set<java.lang.String> strSet13 = objectModelValue11.getKeys();
        boolean boolean15 = objectModelValue11.has((int) 'a');
        boolean boolean17 = objectModelValue11.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue18 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue18.asObject();
        java.util.Set<java.lang.String> strSet20 = objectModelValue18.getKeys();
        boolean boolean22 = objectModelValue18.has((int) 'a');
        boolean boolean23 = objectModelValue11.equals(objectModelValue18);
        int int24 = objectModelValue18.asInt();
        org.jboss.dmr.ObjectModelValue objectModelValue25 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode26 = objectModelValue25.asObject();
        org.jboss.dmr.ModelValue modelValue27 = objectModelValue25.copy();
        int int29 = objectModelValue25.asInt((int) (short) 100);
        java.util.List<org.jboss.dmr.Property> propertyList30 = objectModelValue25.asPropertyList();
        java.lang.String str31 = objectModelValue25.asString();
        boolean boolean32 = objectModelValue18.equals(objectModelValue25);
        boolean boolean33 = objectModelValue0.equals(objectModelValue25);
        org.jboss.dmr.ModelValue modelValue34 = objectModelValue0.resolve();
        boolean boolean35 = modelValue34.asBoolean();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(propertyList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined,\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => undefined}" + "'", str10, "{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined,\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => undefined}");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(propertyList30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(modelValue34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode3 = org.jboss.dmr.ModelNode.fromStream(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        boolean boolean7 = modelNode4.hasDefined((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.setExpression("hi!", "hi!");
        java.lang.String str13 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode9);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode9.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode16 = modelNode9.set((double) 0);
        boolean boolean17 = modelNode9.isProtected();
        boolean boolean19 = modelNode9.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode22 = modelNode9.set("hi!", (long) (short) 100);
        org.jboss.dmr.ModelNode modelNode23 = modelNode4.setNoCopy("", modelNode22);
        org.jboss.dmr.ModelNode modelNode26 = modelNode4.set("//////////8=", false);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str13, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode26);
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        java.lang.Throwable throwable2 = null;
        org.jboss.dmr.stream.ModelException modelException3 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable2);
        org.jboss.dmr.stream.ModelException modelException4 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException3);
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException3);
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", (java.lang.Throwable) modelException3);
        java.lang.String str7 = modelException3.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]" + "'", str7, "org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.get(strArray11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = modelNode12.asPropertyList(propertyList23);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList43 = listModelValue38.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList44 = modelNode32.asPropertyList(propertyList43);
        modelNode12.setNoCopy(modelNode32);
        org.jboss.dmr.ModelNode modelNode46 = modelNode2.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode12);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("", modelNode51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode54 = modelNode51.get(strArray53);
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int56 = modelNode55.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.setExpression("hi!", "hi!");
        java.lang.String str61 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode57);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = modelNode57.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode63 = modelNode55.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        org.jboss.dmr.ModelNode modelNode64 = modelNode54.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode2.asList(modelNodeList62);
        org.jboss.dmr.PropertyModelValue propertyModelValue67 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode2, false);
        org.jboss.dmr.ModelType modelType68 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode69 = new org.jboss.dmr.ModelNode(modelType68);
        org.jboss.dmr.ModelNode modelNode71 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode74 = modelNode71.set("hi!", 0.0d);
        org.jboss.dmr.Property property75 = new org.jboss.dmr.Property("", modelNode74);
        org.jboss.dmr.ModelNode modelNode76 = modelNode69.set(property75);
        org.jboss.dmr.PropertyModelValue propertyModelValue77 = new org.jboss.dmr.PropertyModelValue(property75);
        org.jboss.dmr.ModelValue modelValue78 = propertyModelValue77.copy();
        boolean boolean79 = propertyModelValue67.equals(propertyModelValue77);
        boolean boolean81 = propertyModelValue77.has("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        java.lang.String str82 = propertyModelValue77.asString();
        org.jboss.dmr.ModelValue modelValue83 = propertyModelValue77.resolve();
        org.jboss.dmr.Property property84 = propertyModelValue77.asProperty();
        // The following exception was thrown during execution in test generation
        try {
            int int86 = propertyModelValue77.asInt((int) 'J');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str61, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertTrue("'" + modelType68 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType68.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertNotNull(modelValue78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str82, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelValue83);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.lang.String str6 = modelNode2.toString();
        org.jboss.dmr.ModelNode modelNode7 = modelNode2.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set(100);
        org.jboss.dmr.ModelNode modelNode10 = modelNode1.add(modelNode2);
        org.jboss.dmr.ModelType modelType12 = org.jboss.dmr.ModelType.BYTES;
        char char13 = modelType12.getTypeChar();
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType12);
        org.jboss.dmr.PropertyModelValue propertyModelValue16 = new org.jboss.dmr.PropertyModelValue("Expression \"1\"", modelNode1, false);
        org.jboss.dmr.ModelNode modelNode17 = propertyModelValue16.asObject();
        java.util.Set<java.lang.String> strSet18 = propertyModelValue16.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode20 = propertyModelValue16.getChild("[2L]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + modelType12 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType12.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + 'b' + "'", char13 == 'b');
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ListModelValue listModelValue16 = new org.jboss.dmr.ListModelValue(modelNodeList15);
        java.lang.String str17 = listModelValue16.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = listModelValue16.asList();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode22.asList();
        org.jboss.dmr.ListModelValue listModelValue24 = new org.jboss.dmr.ListModelValue(modelNodeList23);
        java.lang.String str25 = listModelValue24.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = listModelValue24.asList();
        boolean boolean27 = listModelValue16.equals(listModelValue24);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue33.asPropertyList();
        org.jboss.dmr.ModelValue modelValue40 = listModelValue33.copy();
        boolean boolean41 = listModelValue24.equals(listModelValue33);
        boolean boolean42 = listModelValue5.equals(listModelValue33);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode44 = listModelValue5.requireChild(100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [100]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str17, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str25, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode(modelType0);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(typeModelValue2);
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        double double16 = bigIntegerModelValue4.asDouble(0.0d);
        double double18 = bigIntegerModelValue4.asDouble((double) 100.0f);
        java.math.BigInteger bigInteger19 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.ValueExpression valueExpression20 = bigIntegerModelValue4.asExpression();
        double double22 = bigIntegerModelValue4.asDouble(0.0d);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str5 = longModelValue4.asString();
        byte[] byteArray6 = longModelValue4.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue7 = new org.jboss.dmr.BytesModelValue(byteArray6);
        int int10 = inputStream2.read(byteArray6, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2, (-1));
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2, (int) 'p');
        // The following exception was thrown during execution in test generation
        try {
            long long16 = inputStream2.skip((long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("1L");
        byte[] byteArray2 = stringModelValue1.asBytes();
        java.io.DataOutput dataOutput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue1.writeExternal(dataOutput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[49, 76]");
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        org.jboss.dmr.ValueExpression valueExpression11 = bigIntegerModelValue4.asExpression();
        java.lang.String str12 = valueExpression11.resolveString();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.lang.String str15 = modelNode11.toString();
        org.jboss.dmr.ModelNode modelNode16 = modelNode11.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = modelNode11.set(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode23, false);
        java.util.Set<java.lang.String> strSet26 = propertyModelValue25.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList27 = propertyModelValue25.asPropertyList();
        java.util.Set<java.lang.String> strSet28 = propertyModelValue25.getKeys();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList29 = propertyModelValue25.asList();
        boolean boolean30 = propertyModelValue9.equals(propertyModelValue25);
        org.jboss.dmr.Property property31 = propertyModelValue25.asProperty();
        java.io.PrintWriter printWriter32 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue25.formatAsJSON(printWriter32, (int) 'l', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(\"hi!\" => 0.0)" + "'", str15, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(propertyList27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(modelNodeList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'b');
        java.math.BigDecimal bigDecimal2 = modelNode1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue3 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal2);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        byte[] byteArray5 = stringModelValue3.asBytes();
        org.jboss.dmr.ModelValue modelValue6 = stringModelValue3.resolve();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = stringModelValue3.asBoolean(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(modelValue6);
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.clear();
        boolean boolean7 = modelNode5.has(112);
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.addEmptyObject();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelNode8);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        byte[] byteArray5 = org.jboss.dmr.Base64.decode(byteArray2, 112, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = org.jboss.dmr.Base64.encodeBytes(byteArray2, 10, 112, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        org.jboss.dmr.ModelNode modelNode43 = modelNode28.set((long) 100);
        org.jboss.dmr.ModelNode modelNode46 = modelNode28.set("(\"hi!\" => 0.0)", (int) (short) -1);
        org.jboss.dmr.PropertyModelValue propertyModelValue47 = new org.jboss.dmr.PropertyModelValue("\"35\"", modelNode46);
        org.jboss.dmr.ModelType modelType48 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode49 = new org.jboss.dmr.ModelNode(modelType48);
        org.jboss.dmr.ModelNode modelNode51 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode54 = modelNode51.set("hi!", 0.0d);
        org.jboss.dmr.Property property55 = new org.jboss.dmr.Property("", modelNode54);
        org.jboss.dmr.ModelNode modelNode56 = modelNode49.set(property55);
        org.jboss.dmr.PropertyModelValue propertyModelValue57 = new org.jboss.dmr.PropertyModelValue(property55);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList58 = propertyModelValue57.asList();
        org.jboss.dmr.ModelValue modelValue59 = propertyModelValue57.protect();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList60 = propertyModelValue57.asList();
        boolean boolean61 = propertyModelValue47.equals(propertyModelValue57);
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode66 = modelNode63.set("hi!", 0.0d);
        java.lang.String str67 = modelNode63.toString();
        org.jboss.dmr.ModelNode modelNode68 = modelNode63.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode73 = modelNode70.set("hi!", 0.0d);
        org.jboss.dmr.Property property74 = new org.jboss.dmr.Property("", modelNode73);
        org.jboss.dmr.ModelNode modelNode75 = modelNode63.set(property74);
        org.jboss.dmr.PropertyModelValue propertyModelValue77 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode75, false);
        org.jboss.dmr.Property property78 = propertyModelValue77.asProperty();
        org.jboss.dmr.LongModelValue longModelValue80 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double82 = longModelValue80.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue84 = new org.jboss.dmr.LongModelValue((-1L));
        long long86 = longModelValue84.asLong((long) (byte) -1);
        byte[] byteArray87 = longModelValue84.asBytes();
        boolean boolean88 = longModelValue80.equals(longModelValue84);
        org.jboss.dmr.LongModelValue longModelValue90 = new org.jboss.dmr.LongModelValue(1L);
        long long92 = longModelValue90.asLong((long) (short) 0);
        java.math.BigInteger bigInteger93 = longModelValue90.asBigInteger();
        boolean boolean94 = longModelValue84.equals(longModelValue90);
        boolean boolean95 = propertyModelValue77.equals((java.lang.Object) longModelValue90);
        boolean boolean96 = propertyModelValue57.equals(propertyModelValue77);
        boolean boolean98 = propertyModelValue77.has("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3CUQ/8AAAAAAAAHg=");
        org.jboss.dmr.ModelValue modelValue99 = propertyModelValue77.protect();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + modelType48 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType48.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(modelNodeList58);
        org.junit.Assert.assertNotNull(modelValue59);
        org.junit.Assert.assertNotNull(modelNodeList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(\"hi!\" => 0.0)" + "'", str67, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-1.0d) + "'", double82 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
        org.junit.Assert.assertNotNull(bigInteger93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(modelValue99);
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.get(strArray11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = modelNode12.asPropertyList(propertyList23);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList43 = listModelValue38.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList44 = modelNode32.asPropertyList(propertyList43);
        modelNode12.setNoCopy(modelNode32);
        org.jboss.dmr.ModelNode modelNode46 = modelNode2.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode12);
        org.jboss.dmr.ModelType modelType47 = modelNode46.getType();
        org.jboss.dmr.PropertyModelValue propertyModelValue48 = new org.jboss.dmr.PropertyModelValue("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => (\"[(\\\"hi!\\\" => 0.0)]\" => PROPERTY))", modelNode46);
        org.jboss.dmr.DoubleModelValue doubleModelValue50 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long51 = doubleModelValue50.asLong();
        long long53 = doubleModelValue50.asLong((long) 32);
        java.math.BigInteger bigInteger54 = doubleModelValue50.asBigInteger();
        org.jboss.dmr.ModelNode modelNode55 = modelNode46.set(bigInteger54);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode57 = modelNode55.insert(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + modelType47 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType47.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(modelNode55);
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        boolean boolean14 = typeModelValue10.equals(typeModelValue13);
        java.lang.String str15 = typeModelValue13.asString();
        boolean boolean17 = typeModelValue13.asBoolean(true);
        boolean boolean18 = typeModelValue5.equals(typeModelValue13);
        org.jboss.dmr.ValueExpression valueExpression19 = typeModelValue13.asExpression();
        org.jboss.dmr.ModelType modelType20 = org.jboss.dmr.ModelType.PROPERTY;
        char char21 = modelType20.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue22 = org.jboss.dmr.TypeModelValue.of(modelType20);
        org.jboss.dmr.ModelType modelType23 = org.jboss.dmr.ModelType.PROPERTY;
        char char24 = modelType23.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue25 = org.jboss.dmr.TypeModelValue.of(modelType23);
        boolean boolean26 = typeModelValue22.equals(typeModelValue25);
        boolean boolean27 = typeModelValue13.equals(typeModelValue22);
        java.lang.String str28 = typeModelValue13.asString();
        org.jboss.dmr.ValueExpression valueExpression29 = typeModelValue13.asExpression();
        java.lang.String str30 = typeModelValue13.asString();
        org.jboss.dmr.ValueExpression valueExpression31 = typeModelValue13.asExpression();
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long35 = modelNode34.asLong();
        org.jboss.dmr.ValueExpression valueExpression36 = modelNode34.asExpression();
        java.math.BigDecimal bigDecimal37 = valueExpression36.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue39 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long40 = booleanModelValue39.asLong();
        org.jboss.dmr.ValueExpression valueExpression41 = booleanModelValue39.asExpression();
        boolean boolean43 = valueExpression41.equals((java.lang.Object) 'p');
        boolean boolean44 = valueExpression36.equals(valueExpression41);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode(valueExpression36);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode45, false);
        org.jboss.dmr.ModelNode modelNode50 = modelNode45.set("rO0ABXQAUXJPMEFCWE55QUJkdmNtY3VhbUp2YzNNdVpHMXlMazF2WkdWc1RtOWtaUnd0b1VTZG80\nNC9EQUFBZUhCM0RIQUFBMmhwSVdVQUEyaHAKSVhnPQ==", 0L);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode55 = modelNode52.setExpression("hi!", "hi!");
        java.lang.String str56 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode52);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList57 = modelNode52.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode59 = modelNode52.set((double) 0);
        boolean boolean60 = modelNode52.isProtected();
        boolean boolean62 = modelNode52.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode65 = modelNode52.set("hi!", (long) (short) 100);
        org.jboss.dmr.ModelNode modelNode66 = modelNode45.set("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")", modelNode52);
        boolean boolean67 = valueExpression31.equals((java.lang.Object) modelNode45);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode69 = modelNode45.addExpression("Expression \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PROPERTY" + "'", str15, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + modelType20 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType20.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + 'p' + "'", char21 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue22);
        org.junit.Assert.assertTrue("'" + modelType23 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType23.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char24 + "' != '" + 'p' + "'", char24 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PROPERTY" + "'", str28, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PROPERTY" + "'", str30, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(valueExpression36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(booleanModelValue39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(valueExpression41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str56, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList57);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(modelNode65);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        org.jboss.dmr.ObjectModelValue objectModelValue6 = null;
        boolean boolean7 = objectModelValue4.equals(objectModelValue6);
        boolean boolean8 = objectModelValue0.equals(objectModelValue6);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue13 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger14 = booleanModelValue13.asBigInteger();
        byte[] byteArray15 = booleanModelValue13.asBytes();
        org.jboss.dmr.ModelNode modelNode16 = modelNode10.set("expression \"hi!\"", byteArray15);
        org.jboss.dmr.ModelNode modelNode17 = modelNode16.clear();
        int int19 = modelNode16.asInt((int) 'p');
        java.lang.Boolean boolean20 = modelNode16.asBooleanOrNull();
        boolean boolean21 = objectModelValue0.equals((java.lang.Object) modelNode16);
        double double23 = modelNode16.asDouble((double) 0.0f);
        org.jboss.dmr.ModelNode modelNode24 = modelNode16.clear();
        org.jboss.dmr.LongModelValue longModelValue26 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal27 = longModelValue26.asBigDecimal();
        int int28 = longModelValue26.asInt();
        org.jboss.dmr.ValueExpression valueExpression29 = longModelValue26.asExpression();
        double double30 = longModelValue26.asDouble();
        org.jboss.dmr.LongModelValue longModelValue32 = new org.jboss.dmr.LongModelValue(1L);
        long long34 = longModelValue32.asLong((long) (short) 0);
        java.lang.String str35 = longModelValue32.asString();
        byte[] byteArray36 = longModelValue32.asBytes();
        org.jboss.dmr.ModelType modelType37 = longModelValue32.getType();
        long long39 = longModelValue32.asLong(1L);
        boolean boolean40 = longModelValue26.equals(longModelValue32);
        org.jboss.dmr.ValueExpression valueExpression41 = longModelValue26.asExpression();
        org.jboss.dmr.ModelNode modelNode42 = modelNode16.add(valueExpression41);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = modelNode16.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanModelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 112 + "'", int19 == 112);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType37 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType37.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(valueExpression41);
        org.junit.Assert.assertNotNull(modelNode42);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue4.removeChild("1");
        boolean boolean9 = objectModelValue4.asBoolean();
        boolean boolean10 = objectModelValue0.equals(objectModelValue4);
        long long11 = objectModelValue4.asLong();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue4.getChild("\"\\\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\\\"\"");
        java.io.DataOutput dataOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue4.writeExternal(dataOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(modelNode13);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream19.resumeEncoding();
        outputStream19.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream19);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        int int33 = inputStream25.read(byteArray29, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (-1));
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (int) 'p');
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream25);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = inputStream25.skip(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelReader38);
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.set((int) '#');
        org.jboss.dmr.ModelNode modelNode15 = modelNode1.setNoCopy("1.0", modelNode12);
        long long17 = modelNode12.asLong((long) 112);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode20 = modelNode12.add("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADMS4w\neA==", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.Set<java.lang.String> strSet16 = propertyModelValue15.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList17 = propertyModelValue15.asPropertyList();
        java.util.Set<java.lang.String> strSet18 = propertyModelValue15.getKeys();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        boolean boolean31 = modelNode28.equals((java.lang.Object) 100L);
        boolean boolean32 = modelNode20.equals(modelNode28);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        org.jboss.dmr.Property property38 = new org.jboss.dmr.Property("", modelNode37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.get(strArray39);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int42 = modelNode41.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.setExpression("hi!", "hi!");
        java.lang.String str47 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode43);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList48 = modelNode43.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode49 = modelNode41.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode40.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode51 = modelNode28.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode53 = modelNode28.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelType modelType54 = modelNode53.getType();
        byte[] byteArray57 = org.jboss.dmr.Base64.decode("true");
        org.jboss.dmr.ModelNode modelNode58 = modelNode53.set("\"(\\\"hi!\\\" => 0.0)\"", byteArray57);
        org.jboss.dmr.PropertyModelValue propertyModelValue59 = new org.jboss.dmr.PropertyModelValue("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode58);
        boolean boolean60 = propertyModelValue15.equals(propertyModelValue59);
        java.io.DataOutput dataOutput61 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue15.writeExternal(dataOutput61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str47, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertTrue("'" + modelType54 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType54.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-74, -69, -98]");
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode6.asList();
        org.jboss.dmr.ListModelValue listModelValue8 = new org.jboss.dmr.ListModelValue(modelNodeList7);
        long long10 = listModelValue8.asLong((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode12 = listModelValue8.requireChild(35);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [35]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj1 = org.jboss.dmr.Base64.decodeToObject("{ \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : { \"EXPRESSION_VALUE\" : \"true\" } }");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Bad Base64 input character at 0: 123(decimal)");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.LongModelValue longModelValue12 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue12.asLong();
        byte[] byteArray14 = longModelValue12.asBytes();
        org.jboss.dmr.ModelNode modelNode15 = modelNode0.add("EXPRESSION_VALUE", byteArray14);
        boolean boolean16 = modelNode0.asBoolean();
        java.lang.Boolean boolean17 = modelNode0.asBooleanOrNull();
        org.jboss.dmr.StringModelValue stringModelValue20 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray21 = stringModelValue20.asBytes();
        org.jboss.dmr.LongModelValue longModelValue23 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal24 = longModelValue23.asBigDecimal();
        byte[] byteArray25 = longModelValue23.asBytes();
        boolean boolean26 = stringModelValue20.equals((java.lang.Object) byteArray25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode0.add("H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgnC2F\ngdlAz6ACAF+odLA1AAAA", byteArray25);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(modelNode27);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        org.jboss.dmr.ValueExpression valueExpression1 = new org.jboss.dmr.ValueExpression("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQAC0JJR19ERUNJTUFM");
        java.lang.String str2 = valueExpression1.getExpressionString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQAC0JJR19ERUNJTUFM" + "'", str2, "rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQAC0JJR19ERUNJTUFM");
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger10 = booleanModelValue9.asBigInteger();
        byte[] byteArray11 = booleanModelValue9.asBytes();
        org.jboss.dmr.ModelNode modelNode12 = modelNode6.set("expression \"hi!\"", byteArray11);
        outputStream3.write(byteArray11);
        org.jboss.dmr.LongModelValue longModelValue15 = new org.jboss.dmr.LongModelValue(1L);
        long long16 = longModelValue15.asLong();
        byte[] byteArray17 = longModelValue15.asBytes();
        outputStream3.write(byteArray17, 2, (int) (short) -1);
        org.jboss.dmr.BytesModelValue bytesModelValue21 = new org.jboss.dmr.BytesModelValue(byteArray17);
        org.jboss.dmr.LongModelValue longModelValue23 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str24 = longModelValue23.asString();
        byte[] byteArray25 = longModelValue23.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue26 = new org.jboss.dmr.BytesModelValue(byteArray25);
        java.lang.String str27 = bytesModelValue26.asString();
        int int28 = bytesModelValue26.asInt();
        byte[] byteArray29 = bytesModelValue26.asBytes();
        org.jboss.dmr.LongModelValue longModelValue31 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str32 = longModelValue31.asString();
        byte[] byteArray33 = longModelValue31.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue34 = new org.jboss.dmr.BytesModelValue(byteArray33);
        java.lang.String str35 = bytesModelValue34.asString();
        int int36 = bytesModelValue34.asInt();
        int int37 = bytesModelValue34.asInt();
        org.jboss.dmr.LongModelValue longModelValue39 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str40 = longModelValue39.asString();
        byte[] byteArray41 = longModelValue39.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue42 = new org.jboss.dmr.BytesModelValue(byteArray41);
        double double43 = bytesModelValue42.asDouble();
        boolean boolean44 = bytesModelValue34.equals(bytesModelValue42);
        byte[] byteArray45 = bytesModelValue42.asBytes();
        java.math.BigInteger bigInteger46 = bytesModelValue42.asBigInteger();
        boolean boolean47 = bytesModelValue26.equals(bytesModelValue42);
        double double48 = bytesModelValue42.asDouble();
        long long49 = bytesModelValue42.asLong();
        boolean boolean50 = bytesModelValue21.equals(bytesModelValue42);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue55 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger56 = booleanModelValue55.asBigInteger();
        byte[] byteArray57 = booleanModelValue55.asBytes();
        org.jboss.dmr.ModelNode modelNode58 = modelNode52.set("expression \"hi!\"", byteArray57);
        org.jboss.dmr.ModelNode modelNode59 = modelNode58.resolve();
        boolean boolean61 = modelNode58.hasDefined("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4");
        boolean boolean62 = bytesModelValue21.equals((java.lang.Object) "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4");
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str27, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str35, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4.9E-324d + "'", double43 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 4.9E-324d + "'", double48 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(booleanModelValue55);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        double double10 = intModelValue1.asDouble();
        double double12 = intModelValue1.asDouble((double) 11975582L);
        byte[] byteArray13 = intModelValue1.asBytes();
        double double14 = intModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 32.0d + "'", double10 == 32.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("AAAAAAAAAAo=");
        org.jboss.dmr.ValueExpression valueExpression2 = expressionValue1.asExpression();
        java.io.DataOutput dataOutput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.writeExternal(dataOutput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = propertyModelValue10.asList();
        java.util.List<org.jboss.dmr.Property> propertyList12 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long16 = modelNode15.asLong();
        org.jboss.dmr.ValueExpression valueExpression17 = modelNode15.asExpression();
        java.math.BigDecimal bigDecimal18 = valueExpression17.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long21 = booleanModelValue20.asLong();
        org.jboss.dmr.ValueExpression valueExpression22 = booleanModelValue20.asExpression();
        boolean boolean24 = valueExpression22.equals((java.lang.Object) 'p');
        boolean boolean25 = valueExpression17.equals(valueExpression22);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode(valueExpression17);
        org.jboss.dmr.Property property28 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode26, false);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue(property28);
        java.util.List<org.jboss.dmr.Property> propertyList30 = propertyModelValue29.asPropertyList();
        boolean boolean31 = propertyModelValue10.equals(propertyModelValue29);
        java.lang.String str32 = propertyModelValue29.asString();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(propertyList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"1.0\")" + "'", str32, "(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"1.0\")");
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        org.jboss.dmr.ValueExpression valueExpression18 = stringModelValue11.asExpression();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory20 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream21 = null;
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream(inputStream21, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream23);
        org.jboss.dmr.stream.ModelReader modelReader25 = modelStreamFactory20.newModelReader((java.io.InputStream) inputStream24);
        java.io.OutputStream outputStream26 = null;
        org.jboss.dmr.Base64.OutputStream outputStream27 = new org.jboss.dmr.Base64.OutputStream(outputStream26);
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream27);
        outputStream27.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelStreamFactory20.newModelWriter((java.io.OutputStream) outputStream27);
        org.jboss.dmr.stream.ModelWriter modelWriter32 = modelWriter31.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter34 = modelWriter32.writeInt((int) (byte) 10);
        stringModelValue11.write(modelWriter32);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = stringModelValue11.asDouble((double) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertNotNull(modelStreamFactory20);
        org.junit.Assert.assertNotNull(modelReader25);
        org.junit.Assert.assertNotNull(modelWriter31);
        org.junit.Assert.assertNotNull(modelWriter32);
        org.junit.Assert.assertNotNull(modelWriter34);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        boolean boolean8 = objectModelValue4.has((int) 'a');
        boolean boolean10 = objectModelValue4.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue11 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue11.asObject();
        java.util.Set<java.lang.String> strSet13 = objectModelValue11.getKeys();
        boolean boolean15 = objectModelValue11.has((int) 'a');
        boolean boolean16 = objectModelValue4.equals(objectModelValue11);
        org.jboss.dmr.ModelNode modelNode17 = objectModelValue11.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = objectModelValue11.asList();
        org.jboss.dmr.ModelNode modelNode19 = modelNode2.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList18);
        org.jboss.dmr.PropertyModelValue propertyModelValue21 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3AwABMXg=", modelNode2, true);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertNotNull(modelNode19);
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        org.jboss.dmr.ValueExpression valueExpression18 = stringModelValue11.asExpression();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory20 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream21 = null;
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream(inputStream21, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream23);
        org.jboss.dmr.stream.ModelReader modelReader25 = modelStreamFactory20.newModelReader((java.io.InputStream) inputStream24);
        java.io.OutputStream outputStream26 = null;
        org.jboss.dmr.Base64.OutputStream outputStream27 = new org.jboss.dmr.Base64.OutputStream(outputStream26);
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream27);
        outputStream27.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelStreamFactory20.newModelWriter((java.io.OutputStream) outputStream27);
        org.jboss.dmr.stream.ModelWriter modelWriter32 = modelWriter31.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter34 = modelWriter32.writeInt((int) (byte) 10);
        stringModelValue11.write(modelWriter32);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = stringModelValue11.asLong(10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertNotNull(modelStreamFactory20);
        org.junit.Assert.assertNotNull(modelReader25);
        org.junit.Assert.assertNotNull(modelWriter31);
        org.junit.Assert.assertNotNull(modelWriter32);
        org.junit.Assert.assertNotNull(modelWriter34);
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode4 = modelNode3.resolve();
        java.lang.String str5 = modelNode4.toString();
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.set(32.0d);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode4, true);
        org.jboss.dmr.ModelNode modelNode11 = modelNode4.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode24.asList();
        org.jboss.dmr.ListModelValue listModelValue26 = new org.jboss.dmr.ListModelValue(modelNodeList25);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue26);
        org.jboss.dmr.ModelValue modelValue28 = listModelValue26.resolve();
        int int30 = listModelValue26.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList31 = listModelValue26.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList32 = modelNode20.asPropertyList(propertyList31);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        org.jboss.dmr.Property property38 = new org.jboss.dmr.Property("", modelNode37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.get(strArray39);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode44.asList();
        org.jboss.dmr.ListModelValue listModelValue46 = new org.jboss.dmr.ListModelValue(modelNodeList45);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue46);
        org.jboss.dmr.ModelValue modelValue48 = listModelValue46.resolve();
        int int50 = listModelValue46.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList51 = listModelValue46.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList52 = modelNode40.asPropertyList(propertyList51);
        modelNode20.setNoCopy(modelNode40);
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode57 = modelNode54.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode58 = new org.jboss.dmr.ModelNode();
        java.lang.Long long59 = modelNode58.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray60 = new org.jboss.dmr.ModelNode[] { modelNode54, modelNode58 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList61 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList61, modelNodeArray60);
        org.jboss.dmr.ModelNode modelNode63 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList61);
        org.jboss.dmr.LongModelValue longModelValue65 = new org.jboss.dmr.LongModelValue((-1L));
        int int66 = longModelValue65.asInt();
        boolean boolean67 = modelNode20.equals((java.lang.Object) int66);
        org.jboss.dmr.ModelNode modelNode68 = modelNode11.set("hi!", modelNode20);
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode72 = modelNode70.set((int) '#');
        java.lang.Boolean boolean73 = modelNode70.asBooleanOrNull();
        java.lang.String str75 = modelNode70.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelType modelType77 = org.jboss.dmr.ModelType.BIG_DECIMAL;
        org.jboss.dmr.ModelNode modelNode78 = new org.jboss.dmr.ModelNode(modelType77);
        org.jboss.dmr.ModelNode modelNode79 = modelNode70.set("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", modelType77);
        org.jboss.dmr.ModelNode modelNode80 = modelNode20.set(modelType77);
        org.jboss.dmr.ModelNode modelNode81 = new org.jboss.dmr.ModelNode(modelType77);
        org.jboss.dmr.PropertyModelValue propertyModelValue83 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode81, true);
        java.lang.String str84 = propertyModelValue83.asString();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelValue28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(propertyList31);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertNotNull(modelValue48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(propertyList51);
        org.junit.Assert.assertNotNull(propertyList52);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNull(long59);
        org.junit.Assert.assertNotNull(modelNodeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertEquals("'" + boolean73 + "' != '" + true + "'", boolean73, true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "35" + "'", str75, "35");
        org.junit.Assert.assertTrue("'" + modelType77 + "' != '" + org.jboss.dmr.ModelType.BIG_DECIMAL + "'", modelType77.equals(org.jboss.dmr.ModelType.BIG_DECIMAL));
        org.junit.Assert.assertNotNull(modelNode79);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(\"Expression \\\"true\\\"\" => BIG_DECIMAL)" + "'", str84, "(\"Expression \\\"true\\\"\" => BIG_DECIMAL)");
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        java.lang.Object obj1 = org.jboss.dmr.Base64.decodeToObject("rO0ABXQAA2hpIQ==");
        org.junit.Assert.assertEquals("'" + obj1 + "' != '" + "hi!" + "'", obj1, "hi!");
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression9 = bigDecimalModelValue7.asExpression();
        int int10 = bigDecimalModelValue7.asInt();
        java.math.BigDecimal bigDecimal11 = bigDecimalModelValue7.asBigDecimal();
        double double13 = bigDecimalModelValue7.asDouble(4.9E-324d);
        long long14 = bigDecimalModelValue7.asLong();
        boolean boolean16 = bigDecimalModelValue7.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) bigDecimalModelValue7);
        java.io.DataOutput dataOutput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode17.writeExternal(dataOutput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isBigInteger();
        boolean boolean21 = modelReader15.isUndefined();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = modelReader15.getBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't bytes");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode18 = listModelValue5.insertChild(97);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.ModelNode modelNode8 = modelNode3.set((double) 'a');
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue(1L);
        long long12 = longModelValue10.asLong((long) (short) 0);
        java.lang.String str13 = longModelValue10.asString();
        org.jboss.dmr.ValueExpression valueExpression14 = longModelValue10.asExpression();
        int int15 = valueExpression14.resolveInt();
        org.jboss.dmr.ModelNode modelNode16 = modelNode3.set(valueExpression14);
        java.lang.String str17 = valueExpression14.toString();
        java.lang.String str18 = valueExpression14.toString();
        java.io.ObjectOutput objectOutput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression14.writeExternal(objectOutput19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Expression \"1\"" + "'", str17, "Expression \"1\"");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Expression \"1\"" + "'", str18, "Expression \"1\"");
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        byte[] byteArray7 = bytesModelValue4.asBytes();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        java.lang.String str13 = bytesModelValue12.asString();
        int int14 = bytesModelValue12.asInt();
        int int15 = bytesModelValue12.asInt();
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        double double21 = bytesModelValue20.asDouble();
        boolean boolean22 = bytesModelValue12.equals(bytesModelValue20);
        byte[] byteArray23 = bytesModelValue20.asBytes();
        java.math.BigInteger bigInteger24 = bytesModelValue20.asBigInteger();
        boolean boolean25 = bytesModelValue4.equals(bytesModelValue20);
        byte[] byteArray26 = bytesModelValue20.asBytes();
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        java.lang.String str32 = bytesModelValue31.asString();
        int int33 = bytesModelValue31.asInt();
        long long35 = bytesModelValue31.asLong((long) (short) 1);
        int int36 = bytesModelValue31.asInt();
        int int37 = bytesModelValue31.asInt();
        byte[] byteArray38 = bytesModelValue31.asBytes();
        org.jboss.dmr.LongModelValue longModelValue40 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str41 = longModelValue40.asString();
        byte[] byteArray42 = longModelValue40.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue43 = new org.jboss.dmr.BytesModelValue(byteArray42);
        java.lang.String str44 = bytesModelValue43.asString();
        int int45 = bytesModelValue43.asInt();
        long long47 = bytesModelValue43.asLong((long) (short) 1);
        int int48 = bytesModelValue43.asInt();
        double double49 = bytesModelValue43.asDouble();
        boolean boolean50 = bytesModelValue31.equals(bytesModelValue43);
        boolean boolean51 = bytesModelValue20.equals(bytesModelValue31);
        int int52 = bytesModelValue20.asInt();
        java.io.PrintWriter printWriter53 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue20.writeString(printWriter53, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str13, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str32, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str44, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4.9E-324d + "'", double49 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        boolean boolean8 = typeModelValue5.asBoolean();
        org.jboss.dmr.ModelType modelType9 = typeModelValue5.asType();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory11 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream12 = null;
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream12, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        int int22 = inputStream14.read(byteArray18, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream14, (-1));
        org.jboss.dmr.stream.ModelReader modelReader25 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream24);
        boolean boolean26 = modelReader25.isLong();
        boolean boolean27 = modelReader25.isBigDecimal();
        boolean boolean28 = modelReader25.isDouble();
        boolean boolean29 = modelReader25.isPropertyStart();
        boolean boolean30 = typeModelValue5.equals((java.lang.Object) modelReader25);
        boolean boolean31 = typeModelValue5.asBoolean();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelStreamFactory11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(modelReader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) 100);
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.setExpression("hi!", "hi!");
        java.lang.String str6 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode2);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode2.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set((double) 0);
        boolean boolean10 = modelNode2.isProtected();
        java.math.BigInteger bigInteger11 = modelNode2.asBigIntegerOrNull();
        boolean boolean12 = doubleModelValue1.equals((java.lang.Object) modelNode2);
        java.lang.String str13 = doubleModelValue1.toString();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode27, false);
        java.util.Set<java.lang.String> strSet30 = propertyModelValue29.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList31 = propertyModelValue29.asPropertyList();
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.lang.String str37 = modelNode33.toString();
        org.jboss.dmr.ModelNode modelNode38 = modelNode33.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.set("hi!", 0.0d);
        org.jboss.dmr.Property property44 = new org.jboss.dmr.Property("", modelNode43);
        org.jboss.dmr.ModelNode modelNode45 = modelNode33.set(property44);
        org.jboss.dmr.PropertyModelValue propertyModelValue47 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode45, false);
        java.util.Set<java.lang.String> strSet48 = propertyModelValue47.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList49 = propertyModelValue47.asPropertyList();
        java.util.Set<java.lang.String> strSet50 = propertyModelValue47.getKeys();
        boolean boolean51 = propertyModelValue29.equals(propertyModelValue47);
        org.jboss.dmr.Property property52 = propertyModelValue29.asProperty();
        boolean boolean53 = doubleModelValue1.equals((java.lang.Object) property52);
        java.math.BigDecimal bigDecimal54 = doubleModelValue1.asBigDecimal();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str6, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100.0" + "'", str13, "100.0");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(propertyList31);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(\"hi!\" => 0.0)" + "'", str37, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(propertyList49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(bigDecimal54);
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        byte[] byteArray6 = longModelValue1.asBytes();
        boolean boolean8 = org.jboss.dmr.Base64.encodeToFile(byteArray6, "H4sIAAAAAAAAAFvzloG1uIhBNr8oXS8rKb+4WC8lt0gvLDGnNNW1oqAotbg4Mz/vj9r8R3l9E2J4GBgqCspZGJh0DSsAkLuCFDkAAAA=");
        java.lang.String str9 = org.jboss.dmr.Base64.encodeBytes(byteArray6);
        java.lang.String str10 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) str9);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAAAAAE=" + "'", str9, "AAAAAAAAAAE=");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "rO0ABXQADEFBQUFBQUFBQUFFPQ==" + "'", str10, "rO0ABXQADEFBQUFBQUFBQUFFPQ==");
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream14, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode18 = org.jboss.dmr.ModelNode.fromJSONStream((java.io.InputStream) inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        java.lang.String str15 = listModelValue14.asString();
        long long16 = listModelValue14.asLong();
        int int18 = listModelValue14.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue19 = listModelValue14.protect();
        boolean boolean21 = listModelValue14.has((int) (short) 100);
        boolean boolean22 = listModelValue5.equals(listModelValue14);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = listModelValue5.asList();
        org.jboss.dmr.ListModelValue listModelValue24 = new org.jboss.dmr.ListModelValue(modelNodeList23);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = listModelValue24.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str15, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(modelNodeList23);
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        byte[] byteArray5 = longModelValue1.asBytes();
        org.jboss.dmr.ModelType modelType6 = longModelValue1.getType();
        java.lang.String str7 = longModelValue1.asString();
        int int9 = longModelValue1.asInt((int) (short) 1);
        double double10 = longModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType6.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        boolean boolean22 = modelReader21.isString();
        boolean boolean23 = modelReader21.isLong();
        boolean boolean24 = modelReader21.isListEnd();
        boolean boolean25 = modelReader21.isListStart();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        int int13 = listModelValue5.asInt();
        java.lang.String str14 = listModelValue5.asString();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        boolean boolean17 = listModelValue5.equals((java.lang.Object) modelType15);
        long long19 = listModelValue5.asLong(100L);
        java.lang.String str20 = listModelValue5.asString();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType15.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str20, "[(\"hi!\" => 0.0)]");
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str3 = modelNode1.asString("true");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(bigDecimal9);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.setNoCopy("35", modelNode12);
        java.lang.String str15 = modelNode1.toJSONString(true);
        modelNode1.protect();
        org.jboss.dmr.DoubleModelValue doubleModelValue18 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long19 = doubleModelValue18.asLong();
        boolean boolean20 = doubleModelValue18.asBoolean();
        byte[] byteArray21 = doubleModelValue18.asBytes();
        int int23 = doubleModelValue18.asInt((-1));
        java.math.BigDecimal bigDecimal24 = doubleModelValue18.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue25 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal24);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode26 = modelNode1.add(bigDecimal24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{ \"35\" : 0.0 }" + "'", str15, "{ \"35\" : 0.0 }");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(bigDecimal24);
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode10 = modelNode0.resolve();
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        org.jboss.dmr.ModelType modelType14 = org.jboss.dmr.ModelType.PROPERTY;
        char char15 = modelType14.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue16 = org.jboss.dmr.TypeModelValue.of(modelType14);
        boolean boolean17 = typeModelValue13.equals(typeModelValue16);
        java.lang.String str18 = typeModelValue16.asString();
        org.jboss.dmr.ModelType modelType19 = org.jboss.dmr.ModelType.PROPERTY;
        char char20 = modelType19.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue21 = org.jboss.dmr.TypeModelValue.of(modelType19);
        org.jboss.dmr.ModelType modelType22 = org.jboss.dmr.ModelType.PROPERTY;
        char char23 = modelType22.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue24 = org.jboss.dmr.TypeModelValue.of(modelType22);
        boolean boolean25 = typeModelValue21.equals(typeModelValue24);
        java.lang.String str26 = typeModelValue24.asString();
        boolean boolean28 = typeModelValue24.asBoolean(true);
        boolean boolean29 = typeModelValue16.equals(typeModelValue24);
        org.jboss.dmr.ValueExpression valueExpression30 = typeModelValue24.asExpression();
        org.jboss.dmr.ValueExpression valueExpression31 = typeModelValue24.asExpression();
        org.jboss.dmr.BooleanModelValue booleanModelValue33 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long34 = booleanModelValue33.asLong();
        org.jboss.dmr.ValueExpression valueExpression35 = booleanModelValue33.asExpression();
        boolean boolean37 = valueExpression35.equals((java.lang.Object) 'p');
        org.jboss.dmr.ExpressionValue expressionValue38 = new org.jboss.dmr.ExpressionValue(valueExpression35);
        org.jboss.dmr.BooleanModelValue booleanModelValue39 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double40 = booleanModelValue39.asDouble();
        org.jboss.dmr.ModelValue modelValue41 = booleanModelValue39.copy();
        java.math.BigInteger bigInteger42 = booleanModelValue39.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue43 = new org.jboss.dmr.BigIntegerModelValue(bigInteger42);
        double double45 = bigIntegerModelValue43.asDouble((double) 'b');
        int int46 = bigIntegerModelValue43.asInt();
        org.jboss.dmr.ValueExpression valueExpression47 = bigIntegerModelValue43.asExpression();
        boolean boolean48 = valueExpression35.equals((java.lang.Object) valueExpression47);
        boolean boolean49 = valueExpression31.equals(valueExpression35);
        org.jboss.dmr.ModelNode modelNode50 = modelNode10.set(valueExpression31);
        org.jboss.dmr.ModelType modelType51 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode(modelType51);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode(modelType51);
        modelNode53.protect();
        org.jboss.dmr.ModelNode modelNode55 = modelNode10.set(modelNode53);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode57 = modelNode55.remove("{\n    \"[(\\\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\\\" => big integer 32)]\" : 1\n}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType14.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'p' + "'", char15 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PROPERTY" + "'", str18, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType19 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType19.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + 'p' + "'", char20 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue21);
        org.junit.Assert.assertTrue("'" + modelType22 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType22.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + 'p' + "'", char23 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PROPERTY" + "'", str26, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertNotNull(booleanModelValue33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(valueExpression35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(booleanModelValue39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(valueExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertTrue("'" + modelType51 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType51.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertNotNull(modelNode55);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        boolean boolean3 = typeModelValue2.asBoolean();
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray6 = booleanModelValue5.asBytes();
        java.lang.String str7 = booleanModelValue5.asString();
        int int8 = booleanModelValue5.asInt();
        boolean boolean9 = typeModelValue2.equals((java.lang.Object) booleanModelValue5);
        org.jboss.dmr.ValueExpression valueExpression10 = typeModelValue2.asExpression();
        java.io.PrintWriter printWriter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            typeModelValue2.formatAsJSON(printWriter11, (int) (byte) 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(valueExpression10);
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.clear();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.lang.String str14 = modelNode10.toString();
        org.jboss.dmr.ModelNode modelNode15 = modelNode10.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode17 = modelNode10.set(100);
        org.jboss.dmr.ModelNode modelNode18 = modelNode9.add(modelNode10);
        int int20 = modelNode10.asInt(2);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.lang.String str27 = modelNode23.toString();
        org.jboss.dmr.ModelNode modelNode28 = modelNode23.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode30 = modelNode23.set(100);
        org.jboss.dmr.ModelNode modelNode31 = modelNode22.add(modelNode23);
        org.jboss.dmr.Property property32 = new org.jboss.dmr.Property("", modelNode23);
        java.lang.String str33 = property32.getName();
        org.jboss.dmr.Property property34 = property32.clone();
        java.lang.String str35 = property32.getName();
        org.jboss.dmr.ModelNode modelNode36 = modelNode10.set(property32);
        org.jboss.dmr.ModelNode modelNode37 = modelNode0.set(property32);
        org.jboss.dmr.Property property38 = property32.clone();
        java.lang.String str39 = property32.getName();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(\"hi!\" => 0.0)" + "'", str14, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(\"hi!\" => 0.0)" + "'", str27, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.copy(false);
        int int7 = objectModelValue0.asInt();
        int int8 = objectModelValue0.asInt();
        boolean boolean9 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelValue modelValue10 = objectModelValue0.resolve();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelValue10);
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.FALSE;
        long long1 = booleanModelValue0.asLong();
        byte[] byteArray2 = booleanModelValue0.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue3 = new org.jboss.dmr.BytesModelValue(byteArray2);
        double double4 = bytesModelValue3.asDouble();
        org.jboss.dmr.ObjectModelValue objectModelValue5 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue5.asObject();
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue5.protect();
        java.util.List<org.jboss.dmr.Property> propertyList8 = objectModelValue5.asPropertyList();
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue(97L);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory12 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream13 = null;
        org.jboss.dmr.Base64.InputStream inputStream15 = new org.jboss.dmr.Base64.InputStream(inputStream13, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream15);
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory12.newModelReader((java.io.InputStream) inputStream16);
        java.io.OutputStream outputStream18 = null;
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream(outputStream18);
        org.jboss.dmr.Base64.OutputStream outputStream20 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream19);
        outputStream19.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelStreamFactory12.newModelWriter((java.io.OutputStream) outputStream19);
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelWriter23.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue26 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray27 = intModelValue26.asBytes();
        int int29 = intModelValue26.asInt(0);
        java.math.BigInteger bigInteger30 = intModelValue26.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelWriter24.writeBigInteger(bigInteger30);
        org.jboss.dmr.stream.ModelWriter modelWriter32 = modelWriter24.writeListStart();
        longModelValue10.write(modelWriter32);
        objectModelValue5.write(modelWriter32);
        bytesModelValue3.write(modelWriter32);
        java.math.BigDecimal bigDecimal36 = bytesModelValue3.asBigDecimal();
        int int38 = bytesModelValue3.asInt(52);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertNotNull(propertyList8);
        org.junit.Assert.assertNotNull(modelStreamFactory12);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(modelWriter31);
        org.junit.Assert.assertNotNull(modelWriter32);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((-1.0d));
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.clear();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.resolve();
        java.lang.String str8 = modelNode7.toString();
        org.jboss.dmr.ModelNode modelNode9 = modelNode3.add("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))", modelNode7);
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.clear();
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("{\"hi!\" => 0.0}", modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("", modelNode20);
        boolean boolean23 = modelNode20.equals((java.lang.Object) 100L);
        boolean boolean24 = modelNode12.equals(modelNode20);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int34 = modelNode33.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.setExpression("hi!", "hi!");
        java.lang.String str39 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode35);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = modelNode35.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode41 = modelNode33.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList40);
        org.jboss.dmr.ModelNode modelNode42 = modelNode32.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList40);
        org.jboss.dmr.ModelNode modelNode43 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList40);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList44 = modelNode10.asList(modelNodeList40);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str39, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList40);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNodeList44);
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(bigDecimal4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(bigDecimal4);
        org.jboss.dmr.ModelNode modelNode8 = modelNode6.set(3);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = modelNode8.require((int) 'b');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [98]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(modelNode8);
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet7 = modelNode6.keys();
        long long8 = modelNode6.asLong();
        org.jboss.dmr.ModelNode modelNode11 = modelNode6.set("{ \"EXPRESSION_VALUE\" : \"AAAAAAAAAAo=\" }", (double) 8);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(modelNode11);
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        boolean boolean18 = listModelValue13.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray19 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean20 = listModelValue13.equals((java.lang.Object) modelNodeArray19);
        boolean boolean21 = typeModelValue5.equals((java.lang.Object) listModelValue13);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue13.resolve();
        org.jboss.dmr.ModelValue modelValue23 = listModelValue13.protect();
        boolean boolean25 = listModelValue13.has((int) (short) -1);
        org.jboss.dmr.ModelValue modelValue26 = listModelValue13.resolve();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long29 = modelNode28.asLong();
        org.jboss.dmr.ValueExpression valueExpression30 = modelNode28.asExpression();
        java.math.BigDecimal bigDecimal31 = valueExpression30.resolveBigDecimal();
        java.lang.String str32 = valueExpression30.getExpressionString();
        java.math.BigDecimal bigDecimal33 = valueExpression30.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue34 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal33);
        boolean boolean35 = bigDecimalModelValue34.asBoolean();
        java.math.BigInteger bigInteger36 = bigDecimalModelValue34.asBigInteger();
        java.math.BigInteger bigInteger37 = bigDecimalModelValue34.asBigInteger();
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long40 = modelNode39.asLong();
        org.jboss.dmr.ValueExpression valueExpression41 = modelNode39.asExpression();
        java.math.BigDecimal bigDecimal42 = valueExpression41.resolveBigDecimal();
        java.lang.String str43 = valueExpression41.getExpressionString();
        java.math.BigDecimal bigDecimal44 = valueExpression41.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue45 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal44);
        boolean boolean46 = bigDecimalModelValue45.asBoolean();
        long long47 = bigDecimalModelValue45.asLong();
        org.jboss.dmr.IntModelValue intModelValue49 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str50 = intModelValue49.asString();
        double double52 = intModelValue49.asDouble((double) 2);
        java.math.BigDecimal bigDecimal53 = intModelValue49.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue54 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal53);
        boolean boolean55 = bigDecimalModelValue45.equals(bigDecimalModelValue54);
        boolean boolean57 = bigDecimalModelValue45.asBoolean(false);
        int int59 = bigDecimalModelValue45.asInt(3);
        boolean boolean60 = bigDecimalModelValue34.equals(bigDecimalModelValue45);
        boolean boolean61 = listModelValue13.equals((java.lang.Object) boolean60);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(modelNodeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(modelValue26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0" + "'", str32, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(valueExpression41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1.0" + "'", str43, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "32" + "'", str50, "32");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 32.0d + "'", double52 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.add("35", 10);
        org.jboss.dmr.ModelType modelType6 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(modelType6);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        org.jboss.dmr.Property property13 = new org.jboss.dmr.Property("", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(property13);
        java.lang.String str15 = property13.getName();
        org.jboss.dmr.Property property16 = property13.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue17 = new org.jboss.dmr.PropertyModelValue(property13);
        org.jboss.dmr.ModelNode modelNode18 = modelNode1.add(property13);
        java.lang.String str19 = property13.getName();
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType6.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        org.jboss.dmr.ValueExpression valueExpression11 = bigIntegerModelValue4.asExpression();
        org.jboss.dmr.ValueExpression valueExpression12 = bigIntegerModelValue4.asExpression();
        boolean boolean13 = bigIntegerModelValue4.asBoolean();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 0);
        byte[] byteArray2 = doubleModelValue1.asBytes();
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) doubleModelValue1);
        org.jboss.dmr.DoubleModelValue doubleModelValue4 = null;
        boolean boolean5 = doubleModelValue1.equals(doubleModelValue4);
        org.jboss.dmr.ObjectModelValue objectModelValue6 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue6.asObject();
        java.util.Set<java.lang.String> strSet8 = objectModelValue6.getKeys();
        org.jboss.dmr.ModelNode modelNode10 = objectModelValue6.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean11 = objectModelValue6.asBoolean();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue6.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue14 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode15 = objectModelValue14.asObject();
        java.util.Set<java.lang.String> strSet16 = objectModelValue14.getKeys();
        org.jboss.dmr.ModelNode modelNode18 = objectModelValue14.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean19 = objectModelValue14.asBoolean();
        int int21 = objectModelValue14.asInt((int) 'b');
        int int23 = objectModelValue14.asInt((int) '#');
        boolean boolean24 = objectModelValue6.equals(objectModelValue14);
        int int25 = objectModelValue14.asInt();
        java.util.Set<java.lang.String> strSet26 = objectModelValue14.getKeys();
        org.jboss.dmr.ModelValue modelValue27 = objectModelValue14.resolve();
        boolean boolean28 = doubleModelValue1.equals((java.lang.Object) objectModelValue14);
        boolean boolean30 = doubleModelValue1.has("true");
        java.math.BigInteger bigInteger31 = doubleModelValue1.asBigInteger();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(modelNode18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigInteger31);
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode(valueExpression8);
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue13 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean14 = stringModelValue11.equals(stringModelValue13);
        byte[] byteArray15 = stringModelValue13.asBytes();
        org.jboss.dmr.ValueExpression valueExpression16 = stringModelValue13.asExpression();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long19 = modelNode18.asLong();
        org.jboss.dmr.ValueExpression valueExpression20 = modelNode18.asExpression();
        java.math.BigDecimal bigDecimal21 = valueExpression20.resolveBigDecimal();
        java.lang.String str22 = valueExpression20.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue24 = new org.jboss.dmr.LongModelValue(1L);
        long long26 = longModelValue24.asLong((long) (short) 0);
        java.lang.String str27 = longModelValue24.asString();
        org.jboss.dmr.ValueExpression valueExpression28 = longModelValue24.asExpression();
        int int29 = valueExpression28.resolveInt();
        boolean boolean30 = valueExpression20.equals(valueExpression28);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long33 = modelNode32.asLong();
        org.jboss.dmr.ValueExpression valueExpression34 = modelNode32.asExpression();
        java.math.BigDecimal bigDecimal35 = valueExpression34.resolveBigDecimal();
        java.lang.String str36 = valueExpression34.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue38 = new org.jboss.dmr.LongModelValue(1L);
        long long40 = longModelValue38.asLong((long) (short) 0);
        java.lang.String str41 = longModelValue38.asString();
        org.jboss.dmr.ValueExpression valueExpression42 = longModelValue38.asExpression();
        int int43 = valueExpression42.resolveInt();
        boolean boolean44 = valueExpression34.equals(valueExpression42);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver45 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue47 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long48 = booleanModelValue47.asLong();
        org.jboss.dmr.ValueExpression valueExpression49 = booleanModelValue47.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue50 = new org.jboss.dmr.ExpressionValue(valueExpression49);
        java.lang.String str51 = valueExpression49.getExpressionString();
        java.lang.String str52 = valueExpressionResolver45.resolve(valueExpression49);
        long long53 = valueExpression42.resolveLong(valueExpressionResolver45);
        org.jboss.dmr.ExpressionValue expressionValue55 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue57 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean58 = expressionValue55.equals(expressionValue57);
        org.jboss.dmr.ExpressionValue expressionValue60 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue62 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean63 = expressionValue60.equals(expressionValue62);
        boolean boolean64 = expressionValue55.equals(expressionValue62);
        org.jboss.dmr.ValueExpression valueExpression65 = expressionValue62.asExpression();
        java.lang.String str66 = valueExpressionResolver45.resolve(valueExpression65);
        java.lang.String str67 = valueExpression20.resolveString(valueExpressionResolver45);
        java.lang.String str68 = valueExpression16.resolveString(valueExpressionResolver45);
        // The following exception was thrown during execution in test generation
        try {
            long long69 = valueExpression8.resolveLong(valueExpressionResolver45);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"PROPERTY\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1.0" + "'", str22, "1.0");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(valueExpression34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1.0" + "'", str36, "1.0");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(valueExpression42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver45);
        org.junit.Assert.assertNotNull(booleanModelValue47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(valueExpression49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "true" + "'", str51, "true");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "true" + "'", str52, "true");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(valueExpression65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1.0" + "'", str67, "1.0");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str68, "(\"\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (byte) 10);
        java.math.BigInteger bigInteger2 = doubleModelValue1.asBigInteger();
        long long4 = doubleModelValue1.asLong((long) 'l');
        double double6 = doubleModelValue1.asDouble((double) 100L);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.InputStream inputStream7 = null;
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) (byte) 100);
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream(inputStream7);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream7, 0);
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20, (int) (short) 10);
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream22);
        org.jboss.dmr.stream.ModelReader modelReader24 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream22);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType25 = modelReader24.getType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader24);
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue5.copy();
        boolean boolean19 = listModelValue5.asBoolean(true);
        boolean boolean21 = listModelValue5.has(32);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue5.protect();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property24 = listModelValue5.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(modelValue22);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue(0.0d);
        java.lang.String str2 = doubleModelValue1.asString();
        int int3 = doubleModelValue1.asInt();
        org.jboss.dmr.DoubleModelValue doubleModelValue5 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long6 = doubleModelValue5.asLong();
        boolean boolean7 = doubleModelValue5.asBoolean();
        byte[] byteArray8 = doubleModelValue5.asBytes();
        int int10 = doubleModelValue5.asInt((int) ' ');
        boolean boolean11 = doubleModelValue5.asBoolean();
        java.math.BigInteger bigInteger12 = doubleModelValue5.asBigInteger();
        org.jboss.dmr.DoubleModelValue doubleModelValue14 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long15 = doubleModelValue14.asLong();
        boolean boolean16 = doubleModelValue5.equals(doubleModelValue14);
        boolean boolean17 = doubleModelValue1.equals(doubleModelValue5);
        int int18 = doubleModelValue5.asInt();
        double double19 = doubleModelValue5.asDouble();
        org.jboss.dmr.ValueExpression valueExpression20 = doubleModelValue5.asExpression();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0.0" + "'", str2, "0.0");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(valueExpression20);
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelNode modelNode8 = modelNode6.set("true");
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("[1]", (double) 0.0f);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode8.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode15 = modelNode8.set("BYTES_VALUE", false);
        org.jboss.dmr.DoubleModelValue doubleModelValue18 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long19 = doubleModelValue18.asLong();
        boolean boolean20 = doubleModelValue18.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression21 = doubleModelValue18.asExpression();
        java.math.BigDecimal bigDecimal22 = valueExpression21.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue23 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal22);
        org.jboss.dmr.ModelNode modelNode24 = modelNode8.set("[2L]", bigDecimal22);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(modelNode24);
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) (byte) 100);
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream(inputStream0);
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream(inputStream0, 0);
        // The following exception was thrown during execution in test generation
        try {
            inputStream7.reset();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isUndefined();
        boolean boolean19 = modelReader15.isBytes();
        boolean boolean20 = modelReader15.isInt();
        boolean boolean21 = modelReader15.isPropertyStart();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelValue modelValue6 = listModelValue5.resolve();
        boolean boolean8 = listModelValue5.has((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = listModelValue5.requireChild((int) 'l');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [108]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression5 = stringModelValue4.asExpression();
        boolean boolean7 = stringModelValue4.equals((java.lang.Object) (-1.0d));
        java.lang.String str8 = stringModelValue4.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent9 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean10 = stringModelValue4.equals((java.lang.Object) modelEvent9);
        org.jboss.dmr.StringModelValue stringModelValue12 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue14 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean17 = stringModelValue14.equals(stringModelValue16);
        byte[] byteArray18 = stringModelValue16.asBytes();
        java.lang.Object obj19 = null;
        boolean boolean20 = stringModelValue16.equals(obj19);
        boolean boolean22 = stringModelValue16.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean23 = stringModelValue12.equals(stringModelValue16);
        boolean boolean24 = stringModelValue4.equals(stringModelValue16);
        boolean boolean25 = stringModelValue1.equals(stringModelValue16);
        org.jboss.dmr.StringModelValue stringModelValue27 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression28 = stringModelValue27.asExpression();
        boolean boolean30 = stringModelValue27.equals((java.lang.Object) (-1.0d));
        java.lang.String str31 = stringModelValue27.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent32 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean33 = stringModelValue27.equals((java.lang.Object) modelEvent32);
        org.jboss.dmr.StringModelValue stringModelValue35 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue37 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue39 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean40 = stringModelValue37.equals(stringModelValue39);
        byte[] byteArray41 = stringModelValue39.asBytes();
        java.lang.Object obj42 = null;
        boolean boolean43 = stringModelValue39.equals(obj42);
        boolean boolean45 = stringModelValue39.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean46 = stringModelValue35.equals(stringModelValue39);
        boolean boolean47 = stringModelValue27.equals(stringModelValue39);
        boolean boolean48 = stringModelValue1.equals(stringModelValue39);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = stringModelValue1.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str8, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent9 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent9.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str31, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent32 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent32.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set("\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\"", "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        java.lang.Long long7 = modelNode6.asLongOrNull();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode6.asList(modelNodeList15);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = modelNode20.asList();
        org.jboss.dmr.ListModelValue listModelValue22 = new org.jboss.dmr.ListModelValue(modelNodeList21);
        java.lang.String str23 = listModelValue22.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList24 = listModelValue22.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode6.asList(modelNodeList24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode1.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList24);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.setExpression("hi!", "hi!");
        modelNode1.setNoCopy(modelNode27);
        boolean boolean32 = modelNode1.isProtected();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNull(long7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str23, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        int int34 = inputStream26.read(byteArray30, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (-1));
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader41 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream38);
        java.io.OutputStream outputStream42 = null;
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream(outputStream42);
        outputStream43.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream47 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream45, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream47);
        outputStream48.resumeEncoding();
        outputStream48.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream48);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory53 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream54 = null;
        org.jboss.dmr.Base64.InputStream inputStream56 = new org.jboss.dmr.Base64.InputStream(inputStream54, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue58 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str59 = longModelValue58.asString();
        byte[] byteArray60 = longModelValue58.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue61 = new org.jboss.dmr.BytesModelValue(byteArray60);
        int int64 = inputStream56.read(byteArray60, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream56, (-1));
        org.jboss.dmr.stream.ModelReader modelReader67 = modelStreamFactory53.newModelReader((java.io.InputStream) inputStream66);
        java.io.InputStream inputStream68 = null;
        org.jboss.dmr.Base64.InputStream inputStream70 = new org.jboss.dmr.Base64.InputStream(inputStream68, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue72 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str73 = longModelValue72.asString();
        byte[] byteArray74 = longModelValue72.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue75 = new org.jboss.dmr.BytesModelValue(byteArray74);
        int int78 = inputStream70.read(byteArray74, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.stream.ModelReader modelReader79 = modelStreamFactory53.newModelReader((java.io.InputStream) inputStream70);
        org.jboss.dmr.Base64.InputStream inputStream81 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream70, (int) (byte) -1);
        org.jboss.dmr.stream.ModelReader modelReader82 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream70);
        java.io.Writer writer83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter84 = modelStreamFactory1.newModelWriter(writer83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelReader41);
        org.junit.Assert.assertNotNull(modelWriter51);
        org.junit.Assert.assertNotNull(modelStreamFactory53);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(modelReader67);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(modelReader79);
        org.junit.Assert.assertNotNull(modelReader82);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelValue modelValue8 = listModelValue5.protect();
        java.io.PrintWriter printWriter9 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.format(printWriter9, (int) (short) 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelValue8);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        boolean boolean18 = listModelValue13.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray19 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean20 = listModelValue13.equals((java.lang.Object) modelNodeArray19);
        boolean boolean21 = typeModelValue5.equals((java.lang.Object) listModelValue13);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue13.resolve();
        org.jboss.dmr.ModelValue modelValue23 = listModelValue13.protect();
        java.lang.Throwable throwable25 = null;
        org.jboss.dmr.stream.ModelException modelException26 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable25);
        org.jboss.dmr.stream.ModelException modelException27 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException26);
        java.lang.Throwable throwable29 = null;
        org.jboss.dmr.stream.ModelException modelException30 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable29);
        org.jboss.dmr.stream.ModelException modelException31 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException30);
        modelException26.addSuppressed((java.lang.Throwable) modelException30);
        boolean boolean33 = listModelValue13.equals((java.lang.Object) modelException26);
        java.util.List<org.jboss.dmr.Property> propertyList34 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList35 = listModelValue13.asPropertyList();
        java.lang.String str36 = listModelValue13.asString();
        org.jboss.dmr.LongModelValue longModelValue38 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str39 = longModelValue38.asString();
        byte[] byteArray40 = longModelValue38.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue41 = new org.jboss.dmr.BytesModelValue(byteArray40);
        double double42 = bytesModelValue41.asDouble();
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode46 = modelNode44.set((int) '#');
        java.lang.Boolean boolean47 = modelNode44.asBooleanOrNull();
        java.lang.String str49 = modelNode44.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        boolean boolean50 = bytesModelValue41.equals((java.lang.Object) modelNode44);
        java.lang.String str51 = modelNode44.asString();
        boolean boolean52 = listModelValue13.equals((java.lang.Object) modelNode44);
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode((long) 10);
        org.jboss.dmr.ModelNode modelNode57 = modelNode54.set("(\"hi!\" => expression \"(\\\"hi!\\\" => 0.0)\")", (long) (short) -1);
        boolean boolean58 = modelNode44.equals((java.lang.Object) modelNode54);
        java.io.OutputStream outputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode44.writeBase64(outputStream59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(modelNodeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(propertyList34);
        org.junit.Assert.assertNotNull(propertyList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str36, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4.9E-324d + "'", double42 == 4.9E-324d);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertEquals("'" + boolean47 + "' != '" + true + "'", boolean47, true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "35" + "'", str49, "35");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "35" + "'", str51, "35");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        boolean boolean8 = modelNode0.isDefined();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = modelNode0.addExpression("{ \"35\" : 0.0 }");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        java.lang.String str2 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(10L);
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.setExpression("AQ==", "H4sIAAAAAAAAAPv/HwIAHN9EIQgAAAA=");
        java.math.BigDecimal bigDecimal9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = modelNode0.set("expression \"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"", bigDecimal9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newValue is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4" + "'", str2, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode7);
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        byte[] byteArray1 = org.jboss.dmr.Base64.decode("true");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(byteArray1);
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList8 = modelNode7.asList();
        org.jboss.dmr.ModelType modelType9 = modelNode7.getType();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType9);
        org.jboss.dmr.ValueExpression valueExpression11 = typeModelValue10.asExpression();
        org.jboss.dmr.ValueExpression valueExpression12 = typeModelValue10.asExpression();
        org.jboss.dmr.ModelNode modelNode13 = modelNode2.set("(\"Expression \\\"true\\\"\" => (\"hi!\" => 0.0))", valueExpression12);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = valueExpression12.resolveInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"PROPERTY\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-74, -69, -98]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNodeList8);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertNotNull(modelNode13);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.InputStream inputStream7 = null;
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) (byte) 100);
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream(inputStream7);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream7, 0);
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.OutputStream outputStream16 = null;
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream(outputStream16);
        outputStream17.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream17);
        org.jboss.dmr.Base64.OutputStream outputStream20 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue25 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger26 = booleanModelValue25.asBigInteger();
        byte[] byteArray27 = booleanModelValue25.asBytes();
        org.jboss.dmr.ModelNode modelNode28 = modelNode22.set("expression \"hi!\"", byteArray27);
        outputStream19.write(byteArray27);
        org.jboss.dmr.LongModelValue longModelValue31 = new org.jboss.dmr.LongModelValue(1L);
        long long32 = longModelValue31.asLong();
        byte[] byteArray33 = longModelValue31.asBytes();
        outputStream19.write(byteArray33, 2, (int) (short) -1);
        outputStream19.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream38 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream19);
        java.nio.charset.Charset charset39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter40 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream19, charset39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(booleanModelValue25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter14 = modelWriter12.writeDouble((double) (byte) 100);
        org.jboss.dmr.ModelNodeFactory modelNodeFactory15 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode18 = modelNodeFactory15.readFrom("10.0", false);
        org.jboss.dmr.ModelNode modelNode21 = modelNodeFactory15.readFrom("0.0", true);
        org.jboss.dmr.ModelNode modelNode24 = modelNodeFactory15.readFrom("\"[(\\\"hi!\\\" => expression \\\"hi!\\\"),bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }]\"", false);
        org.jboss.dmr.BooleanModelValue booleanModelValue26 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger27 = booleanModelValue26.asBigInteger();
        byte[] byteArray28 = booleanModelValue26.asBytes();
        boolean boolean30 = org.jboss.dmr.Base64.encodeToFile(byteArray28, "1L");
        org.jboss.dmr.ModelNode modelNode31 = modelNode24.set(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter32 = modelWriter12.writeBytes(byteArray28);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter14);
        org.junit.Assert.assertNotNull(modelNodeFactory15);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(booleanModelValue26);
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(modelNode31);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        org.jboss.dmr.ValueExpression valueExpression3 = longModelValue1.asExpression();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        boolean boolean8 = modelNode6.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue("TYPE_MODEL_VALUE", modelNode6);
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue9.getChild(0);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver12 = new org.jboss.dmr.ValueExpressionResolver();
        boolean boolean13 = propertyModelValue9.equals((java.lang.Object) valueExpressionResolver12);
        java.math.BigInteger bigInteger14 = valueExpression3.resolveBigInteger(valueExpressionResolver12);
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str17 = expressionValue16.toString();
        org.jboss.dmr.ExpressionValue expressionValue19 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue21 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean22 = expressionValue19.equals(expressionValue21);
        org.jboss.dmr.ExpressionValue expressionValue24 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue26 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean27 = expressionValue24.equals(expressionValue26);
        boolean boolean28 = expressionValue19.equals(expressionValue26);
        org.jboss.dmr.ModelValue modelValue29 = expressionValue19.resolve();
        java.lang.String str30 = expressionValue19.asString();
        boolean boolean31 = expressionValue16.equals(expressionValue19);
        org.jboss.dmr.ValueExpression valueExpression32 = expressionValue19.asExpression();
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long35 = modelNode34.asLong();
        org.jboss.dmr.ValueExpression valueExpression36 = modelNode34.asExpression();
        java.math.BigDecimal bigDecimal37 = valueExpression36.resolveBigDecimal();
        java.lang.String str38 = valueExpression36.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue40 = new org.jboss.dmr.LongModelValue(1L);
        long long42 = longModelValue40.asLong((long) (short) 0);
        java.lang.String str43 = longModelValue40.asString();
        org.jboss.dmr.ValueExpression valueExpression44 = longModelValue40.asExpression();
        int int45 = valueExpression44.resolveInt();
        boolean boolean46 = valueExpression36.equals(valueExpression44);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver47 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue49 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long50 = booleanModelValue49.asLong();
        org.jboss.dmr.ValueExpression valueExpression51 = booleanModelValue49.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue52 = new org.jboss.dmr.ExpressionValue(valueExpression51);
        java.lang.String str53 = valueExpression51.getExpressionString();
        java.lang.String str54 = valueExpressionResolver47.resolve(valueExpression51);
        long long55 = valueExpression44.resolveLong(valueExpressionResolver47);
        org.jboss.dmr.BooleanModelValue booleanModelValue57 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long58 = booleanModelValue57.asLong();
        org.jboss.dmr.ValueExpression valueExpression59 = booleanModelValue57.asExpression();
        java.lang.String str60 = valueExpression59.toString();
        org.jboss.dmr.ExpressionValue expressionValue62 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression63 = expressionValue62.asExpression();
        boolean boolean64 = valueExpression59.equals(valueExpression63);
        org.jboss.dmr.LongModelValue longModelValue66 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal67 = longModelValue66.asBigDecimal();
        int int68 = longModelValue66.asInt();
        org.jboss.dmr.ValueExpression valueExpression69 = longModelValue66.asExpression();
        boolean boolean70 = valueExpression63.equals(valueExpression69);
        java.lang.String str71 = valueExpressionResolver47.resolve(valueExpression63);
        java.lang.String str72 = valueExpression32.resolveString(valueExpressionResolver47);
        java.lang.String str74 = valueExpressionResolver47.resolvePart("\"QA==\"");
        java.math.BigDecimal bigDecimal75 = valueExpression3.resolveBigDecimal(valueExpressionResolver47);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "expression \"hi!\"" + "'", str17, "expression \"hi!\"");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(modelValue29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(valueExpression36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1.0" + "'", str38, "1.0");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(valueExpression44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver47);
        org.junit.Assert.assertNotNull(booleanModelValue49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(valueExpression51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "true" + "'", str53, "true");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "true" + "'", str54, "true");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(booleanModelValue57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(valueExpression59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Expression \"true\"" + "'", str60, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(valueExpression69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(bigDecimal75);
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.clear();
        boolean boolean5 = modelNode2.has((int) '#');
        org.jboss.dmr.ModelNode modelNode8 = modelNode2.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode10 = modelNode2.set("1");
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")", modelNode2, true);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode10);
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue7);
        org.jboss.dmr.ModelValue modelValue9 = listModelValue7.resolve();
        int int11 = listModelValue7.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList12 = listModelValue7.asPropertyList();
        boolean boolean13 = intModelValue1.equals((java.lang.Object) listModelValue7);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = listModelValue7.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(bigDecimal5);
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.clear();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray10 = booleanModelValue9.asBytes();
        java.lang.String str11 = booleanModelValue9.asString();
        int int12 = booleanModelValue9.asInt();
        long long13 = booleanModelValue9.asLong();
        boolean boolean15 = booleanModelValue9.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger16 = booleanModelValue9.asBigInteger();
        byte[] byteArray17 = booleanModelValue9.asBytes();
        org.jboss.dmr.ModelNode modelNode18 = modelNode7.add(byteArray17);
        org.jboss.dmr.ModelNode modelNode21 = modelNode7.set("BYTES_VALUE", false);
        org.jboss.dmr.ModelNode modelNode23 = modelNode7.setExpression("bytes { 0x00 }");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "true" + "'", str11, "true");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.lang.String str11 = modelNode7.toString();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(100);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        java.lang.String str28 = modelNode27.asString();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        boolean boolean39 = listModelValue34.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = listModelValue34.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = modelNode27.asList(modelNodeList40);
        org.jboss.dmr.ModelNode modelNode42 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList40);
        boolean boolean43 = bigIntegerModelValue4.equals((java.lang.Object) modelNode14);
        boolean boolean44 = bigIntegerModelValue4.asBoolean();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"hi!\" => 0.0)" + "'", str11, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str28, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(modelNodeList40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        java.lang.String str15 = listModelValue14.asString();
        long long16 = listModelValue14.asLong();
        int int18 = listModelValue14.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue19 = listModelValue14.protect();
        boolean boolean21 = listModelValue14.has((int) (short) 100);
        boolean boolean22 = listModelValue5.equals(listModelValue14);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = listModelValue5.asList();
        int int25 = listModelValue5.asInt(0);
        boolean boolean26 = listModelValue5.asBoolean();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str15, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        boolean boolean14 = typeModelValue10.equals(typeModelValue13);
        java.lang.String str15 = typeModelValue13.asString();
        boolean boolean17 = typeModelValue13.asBoolean(true);
        boolean boolean18 = typeModelValue5.equals(typeModelValue13);
        org.jboss.dmr.ModelType modelType19 = org.jboss.dmr.ModelType.PROPERTY;
        char char20 = modelType19.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue21 = org.jboss.dmr.TypeModelValue.of(modelType19);
        org.jboss.dmr.ModelType modelType22 = org.jboss.dmr.ModelType.PROPERTY;
        char char23 = modelType22.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue24 = org.jboss.dmr.TypeModelValue.of(modelType22);
        boolean boolean25 = typeModelValue21.equals(typeModelValue24);
        java.lang.String str26 = typeModelValue24.asString();
        org.jboss.dmr.ValueExpression valueExpression27 = typeModelValue24.asExpression();
        org.jboss.dmr.ModelType modelType28 = typeModelValue24.asType();
        boolean boolean29 = typeModelValue24.asBoolean();
        java.lang.String str30 = typeModelValue24.asString();
        java.lang.String str31 = typeModelValue24.asString();
        boolean boolean32 = typeModelValue13.equals(typeModelValue24);
        java.lang.String str33 = typeModelValue13.asString();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PROPERTY" + "'", str15, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + modelType19 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType19.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + 'p' + "'", char20 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue21);
        org.junit.Assert.assertTrue("'" + modelType22 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType22.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + 'p' + "'", char23 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PROPERTY" + "'", str26, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertTrue("'" + modelType28 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType28.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PROPERTY" + "'", str30, "PROPERTY");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PROPERTY" + "'", str31, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PROPERTY" + "'", str33, "PROPERTY");
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(bigDecimal4);
        java.lang.String str6 = modelNode5.toString();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        java.lang.String str14 = modelNode11.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long18 = booleanModelValue17.asLong();
        org.jboss.dmr.ValueExpression valueExpression19 = booleanModelValue17.asExpression();
        java.lang.String str20 = valueExpression19.toString();
        org.jboss.dmr.ExpressionValue expressionValue22 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression23 = expressionValue22.asExpression();
        boolean boolean24 = valueExpression19.equals(valueExpression23);
        java.lang.String str25 = valueExpression23.resolveString();
        org.jboss.dmr.ModelNode modelNode26 = modelNode11.set("Expression \"1\"", valueExpression23);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = modelNode30.asList();
        org.jboss.dmr.ModelNode modelNode34 = modelNode30.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType35 = modelNode30.getType();
        org.jboss.dmr.ModelNode modelNode36 = modelNode26.set(modelType35);
        org.jboss.dmr.Property property38 = new org.jboss.dmr.Property("expression \"hi!\"", modelNode26, true);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode39 = modelNode5.add(property38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "big decimal 1.0" + "'", str6, "big decimal 1.0");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(\"hi!\" => 0.0)" + "'", str14, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Expression \"true\"" + "'", str20, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertTrue("'" + modelType35 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType35.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode36);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", byteArray6);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(true);
        java.lang.String str10 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        boolean boolean12 = modelNode0.has("-1.0");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode0.asList();
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3YWwAAAACcABRck8w\nQUJYTnlBQmR2Y21jdWFtSnZjM011WkcxeUxrMXZaR1ZzVG05a1pSd3RvVVNkbzQ0L0RBQUFlSEIz\nREhBQUEyaHBJV1VBQTJocApJWGc9YgAAAAEBWgF4" + "'", str10, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3YWwAAAACcABRck8w\nQUJYTnlBQmR2Y21jdWFtSnZjM011WkcxeUxrMXZaR1ZzVG05a1pSd3RvVVNkbzQ0L0RBQUFlSEIz\nREhBQUEyaHBJV1VBQTJocApJWGc9YgAAAAEBWgF4");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNodeList13);
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver0 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long3 = booleanModelValue2.asLong();
        org.jboss.dmr.ValueExpression valueExpression4 = booleanModelValue2.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue5 = new org.jboss.dmr.ExpressionValue(valueExpression4);
        java.lang.String str6 = valueExpression4.getExpressionString();
        java.lang.String str7 = valueExpressionResolver0.resolve(valueExpression4);
        java.lang.String str8 = valueExpression4.toString();
        java.lang.String str9 = valueExpression4.toString();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(valueExpression4);
        java.lang.String str11 = valueExpression4.toString();
        org.junit.Assert.assertNotNull(valueExpressionResolver0);
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "true" + "'", str6, "true");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Expression \"true\"" + "'", str8, "Expression \"true\"");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Expression \"true\"" + "'", str9, "Expression \"true\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Expression \"true\"" + "'", str11, "Expression \"true\"");
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        java.lang.Throwable throwable2 = null;
        org.jboss.dmr.stream.ModelException modelException3 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable2);
        org.jboss.dmr.stream.ModelException modelException4 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException3);
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException3);
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException("100", (java.lang.Throwable) modelException5);
        org.jboss.dmr.stream.ModelException modelException9 = new org.jboss.dmr.stream.ModelException("");
        java.lang.Throwable throwable11 = null;
        org.jboss.dmr.stream.ModelException modelException12 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable11);
        org.jboss.dmr.stream.ModelException modelException13 = new org.jboss.dmr.stream.ModelException(throwable11);
        java.lang.Throwable[] throwableArray14 = modelException13.getSuppressed();
        modelException9.addSuppressed((java.lang.Throwable) modelException13);
        org.jboss.dmr.stream.ModelException modelException16 = new org.jboss.dmr.stream.ModelException("\"AAAAIA==\"", (java.lang.Throwable) modelException9);
        modelException5.addSuppressed((java.lang.Throwable) modelException16);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue(0.0d);
        java.lang.String str2 = doubleModelValue1.asString();
        java.io.DataOutput dataOutput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue1.writeExternal(dataOutput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0.0" + "'", str2, "0.0");
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, 0);
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, (int) 'J');
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, (int) (short) 0);
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue13 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean14 = stringModelValue11.equals(stringModelValue13);
        byte[] byteArray15 = stringModelValue13.asBytes();
        boolean boolean17 = org.jboss.dmr.Base64.encodeToFile(byteArray15, "org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        // The following exception was thrown during execution in test generation
        try {
            int int18 = inputStream3.read(byteArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean5 = stringModelValue1.equals(stringModelValue3);
        byte[] byteArray6 = stringModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression7 = stringModelValue1.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = stringModelValue1.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression7);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'J');
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode2 = modelNode1.add();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        java.io.OutputStream outputStream22 = null;
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream(outputStream22);
        outputStream23.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream25 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream23);
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream25);
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger29 = booleanModelValue28.asBigInteger();
        byte[] byteArray30 = booleanModelValue28.asBytes();
        outputStream25.write(byteArray30, (int) (short) -1, (int) (byte) 0);
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream25);
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream25);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelWriter35.writeDouble((double) (short) 10);
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertNotNull(modelWriter35);
        org.junit.Assert.assertNotNull(modelWriter37);
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.resolve();
        java.lang.String str4 = modelNode3.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set(32.0d);
        org.jboss.dmr.PropertyModelValue propertyModelValue8 = new org.jboss.dmr.PropertyModelValue("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode3, true);
        org.jboss.dmr.ModelNode modelNode10 = modelNode3.set((double) (byte) 0);
        byte[] byteArray11 = modelNode3.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = org.jboss.dmr.Base64.decode(byteArray11, (int) ' ', (int) 'b');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        java.math.BigInteger bigInteger6 = intModelValue1.asBigInteger();
        byte[] byteArray7 = intModelValue1.asBytes();
        java.lang.String str8 = org.jboss.dmr.Base64.encodeBytes(byteArray7);
        java.lang.String str9 = org.jboss.dmr.Base64.encodeBytes(byteArray7);
        byte[] byteArray12 = org.jboss.dmr.Base64.decode(byteArray7, (int) 'J', (-1));
        boolean boolean14 = org.jboss.dmr.Base64.encodeToFile(byteArray12, "org.jboss.dmr.stream.ModelException: \"35\"");
        java.lang.String str16 = org.jboss.dmr.Base64.encodeBytes(byteArray12, (int) ' ');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 32]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AAAAIA==" + "'", str8, "AAAAIA==");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAIA==" + "'", str9, "AAAAIA==");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue4.removeChild("1");
        boolean boolean9 = objectModelValue4.asBoolean();
        boolean boolean10 = objectModelValue0.equals(objectModelValue4);
        long long11 = objectModelValue4.asLong();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue4.getChild("\"\\\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\\\"\"");
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.add("QA==", (long) '4');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray17 = modelNode16.asBytesOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode16);
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long4 = modelNode3.asLong();
        org.jboss.dmr.ValueExpression valueExpression5 = modelNode3.asExpression();
        java.math.BigDecimal bigDecimal6 = valueExpression5.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(valueExpression5);
        java.math.BigDecimal bigDecimal8 = valueExpression5.resolveBigDecimal();
        java.lang.String str9 = valueExpression5.getExpressionString();
        java.lang.String str10 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) valueExpression5);
        java.lang.String str11 = valueExpression5.resolveString();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1.0" + "'", str9, "1.0");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADMS4w\neA==" + "'", str10, "rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADMS4w\neA==");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0" + "'", str11, "1.0");
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.math.BigInteger bigInteger16 = bytesModelValue12.asBigInteger();
        java.lang.String str17 = bytesModelValue12.asString();
        java.io.PrintWriter printWriter18 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue12.format(printWriter18, (int) (byte) 10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str17, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.lang.String str11 = modelNode7.toString();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(100);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        java.lang.String str28 = modelNode27.asString();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        boolean boolean39 = listModelValue34.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = listModelValue34.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = modelNode27.asList(modelNodeList40);
        org.jboss.dmr.ModelNode modelNode42 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList40);
        boolean boolean43 = bigIntegerModelValue4.equals((java.lang.Object) modelNode14);
        org.jboss.dmr.ModelType modelType44 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode(modelType44);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode50 = modelNode47.set("hi!", 0.0d);
        org.jboss.dmr.Property property51 = new org.jboss.dmr.Property("", modelNode50);
        org.jboss.dmr.ModelNode modelNode52 = modelNode45.set(property51);
        org.jboss.dmr.PropertyModelValue propertyModelValue53 = new org.jboss.dmr.PropertyModelValue(property51);
        org.jboss.dmr.PropertyModelValue propertyModelValue54 = new org.jboss.dmr.PropertyModelValue(property51);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList55 = propertyModelValue54.asList();
        boolean boolean56 = bigIntegerModelValue4.equals((java.lang.Object) propertyModelValue54);
        int int57 = bigIntegerModelValue4.asInt();
        double double59 = bigIntegerModelValue4.asDouble((double) 0);
        boolean boolean61 = bigIntegerModelValue4.asBoolean(false);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"hi!\" => 0.0)" + "'", str11, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str28, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(modelNodeList40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + modelType44 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType44.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertNotNull(modelNodeList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        long long5 = intModelValue1.asLong(0L);
        java.io.DataOutput dataOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            intModelValue1.writeExternal(dataOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        byte[] byteArray5 = longModelValue1.asBytes();
        org.jboss.dmr.ModelType modelType6 = longModelValue1.getType();
        org.jboss.dmr.TypeModelValue typeModelValue7 = org.jboss.dmr.TypeModelValue.of(modelType6);
        boolean boolean9 = typeModelValue7.has("\"{\n    \\\"EXPRESSION_VALUE\\\" : 35\n}\"");
        java.lang.String str10 = typeModelValue7.asString();
        org.jboss.dmr.ModelType modelType11 = typeModelValue7.asType();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType6.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertNotNull(typeModelValue7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LONG" + "'", str10, "LONG");
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType11.equals(org.jboss.dmr.ModelType.LONG));
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        boolean boolean6 = bigIntegerModelValue4.asBoolean();
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        int int10 = longModelValue8.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue12 = new org.jboss.dmr.LongModelValue((-1L));
        long long14 = longModelValue12.asLong((long) (byte) -1);
        double double16 = longModelValue12.asDouble((double) 10.0f);
        boolean boolean17 = longModelValue8.equals(longModelValue12);
        byte[] byteArray18 = longModelValue12.asBytes();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) longModelValue12);
        byte[] byteArray20 = longModelValue12.asBytes();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int30 = modelNode29.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode34 = modelNode31.setExpression("hi!", "hi!");
        java.lang.String str35 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode31);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode31.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode37 = modelNode29.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = modelNode28.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList36);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int40 = modelNode39.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.setExpression("hi!", "hi!");
        java.lang.String str45 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode41);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList46 = modelNode41.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode47 = modelNode39.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList46);
        org.jboss.dmr.ModelNode modelNode48 = modelNode39.resolve();
        java.util.List<org.jboss.dmr.Property> propertyList49 = modelNode39.asPropertyList();
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode53 = modelNode50.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList54 = modelNode53.asList();
        org.jboss.dmr.ListModelValue listModelValue55 = new org.jboss.dmr.ListModelValue(modelNodeList54);
        java.lang.String str56 = listModelValue55.asString();
        boolean boolean58 = listModelValue55.equals((java.lang.Object) true);
        boolean boolean59 = listModelValue55.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList60 = listModelValue55.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList61 = modelNode39.asList(modelNodeList60);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = modelNode38.asList(modelNodeList61);
        boolean boolean63 = longModelValue12.equals((java.lang.Object) modelNodeList62);
        boolean boolean64 = bigIntegerModelValue4.equals((java.lang.Object) modelNodeList62);
        double double66 = bigIntegerModelValue4.asDouble(2.0d);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str35, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str45, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList46);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(propertyList49);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNodeList54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str56, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(modelNodeList60);
        org.junit.Assert.assertNotNull(modelNodeList61);
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.setEmptyList();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.PropertyModelValue propertyModelValue18 = new org.jboss.dmr.PropertyModelValue("0.0", modelNode17);
        java.lang.String str20 = modelNode17.asString("\"\\\"1L\\\"\"");
        org.jboss.dmr.ModelNode modelNode21 = modelNode14.addNoCopy(modelNode17);
        java.io.InputStream inputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode14.readExternal(inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "true" + "'", str20, "true");
        org.junit.Assert.assertNotNull(modelNode21);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("[big integer 1,big integer 1]");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = stringModelValue1.asDouble((double) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"[big integer 1,big integer 1]\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((int) ' ');
        long long7 = doubleModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = doubleModelValue1.asExpression();
        java.math.BigInteger bigInteger9 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asList();
        org.jboss.dmr.ListModelValue listModelValue15 = new org.jboss.dmr.ListModelValue(modelNodeList14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue15);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue15.resolve();
        int int19 = listModelValue15.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList20 = listModelValue15.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = listModelValue15.asList();
        long long22 = listModelValue15.asLong();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        org.jboss.dmr.ListModelValue listModelValue28 = new org.jboss.dmr.ListModelValue(modelNodeList27);
        java.lang.String str29 = listModelValue28.asString();
        long long30 = listModelValue28.asLong();
        int int32 = listModelValue28.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue33 = listModelValue28.protect();
        boolean boolean35 = listModelValue28.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue28.resolve();
        boolean boolean37 = listModelValue28.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = listModelValue28.asList();
        boolean boolean39 = listModelValue15.equals(listModelValue28);
        java.util.List<org.jboss.dmr.Property> propertyList40 = listModelValue15.asPropertyList();
        boolean boolean41 = doubleModelValue1.equals((java.lang.Object) propertyList40);
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str44 = longModelValue43.asString();
        byte[] byteArray45 = longModelValue43.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue46 = new org.jboss.dmr.BytesModelValue(byteArray45);
        java.lang.String str47 = bytesModelValue46.asString();
        int int48 = bytesModelValue46.asInt();
        int int49 = bytesModelValue46.asInt();
        int int51 = bytesModelValue46.asInt(112);
        boolean boolean52 = doubleModelValue1.equals((java.lang.Object) int51);
        java.io.InputStream inputStream53 = null;
        org.jboss.dmr.Base64.InputStream inputStream55 = new org.jboss.dmr.Base64.InputStream(inputStream53, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue57 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str58 = longModelValue57.asString();
        byte[] byteArray59 = longModelValue57.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue60 = new org.jboss.dmr.BytesModelValue(byteArray59);
        int int63 = inputStream55.read(byteArray59, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream65 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream55, (-1));
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream65);
        boolean boolean67 = doubleModelValue1.equals((java.lang.Object) inputStream66);
        org.jboss.dmr.Base64.InputStream inputStream69 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream66, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long71 = inputStream66.skip((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str29, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(modelValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str47, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode8 = modelNodeFactory0.readFrom(inputStream4, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode16 = modelNode0.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.lang.String str23 = modelNode19.toString();
        org.jboss.dmr.ModelNode modelNode24 = modelNode19.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode26 = modelNode19.set(100);
        org.jboss.dmr.ModelNode modelNode27 = modelNode18.add(modelNode19);
        int int29 = modelNode19.asInt(2);
        org.jboss.dmr.ModelType modelType31 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode32 = modelNode19.set("[(\"hi!\" => 0.0)]", modelType31);
        org.jboss.dmr.ModelNode modelNode33 = modelNode16.set("\"BYTES_VALUE\"", modelType31);
        org.jboss.dmr.ObjectModelValue objectModelValue34 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode35 = objectModelValue34.asObject();
        java.util.Set<java.lang.String> strSet36 = objectModelValue34.getKeys();
        org.jboss.dmr.ModelNode modelNode38 = objectModelValue34.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList39 = objectModelValue34.asList();
        org.jboss.dmr.ModelNode modelNode41 = objectModelValue34.getChild("\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\"");
        java.util.Set<java.lang.String> strSet42 = objectModelValue34.getKeys();
        int int43 = objectModelValue34.asInt();
        org.jboss.dmr.ModelValue modelValue45 = objectModelValue34.copy(false);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList46 = objectModelValue34.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode16.asList(modelNodeList46);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal48 = modelNode16.asBigDecimalOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(\"hi!\" => 0.0)" + "'", str23, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + modelType31 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType31.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNodeList39);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(modelValue45);
        org.junit.Assert.assertNotNull(modelNodeList46);
        org.junit.Assert.assertNotNull(modelNodeList47);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue7);
        org.jboss.dmr.ModelValue modelValue9 = listModelValue7.resolve();
        int int11 = listModelValue7.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList12 = listModelValue7.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList13 = listModelValue7.asPropertyList();
        org.jboss.dmr.ModelNode modelNode15 = listModelValue7.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        java.lang.String str21 = modelNode17.toString();
        org.jboss.dmr.ModelNode modelNode22 = modelNode17.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        org.jboss.dmr.Property property28 = new org.jboss.dmr.Property("", modelNode27);
        org.jboss.dmr.ModelNode modelNode29 = modelNode17.set(property28);
        org.jboss.dmr.PropertyModelValue propertyModelValue31 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode29, false);
        org.jboss.dmr.Property property32 = propertyModelValue31.asProperty();
        boolean boolean33 = listModelValue7.equals((java.lang.Object) propertyModelValue31);
        boolean boolean34 = longModelValue1.equals((java.lang.Object) listModelValue7);
        org.jboss.dmr.ListModelValue listModelValue35 = null;
        boolean boolean36 = listModelValue7.equals(listModelValue35);
        long long37 = listModelValue7.asLong();
        boolean boolean38 = listModelValue7.asBoolean();
        boolean boolean40 = listModelValue7.has((int) 'l');
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertNotNull(propertyList13);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(\"hi!\" => 0.0)" + "'", str21, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        long long2 = objectModelValue0.asLong((long) (-1));
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.getChild("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]");
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.add("[]", "TYPE_MODEL_VALUE");
        java.lang.String str8 = modelNode4.asString();
        org.jboss.dmr.StringModelValue stringModelValue10 = new org.jboss.dmr.StringModelValue("");
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int13 = modelNode12.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long16 = modelNode15.asLong();
        org.jboss.dmr.ValueExpression valueExpression17 = modelNode15.asExpression();
        java.math.BigDecimal bigDecimal18 = valueExpression17.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode19 = modelNode12.set(valueExpression17);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("\"1L\"", modelNode12, false);
        org.jboss.dmr.PropertyModelValue propertyModelValue22 = new org.jboss.dmr.PropertyModelValue(property21);
        boolean boolean23 = stringModelValue10.equals((java.lang.Object) property21);
        org.jboss.dmr.ModelNode modelNode24 = modelNode4.set(property21);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"[]\" => \"TYPE_MODEL_VALUE\")]" + "'", str8, "[(\"[]\" => \"TYPE_MODEL_VALUE\")]");
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(modelNode24);
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (int) (short) 10);
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode8 = org.jboss.dmr.ModelNode.fromJSONStream((java.io.InputStream) inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int4 = modelNode3.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode10 = modelNode3.set(valueExpression8);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("\"1L\"", modelNode3, false);
        org.jboss.dmr.PropertyModelValue propertyModelValue13 = new org.jboss.dmr.PropertyModelValue(property12);
        boolean boolean14 = stringModelValue1.equals((java.lang.Object) property12);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = stringModelValue1.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.ModelNode modelNode15 = modelNode14.setEmptyList();
        java.lang.String str17 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode14, 100);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("\"(\\\"1.0\\\" => [\\n    (\\\"hi!\\\" => expression \\\"hi!\\\"),\\n    \\\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\\\"\\n])\"", modelNode14, false);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BWwAAAAAeA==" + "'", str17, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BWwAAAAAeA==");
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        java.lang.Throwable throwable2 = null;
        org.jboss.dmr.stream.ModelException modelException3 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable2);
        org.jboss.dmr.stream.ModelException modelException4 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException3);
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException3);
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException("100", (java.lang.Throwable) modelException5);
        java.lang.Throwable[] throwableArray7 = modelException5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        java.lang.String str2 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) "H4sIAAAAAAAAAHOtKChKLS7OzM9TUCopKk1VAgAu48NaEQAAAA==", 1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rO0ABXQANEg0c0lBQUFBQUFBQUFIT3RLQ2hLTFM3T3pNOVRVQ29wS2sxVkFnQXU0OE5hRVFBQUFB\nPT0=" + "'", str2, "rO0ABXQANEg0c0lBQUFBQUFBQUFIT3RLQ2hLTFM3T3pNOVRVQ29wS2sxVkFnQXU0OE5hRVFBQUFB\nPT0=");
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        int int13 = listModelValue5.asInt();
        java.lang.String str14 = listModelValue5.asString();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        boolean boolean17 = listModelValue5.equals((java.lang.Object) modelType15);
        boolean boolean19 = listModelValue5.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode21 = listModelValue5.requireChild((int) (short) 0);
        java.lang.String str23 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) (short) 0, (int) 'p');
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType15.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "rO0ABXNyAA9qYXZhLmxhbmcuU2hvcnRoTTcTNGDaUgIAAVMABXZhbHVleHIAEGphdmEubGFuZy5O\ndW1iZXKGrJUdC5TgiwIAAHhwAAA=" + "'", str23, "rO0ABXNyAA9qYXZhLmxhbmcuU2hvcnRoTTcTNGDaUgIAAVMABXZhbHVleHIAEGphdmEubGFuZy5O\ndW1iZXKGrJUdC5TgiwIAAHhwAAA=");
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"");
        org.jboss.dmr.ModelValue modelValue2 = expressionValue1.resolve();
        java.io.PrintWriter printWriter3 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.formatAsJSON(printWriter3, (int) 'a', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelValue2);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        boolean boolean11 = modelNode8.equals((java.lang.Object) 100L);
        boolean boolean12 = modelNode0.equals(modelNode8);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int22 = modelNode21.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.setExpression("hi!", "hi!");
        java.lang.String str27 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode23.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode29 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode8.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode33 = modelNode8.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelType modelType34 = modelNode33.getType();
        byte[] byteArray37 = org.jboss.dmr.Base64.decode("true");
        org.jboss.dmr.ModelNode modelNode38 = modelNode33.set("\"(\\\"hi!\\\" => 0.0)\"", byteArray37);
        java.lang.String str40 = modelNode33.asString("rO0ABXNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRM\nZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFn\nbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7/\n///+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAABAXg=");
        org.jboss.dmr.DoubleModelValue doubleModelValue42 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long43 = doubleModelValue42.asLong();
        long long45 = doubleModelValue42.asLong((long) 32);
        org.jboss.dmr.ValueExpression valueExpression46 = doubleModelValue42.asExpression();
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long49 = modelNode48.asLong();
        org.jboss.dmr.ValueExpression valueExpression50 = modelNode48.asExpression();
        java.math.BigDecimal bigDecimal51 = valueExpression50.resolveBigDecimal();
        java.lang.String str52 = valueExpression50.getExpressionString();
        java.math.BigDecimal bigDecimal53 = valueExpression50.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue54 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal53);
        boolean boolean55 = bigDecimalModelValue54.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression56 = bigDecimalModelValue54.asExpression();
        org.jboss.dmr.IntModelValue intModelValue58 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long60 = intModelValue58.asLong((long) 'b');
        java.lang.String str61 = intModelValue58.asString();
        long long62 = intModelValue58.asLong();
        long long63 = intModelValue58.asLong();
        org.jboss.dmr.ValueExpression valueExpression64 = intModelValue58.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver65 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal66 = valueExpression64.resolveBigDecimal(valueExpressionResolver65);
        boolean boolean67 = valueExpression56.equals(valueExpression64);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver68 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue70 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long71 = booleanModelValue70.asLong();
        org.jboss.dmr.ValueExpression valueExpression72 = booleanModelValue70.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue73 = new org.jboss.dmr.ExpressionValue(valueExpression72);
        java.lang.String str74 = valueExpression72.getExpressionString();
        java.lang.String str75 = valueExpressionResolver68.resolve(valueExpression72);
        java.lang.String str76 = valueExpression64.resolveString(valueExpressionResolver68);
        java.lang.String str78 = valueExpressionResolver68.resolvePart("\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        java.lang.String str79 = valueExpression46.resolveString(valueExpressionResolver68);
        org.jboss.dmr.ModelNode modelNode80 = modelNode33.set(valueExpression46);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode83 = modelNode33.add("rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51\nbWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAIw==", 3L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str27, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + modelType34 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType34.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-74, -69, -98]");
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => bytes {\n    0xb6, 0xbb, 0x9e\n})" + "'", str40, "(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => bytes {\n    0xb6, 0xbb, 0x9e\n})");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertNotNull(valueExpression46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(valueExpression50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1.0" + "'", str52, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(valueExpression56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 32L + "'", long60 == 32L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "32" + "'", str61, "32");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 32L + "'", long62 == 32L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 32L + "'", long63 == 32L);
        org.junit.Assert.assertNotNull(valueExpression64);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver68);
        org.junit.Assert.assertNotNull(booleanModelValue70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(valueExpression72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "true" + "'", str74, "true");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "true" + "'", str75, "true");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "32" + "'", str76, "32");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "10.0" + "'", str79, "10.0");
        org.junit.Assert.assertNotNull(modelNode80);
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        byte[] byteArray5 = doubleModelValue1.asBytes();
        java.io.DataOutput dataOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue1.writeExternal(dataOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        java.lang.Long long46 = modelNode45.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray47 = new org.jboss.dmr.ModelNode[] { modelNode41, modelNode45 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList48 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48, modelNodeArray47);
        org.jboss.dmr.ModelNode modelNode50 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ListModelValue listModelValue51 = new org.jboss.dmr.ListModelValue((java.util.List<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNull(long46);
        org.junit.Assert.assertNotNull(modelNodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(modelNode50);
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long4 = modelNode3.asLong();
        org.jboss.dmr.ValueExpression valueExpression5 = modelNode3.asExpression();
        java.math.BigDecimal bigDecimal6 = valueExpression5.resolveBigDecimal();
        java.lang.String str7 = valueExpression5.getExpressionString();
        java.math.BigDecimal bigDecimal8 = valueExpression5.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue9 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal8);
        boolean boolean10 = bigDecimalModelValue9.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue9.asExpression();
        org.jboss.dmr.IntModelValue intModelValue13 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long15 = intModelValue13.asLong((long) 'b');
        java.lang.String str16 = intModelValue13.asString();
        long long17 = intModelValue13.asLong();
        long long18 = intModelValue13.asLong();
        org.jboss.dmr.ValueExpression valueExpression19 = intModelValue13.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver20 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal21 = valueExpression19.resolveBigDecimal(valueExpressionResolver20);
        boolean boolean22 = valueExpression11.equals(valueExpression19);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver23 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue25 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long26 = booleanModelValue25.asLong();
        org.jboss.dmr.ValueExpression valueExpression27 = booleanModelValue25.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue28 = new org.jboss.dmr.ExpressionValue(valueExpression27);
        java.lang.String str29 = valueExpression27.getExpressionString();
        java.lang.String str30 = valueExpressionResolver23.resolve(valueExpression27);
        java.lang.String str31 = valueExpression19.resolveString(valueExpressionResolver23);
        int int32 = valueExpression19.resolveInt();
        org.jboss.dmr.ModelNode modelNode33 = modelNode1.set(valueExpression19);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode36 = modelNode33.add("(\"rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==\" => (\"hi!\" => 0.0))", "\"\\\"1L\\\"\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1.0" + "'", str7, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "32" + "'", str16, "32");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver23);
        org.junit.Assert.assertNotNull(booleanModelValue25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "true" + "'", str29, "true");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "true" + "'", str30, "true");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertNotNull(modelNode33);
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(97L);
        int int3 = longModelValue1.asInt((int) '#');
        double double4 = longModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 97.0d + "'", double4 == 97.0d);
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            inputStream2.reset();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        org.jboss.dmr.ModelType modelType5 = org.jboss.dmr.ModelType.STRING;
        boolean boolean6 = booleanModelValue1.equals((java.lang.Object) modelType5);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory8 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream9 = null;
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream(inputStream9, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue13 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str14 = longModelValue13.asString();
        byte[] byteArray15 = longModelValue13.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue16 = new org.jboss.dmr.BytesModelValue(byteArray15);
        int int19 = inputStream11.read(byteArray15, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream11, (-1));
        org.jboss.dmr.stream.ModelReader modelReader22 = modelStreamFactory8.newModelReader((java.io.InputStream) inputStream21);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25);
        byte[] byteArray28 = org.jboss.dmr.Base64.decode("true");
        boolean boolean30 = org.jboss.dmr.Base64.encodeToFile(byteArray28, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int33 = inputStream25.read(byteArray28, (int) 'l', 0);
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory8.newModelReader((java.io.InputStream) inputStream25);
        org.jboss.dmr.LongModelValue longModelValue36 = new org.jboss.dmr.LongModelValue((-1L));
        long long38 = longModelValue36.asLong((long) (byte) -1);
        boolean boolean40 = longModelValue36.asBoolean(false);
        java.io.OutputStream outputStream41 = null;
        org.jboss.dmr.Base64.OutputStream outputStream42 = new org.jboss.dmr.Base64.OutputStream(outputStream41);
        outputStream42.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream44 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream42);
        org.jboss.dmr.Base64.OutputStream outputStream46 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream44, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream47 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream46);
        outputStream47.resumeEncoding();
        boolean boolean49 = longModelValue36.equals((java.lang.Object) outputStream47);
        org.jboss.dmr.Base64.OutputStream outputStream51 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream47, (int) (short) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelStreamFactory8.newModelWriter((java.io.OutputStream) outputStream47);
        org.jboss.dmr.stream.ModelWriter modelWriter54 = modelWriter52.writeDouble((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            booleanModelValue1.write(modelWriter52);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType5.equals(org.jboss.dmr.ModelType.STRING));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(modelReader22);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(modelWriter54);
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(1L);
        org.jboss.dmr.LongModelValue longModelValue3 = new org.jboss.dmr.LongModelValue(1L);
        int int5 = longModelValue3.asInt((int) (byte) 0);
        java.math.BigInteger bigInteger6 = longModelValue3.asBigInteger();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set(bigInteger6);
        int int9 = modelNode1.asInt((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = modelNode1.asBytesOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        byte[] byteArray21 = org.jboss.dmr.Base64.decode("true");
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int26 = inputStream18.read(byteArray21, (int) 'l', 0);
        org.jboss.dmr.stream.ModelReader modelReader27 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory29 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream30 = null;
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream(inputStream30, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream32);
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory29.newModelReader((java.io.InputStream) inputStream33);
        java.io.OutputStream outputStream35 = null;
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream(outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream36);
        outputStream36.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelStreamFactory29.newModelWriter((java.io.OutputStream) outputStream36);
        outputStream36.write(2);
        org.jboss.dmr.stream.ModelWriter modelWriter43 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream36);
        java.io.Reader reader44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelReader modelReader45 = modelStreamFactory1.newModelReader(reader44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(modelReader27);
        org.junit.Assert.assertNotNull(modelStreamFactory29);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter43);
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal6 = longModelValue5.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = modelNode2.set("[(\"hi!\" => 0.0)]", bigDecimal6);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = modelNode7.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(modelNode7);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        byte[] byteArray7 = bytesModelValue4.asBytes();
        long long8 = bytesModelValue4.asLong();
        double double10 = bytesModelValue4.asDouble((double) 'l');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.9E-324d + "'", double10 == 4.9E-324d);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        int int4 = objectModelValue0.asInt((int) (short) 100);
        long long5 = objectModelValue0.asLong();
        long long7 = objectModelValue0.asLong(1L);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        int int10 = intModelValue5.asInt();
        int int12 = intModelValue5.asInt(32);
        org.jboss.dmr.DoubleModelValue doubleModelValue14 = new org.jboss.dmr.DoubleModelValue((double) (byte) -1);
        org.jboss.dmr.DoubleModelValue doubleModelValue16 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int18 = doubleModelValue16.asInt((int) 'l');
        java.math.BigDecimal bigDecimal19 = doubleModelValue16.asBigDecimal();
        boolean boolean20 = doubleModelValue14.equals(doubleModelValue16);
        boolean boolean21 = intModelValue5.equals((java.lang.Object) doubleModelValue14);
        org.jboss.dmr.IntModelValue intModelValue23 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str24 = intModelValue23.asString();
        double double26 = intModelValue23.asDouble((double) 2);
        java.math.BigDecimal bigDecimal27 = intModelValue23.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue28 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal27);
        long long29 = bigDecimalModelValue28.asLong();
        long long30 = bigDecimalModelValue28.asLong();
        int int32 = bigDecimalModelValue28.asInt((-1));
        boolean boolean33 = intModelValue5.equals((java.lang.Object) bigDecimalModelValue28);
        java.math.BigDecimal bigDecimal34 = bigDecimalModelValue28.asBigDecimal();
        int int35 = bigDecimalModelValue28.asInt();
        double double36 = bigDecimalModelValue28.asDouble();
        int int37 = bigDecimalModelValue28.asInt();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "32" + "'", str24, "32");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 32.0d + "'", double36 == 32.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode4 = modelNode3.resolve();
        java.lang.String str5 = modelNode4.toString();
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.set(32.0d);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode4, true);
        org.jboss.dmr.ModelNode modelNode11 = modelNode4.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode24.asList();
        org.jboss.dmr.ListModelValue listModelValue26 = new org.jboss.dmr.ListModelValue(modelNodeList25);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue26);
        org.jboss.dmr.ModelValue modelValue28 = listModelValue26.resolve();
        int int30 = listModelValue26.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList31 = listModelValue26.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList32 = modelNode20.asPropertyList(propertyList31);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        org.jboss.dmr.Property property38 = new org.jboss.dmr.Property("", modelNode37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.get(strArray39);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode44.asList();
        org.jboss.dmr.ListModelValue listModelValue46 = new org.jboss.dmr.ListModelValue(modelNodeList45);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue46);
        org.jboss.dmr.ModelValue modelValue48 = listModelValue46.resolve();
        int int50 = listModelValue46.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList51 = listModelValue46.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList52 = modelNode40.asPropertyList(propertyList51);
        modelNode20.setNoCopy(modelNode40);
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode57 = modelNode54.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode58 = new org.jboss.dmr.ModelNode();
        java.lang.Long long59 = modelNode58.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray60 = new org.jboss.dmr.ModelNode[] { modelNode54, modelNode58 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList61 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList61, modelNodeArray60);
        org.jboss.dmr.ModelNode modelNode63 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList61);
        org.jboss.dmr.LongModelValue longModelValue65 = new org.jboss.dmr.LongModelValue((-1L));
        int int66 = longModelValue65.asInt();
        boolean boolean67 = modelNode20.equals((java.lang.Object) int66);
        org.jboss.dmr.ModelNode modelNode68 = modelNode11.set("hi!", modelNode20);
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode72 = modelNode70.set((int) '#');
        java.lang.Boolean boolean73 = modelNode70.asBooleanOrNull();
        java.lang.String str75 = modelNode70.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelType modelType77 = org.jboss.dmr.ModelType.BIG_DECIMAL;
        org.jboss.dmr.ModelNode modelNode78 = new org.jboss.dmr.ModelNode(modelType77);
        org.jboss.dmr.ModelNode modelNode79 = modelNode70.set("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", modelType77);
        org.jboss.dmr.ModelNode modelNode80 = modelNode20.set(modelType77);
        org.jboss.dmr.ModelNode modelNode81 = new org.jboss.dmr.ModelNode(modelType77);
        org.jboss.dmr.PropertyModelValue propertyModelValue83 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode81, true);
        org.jboss.dmr.ModelValue modelValue84 = propertyModelValue83.protect();
        java.lang.String str85 = propertyModelValue83.asString();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelValue28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(propertyList31);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertNotNull(modelValue48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(propertyList51);
        org.junit.Assert.assertNotNull(propertyList52);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNull(long59);
        org.junit.Assert.assertNotNull(modelNodeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertEquals("'" + boolean73 + "' != '" + true + "'", boolean73, true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "35" + "'", str75, "35");
        org.junit.Assert.assertTrue("'" + modelType77 + "' != '" + org.jboss.dmr.ModelType.BIG_DECIMAL + "'", modelType77.equals(org.jboss.dmr.ModelType.BIG_DECIMAL));
        org.junit.Assert.assertNotNull(modelNode79);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertNotNull(modelValue84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(\"Expression \\\"true\\\"\" => BIG_DECIMAL)" + "'", str85, "(\"Expression \\\"true\\\"\" => BIG_DECIMAL)");
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        long long3 = longModelValue1.asLong((long) (byte) -1);
        int int5 = longModelValue1.asInt(0);
        byte[] byteArray6 = longModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal9 = longModelValue8.asBigDecimal();
        int int10 = longModelValue8.asInt();
        org.jboss.dmr.ValueExpression valueExpression11 = longModelValue8.asExpression();
        double double12 = longModelValue8.asDouble();
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        long long16 = longModelValue14.asLong((long) (short) 0);
        java.lang.String str17 = longModelValue14.asString();
        byte[] byteArray18 = longModelValue14.asBytes();
        org.jboss.dmr.ModelType modelType19 = longModelValue14.getType();
        long long21 = longModelValue14.asLong(1L);
        boolean boolean22 = longModelValue8.equals(longModelValue14);
        org.jboss.dmr.ValueExpression valueExpression23 = longModelValue8.asExpression();
        int int24 = longModelValue8.asInt();
        boolean boolean25 = longModelValue1.equals(longModelValue8);
        org.jboss.dmr.LongModelValue longModelValue26 = null;
        boolean boolean27 = longModelValue8.equals(longModelValue26);
        long long28 = longModelValue8.asLong();
        java.io.DataOutput dataOutput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            longModelValue8.writeExternal(dataOutput29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType19 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType19.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBoolean();
        boolean boolean19 = modelReader15.isListStart();
        boolean boolean20 = modelReader15.isPropertyStart();
        boolean boolean21 = modelReader15.isType();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = modelReader15.getBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't bytes");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.lang.String str5 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode1);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode1.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set((double) 0);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.PROPERTY;
        char char11 = modelType10.getTypeChar();
        org.jboss.dmr.ModelNode modelNode12 = modelNode1.set("[(\"hi!\" => 0.0)]", modelType10);
        org.jboss.dmr.Property property13 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode12);
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.STRING;
        org.jboss.dmr.ModelNode modelNode16 = modelNode12.set("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", modelType15);
        org.jboss.dmr.ModelNode modelNode17 = modelNode16.setEmptyObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode19 = modelNode17.insert(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'p' + "'", char11 == 'p');
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType15.equals(org.jboss.dmr.ModelType.STRING));
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("AA==");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = stringModelValue1.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        long long5 = objectModelValue0.asLong();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.removeChild("52");
        long long8 = objectModelValue0.asLong();
        boolean boolean10 = objectModelValue0.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) objectModelValue0);
        org.jboss.dmr.ModelValue modelValue13 = objectModelValue0.copy(true);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode(modelValue13);
        java.io.OutputStream outputStream15 = null;
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream(outputStream15);
        outputStream16.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream19.flushBase64();
        outputStream19.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream22 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream19);
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream22, 0);
        // The following exception was thrown during execution in test generation
        try {
            modelNode14.writeExternal((java.io.OutputStream) outputStream24);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Invalid character in Base64 data.");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(modelNode7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(modelValue13);
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isListStart();
        boolean boolean23 = modelReader15.isUndefined();
        boolean boolean24 = modelReader15.isBigInteger();
        boolean boolean25 = modelReader15.isObjectStart();
        boolean boolean26 = modelReader15.isPropertyEnd();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.set((int) '#');
        org.jboss.dmr.ModelNode modelNode15 = modelNode1.setNoCopy("1.0", modelNode12);
        long long17 = modelNode12.asLong((long) 112);
        org.jboss.dmr.ModelNode modelNode20 = modelNode12.set("35", "\"1L\"");
        org.jboss.dmr.IntModelValue intModelValue22 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long24 = intModelValue22.asLong((long) '#');
        double double25 = intModelValue22.asDouble();
        java.math.BigInteger bigInteger26 = intModelValue22.asBigInteger();
        org.jboss.dmr.ModelNode modelNode27 = modelNode20.set(bigInteger26);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(modelNode27);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((int) ' ');
        long long7 = doubleModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = doubleModelValue1.asExpression();
        java.math.BigInteger bigInteger9 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asList();
        org.jboss.dmr.ListModelValue listModelValue15 = new org.jboss.dmr.ListModelValue(modelNodeList14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue15);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue15.resolve();
        int int19 = listModelValue15.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList20 = listModelValue15.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = listModelValue15.asList();
        long long22 = listModelValue15.asLong();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        org.jboss.dmr.ListModelValue listModelValue28 = new org.jboss.dmr.ListModelValue(modelNodeList27);
        java.lang.String str29 = listModelValue28.asString();
        long long30 = listModelValue28.asLong();
        int int32 = listModelValue28.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue33 = listModelValue28.protect();
        boolean boolean35 = listModelValue28.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue28.resolve();
        boolean boolean37 = listModelValue28.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = listModelValue28.asList();
        boolean boolean39 = listModelValue15.equals(listModelValue28);
        java.util.List<org.jboss.dmr.Property> propertyList40 = listModelValue15.asPropertyList();
        boolean boolean41 = doubleModelValue1.equals((java.lang.Object) propertyList40);
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str44 = longModelValue43.asString();
        byte[] byteArray45 = longModelValue43.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue46 = new org.jboss.dmr.BytesModelValue(byteArray45);
        java.lang.String str47 = bytesModelValue46.asString();
        int int48 = bytesModelValue46.asInt();
        int int49 = bytesModelValue46.asInt();
        int int51 = bytesModelValue46.asInt(112);
        boolean boolean52 = doubleModelValue1.equals((java.lang.Object) int51);
        double double53 = doubleModelValue1.asDouble();
        java.lang.String str54 = doubleModelValue1.asString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str29, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(modelValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str47, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "10.0" + "'", str54, "10.0");
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double2 = longModelValue1.asDouble();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.Property> propertyList3 = longModelValue1.asPropertyList();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        boolean boolean10 = listModelValue5.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray11 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean12 = listModelValue5.equals((java.lang.Object) modelNodeArray11);
        long long13 = listModelValue5.asLong();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode15 = listModelValue5.requireChild((int) 'D');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [68]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(modelNodeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.EXPRESSION;
        char char1 = modelType0.getTypeChar();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.EXPRESSION + "'", modelType0.equals(org.jboss.dmr.ModelType.EXPRESSION));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'e' + "'", char1 == 'e');
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream15);
        outputStream15.resumeEncoding();
        outputStream15.resumeEncoding();
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream15);
        org.jboss.dmr.StringModelValue stringModelValue21 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray22 = stringModelValue21.asBytes();
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter19.writeBytes(byteArray22);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode(byteArray22);
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(modelWriter23);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        org.jboss.dmr.ModelNode modelNode42 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode45 = modelNode42.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode();
        java.lang.Long long47 = modelNode46.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray48 = new org.jboss.dmr.ModelNode[] { modelNode42, modelNode46 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList49 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList49, modelNodeArray48);
        org.jboss.dmr.ModelNode modelNode51 = modelNode8.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList49);
        org.jboss.dmr.ModelNode modelNode53 = modelNode8.set((double) 100.0f);
        org.jboss.dmr.Property property54 = new org.jboss.dmr.Property("(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))", modelNode8);
        org.jboss.dmr.ModelNode modelNode55 = property54.getValue();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNull(long47);
        org.junit.Assert.assertNotNull(modelNodeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode55);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = objectModelValue7.asList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        java.util.Set<java.lang.String> strSet17 = objectModelValue15.getKeys();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue15.removeChild("hi!");
        int int20 = objectModelValue15.asInt();
        org.jboss.dmr.ObjectModelValue objectModelValue21 = null;
        boolean boolean22 = objectModelValue15.equals(objectModelValue21);
        boolean boolean23 = objectModelValue7.equals(objectModelValue15);
        int int24 = objectModelValue7.asInt();
        long long25 = objectModelValue7.asLong();
        boolean boolean27 = objectModelValue7.asBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode29 = objectModelValue7.requireChild("");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(modelNode19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression2 = expressionValue1.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str5 = expressionValue4.toString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        boolean boolean12 = expressionValue4.equals((java.lang.Object) property11);
        boolean boolean13 = expressionValue1.equals(expressionValue4);
        org.jboss.dmr.ValueExpression valueExpression14 = expressionValue4.asExpression();
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue4.formatAsJSON(printWriter15, (int) (byte) 10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "expression \"hi!\"" + "'", str5, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(valueExpression14);
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) 100);
        boolean boolean2 = doubleModelValue1.asBoolean();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        int int11 = modelNode1.asInt(2);
        org.jboss.dmr.ModelType modelType13 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.set("[(\"hi!\" => 0.0)]", modelType13);
        org.jboss.dmr.TypeModelValue typeModelValue15 = org.jboss.dmr.TypeModelValue.of(modelType13);
        org.jboss.dmr.ModelType modelType16 = typeModelValue15.asType();
        java.lang.String str18 = typeModelValue15.toJSONString(true);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + modelType13 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType13.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(typeModelValue15);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType16.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{ \"TYPE_MODEL_VALUE\" : \"BYTES\" }" + "'", str18, "{ \"TYPE_MODEL_VALUE\" : \"BYTES\" }");
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.lang.String str5 = objectModelValue0.asString();
        boolean boolean7 = objectModelValue0.has("H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        double double12 = longModelValue9.asDouble((double) 32L);
        int int14 = longModelValue9.asInt((int) (short) 10);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory16 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream17 = null;
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream(inputStream17, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream19);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory16.newModelReader((java.io.InputStream) inputStream20);
        java.io.OutputStream outputStream22 = null;
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream(outputStream22);
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream23);
        outputStream23.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelStreamFactory16.newModelWriter((java.io.OutputStream) outputStream23);
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter27.writeListStart();
        longModelValue9.write(modelWriter27);
        objectModelValue0.write(modelWriter27);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode32 = objectModelValue0.requireChild("{}");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '{}' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory16);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter28);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        int int13 = objectModelValue7.asInt();
        org.jboss.dmr.ObjectModelValue objectModelValue14 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode15 = objectModelValue14.asObject();
        org.jboss.dmr.ModelValue modelValue16 = objectModelValue14.copy();
        int int18 = objectModelValue14.asInt((int) (short) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = objectModelValue14.asPropertyList();
        java.lang.String str20 = objectModelValue14.asString();
        boolean boolean21 = objectModelValue7.equals(objectModelValue14);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode25 = modelNode23.set((int) '#');
        java.lang.Boolean boolean26 = modelNode23.asBooleanOrNull();
        java.lang.String str28 = modelNode23.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelNode modelNode31 = modelNode23.set("", (int) '4');
        boolean boolean32 = objectModelValue7.equals((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray33 = objectModelValue7.asBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertEquals("'" + boolean26 + "' != '" + true + "'", boolean26, true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "35" + "'", str28, "35");
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = objectModelValue0.asList();
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.resolve();
        boolean boolean8 = objectModelValue0.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode10 = objectModelValue0.getChild("\"35\"");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode11 = objectModelValue0.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(modelNode10);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        int int15 = bigIntegerModelValue11.asInt();
        org.jboss.dmr.ValueExpression valueExpression16 = bigIntegerModelValue11.asExpression();
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double18 = booleanModelValue17.asDouble();
        org.jboss.dmr.ModelValue modelValue19 = booleanModelValue17.copy();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue21 = new org.jboss.dmr.BigIntegerModelValue(bigInteger20);
        java.lang.String str22 = bigIntegerModelValue21.asString();
        java.math.BigInteger bigInteger23 = bigIntegerModelValue21.asBigInteger();
        int int24 = bigIntegerModelValue21.asInt();
        long long26 = bigIntegerModelValue21.asLong((long) 3);
        boolean boolean27 = bigIntegerModelValue11.equals(bigIntegerModelValue21);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        int int13 = objectModelValue7.asInt();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        java.util.Set<java.lang.String> strSet17 = objectModelValue15.getKeys();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue15.removeChild("1");
        boolean boolean20 = objectModelValue15.asBoolean();
        boolean boolean21 = objectModelValue7.equals(objectModelValue15);
        boolean boolean22 = objectModelValue7.asBoolean();
        int int24 = objectModelValue7.asInt((int) (short) 0);
        int int25 = objectModelValue7.asInt();
        java.lang.String str26 = objectModelValue7.asString();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(modelNode19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        boolean boolean11 = bigDecimalModelValue7.asBoolean();
        java.lang.String str12 = bigDecimalModelValue7.asString();
        long long14 = bigDecimalModelValue7.asLong((long) 52);
        int int15 = bigDecimalModelValue7.asInt();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0" + "'", str12, "1.0");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        int int10 = intModelValue5.asInt();
        java.math.BigInteger bigInteger11 = intModelValue5.asBigInteger();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(bigInteger11);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isListStart();
        boolean boolean23 = modelReader15.isUndefined();
        boolean boolean24 = modelReader15.isString();
        boolean boolean25 = modelReader15.isExpression();
        boolean boolean26 = modelReader15.hasNext();
        boolean boolean27 = modelReader15.isString();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        boolean boolean17 = listModelValue5.asBoolean();
        int int19 = listModelValue5.asInt(8);
        long long20 = listModelValue5.asLong();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property21 = listModelValue5.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.set((double) (-1.0f));
        byte[] byteArray12 = modelNode11.asBytesOrNull();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set((long) 'J');
        org.jboss.dmr.ModelNode modelNode17 = modelNode11.set("\"PROPERTY_VALUE\"", 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode19 = modelNode17.remove((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-65, -16, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode17);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        boolean boolean2 = modelNode0.hasDefined("(\"\" => (\"hi!\" => 0.0))");
        java.io.OutputStream outputStream3 = null;
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream(outputStream3);
        outputStream4.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream6 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream4);
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream6, (int) (byte) -1);
        outputStream6.suspendEncoding();
        outputStream6.write((int) (byte) 0);
        org.jboss.dmr.Base64.OutputStream outputStream13 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream6, (int) 'b');
        modelNode0.writeExternal((java.io.OutputStream) outputStream13);
        // The following exception was thrown during execution in test generation
        try {
            outputStream13.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger10 = booleanModelValue9.asBigInteger();
        byte[] byteArray11 = booleanModelValue9.asBytes();
        org.jboss.dmr.ModelNode modelNode12 = modelNode6.set("expression \"hi!\"", byteArray11);
        outputStream3.write(byteArray11);
        org.jboss.dmr.BytesModelValue bytesModelValue14 = new org.jboss.dmr.BytesModelValue(byteArray11);
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue14.format(printWriter15, (int) (byte) 1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertNotNull(modelNode12);
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        boolean boolean12 = listModelValue5.asBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = listModelValue5.requireChild(52);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [52]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        int int8 = longModelValue6.asInt((int) (byte) 0);
        java.math.BigInteger bigInteger9 = longModelValue6.asBigInteger();
        double double11 = longModelValue6.asDouble((double) 1L);
        byte[] byteArray12 = longModelValue6.asBytes();
        int int15 = inputStream4.read(byteArray12, (int) '4', (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        java.math.BigInteger bigInteger6 = intModelValue1.asBigInteger();
        byte[] byteArray7 = intModelValue1.asBytes();
        java.lang.String str8 = org.jboss.dmr.Base64.encodeBytes(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = org.jboss.dmr.Base64.encodeBytes(byteArray7, (int) (short) 0, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 32]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AAAAIA==" + "'", str8, "AAAAIA==");
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        org.jboss.dmr.ValueExpression valueExpression4 = intModelValue1.asExpression();
        java.lang.String str5 = valueExpression4.resolveString();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "32" + "'", str5, "32");
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        java.io.InputStream inputStream22 = null;
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24);
        org.jboss.dmr.stream.ModelReader modelReader26 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream24);
        org.jboss.dmr.Base64.InputStream inputStream27 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = inputStream27.skip((long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelReader26);
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        byte[] byteArray5 = org.jboss.dmr.Base64.decode("true");
        boolean boolean7 = org.jboss.dmr.Base64.encodeToFile(byteArray5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int10 = inputStream2.read(byteArray5, (int) 'l', 0);
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            inputStream2.mark(97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(0L);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isPropertyStart();
        boolean boolean23 = modelReader15.isObjectEnd();
        boolean boolean24 = modelReader15.isListStart();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((-1.0d));
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode6 = modelNode5.resolve();
        java.lang.String str7 = modelNode6.toString();
        org.jboss.dmr.ModelNode modelNode8 = modelNode2.add("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))", modelNode6);
        org.jboss.dmr.BooleanModelValue booleanModelValue10 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double11 = booleanModelValue10.asDouble();
        org.jboss.dmr.ModelValue modelValue12 = booleanModelValue10.copy();
        java.math.BigInteger bigInteger13 = booleanModelValue10.asBigInteger();
        byte[] byteArray14 = booleanModelValue10.asBytes();
        java.math.BigDecimal bigDecimal15 = booleanModelValue10.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode16 = modelNode2.set("(\"BYTES_VALUE\" => expression \"1.0\")", bigDecimal15);
        org.jboss.dmr.ModelNode modelNode17 = modelNode16.setEmptyList();
        org.jboss.dmr.ModelNode modelNode18 = modelNode16.asObject();
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(booleanModelValue10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger10 = booleanModelValue9.asBigInteger();
        byte[] byteArray11 = booleanModelValue9.asBytes();
        org.jboss.dmr.ModelNode modelNode12 = modelNode6.set("expression \"hi!\"", byteArray11);
        outputStream3.write(byteArray11);
        org.jboss.dmr.BytesModelValue bytesModelValue14 = new org.jboss.dmr.BytesModelValue(byteArray11);
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        java.lang.String str20 = bytesModelValue19.asString();
        int int21 = bytesModelValue19.asInt();
        byte[] byteArray22 = bytesModelValue19.asBytes();
        boolean boolean23 = bytesModelValue14.equals((java.lang.Object) byteArray22);
        java.lang.String str24 = bytesModelValue14.asString();
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str20, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "bytes { 0x01 }" + "'", str24, "bytes { 0x01 }");
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue((-1L));
        long long6 = longModelValue4.asLong((long) (byte) -1);
        int int8 = longModelValue4.asInt(0);
        boolean boolean9 = longModelValue1.equals(longModelValue4);
        int int11 = longModelValue1.asInt(0);
        org.jboss.dmr.LongModelValue longModelValue13 = new org.jboss.dmr.LongModelValue(1L);
        int int15 = longModelValue13.asInt((int) (byte) 0);
        java.math.BigInteger bigInteger16 = longModelValue13.asBigInteger();
        java.lang.String str18 = longModelValue13.toJSONString(false);
        boolean boolean19 = longModelValue13.asBoolean();
        boolean boolean20 = longModelValue1.equals(longModelValue13);
        org.jboss.dmr.ModelValue modelValue21 = longModelValue13.copy();
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(modelValue21);
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.math.BigInteger bigInteger16 = bytesModelValue12.asBigInteger();
        long long18 = bytesModelValue12.asLong((long) 100);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList24 = modelNode23.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode23, false);
        boolean boolean28 = propertyModelValue26.has("10.0");
        org.jboss.dmr.ModelNode modelNode30 = propertyModelValue26.getChild(0);
        org.jboss.dmr.ModelValue modelValue31 = propertyModelValue26.resolve();
        org.jboss.dmr.ModelNode modelNode33 = propertyModelValue26.getChild((int) (short) 0);
        boolean boolean34 = bytesModelValue12.equals((java.lang.Object) modelNode33);
        double double36 = bytesModelValue12.asDouble((double) (short) 1);
        int int37 = bytesModelValue12.asInt();
        byte[] byteArray38 = bytesModelValue12.asBytes();
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode42 = modelNode39.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList43 = modelNode42.asList();
        java.lang.String str45 = modelNode42.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue48 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long49 = booleanModelValue48.asLong();
        org.jboss.dmr.ValueExpression valueExpression50 = booleanModelValue48.asExpression();
        java.lang.String str51 = valueExpression50.toString();
        org.jboss.dmr.ExpressionValue expressionValue53 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression54 = expressionValue53.asExpression();
        boolean boolean55 = valueExpression50.equals(valueExpression54);
        java.lang.String str56 = valueExpression54.resolveString();
        org.jboss.dmr.ModelNode modelNode57 = modelNode42.set("Expression \"1\"", valueExpression54);
        org.jboss.dmr.ModelNode modelNode58 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode61 = modelNode58.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = modelNode61.asList();
        org.jboss.dmr.ModelNode modelNode65 = modelNode61.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType66 = modelNode61.getType();
        org.jboss.dmr.ModelNode modelNode67 = modelNode57.set(modelType66);
        java.lang.String str68 = modelNode67.asString();
        java.lang.Boolean boolean69 = modelNode67.asBooleanOrNull();
        boolean boolean70 = bytesModelValue12.equals((java.lang.Object) boolean69);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelValue31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.9E-324d + "'", double36 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNodeList43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(\"hi!\" => 0.0)" + "'", str45, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(valueExpression50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Expression \"true\"" + "'", str51, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertNotNull(modelNode65);
        org.junit.Assert.assertTrue("'" + modelType66 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType66.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PROPERTY" + "'", str68, "PROPERTY");
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + true + "'", boolean69, true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        double double7 = bigIntegerModelValue4.asDouble();
        double double9 = bigIntegerModelValue4.asDouble(8.0d);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.PROPERTY;
        char char11 = modelType10.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue12 = org.jboss.dmr.TypeModelValue.of(modelType10);
        boolean boolean13 = typeModelValue12.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression14 = typeModelValue12.asExpression();
        boolean boolean15 = bigIntegerModelValue4.equals((java.lang.Object) typeModelValue12);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList20 = modelNode19.asList();
        org.jboss.dmr.ModelType modelType21 = modelNode19.getType();
        org.jboss.dmr.TypeModelValue typeModelValue22 = org.jboss.dmr.TypeModelValue.of(modelType21);
        boolean boolean24 = typeModelValue22.asBoolean(false);
        boolean boolean25 = typeModelValue12.equals(typeModelValue22);
        boolean boolean27 = typeModelValue22.asBoolean(false);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'p' + "'", char11 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNodeList20);
        org.junit.Assert.assertTrue("'" + modelType21 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType21.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode22 = modelNode7.setExpression("\"(\\\"hi!\\\" => 0.0)\"", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelNode modelNode25 = modelNode7.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", (double) 0.0f);
        boolean boolean27 = modelNode7.hasDefined((int) 'b');
        org.jboss.dmr.ModelNode modelNode30 = modelNode7.set("Expression \"hi!\"", false);
        boolean boolean31 = modelNode7.isProtected();
        org.jboss.dmr.ModelNode modelNode34 = modelNode7.setExpression("[{ \"hi!\" : { \"EXPRESSION_VALUE\" : \"hi!\" } },\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\"]", "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=\" => (\"hi!\" => expression \"hi!\"))");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList35 = modelNode34.asList();
        org.jboss.dmr.BooleanModelValue booleanModelValue38 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long40 = booleanModelValue38.asLong((long) '#');
        java.math.BigDecimal bigDecimal41 = booleanModelValue38.asBigDecimal();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode42 = modelNode34.add("AA==", bigDecimal41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNodeList35);
        org.junit.Assert.assertNotNull(booleanModelValue38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal41);
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode22 = modelNode7.setExpression("\"(\\\"hi!\\\" => 0.0)\"", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelNode modelNode25 = modelNode7.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", (double) 0.0f);
        boolean boolean27 = modelNode7.hasDefined((int) 'b');
        org.jboss.dmr.ModelNode modelNode30 = modelNode7.set("\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\"", "");
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode34 = modelNode31.set("hi!", 0.0d);
        org.jboss.dmr.Validation.validate(modelNode31, "[(\"hi!\" => 0.0)]");
        boolean boolean38 = modelNode31.has("H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode39 = modelNode7.addNoCopy(modelNode31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        boolean boolean7 = modelNode4.equals((java.lang.Object) 100L);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        org.jboss.dmr.Property property13 = new org.jboss.dmr.Property("", modelNode12);
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.get(strArray14);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int18 = modelNode17.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode19 = modelNode17.clone();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setNoCopy("35", modelNode19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode24.asList();
        org.jboss.dmr.ListModelValue listModelValue26 = new org.jboss.dmr.ListModelValue(modelNodeList25);
        java.lang.String str27 = listModelValue26.asString();
        boolean boolean29 = listModelValue26.equals((java.lang.Object) true);
        boolean boolean30 = listModelValue26.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = listModelValue26.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode20.asList(modelNodeList31);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode4.asList(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode35 = modelNode4.set((int) 'i');
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str27, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelNode35);
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        boolean boolean16 = objectModelValue7.asBoolean(true);
        java.lang.String str17 = objectModelValue7.asString();
        org.jboss.dmr.ObjectModelValue objectModelValue18 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue18.asObject();
        java.util.Set<java.lang.String> strSet20 = objectModelValue18.getKeys();
        org.jboss.dmr.ModelNode modelNode22 = objectModelValue18.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = objectModelValue18.asList();
        org.jboss.dmr.ModelValue modelValue24 = objectModelValue18.resolve();
        boolean boolean26 = objectModelValue18.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode28 = objectModelValue18.getChild("\"35\"");
        boolean boolean29 = objectModelValue7.equals(objectModelValue18);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ValueExpression valueExpression4 = modelNode2.asExpression();
        java.math.BigDecimal bigDecimal5 = valueExpression4.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long8 = booleanModelValue7.asLong();
        org.jboss.dmr.ValueExpression valueExpression9 = booleanModelValue7.asExpression();
        boolean boolean11 = valueExpression9.equals((java.lang.Object) 'p');
        boolean boolean12 = valueExpression4.equals(valueExpression9);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode(valueExpression4);
        org.jboss.dmr.Property property15 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode13, false);
        org.jboss.dmr.ModelNode modelNode18 = modelNode13.set("rO0ABXQAUXJPMEFCWE55QUJkdmNtY3VhbUp2YzNNdVpHMXlMazF2WkdWc1RtOWtaUnd0b1VTZG80\nNC9EQUFBZUhCM0RIQUFBMmhwSVdVQUEyaHAKSVhnPQ==", 0L);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        java.lang.String str25 = modelNode21.toString();
        org.jboss.dmr.ModelNode modelNode26 = modelNode21.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode28 = modelNode21.set(100);
        org.jboss.dmr.ModelNode modelNode29 = modelNode20.add(modelNode21);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode21);
        java.lang.String str31 = property30.getName();
        org.jboss.dmr.Property property32 = property30.clone();
        java.lang.String str33 = property30.getName();
        org.jboss.dmr.Property property34 = property30.clone();
        org.jboss.dmr.ModelNode modelNode35 = modelNode13.set(property34);
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = modelNode40.asList();
        org.jboss.dmr.ModelType modelType42 = modelNode40.getType();
        org.jboss.dmr.TypeModelValue typeModelValue43 = org.jboss.dmr.TypeModelValue.of(modelType42);
        java.lang.String str44 = typeModelValue43.asString();
        boolean boolean45 = typeModelValue43.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression46 = typeModelValue43.asExpression();
        org.jboss.dmr.ModelNode modelNode47 = modelNode35.set("{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined,\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => undefined}", valueExpression46);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(\"hi!\" => 0.0)" + "'", str25, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertTrue("'" + modelType42 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType42.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PROPERTY" + "'", str44, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(valueExpression46);
        org.junit.Assert.assertNotNull(modelNode47);
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwAGI=");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean6 = stringModelValue3.equals((java.lang.Object) (-1.0d));
        boolean boolean7 = stringModelValue1.equals(stringModelValue3);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = stringModelValue1.asDouble((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwAGI=\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression7 = expressionValue6.asExpression();
        boolean boolean8 = expressionValue1.equals(expressionValue6);
        org.jboss.dmr.ObjectModelValue objectModelValue9 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode10 = objectModelValue9.asObject();
        java.util.Set<java.lang.String> strSet11 = objectModelValue9.getKeys();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue9.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        int int15 = objectModelValue9.asInt(10);
        boolean boolean16 = expressionValue6.equals((java.lang.Object) objectModelValue9);
        java.io.DataOutput dataOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue6.writeExternal(dataOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(modelNode13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        boolean boolean2 = org.jboss.dmr.Base64.decodeToFile("(\"rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==\" => (\"hi!\" => 0.0))", "\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\"");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression2 = expressionValue1.asExpression();
        java.io.PrintWriter printWriter3 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.format(printWriter3, (int) (byte) 100, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int8 = bytesModelValue4.asInt((int) 'a');
        java.lang.String str9 = bytesModelValue4.asString();
        double double11 = bytesModelValue4.asDouble((double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode12 = bytesModelValue4.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str9, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 4.9E-324d + "'", double11 == 4.9E-324d);
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter13.writeInt((int) (byte) 10);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue20 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str21 = longModelValue20.asString();
        byte[] byteArray22 = longModelValue20.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue23 = new org.jboss.dmr.BytesModelValue(byteArray22);
        int int26 = inputStream18.read(byteArray22, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelWriter15.writeBytes(byteArray22);
        org.jboss.dmr.ModelNode modelNode29 = org.jboss.dmr.ModelNode.fromString("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"");
        org.jboss.dmr.ModelNode modelNode31 = modelNode29.setExpression("AAAAIA==");
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long35 = modelNode34.asLong();
        org.jboss.dmr.ValueExpression valueExpression36 = modelNode34.asExpression();
        java.math.BigDecimal bigDecimal37 = valueExpression36.resolveBigDecimal();
        java.lang.String str38 = valueExpression36.getExpressionString();
        java.math.BigDecimal bigDecimal39 = valueExpression36.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue40 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal39);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue41 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal39);
        org.jboss.dmr.ModelNode modelNode42 = modelNode29.set("\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"", bigDecimal39);
        org.jboss.dmr.stream.ModelWriter modelWriter43 = modelWriter27.writeBigDecimal(bigDecimal39);
        org.jboss.dmr.stream.ModelWriter modelWriter45 = modelWriter27.writeExpression("(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")");
        // The following exception was thrown during execution in test generation
        try {
            modelWriter45.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(valueExpression36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1.0" + "'", str38, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelWriter43);
        org.junit.Assert.assertNotNull(modelWriter45);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = listModelValue5.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode27, false);
        org.jboss.dmr.Property property30 = propertyModelValue29.asProperty();
        boolean boolean31 = listModelValue5.equals((java.lang.Object) propertyModelValue29);
        java.util.List<org.jboss.dmr.Property> propertyList32 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelValue modelValue33 = listModelValue5.resolve();
        java.io.PrintWriter printWriter34 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.formatAsJSON(printWriter34, (int) 'p', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelValue33);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        long long8 = bytesModelValue4.asLong((long) (short) 1);
        int int10 = bytesModelValue4.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue11 = bytesModelValue4.protect();
        java.io.PrintWriter printWriter12 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue4.formatAsJSON(printWriter12, (int) 's', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(modelValue11);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        boolean boolean3 = modelNode1.has("PROPERTY_VALUE");
        boolean boolean4 = modelNode1.isProtected();
        boolean boolean6 = modelNode1.hasDefined((int) '4');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isObjectEnd();
        boolean boolean19 = modelReader15.isType();
        boolean boolean20 = modelReader15.hasNext();
        boolean boolean21 = modelReader15.isPropertyStart();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = modelReader15.getInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't int");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        int int34 = inputStream26.read(byteArray30, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (-1));
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader41 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream38);
        java.io.OutputStream outputStream42 = null;
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream(outputStream42);
        outputStream43.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream47 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream45, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream47);
        outputStream48.resumeEncoding();
        outputStream48.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream48);
        org.jboss.dmr.LongModelValue longModelValue53 = new org.jboss.dmr.LongModelValue((-1L));
        long long55 = longModelValue53.asLong((long) (byte) -1);
        boolean boolean57 = longModelValue53.asBoolean(false);
        java.io.OutputStream outputStream58 = null;
        org.jboss.dmr.Base64.OutputStream outputStream59 = new org.jboss.dmr.Base64.OutputStream(outputStream58);
        outputStream59.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream61 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream59);
        org.jboss.dmr.Base64.OutputStream outputStream63 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream61, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream64 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream63);
        outputStream64.resumeEncoding();
        boolean boolean66 = longModelValue53.equals((java.lang.Object) outputStream64);
        org.jboss.dmr.Base64.OutputStream outputStream68 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream64, (int) (short) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter69 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream64);
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelReader41);
        org.junit.Assert.assertNotNull(modelWriter51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(modelWriter69);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        java.util.Set<java.lang.String> strSet14 = propertyModelValue10.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList15 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelValue modelValue16 = propertyModelValue10.protect();
        org.jboss.dmr.Property property17 = propertyModelValue10.asProperty();
        java.lang.String str18 = property17.getName();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(propertyList15);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode16 = modelNode0.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.LongModelValue longModelValue18 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str19 = longModelValue18.asString();
        byte[] byteArray20 = longModelValue18.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue21 = new org.jboss.dmr.BytesModelValue(byteArray20);
        java.lang.String str22 = bytesModelValue21.asString();
        int int23 = bytesModelValue21.asInt();
        byte[] byteArray24 = bytesModelValue21.asBytes();
        org.jboss.dmr.LongModelValue longModelValue26 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str27 = longModelValue26.asString();
        byte[] byteArray28 = longModelValue26.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue29 = new org.jboss.dmr.BytesModelValue(byteArray28);
        java.lang.String str30 = bytesModelValue29.asString();
        int int31 = bytesModelValue29.asInt();
        int int32 = bytesModelValue29.asInt();
        org.jboss.dmr.LongModelValue longModelValue34 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str35 = longModelValue34.asString();
        byte[] byteArray36 = longModelValue34.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue37 = new org.jboss.dmr.BytesModelValue(byteArray36);
        double double38 = bytesModelValue37.asDouble();
        boolean boolean39 = bytesModelValue29.equals(bytesModelValue37);
        byte[] byteArray40 = bytesModelValue37.asBytes();
        java.math.BigInteger bigInteger41 = bytesModelValue37.asBigInteger();
        boolean boolean42 = bytesModelValue21.equals(bytesModelValue37);
        int int44 = bytesModelValue37.asInt((int) 'J');
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory46 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream47 = null;
        org.jboss.dmr.Base64.InputStream inputStream49 = new org.jboss.dmr.Base64.InputStream(inputStream47, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream50 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream49);
        org.jboss.dmr.stream.ModelReader modelReader51 = modelStreamFactory46.newModelReader((java.io.InputStream) inputStream50);
        java.io.OutputStream outputStream52 = null;
        org.jboss.dmr.Base64.OutputStream outputStream53 = new org.jboss.dmr.Base64.OutputStream(outputStream52);
        org.jboss.dmr.Base64.OutputStream outputStream54 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream53);
        outputStream53.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter57 = modelStreamFactory46.newModelWriter((java.io.OutputStream) outputStream53);
        org.jboss.dmr.stream.ModelWriter modelWriter58 = modelWriter57.writeListStart();
        bytesModelValue37.write(modelWriter58);
        modelNode0.write(modelWriter58);
        org.jboss.dmr.stream.ModelWriter modelWriter62 = modelWriter58.writeDouble((-1.0d));
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str22, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str30, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4.9E-324d + "'", double38 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory46);
        org.junit.Assert.assertNotNull(modelReader51);
        org.junit.Assert.assertNotNull(modelWriter57);
        org.junit.Assert.assertNotNull(modelWriter58);
        org.junit.Assert.assertNotNull(modelWriter62);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression14 = expressionValue13.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str17 = expressionValue16.toString();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        boolean boolean24 = expressionValue16.equals((java.lang.Object) property23);
        boolean boolean25 = expressionValue13.equals(expressionValue16);
        boolean boolean26 = expressionValue8.equals((java.lang.Object) boolean25);
        org.jboss.dmr.ValueExpression valueExpression27 = expressionValue8.asExpression();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode(valueExpression27);
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode34 = modelNode31.set("hi!", 0.0d);
        org.jboss.dmr.Property property35 = new org.jboss.dmr.Property("", modelNode34);
        java.lang.String[] strArray36 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.get(strArray36);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int40 = modelNode39.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode41 = modelNode39.clone();
        org.jboss.dmr.ModelNode modelNode42 = modelNode37.setNoCopy("35", modelNode41);
        org.jboss.dmr.ModelType modelType43 = modelNode41.getType();
        org.jboss.dmr.ModelNode modelNode44 = modelNode28.set("TYPE_MODEL_VALUE", modelType43);
        org.jboss.dmr.ModelType modelType45 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode(modelType45);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("", modelNode51);
        org.jboss.dmr.ModelNode modelNode53 = modelNode46.set(property52);
        org.jboss.dmr.ModelNode modelNode54 = modelNode46.asObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode55 = modelNode28.add(modelNode46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "expression \"hi!\"" + "'", str17, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + modelType43 + "' != '" + org.jboss.dmr.ModelType.UNDEFINED + "'", modelType43.equals(org.jboss.dmr.ModelType.UNDEFINED));
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertTrue("'" + modelType45 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType45.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode54);
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        boolean boolean12 = listModelValue5.asBoolean(false);
        java.util.List<org.jboss.dmr.Property> propertyList13 = listModelValue5.asPropertyList();
        boolean boolean15 = listModelValue5.has((int) 'J');
        org.jboss.dmr.ModelValue modelValue16 = listModelValue5.resolve();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(propertyList13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(modelValue16);
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 0);
        long long2 = doubleModelValue1.asLong();
        java.io.PrintWriter printWriter3 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue1.format(printWriter3, 35, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode10 = modelNode0.resolve();
        org.jboss.dmr.ModelNode modelNode11 = modelNode10.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode13 = modelNode11.set(modelNode12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newValue is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode11);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        org.jboss.dmr.BooleanModelValue booleanModelValue19 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger20 = booleanModelValue19.asBigInteger();
        byte[] byteArray21 = booleanModelValue19.asBytes();
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "1L");
        boolean boolean25 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "[(\"hi!\" => 0.0)]");
        outputStream17.write(byteArray21);
        outputStream17.write((int) (short) 0);
        outputStream17.resumeEncoding();
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream17);
        java.io.InputStream inputStream31 = null;
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream(inputStream31, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream34 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream33);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream33);
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream35, (int) (short) 10);
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream37);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = modelReader38.getInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't int");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(booleanModelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelReader38);
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        boolean boolean8 = listModelValue5.equals((java.lang.Object) true);
        boolean boolean9 = listModelValue5.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList10 = listModelValue5.asList();
        org.jboss.dmr.ModelValue modelValue11 = listModelValue5.protect();
        org.jboss.dmr.ModelNode modelNode12 = listModelValue5.asObject();
        java.lang.Object obj13 = null;
        boolean boolean14 = listModelValue5.equals(obj13);
        long long16 = listModelValue5.asLong(100L);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(modelNodeList10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str3 = modelNode1.asString("true");
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.set("expression \"hi!\"", (int) (short) -1);
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.clear();
        double double9 = modelNode7.asDouble((double) 35L);
        java.io.ObjectOutput objectOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode7.writeExternal(objectOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.PropertyModelValue propertyModelValue3 = new org.jboss.dmr.PropertyModelValue("0.0", modelNode2);
        org.jboss.dmr.StringModelValue stringModelValue5 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray6 = stringModelValue5.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode2.set(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode9 = modelNode2.remove("(\"(\\\"Expression \\\\\\\"1\\\\\\\"\\\" => (\\\"org.jboss.dmr.stream.ModelException: [(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => BYTES))\" => expression \"big decimal 1\")");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(modelNode7);
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        int int11 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        java.lang.String str19 = modelNode16.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue22 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long23 = booleanModelValue22.asLong();
        org.jboss.dmr.ValueExpression valueExpression24 = booleanModelValue22.asExpression();
        java.lang.String str25 = valueExpression24.toString();
        org.jboss.dmr.ExpressionValue expressionValue27 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression28 = expressionValue27.asExpression();
        boolean boolean29 = valueExpression24.equals(valueExpression28);
        java.lang.String str30 = valueExpression28.resolveString();
        org.jboss.dmr.ModelNode modelNode31 = modelNode16.set("Expression \"1\"", valueExpression28);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ModelNode modelNode39 = modelNode35.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType40 = modelNode35.getType();
        org.jboss.dmr.ModelNode modelNode41 = modelNode31.set(modelType40);
        org.jboss.dmr.ModelType modelType42 = modelNode31.asType();
        org.jboss.dmr.ModelNode modelNode43 = modelNode1.set("(\"[1]\" => 0.0)", modelType42);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Expression \"true\"" + "'", str25, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertTrue("'" + modelType40 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType40.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertTrue("'" + modelType42 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType42.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode43);
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        int int4 = objectModelValue0.asInt((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue5 = objectModelValue0.protect();
        boolean boolean7 = objectModelValue0.asBoolean(false);
        org.jboss.dmr.ModelValue modelValue8 = objectModelValue0.copy();
        boolean boolean10 = modelValue8.has("(\"(\\\"org.jboss.dmr.stream.ModelException: [(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => expression \\\"true\\\")\" => (\"hi!\" => 100L))");
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelValue8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        java.lang.Long long46 = modelNode45.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray47 = new org.jboss.dmr.ModelNode[] { modelNode41, modelNode45 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList48 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48, modelNodeArray47);
        org.jboss.dmr.ModelNode modelNode50 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long54 = modelNode53.asLong();
        org.jboss.dmr.ValueExpression valueExpression55 = modelNode53.asExpression();
        java.math.BigDecimal bigDecimal56 = valueExpression55.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode57 = modelNode7.set("true", bigDecimal56);
        java.lang.String str58 = modelNode7.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode60 = new org.jboss.dmr.ModelNode(8);
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode64.asList();
        org.jboss.dmr.ModelNode modelNode68 = modelNode64.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType69 = modelNode64.getType();
        org.jboss.dmr.ModelNode modelNode70 = modelNode60.set(modelNode64);
        org.jboss.dmr.ModelNode modelNode71 = modelNode64.clone();
        modelNode7.setNoCopy(modelNode64);
        org.jboss.dmr.DoubleModelValue doubleModelValue75 = new org.jboss.dmr.DoubleModelValue((double) (short) 0);
        byte[] byteArray76 = doubleModelValue75.asBytes();
        org.jboss.dmr.ModelNode modelNode77 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) doubleModelValue75);
        org.jboss.dmr.ModelNode modelNode78 = modelNode7.setNoCopy("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"", modelNode77);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode80 = modelNode7.get("expression \"false\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNull(long46);
        org.junit.Assert.assertNotNull(modelNodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(valueExpression55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(\"true\" => big decimal 1.0)" + "'", str58, "(\"true\" => big decimal 1.0)");
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertTrue("'" + modelType69 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType69.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(modelNode78);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression14 = expressionValue13.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str17 = expressionValue16.toString();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        boolean boolean24 = expressionValue16.equals((java.lang.Object) property23);
        boolean boolean25 = expressionValue13.equals(expressionValue16);
        boolean boolean26 = expressionValue8.equals((java.lang.Object) boolean25);
        org.jboss.dmr.ValueExpression valueExpression27 = expressionValue8.asExpression();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode(valueExpression27);
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4", "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode35 = modelNode34.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue36 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode37 = objectModelValue36.asObject();
        java.util.Set<java.lang.String> strSet38 = objectModelValue36.getKeys();
        boolean boolean40 = objectModelValue36.has((int) 'a');
        boolean boolean42 = objectModelValue36.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue43 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode44 = objectModelValue43.asObject();
        java.util.Set<java.lang.String> strSet45 = objectModelValue43.getKeys();
        boolean boolean47 = objectModelValue43.has((int) 'a');
        boolean boolean48 = objectModelValue36.equals(objectModelValue43);
        org.jboss.dmr.ModelNode modelNode49 = objectModelValue43.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList50 = objectModelValue43.asList();
        org.jboss.dmr.ModelNode modelNode51 = modelNode34.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList50);
        org.jboss.dmr.Property property53 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode34, true);
        org.jboss.dmr.Property property54 = property53.clone();
        org.jboss.dmr.ModelNode modelNode55 = modelNode31.set(property54);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger56 = modelNode31.asBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "expression \"hi!\"" + "'", str17, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNodeList50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(modelNode55);
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelNode modelNode7 = modelNode3.setExpression("hi!", "(\"hi!\" => 0.0)");
        org.jboss.dmr.Property property8 = modelNode3.asProperty();
        org.jboss.dmr.ModelNode modelNode11 = modelNode3.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", 2L);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = modelNode11.asBytesOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(modelNode11);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression14 = expressionValue13.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str17 = expressionValue16.toString();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        boolean boolean24 = expressionValue16.equals((java.lang.Object) property23);
        boolean boolean25 = expressionValue13.equals(expressionValue16);
        boolean boolean26 = expressionValue8.equals((java.lang.Object) boolean25);
        boolean boolean28 = expressionValue8.equals((java.lang.Object) 8);
        java.lang.String str29 = expressionValue8.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "expression \"hi!\"" + "'", str17, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "expression \"hi!\"" + "'", str29, "expression \"hi!\"");
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) (byte) 100);
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream(inputStream0);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = inputStream5.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.ModelNode modelNode8 = modelNode3.set((double) 'a');
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str11 = intModelValue10.asString();
        double double13 = intModelValue10.asDouble((double) 2);
        java.math.BigDecimal bigDecimal14 = intModelValue10.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue15 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal14);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue16 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal14);
        org.jboss.dmr.ModelNode modelNode17 = modelNode8.set(bigDecimal14);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue18 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal14);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode20 = bigDecimalModelValue18.requireChild((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [0]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(modelNode17);
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.Set<java.lang.String> strSet12 = propertyModelValue11.getKeys();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("{}");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("false");
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        java.math.BigInteger bigInteger9 = intModelValue5.asBigInteger();
        long long11 = intModelValue5.asLong((long) ' ');
        boolean boolean12 = expressionValue3.equals((java.lang.Object) long11);
        java.lang.String str13 = expressionValue3.asString();
        boolean boolean14 = expressionValue1.equals(expressionValue3);
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.formatAsJSON(printWriter15, 2, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "false" + "'", str13, "false");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.math.BigInteger bigInteger16 = bytesModelValue12.asBigInteger();
        java.lang.String str17 = bytesModelValue12.asString();
        long long19 = bytesModelValue12.asLong((long) (short) 0);
        int int20 = bytesModelValue12.asInt();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str17, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        java.lang.Throwable throwable3 = null;
        org.jboss.dmr.stream.ModelException modelException4 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable3);
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException4);
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException4);
        org.jboss.dmr.stream.ModelException modelException7 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException6);
        org.jboss.dmr.stream.ModelException modelException8 = new org.jboss.dmr.stream.ModelException("(\"hi!\" => expression \"hi!\")", (java.lang.Throwable) modelException7);
        org.jboss.dmr.stream.ModelException modelException9 = new org.jboss.dmr.stream.ModelException("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4", (java.lang.Throwable) modelException7);
        java.lang.Throwable throwable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelException9.addSuppressed(throwable10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((-1.0d));
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = modelNode3.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode3);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        byte[] byteArray7 = bytesModelValue4.asBytes();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        java.lang.String str13 = bytesModelValue12.asString();
        int int14 = bytesModelValue12.asInt();
        int int15 = bytesModelValue12.asInt();
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        double double21 = bytesModelValue20.asDouble();
        boolean boolean22 = bytesModelValue12.equals(bytesModelValue20);
        byte[] byteArray23 = bytesModelValue20.asBytes();
        java.math.BigInteger bigInteger24 = bytesModelValue20.asBigInteger();
        boolean boolean25 = bytesModelValue4.equals(bytesModelValue20);
        double double26 = bytesModelValue20.asDouble();
        byte[] byteArray27 = bytesModelValue20.asBytes();
        double double28 = bytesModelValue20.asDouble();
        double double29 = bytesModelValue20.asDouble();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str13, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.9E-324d + "'", double26 == 4.9E-324d);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4.9E-324d + "'", double28 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 4.9E-324d + "'", double29 == 4.9E-324d);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        int int5 = doubleModelValue1.asInt();
        org.jboss.dmr.DoubleModelValue doubleModelValue7 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long8 = doubleModelValue7.asLong();
        long long10 = doubleModelValue7.asLong((long) 32);
        byte[] byteArray11 = doubleModelValue7.asBytes();
        boolean boolean12 = doubleModelValue1.equals(doubleModelValue7);
        boolean boolean13 = doubleModelValue7.asBoolean();
        org.jboss.dmr.ModelValue modelValue14 = doubleModelValue7.resolve();
        double double16 = doubleModelValue7.asDouble((double) (short) 10);
        double double17 = doubleModelValue7.asDouble();
        java.io.PrintWriter printWriter18 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue7.format(printWriter18, (int) (short) 1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression2 = expressionValue1.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str5 = expressionValue4.toString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        boolean boolean12 = expressionValue4.equals((java.lang.Object) property11);
        boolean boolean13 = expressionValue1.equals(expressionValue4);
        org.jboss.dmr.ModelType modelType14 = org.jboss.dmr.ModelType.PROPERTY;
        char char15 = modelType14.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue16 = org.jboss.dmr.TypeModelValue.of(modelType14);
        org.jboss.dmr.ValueExpression valueExpression17 = typeModelValue16.asExpression();
        org.jboss.dmr.stream.ModelEvent modelEvent18 = org.jboss.dmr.stream.ModelEvent.TYPE;
        boolean boolean19 = valueExpression17.equals((java.lang.Object) modelEvent18);
        boolean boolean20 = expressionValue1.equals((java.lang.Object) boolean19);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory22 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        int int33 = inputStream25.read(byteArray29, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (-1));
        org.jboss.dmr.stream.ModelReader modelReader36 = modelStreamFactory22.newModelReader((java.io.InputStream) inputStream35);
        java.io.InputStream inputStream37 = null;
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream(inputStream37, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream40 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream39);
        org.jboss.dmr.Base64.InputStream inputStream41 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream39);
        org.jboss.dmr.stream.ModelReader modelReader42 = modelStreamFactory22.newModelReader((java.io.InputStream) inputStream39);
        java.io.InputStream inputStream43 = null;
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream(inputStream43, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream46 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream45);
        org.jboss.dmr.stream.ModelReader modelReader47 = modelStreamFactory22.newModelReader((java.io.InputStream) inputStream45);
        java.io.OutputStream outputStream48 = null;
        org.jboss.dmr.Base64.OutputStream outputStream49 = new org.jboss.dmr.Base64.OutputStream(outputStream48);
        outputStream49.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream51 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream49);
        org.jboss.dmr.Base64.OutputStream outputStream52 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream51);
        outputStream51.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream54 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream51);
        org.jboss.dmr.Base64.OutputStream outputStream55 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream51);
        org.jboss.dmr.stream.ModelWriter modelWriter56 = modelStreamFactory22.newModelWriter((java.io.OutputStream) outputStream55);
        expressionValue1.write(modelWriter56);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter59 = modelWriter56.writeExpression("32");
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "expression \"hi!\"" + "'", str5, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType14.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'p' + "'", char15 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue16);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertTrue("'" + modelEvent18 + "' != '" + org.jboss.dmr.stream.ModelEvent.TYPE + "'", modelEvent18.equals(org.jboss.dmr.stream.ModelEvent.TYPE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelReader36);
        org.junit.Assert.assertNotNull(modelReader42);
        org.junit.Assert.assertNotNull(modelReader47);
        org.junit.Assert.assertNotNull(modelWriter56);
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADMS4w\neA==");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unexpected character 'r' while reading DMR stream");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.jboss.dmr.Base64.decodeFromFile("Expression \"PROPERTY\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Error decoding from file Expression \"PROPERTY\"");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBoolean();
        boolean boolean19 = modelReader15.isListStart();
        boolean boolean20 = modelReader15.isPropertyStart();
        boolean boolean21 = modelReader15.isType();
        boolean boolean22 = modelReader15.isDouble();
        boolean boolean23 = modelReader15.isType();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        boolean boolean4 = stringModelValue1.equals((java.lang.Object) (-1.0d));
        java.lang.String str5 = stringModelValue1.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent6 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) modelEvent6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue13 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean14 = stringModelValue11.equals(stringModelValue13);
        byte[] byteArray15 = stringModelValue13.asBytes();
        java.lang.Object obj16 = null;
        boolean boolean17 = stringModelValue13.equals(obj16);
        boolean boolean19 = stringModelValue13.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean20 = stringModelValue9.equals(stringModelValue13);
        boolean boolean21 = stringModelValue1.equals(stringModelValue13);
        java.io.PrintWriter printWriter22 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue13.formatAsJSON(printWriter22, (int) 'i', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str5, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent6 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent6.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long4 = modelNode3.asLong();
        org.jboss.dmr.ValueExpression valueExpression5 = modelNode3.asExpression();
        java.math.BigDecimal bigDecimal6 = valueExpression5.resolveBigDecimal();
        java.lang.String str7 = valueExpression5.getExpressionString();
        java.math.BigDecimal bigDecimal8 = valueExpression5.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue9 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal8);
        boolean boolean10 = bigDecimalModelValue9.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue9.asExpression();
        org.jboss.dmr.IntModelValue intModelValue13 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long15 = intModelValue13.asLong((long) 'b');
        java.lang.String str16 = intModelValue13.asString();
        long long17 = intModelValue13.asLong();
        long long18 = intModelValue13.asLong();
        org.jboss.dmr.ValueExpression valueExpression19 = intModelValue13.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver20 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal21 = valueExpression19.resolveBigDecimal(valueExpressionResolver20);
        boolean boolean22 = valueExpression11.equals(valueExpression19);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver23 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue25 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long26 = booleanModelValue25.asLong();
        org.jboss.dmr.ValueExpression valueExpression27 = booleanModelValue25.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue28 = new org.jboss.dmr.ExpressionValue(valueExpression27);
        java.lang.String str29 = valueExpression27.getExpressionString();
        java.lang.String str30 = valueExpressionResolver23.resolve(valueExpression27);
        java.lang.String str31 = valueExpression19.resolveString(valueExpressionResolver23);
        int int32 = valueExpression19.resolveInt();
        org.jboss.dmr.ModelNode modelNode33 = modelNode1.set(valueExpression19);
        org.jboss.dmr.ExpressionValue expressionValue37 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue39 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean40 = expressionValue37.equals(expressionValue39);
        org.jboss.dmr.ExpressionValue expressionValue42 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue44 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean45 = expressionValue42.equals(expressionValue44);
        boolean boolean46 = expressionValue37.equals(expressionValue44);
        org.jboss.dmr.ValueExpression valueExpression47 = expressionValue44.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue49 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression50 = expressionValue49.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue52 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str53 = expressionValue52.toString();
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode58 = modelNode55.set("hi!", 0.0d);
        org.jboss.dmr.Property property59 = new org.jboss.dmr.Property("", modelNode58);
        boolean boolean60 = expressionValue52.equals((java.lang.Object) property59);
        boolean boolean61 = expressionValue49.equals(expressionValue52);
        boolean boolean62 = expressionValue44.equals((java.lang.Object) boolean61);
        org.jboss.dmr.ValueExpression valueExpression63 = expressionValue44.asExpression();
        org.jboss.dmr.ModelNode modelNode64 = new org.jboss.dmr.ModelNode(valueExpression63);
        org.jboss.dmr.ModelNode modelNode65 = modelNode64.setEmptyList();
        org.jboss.dmr.IntModelValue intModelValue67 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str68 = intModelValue67.asString();
        double double70 = intModelValue67.asDouble((double) 2);
        java.math.BigInteger bigInteger71 = intModelValue67.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue72 = new org.jboss.dmr.BigIntegerModelValue(bigInteger71);
        org.jboss.dmr.ModelNode modelNode73 = modelNode65.set(bigInteger71);
        org.jboss.dmr.PropertyModelValue propertyModelValue74 = new org.jboss.dmr.PropertyModelValue("{ \"35\" : 0.0 }", modelNode65);
        org.jboss.dmr.Property property76 = new org.jboss.dmr.Property("expression \"false\"", modelNode65, false);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode77 = modelNode1.add(property76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1.0" + "'", str7, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "32" + "'", str16, "32");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver23);
        org.junit.Assert.assertNotNull(booleanModelValue25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "true" + "'", str29, "true");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "true" + "'", str30, "true");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(valueExpression47);
        org.junit.Assert.assertNotNull(valueExpression50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "expression \"hi!\"" + "'", str53, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(valueExpression63);
        org.junit.Assert.assertNotNull(modelNode65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "32" + "'", str68, "32");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 32.0d + "'", double70 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger71);
        org.junit.Assert.assertNotNull(modelNode73);
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isBytes();
        boolean boolean24 = modelReader15.isDouble();
        boolean boolean25 = modelReader15.isBigInteger();
        boolean boolean26 = modelReader15.hasNext();
        boolean boolean27 = modelReader15.isObjectEnd();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue5 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean6 = stringModelValue3.equals(stringModelValue5);
        byte[] byteArray7 = stringModelValue5.asBytes();
        java.lang.Object obj8 = null;
        boolean boolean9 = stringModelValue5.equals(obj8);
        boolean boolean11 = stringModelValue5.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean12 = stringModelValue1.equals(stringModelValue5);
        java.lang.String str13 = stringModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression14 = stringModelValue5.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = stringModelValue5.asDouble((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str13, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(valueExpression14);
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.InputStream inputStream7 = null;
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) (byte) 100);
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream(inputStream7);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream7, 0);
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20, (int) (short) 10);
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream22);
        org.jboss.dmr.stream.ModelReader modelReader24 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream22);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = org.jboss.dmr.ModelNode.fromStream((java.io.InputStream) inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader24);
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        org.jboss.dmr.ModelType modelType1 = org.jboss.dmr.ModelType.forChar('d');
        org.junit.Assert.assertTrue("'" + modelType1 + "' != '" + org.jboss.dmr.ModelType.BIG_DECIMAL + "'", modelType1.equals(org.jboss.dmr.ModelType.BIG_DECIMAL));
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelNode modelNode10 = propertyModelValue9.asObject();
        org.jboss.dmr.ModelValue modelValue11 = propertyModelValue9.protect();
        java.io.PrintWriter printWriter12 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue9.formatAsJSON(printWriter12, (int) (short) 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelValue11);
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        org.jboss.dmr.ExpressionValue expressionValue7 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression8 = expressionValue7.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver9 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str10 = valueExpression8.resolveString(valueExpressionResolver9);
        java.math.BigDecimal bigDecimal11 = valueExpression3.resolveBigDecimal(valueExpressionResolver9);
        java.io.ObjectInput objectInput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression3.readExternal(objectInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(bigDecimal11);
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("big decimal 32");
        org.junit.Assert.assertNotNull(modelNode1);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        long long7 = listModelValue5.asLong();
        java.util.List<org.jboss.dmr.Property> propertyList8 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelValue modelValue9 = listModelValue5.protect();
        boolean boolean11 = listModelValue5.asBoolean(false);
        java.util.List<org.jboss.dmr.Property> propertyList12 = listModelValue5.asPropertyList();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = listModelValue5.getChild((int) 'I');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(propertyList8);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(propertyList12);
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        boolean boolean10 = listModelValue5.has((int) 'l');
        int int12 = listModelValue5.asInt((int) (short) 0);
        boolean boolean13 = listModelValue5.asBoolean();
        java.io.DataOutput dataOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.writeExternal(dataOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelNode modelNode10 = property7.getValue();
        java.util.List<org.jboss.dmr.Property> propertyList11 = modelNode10.asPropertyListOrEmpty();
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.clone();
        java.util.List<org.jboss.dmr.Property> propertyList13 = modelNode10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode16 = modelNode10.setExpression("{ \"expression \\\"hi!\\\"\" : { \"BYTES_VALUE\" : \"AQ==\" } }", "rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51\nbWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAIw==");
        org.jboss.dmr.ModelNode modelNode17 = modelNode10.setEmptyList();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(propertyList13);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelValue modelValue12 = listModelValue5.copy();
        java.lang.String str13 = listModelValue5.toString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory15 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader20 = modelStreamFactory15.newModelReader((java.io.InputStream) inputStream19);
        java.io.OutputStream outputStream21 = null;
        org.jboss.dmr.Base64.OutputStream outputStream22 = new org.jboss.dmr.Base64.OutputStream(outputStream21);
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream22);
        outputStream22.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelStreamFactory15.newModelWriter((java.io.OutputStream) outputStream22);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelWriter26.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter29 = modelWriter26.writeInt((int) '4');
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList34 = modelNode33.asList();
        org.jboss.dmr.ListModelValue listModelValue35 = new org.jboss.dmr.ListModelValue(modelNodeList34);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue35);
        org.jboss.dmr.ModelValue modelValue37 = listModelValue35.resolve();
        int int39 = listModelValue35.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList40 = listModelValue35.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList41 = listModelValue35.asPropertyList();
        java.lang.String str42 = listModelValue35.asString();
        int int43 = listModelValue35.asInt();
        java.lang.String str44 = listModelValue35.asString();
        org.jboss.dmr.ModelType modelType45 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode(modelType45);
        boolean boolean47 = listModelValue35.equals((java.lang.Object) modelType45);
        org.jboss.dmr.TypeModelValue typeModelValue48 = org.jboss.dmr.TypeModelValue.of(modelType45);
        org.jboss.dmr.TypeModelValue typeModelValue49 = org.jboss.dmr.TypeModelValue.of(modelType45);
        org.jboss.dmr.stream.ModelWriter modelWriter50 = modelWriter26.writeType(modelType45);
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelWriter26.writeListEnd();
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.write(modelWriter26);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str13, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelStreamFactory15);
        org.junit.Assert.assertNotNull(modelReader20);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter29);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNodeList34);
        org.junit.Assert.assertNotNull(modelValue37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(propertyList41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str42, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str44, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType45 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType45.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(typeModelValue48);
        org.junit.Assert.assertNotNull(typeModelValue49);
        org.junit.Assert.assertNotNull(modelWriter50);
        org.junit.Assert.assertNotNull(modelWriter51);
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.set((double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode6 = modelNode3.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.StringModelValue stringModelValue6 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        boolean boolean7 = stringModelValue3.equals(stringModelValue6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression12 = stringModelValue11.asExpression();
        boolean boolean13 = stringModelValue9.equals(stringModelValue11);
        boolean boolean14 = stringModelValue6.equals(stringModelValue11);
        byte[] byteArray15 = stringModelValue6.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = stringModelValue6.asBoolean(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        boolean boolean3 = objectModelValue0.asBoolean();
        java.lang.String str4 = objectModelValue0.asString();
        org.jboss.dmr.ModelValue modelValue5 = objectModelValue0.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.requireChild("EXPRESSION_VALUE");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'EXPRESSION_VALUE' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(modelValue5);
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        boolean boolean15 = expressionValue8.equals((java.lang.Object) modelNode12);
        java.lang.String str16 = expressionValue8.asString();
        org.jboss.dmr.ValueExpression valueExpression17 = expressionValue8.asExpression();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(valueExpression17);
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        byte[] byteArray14 = intModelValue9.asBytes();
        org.jboss.dmr.ModelValue modelValue15 = intModelValue9.clone();
        java.math.BigInteger bigInteger16 = intModelValue9.asBigInteger();
        long long18 = intModelValue9.asLong((long) 32);
        double double20 = intModelValue9.asDouble(0.0d);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 32.0d + "'", double20 == 32.0d);
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        long long3 = modelNode1.asLong((long) '4');
        org.jboss.dmr.ModelType modelType4 = modelNode1.getType();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long8 = modelNode7.asLong();
        org.jboss.dmr.ValueExpression valueExpression9 = modelNode7.asExpression();
        java.math.BigDecimal bigDecimal10 = valueExpression9.resolveBigDecimal();
        java.lang.String str11 = valueExpression9.getExpressionString();
        java.math.BigDecimal bigDecimal12 = valueExpression9.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue13 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal12);
        int int15 = bigDecimalModelValue13.asInt(0);
        java.math.BigDecimal bigDecimal16 = bigDecimalModelValue13.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression17 = bigDecimalModelValue13.asExpression();
        org.jboss.dmr.ModelNode modelNode18 = modelNode1.set("big integer 1", valueExpression17);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode20 = modelNode1.require((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [1]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + modelType4 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType4.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0" + "'", str11, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertNotNull(modelNode18);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.jboss.dmr.Base64.decode("{\"hi!\" => 0.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Bad Base64 input character at 0: 123(decimal)");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        java.math.BigDecimal bigDecimal5 = booleanModelValue1.asBigDecimal();
        java.math.BigInteger bigInteger6 = booleanModelValue1.asBigInteger();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(bigInteger6);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode22 = modelNode7.setExpression("\"(\\\"hi!\\\" => 0.0)\"", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelNode modelNode23 = modelNode7.clone();
        org.jboss.dmr.BooleanModelValue booleanModelValue25 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double26 = booleanModelValue25.asDouble();
        org.jboss.dmr.ModelValue modelValue27 = booleanModelValue25.copy();
        java.math.BigInteger bigInteger28 = booleanModelValue25.asBigInteger();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode(bigInteger28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode7.set("Expression \"hi!\"", bigInteger28);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray31 = modelNode30.asBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(booleanModelValue25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(modelNode30);
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.lang.String str2 = objectModelValue0.toString();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.jboss.dmr.Base64.encodeFromFile("[97L]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Error encoding from file [97L]");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        boolean boolean17 = listModelValue5.asBoolean();
        int int19 = listModelValue5.asInt(8);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue5.resolve();
        long long21 = listModelValue5.asLong();
        org.jboss.dmr.ModelValue modelValue22 = listModelValue5.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode24 = listModelValue5.getChild("{ \"EXPRESSION_VALUE\" : { \"\" : { \"hi!\" : 0.0 } } }");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(modelValue22);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList10 = propertyModelValue9.asList();
        org.jboss.dmr.ModelValue modelValue11 = propertyModelValue9.protect();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue9.asList();
        java.io.DataOutput dataOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue9.writeExternal(dataOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNodeList10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelNodeList12);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        boolean boolean8 = modelNode3.has("1L");
        org.jboss.dmr.DoubleModelValue doubleModelValue11 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long12 = doubleModelValue11.asLong();
        long long14 = doubleModelValue11.asLong((long) 32);
        java.math.BigInteger bigInteger15 = doubleModelValue11.asBigInteger();
        org.jboss.dmr.ModelNode modelNode16 = modelNode3.set("PROPERTY_VALUE", bigInteger15);
        org.jboss.dmr.IntModelValue intModelValue19 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList24 = modelNode23.asList();
        org.jboss.dmr.ListModelValue listModelValue25 = new org.jboss.dmr.ListModelValue(modelNodeList24);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue25);
        org.jboss.dmr.ModelValue modelValue27 = listModelValue25.resolve();
        int int29 = listModelValue25.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList30 = listModelValue25.asPropertyList();
        boolean boolean31 = intModelValue19.equals((java.lang.Object) listModelValue25);
        java.math.BigDecimal bigDecimal32 = intModelValue19.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode33 = modelNode16.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3CUQ/8AAAAAAAAHg=", bigDecimal32);
        java.io.PrintWriter printWriter34 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode33.format(printWriter34, (int) 'd', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList24);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(propertyList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(modelNode33);
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        boolean boolean11 = intModelValue5.asBoolean(true);
        org.jboss.dmr.ValueExpression valueExpression12 = intModelValue5.asExpression();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        boolean boolean17 = modelNode15.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.PropertyModelValue propertyModelValue18 = new org.jboss.dmr.PropertyModelValue("TYPE_MODEL_VALUE", modelNode15);
        org.jboss.dmr.ModelNode modelNode20 = propertyModelValue18.getChild(0);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver21 = new org.jboss.dmr.ValueExpressionResolver();
        boolean boolean22 = propertyModelValue18.equals((java.lang.Object) valueExpressionResolver21);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = valueExpression12.resolveBoolean(valueExpressionResolver21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean5 = stringModelValue1.equals(stringModelValue3);
        java.lang.String str6 = stringModelValue3.asString();
        org.jboss.dmr.StringModelValue stringModelValue8 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray9 = stringModelValue8.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression12 = stringModelValue11.asExpression();
        boolean boolean14 = stringModelValue11.equals((java.lang.Object) (-1.0d));
        java.lang.String str15 = stringModelValue11.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent16 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean17 = stringModelValue11.equals((java.lang.Object) modelEvent16);
        org.jboss.dmr.StringModelValue stringModelValue19 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue21 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue23 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean24 = stringModelValue21.equals(stringModelValue23);
        byte[] byteArray25 = stringModelValue23.asBytes();
        java.lang.Object obj26 = null;
        boolean boolean27 = stringModelValue23.equals(obj26);
        boolean boolean29 = stringModelValue23.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean30 = stringModelValue19.equals(stringModelValue23);
        boolean boolean31 = stringModelValue11.equals(stringModelValue23);
        boolean boolean32 = stringModelValue8.equals(stringModelValue23);
        org.jboss.dmr.StringModelValue stringModelValue34 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray35 = stringModelValue34.asBytes();
        org.jboss.dmr.LongModelValue longModelValue37 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal38 = longModelValue37.asBigDecimal();
        byte[] byteArray39 = longModelValue37.asBytes();
        boolean boolean40 = stringModelValue34.equals((java.lang.Object) byteArray39);
        java.lang.String str41 = stringModelValue34.toString();
        boolean boolean42 = stringModelValue23.equals(stringModelValue34);
        boolean boolean43 = stringModelValue3.equals(stringModelValue23);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = stringModelValue3.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str6, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str15, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent16 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent16.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\"Expression \\\"true\\\"\"" + "'", str41, "\"Expression \\\"true\\\"\"");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.ModelNode modelNode17 = modelNode1.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.PropertyModelValue propertyModelValue18 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==", modelNode17);
        org.jboss.dmr.ModelNode modelNode21 = modelNode17.set("[1]", (long) 'b');
        org.jboss.dmr.ModelNode modelNode23 = modelNode17.set((int) 'J');
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = modelNode17.add((int) 'e');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        byte[] byteArray1 = null; // flaky: org.jboss.dmr.Base64.decodeFromFile("PROPERTY_VALUE");
        java.lang.String str3 = null; // flaky: org.jboss.dmr.Base64.encodeBytes(byteArray1, (int) (short) 100);
        java.lang.String str4 = null; // flaky: org.jboss.dmr.Base64.encodeBytes(byteArray1);
// flaky:         org.junit.Assert.assertNotNull(byteArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => (\"[(\\\"hi!\\\" => 0.0)]\" => PROPERTY))");
        // The following exception was thrown during execution in test generation
        try {
            double double3 = expressionValue1.asDouble((double) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        int int6 = doubleModelValue1.asInt(2);
        double double8 = doubleModelValue1.asDouble(0.0d);
        org.jboss.dmr.DoubleModelValue doubleModelValue10 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long11 = doubleModelValue10.asLong();
        boolean boolean12 = doubleModelValue10.asBoolean();
        boolean boolean13 = doubleModelValue1.equals(doubleModelValue10);
        java.io.DataOutput dataOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue1.writeExternal(dataOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression14 = expressionValue13.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str17 = expressionValue16.toString();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        boolean boolean24 = expressionValue16.equals((java.lang.Object) property23);
        boolean boolean25 = expressionValue13.equals(expressionValue16);
        boolean boolean26 = expressionValue8.equals((java.lang.Object) boolean25);
        boolean boolean28 = expressionValue8.equals((java.lang.Object) 8);
        org.jboss.dmr.ExpressionValue expressionValue30 = new org.jboss.dmr.ExpressionValue("[{ \"hi!\" : 0.0 }]");
        boolean boolean31 = expressionValue8.equals(expressionValue30);
        java.io.DataOutput dataOutput32 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue30.writeExternal(dataOutput32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "expression \"hi!\"" + "'", str17, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        boolean boolean11 = modelNode8.equals((java.lang.Object) 100L);
        boolean boolean12 = modelNode0.equals(modelNode8);
        java.lang.String str13 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode8);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3D3AAA2hpIUQAAAAA\nAAAAAHg=" + "'", str13, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3D3AAA2hpIUQAAAAA\nAAAAAHg=");
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.get(strArray11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = modelNode12.asPropertyList(propertyList23);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList43 = listModelValue38.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList44 = modelNode32.asPropertyList(propertyList43);
        modelNode12.setNoCopy(modelNode32);
        org.jboss.dmr.ModelNode modelNode46 = modelNode2.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode12);
        org.jboss.dmr.ModelType modelType47 = modelNode46.getType();
        org.jboss.dmr.PropertyModelValue propertyModelValue48 = new org.jboss.dmr.PropertyModelValue("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => (\"[(\\\"hi!\\\" => 0.0)]\" => PROPERTY))", modelNode46);
        org.jboss.dmr.DoubleModelValue doubleModelValue50 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long51 = doubleModelValue50.asLong();
        long long53 = doubleModelValue50.asLong((long) 32);
        java.math.BigInteger bigInteger54 = doubleModelValue50.asBigInteger();
        org.jboss.dmr.ModelNode modelNode55 = modelNode46.set(bigInteger54);
        java.io.ObjectInput objectInput56 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode55.readExternal(objectInput56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + modelType47 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType47.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(modelNode55);
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.add("35", 10);
        org.jboss.dmr.ModelType modelType6 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(modelType6);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        org.jboss.dmr.Property property13 = new org.jboss.dmr.Property("", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(property13);
        java.lang.String str15 = property13.getName();
        org.jboss.dmr.Property property16 = property13.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue17 = new org.jboss.dmr.PropertyModelValue(property13);
        org.jboss.dmr.ModelNode modelNode18 = modelNode1.add(property13);
        org.jboss.dmr.ModelNode modelNode20 = modelNode1.addExpression("");
        org.jboss.dmr.ModelType modelType21 = modelNode1.getType();
        org.jboss.dmr.ModelNode modelNode24 = modelNode1.add("H4sIAAAAAAAAAHNQYQADAAsATXcIAAAA", (long) 'J');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray25 = modelNode24.asBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType6.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + modelType21 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType21.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(modelNode24);
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.setEmptyList();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.PropertyModelValue propertyModelValue18 = new org.jboss.dmr.PropertyModelValue("0.0", modelNode17);
        java.lang.String str20 = modelNode17.asString("\"\\\"1L\\\"\"");
        org.jboss.dmr.ModelNode modelNode21 = modelNode14.addNoCopy(modelNode17);
        byte[] byteArray22 = modelNode17.asBytes();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory24 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream25 = null;
        org.jboss.dmr.Base64.InputStream inputStream27 = new org.jboss.dmr.Base64.InputStream(inputStream25, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream28 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream27);
        org.jboss.dmr.stream.ModelReader modelReader29 = modelStreamFactory24.newModelReader((java.io.InputStream) inputStream28);
        java.io.InputStream inputStream30 = null;
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream(inputStream30, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream34 = new org.jboss.dmr.Base64.InputStream(inputStream30, (int) (byte) 100);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream(inputStream30);
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream(inputStream30, 0);
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory24.newModelReader((java.io.InputStream) inputStream37);
        java.io.InputStream inputStream39 = null;
        org.jboss.dmr.Base64.InputStream inputStream41 = new org.jboss.dmr.Base64.InputStream(inputStream39, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream42 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream41);
        org.jboss.dmr.Base64.InputStream inputStream43 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream41);
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream43, (int) (short) 10);
        org.jboss.dmr.Base64.InputStream inputStream46 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream45);
        org.jboss.dmr.stream.ModelReader modelReader47 = modelStreamFactory24.newModelReader((java.io.InputStream) inputStream45);
        // The following exception was thrown during execution in test generation
        try {
            modelNode17.readExternal((java.io.InputStream) inputStream45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "true" + "'", str20, "true");
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertNotNull(modelStreamFactory24);
        org.junit.Assert.assertNotNull(modelReader29);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertNotNull(modelReader47);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        java.lang.Throwable throwable2 = null;
        org.jboss.dmr.stream.ModelException modelException3 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable2);
        org.jboss.dmr.stream.ModelException modelException4 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException3);
        java.lang.Throwable throwable6 = null;
        org.jboss.dmr.stream.ModelException modelException7 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable6);
        org.jboss.dmr.stream.ModelException modelException8 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException7);
        modelException3.addSuppressed((java.lang.Throwable) modelException7);
        org.jboss.dmr.stream.ModelException modelException10 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException3);
        org.jboss.dmr.stream.ModelException modelException11 = new org.jboss.dmr.stream.ModelException("(\"rO0ABXA=\" => bytes {\n    0x40, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n})", (java.lang.Throwable) modelException3);
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        int int11 = listModelValue5.asInt((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode12 = listModelValue5.asObject();
        boolean boolean14 = listModelValue5.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue20);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue20.resolve();
        int int24 = listModelValue20.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList25 = listModelValue20.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = listModelValue20.asList();
        long long27 = listModelValue20.asLong();
        boolean boolean28 = listModelValue5.equals(listModelValue20);
        boolean boolean30 = listModelValue5.has(0);
        boolean boolean32 = listModelValue5.asBoolean(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode34 = listModelValue5.getChild((int) 'd');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean5 = stringModelValue1.equals(stringModelValue3);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType6 = stringModelValue1.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.jboss.dmr.ModelType.(\"\" => (\"hi!\" => 0.0))");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        java.lang.String str1 = org.jboss.dmr.ValueExpression.quote("{\"hi!\" => 0.0}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\"hi!\" => 0.0}" + "'", str1, "{\"hi!\" => 0.0}");
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        java.lang.String str4 = valueExpression3.resolveString();
        boolean boolean5 = valueExpression3.resolveBoolean();
        java.lang.String str6 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) valueExpression3);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BgAEdHJ1\nZXg=" + "'", str6, "rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BgAEdHJ1\nZXg=");
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        long long5 = intModelValue1.asLong(0L);
        org.jboss.dmr.IntModelValue intModelValue7 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long9 = intModelValue7.asLong((long) 'b');
        java.lang.String str10 = intModelValue7.asString();
        java.math.BigInteger bigInteger11 = intModelValue7.asBigInteger();
        byte[] byteArray12 = intModelValue7.asBytes();
        long long14 = intModelValue7.asLong((long) 8);
        boolean boolean15 = intModelValue1.equals(intModelValue7);
        int int16 = intModelValue1.asInt();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "32" + "'", str10, "32");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(bigDecimal5);
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.clear();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray10 = booleanModelValue9.asBytes();
        java.lang.String str11 = booleanModelValue9.asString();
        int int12 = booleanModelValue9.asInt();
        long long13 = booleanModelValue9.asLong();
        boolean boolean15 = booleanModelValue9.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger16 = booleanModelValue9.asBigInteger();
        byte[] byteArray17 = booleanModelValue9.asBytes();
        org.jboss.dmr.ModelNode modelNode18 = modelNode7.add(byteArray17);
        org.jboss.dmr.ModelNode modelNode21 = modelNode7.set("BYTES_VALUE", false);
        boolean boolean23 = modelNode21.hasDefined((int) 'd');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "true" + "'", str11, "true");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue5.copy();
        boolean boolean19 = listModelValue5.asBoolean(true);
        java.util.List<org.jboss.dmr.Property> propertyList20 = listModelValue5.asPropertyList();
        long long21 = listModelValue5.asLong();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        org.jboss.dmr.ModelNode modelNode5 = org.jboss.dmr.ModelNode.FALSE;
        boolean boolean6 = booleanModelValue1.equals((java.lang.Object) modelNode5);
        java.math.BigInteger bigInteger7 = booleanModelValue1.asBigInteger();
        java.lang.Object obj8 = null;
        boolean boolean9 = booleanModelValue1.equals(obj8);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter14 = modelWriter12.writePropertyStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter16 = modelWriter12.writeBoolean(true);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter14);
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ExpressionValue expressionValue12 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str13 = expressionValue12.asString();
        boolean boolean14 = expressionValue1.equals(expressionValue12);
        org.jboss.dmr.ModelValue modelValue15 = expressionValue1.resolve();
        org.jboss.dmr.ExpressionValue expressionValue17 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression18 = expressionValue17.asExpression();
        boolean boolean19 = expressionValue1.equals(expressionValue17);
        org.jboss.dmr.ModelValue modelValue20 = expressionValue17.resolve();
        java.io.PrintWriter printWriter21 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue17.format(printWriter21, 97, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(modelValue20);
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        java.lang.String str15 = listModelValue14.asString();
        long long16 = listModelValue14.asLong();
        int int18 = listModelValue14.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue19 = listModelValue14.protect();
        boolean boolean21 = listModelValue14.has((int) (short) 100);
        boolean boolean22 = listModelValue5.equals(listModelValue14);
        boolean boolean24 = listModelValue5.has((int) (short) -1);
        long long25 = listModelValue5.asLong();
        java.lang.String str26 = listModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = modelNode30.asList();
        org.jboss.dmr.ListModelValue listModelValue32 = new org.jboss.dmr.ListModelValue(modelNodeList31);
        java.lang.String str33 = listModelValue32.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList34 = listModelValue32.asList();
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList39 = modelNode38.asList();
        org.jboss.dmr.ListModelValue listModelValue40 = new org.jboss.dmr.ListModelValue(modelNodeList39);
        java.lang.String str41 = listModelValue40.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList42 = listModelValue40.asList();
        boolean boolean43 = listModelValue32.equals(listModelValue40);
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList48 = modelNode47.asList();
        org.jboss.dmr.ListModelValue listModelValue49 = new org.jboss.dmr.ListModelValue(modelNodeList48);
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue49);
        org.jboss.dmr.ModelValue modelValue51 = listModelValue49.resolve();
        int int53 = listModelValue49.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList54 = listModelValue49.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList55 = listModelValue49.asPropertyList();
        org.jboss.dmr.ModelValue modelValue56 = listModelValue49.copy();
        boolean boolean57 = listModelValue40.equals(listModelValue49);
        boolean boolean58 = listModelValue5.equals(listModelValue40);
        java.lang.String str59 = listModelValue5.asString();
        boolean boolean61 = listModelValue5.equals((java.lang.Object) 'a');
        java.io.PrintWriter printWriter62 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.formatAsJSON(printWriter62, (int) (short) 100, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str15, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str26, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str33, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList34);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNodeList39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str41, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNodeList48);
        org.junit.Assert.assertNotNull(modelValue51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(propertyList54);
        org.junit.Assert.assertNotNull(propertyList55);
        org.junit.Assert.assertNotNull(modelValue56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str59, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue5 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean6 = stringModelValue3.equals(stringModelValue5);
        byte[] byteArray7 = stringModelValue5.asBytes();
        java.lang.Object obj8 = null;
        boolean boolean9 = stringModelValue5.equals(obj8);
        boolean boolean11 = stringModelValue5.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean12 = stringModelValue1.equals(stringModelValue5);
        org.jboss.dmr.ValueExpression valueExpression13 = stringModelValue1.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = stringModelValue1.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(valueExpression13);
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        boolean boolean18 = listModelValue13.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray19 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean20 = listModelValue13.equals((java.lang.Object) modelNodeArray19);
        boolean boolean21 = typeModelValue5.equals((java.lang.Object) listModelValue13);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue13.resolve();
        org.jboss.dmr.ModelValue modelValue23 = listModelValue13.protect();
        java.lang.Throwable throwable25 = null;
        org.jboss.dmr.stream.ModelException modelException26 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable25);
        org.jboss.dmr.stream.ModelException modelException27 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException26);
        java.lang.Throwable throwable29 = null;
        org.jboss.dmr.stream.ModelException modelException30 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable29);
        org.jboss.dmr.stream.ModelException modelException31 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException30);
        modelException26.addSuppressed((java.lang.Throwable) modelException30);
        boolean boolean33 = listModelValue13.equals((java.lang.Object) modelException26);
        java.util.List<org.jboss.dmr.Property> propertyList34 = listModelValue13.asPropertyList();
        org.jboss.dmr.ModelNode modelNode35 = listModelValue13.asObject();
        java.io.DataOutput dataOutput36 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue13.writeExternal(dataOutput36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(modelNodeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(propertyList34);
        org.junit.Assert.assertNotNull(modelNode35);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        java.lang.String str10 = bigDecimalModelValue7.asString();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        java.lang.String str16 = valueExpression14.getExpressionString();
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue18 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal17);
        boolean boolean19 = bigDecimalModelValue18.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression20 = bigDecimalModelValue18.asExpression();
        int int21 = bigDecimalModelValue18.asInt();
        long long22 = bigDecimalModelValue18.asLong();
        boolean boolean23 = bigDecimalModelValue7.equals(bigDecimalModelValue18);
        org.jboss.dmr.ValueExpression valueExpression24 = bigDecimalModelValue7.asExpression();
        int int25 = bigDecimalModelValue7.asInt();
        double double26 = bigDecimalModelValue7.asDouble();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0" + "'", str10, "1.0");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0" + "'", str16, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int8 = bytesModelValue4.asInt((int) 'a');
        java.lang.String str9 = bytesModelValue4.asString();
        long long10 = bytesModelValue4.asLong();
        java.io.PrintWriter printWriter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue4.formatAsJSON(printWriter11, (int) 'p', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str9, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        boolean boolean12 = listModelValue5.asBoolean(false);
        java.util.List<org.jboss.dmr.Property> propertyList13 = listModelValue5.asPropertyList();
        long long15 = listModelValue5.asLong(3L);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = listModelValue5.asList();
        boolean boolean18 = listModelValue5.asBoolean(false);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(propertyList13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue8 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue8.asObject();
        java.util.Set<java.lang.String> strSet10 = objectModelValue8.getKeys();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue8.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean13 = objectModelValue8.asBoolean();
        int int15 = objectModelValue8.asInt((int) 'b');
        int int17 = objectModelValue8.asInt((int) '#');
        boolean boolean18 = objectModelValue0.equals(objectModelValue8);
        int int19 = objectModelValue8.asInt();
        java.util.Set<java.lang.String> strSet20 = objectModelValue8.getKeys();
        long long22 = objectModelValue8.asLong((long) 0);
        org.jboss.dmr.ModelType modelType23 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode(modelType23);
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        java.lang.String str31 = bytesModelValue30.asString();
        int int32 = bytesModelValue30.asInt();
        long long34 = bytesModelValue30.asLong((long) (short) 1);
        long long35 = bytesModelValue30.asLong();
        java.math.BigDecimal bigDecimal36 = bytesModelValue30.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode37 = modelNode24.set("32", bigDecimal36);
        boolean boolean38 = objectModelValue8.equals((java.lang.Object) bigDecimal36);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) objectModelValue8);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory41 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream42 = null;
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream(inputStream42, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream44);
        org.jboss.dmr.stream.ModelReader modelReader46 = modelStreamFactory41.newModelReader((java.io.InputStream) inputStream45);
        java.io.OutputStream outputStream47 = null;
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream(outputStream47);
        org.jboss.dmr.Base64.OutputStream outputStream49 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream48);
        outputStream48.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelStreamFactory41.newModelWriter((java.io.OutputStream) outputStream48);
        org.jboss.dmr.stream.ModelWriter modelWriter53 = modelWriter52.writeListStart();
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode56 = modelNode55.resolve();
        java.lang.String str57 = modelNode55.asString();
        org.jboss.dmr.ModelNode modelNode59 = modelNode55.set((long) 52);
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.setExpression("hi!", "hi!");
        java.lang.String str65 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode61);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList66 = modelNode61.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode68 = modelNode61.set((double) 0);
        org.jboss.dmr.ModelType modelType70 = org.jboss.dmr.ModelType.PROPERTY;
        char char71 = modelType70.getTypeChar();
        org.jboss.dmr.ModelNode modelNode72 = modelNode61.set("[(\"hi!\" => 0.0)]", modelType70);
        org.jboss.dmr.Property property73 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode72);
        org.jboss.dmr.ModelNode modelNode74 = modelNode59.set(property73);
        org.jboss.dmr.ModelNode modelNode76 = modelNode59.set(false);
        boolean boolean77 = modelNode76.isProtected();
        org.jboss.dmr.ModelType modelType79 = org.jboss.dmr.ModelType.PROPERTY;
        char char80 = modelType79.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue81 = org.jboss.dmr.TypeModelValue.of(modelType79);
        char char82 = modelType79.getTypeChar();
        org.jboss.dmr.ModelNode modelNode83 = modelNode76.set("rO0ABXQAByJbOTdMXSI=", modelType79);
        org.jboss.dmr.stream.ModelWriter modelWriter84 = modelWriter53.writeType(modelType79);
        org.jboss.dmr.stream.ModelWriter modelWriter86 = modelWriter84.writeBoolean(true);
        objectModelValue8.write(modelWriter86);
        boolean boolean89 = objectModelValue8.has("\"TYPE_MODEL_VALUE\"");
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + modelType23 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType23.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str31, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory41);
        org.junit.Assert.assertNotNull(modelReader46);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(modelWriter53);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "true" + "'", str57, "true");
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str65, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList66);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertTrue("'" + modelType70 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType70.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char71 + "' != '" + 'p' + "'", char71 == 'p');
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + modelType79 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType79.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + 'p' + "'", char80 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + 'p' + "'", char82 == 'p');
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertNotNull(modelWriter84);
        org.junit.Assert.assertNotNull(modelWriter86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.set((int) '#');
        java.lang.Boolean boolean4 = modelNode1.asBooleanOrNull();
        byte[] byteArray5 = modelNode1.asBytes();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 35]");
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        boolean boolean12 = listModelValue5.asBoolean(true);
        int int14 = listModelValue5.asInt(1);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue20);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue20.resolve();
        int int24 = listModelValue20.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList25 = listModelValue20.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList26 = listModelValue20.asPropertyList();
        org.jboss.dmr.ModelNode modelNode28 = listModelValue20.getChild((int) (short) 0);
        boolean boolean29 = listModelValue20.asBoolean();
        org.jboss.dmr.ModelValue modelValue30 = listModelValue20.copy();
        boolean boolean31 = listModelValue5.equals(listModelValue20);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode33 = listModelValue5.requireChild((int) '#');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [35]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(propertyList26);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) 100);
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.setExpression("hi!", "hi!");
        java.lang.String str6 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode2);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode2.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set((double) 0);
        boolean boolean10 = modelNode2.isProtected();
        java.math.BigInteger bigInteger11 = modelNode2.asBigIntegerOrNull();
        boolean boolean12 = doubleModelValue1.equals((java.lang.Object) modelNode2);
        org.jboss.dmr.ModelNode modelNode15 = modelNode2.set("\"(\\\"1.0\\\" => [\\n    (\\\"hi!\\\" => expression \\\"hi!\\\"),\\n    \\\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\\\"\\n])\"", "(\"hi!\" => expression \"(\\\"hi!\\\" => 0.0)\")");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str6, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode15);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelValue modelValue13 = objectModelValue0.resolve();
        org.jboss.dmr.ModelValue modelValue14 = objectModelValue0.protect();
        java.util.List<org.jboss.dmr.Property> propertyList15 = objectModelValue0.asPropertyList();
        java.lang.String str16 = objectModelValue0.asString();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertNotNull(propertyList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ModelType modelType9 = typeModelValue5.asType();
        boolean boolean11 = typeModelValue5.asBoolean(true);
        java.lang.String str12 = typeModelValue5.asString();
        boolean boolean13 = typeModelValue5.asBoolean();
        org.jboss.dmr.LongModelValue longModelValue15 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal16 = longModelValue15.asBigDecimal();
        int int17 = longModelValue15.asInt();
        java.lang.String str18 = longModelValue15.asString();
        double double20 = longModelValue15.asDouble((double) 32L);
        boolean boolean21 = typeModelValue5.equals((java.lang.Object) longModelValue15);
        boolean boolean23 = typeModelValue5.asBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property24 = typeModelValue5.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PROPERTY" + "'", str12, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "52" + "'", str18, "52");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        java.lang.String str1 = org.jboss.dmr.ModelValue.jsonEscape("[{}]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\"[{}]\"" + "'", str1, "\"[{}]\"");
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.set((int) '#');
        java.lang.Boolean boolean4 = modelNode1.asBooleanOrNull();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        java.lang.String str9 = modelNode5.toString();
        org.jboss.dmr.ModelNode modelNode10 = modelNode5.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode12 = modelNode5.set(100);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode17 = modelNode15.set((int) '#');
        org.jboss.dmr.ModelNode modelNode18 = modelNode5.setNoCopy("EXPRESSION_VALUE", modelNode17);
        org.jboss.dmr.ModelNode modelNode19 = modelNode18.resolve();
        org.jboss.dmr.ModelType modelType20 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode(modelType20);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        org.jboss.dmr.Property property27 = new org.jboss.dmr.Property("", modelNode26);
        org.jboss.dmr.ModelNode modelNode28 = modelNode21.set(property27);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue(property27);
        org.jboss.dmr.PropertyModelValue propertyModelValue30 = new org.jboss.dmr.PropertyModelValue(property27);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = propertyModelValue30.asList();
        org.jboss.dmr.ModelNode modelNode32 = modelNode19.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList31);
        org.jboss.dmr.IntModelValue intModelValue35 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str36 = intModelValue35.asString();
        double double38 = intModelValue35.asDouble((double) 2);
        java.math.BigDecimal bigDecimal39 = intModelValue35.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode40 = modelNode32.add("(\"hi!\" => 0.0)", bigDecimal39);
        org.jboss.dmr.ModelNode modelNode41 = modelNode1.set(bigDecimal39);
        boolean boolean42 = modelNode1.asBoolean();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.ModelNode> modelNodeList43 = modelNode1.asListOrEmpty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(\"hi!\" => 0.0)" + "'", str9, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + modelType20 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType20.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "32" + "'", str36, "32");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 32.0d + "'", double38 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) 32);
        long long3 = longModelValue1.asLong(97L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        byte[] byteArray11 = longModelValue5.asBytes();
        double double13 = longModelValue5.asDouble((double) 2);
        int int14 = longModelValue5.asInt();
        double double16 = longModelValue5.asDouble((double) (-1.0f));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        org.jboss.dmr.ModelNode modelNode4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode5 = modelNode1.setNoCopy("\"(\\\"rO0ABXNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5n\\nLk51bWJlcoaslR0LlOCLAgAAeHAAAABk\\\" => LONG)\"", modelNode4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        java.lang.String str2 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(10L);
        org.jboss.dmr.ModelNode modelNode6 = modelNode0.insert(0);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.Property property13 = property12.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue14 = new org.jboss.dmr.PropertyModelValue(property13);
        org.jboss.dmr.ModelNode modelNode15 = modelNode6.set(property13);
        org.jboss.dmr.IntModelValue intModelValue17 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str18 = intModelValue17.asString();
        double double20 = intModelValue17.asDouble((double) 2);
        java.math.BigDecimal bigDecimal21 = intModelValue17.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue22 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal21);
        long long23 = bigDecimalModelValue22.asLong();
        long long24 = bigDecimalModelValue22.asLong();
        java.math.BigInteger bigInteger25 = bigDecimalModelValue22.asBigInteger();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode26 = modelNode15.add(bigInteger25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4" + "'", str2, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "32" + "'", str18, "32");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 32.0d + "'", double20 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
        org.junit.Assert.assertNotNull(bigInteger25);
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        boolean boolean3 = typeModelValue2.asBoolean();
        java.lang.String str4 = typeModelValue2.asString();
        boolean boolean6 = typeModelValue2.asBoolean(false);
        org.jboss.dmr.ModelType modelType7 = org.jboss.dmr.ModelType.PROPERTY;
        char char8 = modelType7.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue9 = org.jboss.dmr.TypeModelValue.of(modelType7);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.PROPERTY;
        char char11 = modelType10.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue12 = org.jboss.dmr.TypeModelValue.of(modelType10);
        boolean boolean13 = typeModelValue9.equals(typeModelValue12);
        java.lang.String str14 = typeModelValue12.asString();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.PROPERTY;
        char char16 = modelType15.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue17 = org.jboss.dmr.TypeModelValue.of(modelType15);
        org.jboss.dmr.ModelType modelType18 = org.jboss.dmr.ModelType.PROPERTY;
        char char19 = modelType18.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue20 = org.jboss.dmr.TypeModelValue.of(modelType18);
        boolean boolean21 = typeModelValue17.equals(typeModelValue20);
        java.lang.String str22 = typeModelValue20.asString();
        boolean boolean24 = typeModelValue20.asBoolean(true);
        boolean boolean25 = typeModelValue12.equals(typeModelValue20);
        org.jboss.dmr.ValueExpression valueExpression26 = typeModelValue20.asExpression();
        org.jboss.dmr.ModelType modelType27 = org.jboss.dmr.ModelType.PROPERTY;
        char char28 = modelType27.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue29 = org.jboss.dmr.TypeModelValue.of(modelType27);
        org.jboss.dmr.ModelType modelType30 = org.jboss.dmr.ModelType.PROPERTY;
        char char31 = modelType30.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue32 = org.jboss.dmr.TypeModelValue.of(modelType30);
        boolean boolean33 = typeModelValue29.equals(typeModelValue32);
        boolean boolean34 = typeModelValue20.equals(typeModelValue29);
        org.jboss.dmr.ModelType modelType35 = org.jboss.dmr.ModelType.PROPERTY;
        char char36 = modelType35.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue37 = org.jboss.dmr.TypeModelValue.of(modelType35);
        boolean boolean38 = typeModelValue37.asBoolean();
        boolean boolean39 = typeModelValue20.equals(typeModelValue37);
        org.jboss.dmr.ValueExpression valueExpression40 = typeModelValue37.asExpression();
        org.jboss.dmr.ModelType modelType41 = org.jboss.dmr.ModelType.TYPE;
        org.jboss.dmr.TypeModelValue typeModelValue42 = org.jboss.dmr.TypeModelValue.of(modelType41);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.set("hi!", 0.0d);
        java.lang.String str48 = modelNode44.toString();
        org.jboss.dmr.ModelNode modelNode49 = modelNode44.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode51 = modelNode44.set(100);
        org.jboss.dmr.ModelNode modelNode52 = modelNode43.add(modelNode44);
        org.jboss.dmr.ModelType modelType54 = org.jboss.dmr.ModelType.BYTES;
        char char55 = modelType54.getTypeChar();
        org.jboss.dmr.ModelNode modelNode56 = modelNode43.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType54);
        org.jboss.dmr.TypeModelValue typeModelValue57 = org.jboss.dmr.TypeModelValue.of(modelType54);
        boolean boolean58 = typeModelValue57.asBoolean();
        boolean boolean59 = typeModelValue42.equals(typeModelValue57);
        boolean boolean60 = typeModelValue37.equals(typeModelValue42);
        boolean boolean61 = typeModelValue2.equals(typeModelValue42);
        org.jboss.dmr.ModelValue modelValue62 = typeModelValue2.resolve();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode64 = typeModelValue2.getChild("(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PROPERTY" + "'", str4, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + modelType7 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType7.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + 'p' + "'", char8 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue9);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'p' + "'", char11 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PROPERTY" + "'", str14, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType15.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'p' + "'", char16 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue17);
        org.junit.Assert.assertTrue("'" + modelType18 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType18.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + 'p' + "'", char19 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PROPERTY" + "'", str22, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertTrue("'" + modelType27 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType27.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + 'p' + "'", char28 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue29);
        org.junit.Assert.assertTrue("'" + modelType30 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType30.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + 'p' + "'", char31 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + modelType35 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType35.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char36 + "' != '" + 'p' + "'", char36 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(valueExpression40);
        org.junit.Assert.assertTrue("'" + modelType41 + "' != '" + org.jboss.dmr.ModelType.TYPE + "'", modelType41.equals(org.jboss.dmr.ModelType.TYPE));
        org.junit.Assert.assertNotNull(typeModelValue42);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(\"hi!\" => 0.0)" + "'", str48, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertTrue("'" + modelType54 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType54.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char55 + "' != '" + 'b' + "'", char55 == 'b');
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(typeModelValue57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(modelValue62);
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        double double11 = longModelValue5.asDouble();
        double double12 = longModelValue5.asDouble();
        int int14 = longModelValue5.asInt((int) '4');
        java.math.BigDecimal bigDecimal15 = longModelValue5.asBigDecimal();
        int int16 = longModelValue5.asInt();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean5 = objectModelValue0.asBoolean();
        boolean boolean6 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelValue modelValue8 = objectModelValue0.copy(true);
        long long9 = objectModelValue0.asLong();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelValue8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        boolean boolean8 = listModelValue5.equals((java.lang.Object) true);
        boolean boolean9 = listModelValue5.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList10 = listModelValue5.asList();
        org.jboss.dmr.ModelValue modelValue11 = listModelValue5.protect();
        int int12 = listModelValue5.asInt();
        org.jboss.dmr.ModelValue modelValue13 = listModelValue5.copy();
        org.jboss.dmr.ModelValue modelValue14 = listModelValue5.resolve();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(modelNodeList10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(modelValue14);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue((-1L));
        long long6 = longModelValue4.asLong((long) (byte) -1);
        int int8 = longModelValue4.asInt(0);
        boolean boolean9 = longModelValue1.equals(longModelValue4);
        org.jboss.dmr.ValueExpression valueExpression10 = longModelValue1.asExpression();
        org.jboss.dmr.ModelValue modelValue11 = longModelValue1.copy();
        long long12 = longModelValue1.asLong();
        org.jboss.dmr.DoubleModelValue doubleModelValue14 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long15 = doubleModelValue14.asLong();
        boolean boolean17 = doubleModelValue14.asBoolean(true);
        int int19 = doubleModelValue14.asInt(2);
        double double21 = doubleModelValue14.asDouble(0.0d);
        org.jboss.dmr.DoubleModelValue doubleModelValue23 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long24 = doubleModelValue23.asLong();
        boolean boolean25 = doubleModelValue23.asBoolean();
        byte[] byteArray26 = doubleModelValue23.asBytes();
        int int28 = doubleModelValue23.asInt((int) ' ');
        long long29 = doubleModelValue23.asLong();
        org.jboss.dmr.ValueExpression valueExpression30 = doubleModelValue23.asExpression();
        java.math.BigInteger bigInteger31 = doubleModelValue23.asBigInteger();
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue37);
        org.jboss.dmr.ModelValue modelValue39 = listModelValue37.resolve();
        int int41 = listModelValue37.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList42 = listModelValue37.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList43 = listModelValue37.asList();
        long long44 = listModelValue37.asLong();
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode48 = modelNode45.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList49 = modelNode48.asList();
        org.jboss.dmr.ListModelValue listModelValue50 = new org.jboss.dmr.ListModelValue(modelNodeList49);
        java.lang.String str51 = listModelValue50.asString();
        long long52 = listModelValue50.asLong();
        int int54 = listModelValue50.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue55 = listModelValue50.protect();
        boolean boolean57 = listModelValue50.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue58 = listModelValue50.resolve();
        boolean boolean59 = listModelValue50.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList60 = listModelValue50.asList();
        boolean boolean61 = listModelValue37.equals(listModelValue50);
        java.util.List<org.jboss.dmr.Property> propertyList62 = listModelValue37.asPropertyList();
        boolean boolean63 = doubleModelValue23.equals((java.lang.Object) propertyList62);
        double double65 = doubleModelValue23.asDouble((double) '4');
        boolean boolean66 = doubleModelValue14.equals(doubleModelValue23);
        org.jboss.dmr.ExpressionValue expressionValue68 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue70 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean71 = expressionValue68.equals(expressionValue70);
        org.jboss.dmr.ExpressionValue expressionValue73 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression74 = expressionValue73.asExpression();
        boolean boolean75 = expressionValue68.equals(expressionValue73);
        java.lang.String str76 = expressionValue68.asString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory78 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream79 = null;
        org.jboss.dmr.Base64.InputStream inputStream81 = new org.jboss.dmr.Base64.InputStream(inputStream79, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream82 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream81);
        org.jboss.dmr.stream.ModelReader modelReader83 = modelStreamFactory78.newModelReader((java.io.InputStream) inputStream82);
        java.io.OutputStream outputStream84 = null;
        org.jboss.dmr.Base64.OutputStream outputStream85 = new org.jboss.dmr.Base64.OutputStream(outputStream84);
        org.jboss.dmr.Base64.OutputStream outputStream86 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream85);
        outputStream85.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter89 = modelStreamFactory78.newModelWriter((java.io.OutputStream) outputStream85);
        org.jboss.dmr.stream.ModelWriter modelWriter90 = modelWriter89.writeListStart();
        expressionValue68.write(modelWriter90);
        doubleModelValue14.write(modelWriter90);
        org.jboss.dmr.stream.ModelWriter modelWriter93 = modelWriter90.writeObjectStart();
        // The following exception was thrown during execution in test generation
        try {
            longModelValue1.write(modelWriter93);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting OBJECT_END or STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(propertyList42);
        org.junit.Assert.assertNotNull(modelNodeList43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(modelNodeList49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str51, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(modelValue55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(modelValue58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(modelNodeList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(propertyList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(valueExpression74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(modelStreamFactory78);
        org.junit.Assert.assertNotNull(modelReader83);
        org.junit.Assert.assertNotNull(modelWriter89);
        org.junit.Assert.assertNotNull(modelWriter90);
        org.junit.Assert.assertNotNull(modelWriter93);
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression5 = stringModelValue4.asExpression();
        boolean boolean7 = stringModelValue4.equals((java.lang.Object) (-1.0d));
        java.lang.String str8 = stringModelValue4.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent9 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean10 = stringModelValue4.equals((java.lang.Object) modelEvent9);
        org.jboss.dmr.StringModelValue stringModelValue12 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue14 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean17 = stringModelValue14.equals(stringModelValue16);
        byte[] byteArray18 = stringModelValue16.asBytes();
        java.lang.Object obj19 = null;
        boolean boolean20 = stringModelValue16.equals(obj19);
        boolean boolean22 = stringModelValue16.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean23 = stringModelValue12.equals(stringModelValue16);
        boolean boolean24 = stringModelValue4.equals(stringModelValue16);
        boolean boolean25 = stringModelValue1.equals(stringModelValue16);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = stringModelValue1.asLong(3L);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str8, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent9 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent9.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        double double16 = bigIntegerModelValue4.asDouble(0.0d);
        double double18 = bigIntegerModelValue4.asDouble((double) 100.0f);
        java.math.BigInteger bigInteger19 = bigIntegerModelValue4.asBigInteger();
        java.math.BigInteger bigInteger20 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.BooleanModelValue booleanModelValue22 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray23 = booleanModelValue22.asBytes();
        java.lang.String str24 = booleanModelValue22.asString();
        int int25 = booleanModelValue22.asInt();
        long long26 = booleanModelValue22.asLong();
        boolean boolean28 = booleanModelValue22.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger29 = booleanModelValue22.asBigInteger();
        java.math.BigInteger bigInteger30 = booleanModelValue22.asBigInteger();
        java.math.BigDecimal bigDecimal31 = booleanModelValue22.asBigDecimal();
        boolean boolean32 = bigIntegerModelValue4.equals((java.lang.Object) bigDecimal31);
        java.math.BigDecimal bigDecimal33 = bigIntegerModelValue4.asBigDecimal();
        long long34 = bigIntegerModelValue4.asLong();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(booleanModelValue22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "true" + "'", str24, "true");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue22 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str23 = longModelValue22.asString();
        byte[] byteArray24 = longModelValue22.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue25 = new org.jboss.dmr.BytesModelValue(byteArray24);
        int int28 = inputStream20.read(byteArray24, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.stream.ModelReader modelReader29 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream31 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream31, (int) 'l');
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream31);
        boolean boolean35 = modelReader34.isBigInteger();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(modelReader29);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("(\"35\" => 0.0)");
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.setEmptyList();
        org.jboss.dmr.ModelNode modelNode15 = modelNode14.add();
        org.jboss.dmr.ModelNode modelNode16 = modelNode14.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.clear();
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long21 = booleanModelValue20.asLong();
        org.jboss.dmr.ValueExpression valueExpression22 = booleanModelValue20.asExpression();
        java.lang.String str23 = valueExpression22.toString();
        org.jboss.dmr.ExpressionValue expressionValue25 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression26 = expressionValue25.asExpression();
        boolean boolean27 = valueExpression22.equals(valueExpression26);
        java.lang.String str28 = valueExpression26.resolveString();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver29 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str30 = valueExpression26.resolveString(valueExpressionResolver29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode17.set("AAAAZA==", valueExpression26);
        org.jboss.dmr.BooleanModelValue booleanModelValue32 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double33 = booleanModelValue32.asDouble();
        org.jboss.dmr.ModelValue modelValue34 = booleanModelValue32.copy();
        java.math.BigInteger bigInteger35 = booleanModelValue32.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue36 = new org.jboss.dmr.BigIntegerModelValue(bigInteger35);
        int int38 = bigIntegerModelValue36.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode42 = modelNode39.set("hi!", 0.0d);
        java.lang.String str43 = modelNode39.toString();
        org.jboss.dmr.ModelNode modelNode44 = modelNode39.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode46 = modelNode39.set(100);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode50 = modelNode47.set("hi!", 0.0d);
        java.lang.String str51 = modelNode47.toString();
        org.jboss.dmr.ModelNode modelNode52 = modelNode47.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode57 = modelNode54.set("hi!", 0.0d);
        org.jboss.dmr.Property property58 = new org.jboss.dmr.Property("", modelNode57);
        org.jboss.dmr.ModelNode modelNode59 = modelNode47.set(property58);
        java.lang.String str60 = modelNode59.asString();
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode64.asList();
        org.jboss.dmr.ListModelValue listModelValue66 = new org.jboss.dmr.ListModelValue(modelNodeList65);
        org.jboss.dmr.ModelNode modelNode67 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue66);
        org.jboss.dmr.ModelValue modelValue68 = listModelValue66.resolve();
        int int70 = listModelValue66.asInt((int) (byte) 100);
        boolean boolean71 = listModelValue66.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList72 = listModelValue66.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList73 = modelNode59.asList(modelNodeList72);
        org.jboss.dmr.ModelNode modelNode74 = modelNode46.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList72);
        boolean boolean75 = bigIntegerModelValue36.equals((java.lang.Object) modelNode46);
        org.jboss.dmr.ModelType modelType76 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode77 = new org.jboss.dmr.ModelNode(modelType76);
        org.jboss.dmr.ModelNode modelNode79 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode82 = modelNode79.set("hi!", 0.0d);
        org.jboss.dmr.Property property83 = new org.jboss.dmr.Property("", modelNode82);
        org.jboss.dmr.ModelNode modelNode84 = modelNode77.set(property83);
        org.jboss.dmr.PropertyModelValue propertyModelValue85 = new org.jboss.dmr.PropertyModelValue(property83);
        org.jboss.dmr.PropertyModelValue propertyModelValue86 = new org.jboss.dmr.PropertyModelValue(property83);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList87 = propertyModelValue86.asList();
        boolean boolean88 = bigIntegerModelValue36.equals((java.lang.Object) propertyModelValue86);
        double double90 = bigIntegerModelValue36.asDouble((double) 10);
        java.math.BigInteger bigInteger91 = bigIntegerModelValue36.asBigInteger();
        java.math.BigInteger bigInteger92 = bigIntegerModelValue36.asBigInteger();
        org.jboss.dmr.ModelNode modelNode93 = modelNode31.set(bigInteger92);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Expression \"true\"" + "'", str23, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(booleanModelValue32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(\"hi!\" => 0.0)" + "'", str43, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(\"hi!\" => 0.0)" + "'", str51, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str60, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertNotNull(modelValue68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(modelNodeList72);
        org.junit.Assert.assertNotNull(modelNodeList73);
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + modelType76 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType76.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode82);
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertNotNull(modelNodeList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger91);
        org.junit.Assert.assertNotNull(bigInteger92);
        org.junit.Assert.assertNotNull(modelNode93);
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            inputStream2.mark((int) 'p');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        double double16 = bigIntegerModelValue4.asDouble(0.0d);
        int int17 = bigIntegerModelValue4.asInt();
        org.jboss.dmr.BooleanModelValue booleanModelValue18 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double19 = booleanModelValue18.asDouble();
        org.jboss.dmr.ModelValue modelValue20 = booleanModelValue18.copy();
        java.math.BigInteger bigInteger21 = booleanModelValue18.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue22 = new org.jboss.dmr.BigIntegerModelValue(bigInteger21);
        java.lang.String str23 = bigIntegerModelValue22.asString();
        java.math.BigInteger bigInteger24 = bigIntegerModelValue22.asBigInteger();
        java.math.BigInteger bigInteger25 = bigIntegerModelValue22.asBigInteger();
        double double26 = bigIntegerModelValue22.asDouble();
        int int28 = bigIntegerModelValue22.asInt(32);
        boolean boolean29 = bigIntegerModelValue4.equals(bigIntegerModelValue22);
        boolean boolean31 = bigIntegerModelValue22.has((int) (byte) 0);
        int int33 = bigIntegerModelValue22.asInt(32);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        double double15 = bigIntegerModelValue13.asDouble((double) 'b');
        boolean boolean16 = bigIntegerModelValue4.equals(bigIntegerModelValue13);
        long long17 = bigIntegerModelValue4.asLong();
        int int18 = bigIntegerModelValue4.asInt();
        org.jboss.dmr.DoubleModelValue doubleModelValue20 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long21 = doubleModelValue20.asLong();
        boolean boolean23 = doubleModelValue20.asBoolean(true);
        byte[] byteArray24 = doubleModelValue20.asBytes();
        byte[] byteArray25 = doubleModelValue20.asBytes();
        boolean boolean26 = bigIntegerModelValue4.equals((java.lang.Object) byteArray25);
        org.jboss.dmr.BooleanModelValue booleanModelValue27 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double28 = booleanModelValue27.asDouble();
        org.jboss.dmr.ModelValue modelValue29 = booleanModelValue27.copy();
        java.math.BigInteger bigInteger30 = booleanModelValue27.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue31 = new org.jboss.dmr.BigIntegerModelValue(bigInteger30);
        int int33 = bigIntegerModelValue31.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue34 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double35 = booleanModelValue34.asDouble();
        org.jboss.dmr.ModelValue modelValue36 = booleanModelValue34.copy();
        java.math.BigInteger bigInteger37 = booleanModelValue34.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue38 = new org.jboss.dmr.BigIntegerModelValue(bigInteger37);
        java.lang.String str39 = bigIntegerModelValue38.asString();
        java.math.BigInteger bigInteger40 = bigIntegerModelValue38.asBigInteger();
        boolean boolean41 = bigIntegerModelValue31.equals(bigIntegerModelValue38);
        boolean boolean42 = bigIntegerModelValue4.equals(bigIntegerModelValue38);
        java.io.PrintWriter printWriter43 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigIntegerModelValue38.format(printWriter43, (int) '4', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanModelValue27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream19.resumeEncoding();
        outputStream19.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream19);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        int int33 = inputStream25.read(byteArray29, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (-1));
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (int) 'p');
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream25);
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode40 = org.jboss.dmr.ModelNode.fromStream((java.io.InputStream) inputStream39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelReader38);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelNode modelNode10 = propertyModelValue9.asObject();
        boolean boolean11 = modelNode10.asBoolean();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode13 = modelNode10.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBoolean();
        boolean boolean19 = modelReader15.isListStart();
        boolean boolean20 = modelReader15.isPropertyStart();
        boolean boolean21 = modelReader15.isBytes();
        boolean boolean22 = modelReader15.isUndefined();
        boolean boolean23 = modelReader15.isString();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        java.lang.String str9 = property7.getName();
        org.jboss.dmr.Property property10 = property7.clone();
        org.jboss.dmr.Property property11 = property10.clone();
        org.jboss.dmr.Property property12 = property10.clone();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.FALSE;
        java.math.BigInteger bigInteger1 = booleanModelValue0.asBigInteger();
        boolean boolean3 = booleanModelValue0.asBoolean(true);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertNotNull(bigInteger1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        boolean boolean7 = booleanModelValue1.equals((java.lang.Object) '4');
        long long9 = booleanModelValue1.asLong((long) (short) 0);
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long12 = booleanModelValue11.asLong();
        org.jboss.dmr.ValueExpression valueExpression13 = booleanModelValue11.asExpression();
        java.lang.String str14 = valueExpression13.toString();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression17 = expressionValue16.asExpression();
        boolean boolean18 = valueExpression13.equals(valueExpression17);
        java.lang.String str19 = valueExpression17.resolveString();
        boolean boolean20 = booleanModelValue1.equals((java.lang.Object) str19);
        int int22 = booleanModelValue1.asInt((int) (short) -1);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Expression \"true\"" + "'", str14, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        int int6 = doubleModelValue1.asInt(2);
        double double8 = doubleModelValue1.asDouble(0.0d);
        org.jboss.dmr.DoubleModelValue doubleModelValue10 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long11 = doubleModelValue10.asLong();
        boolean boolean12 = doubleModelValue10.asBoolean();
        boolean boolean13 = doubleModelValue1.equals(doubleModelValue10);
        int int15 = doubleModelValue10.asInt((int) (short) 10);
        java.io.DataOutput dataOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue10.writeExternal(dataOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger10 = booleanModelValue9.asBigInteger();
        byte[] byteArray11 = booleanModelValue9.asBytes();
        org.jboss.dmr.ModelNode modelNode12 = modelNode6.set("expression \"hi!\"", byteArray11);
        outputStream3.write(byteArray11);
        org.jboss.dmr.LongModelValue longModelValue15 = new org.jboss.dmr.LongModelValue(1L);
        long long16 = longModelValue15.asLong();
        byte[] byteArray17 = longModelValue15.asBytes();
        outputStream3.write(byteArray17, 2, (int) (short) -1);
        org.jboss.dmr.BytesModelValue bytesModelValue21 = new org.jboss.dmr.BytesModelValue(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode23 = bytesModelValue21.getChild("org.jboss.dmr.stream.ModelException: (\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => (\"[(\\\"hi!\\\" => 0.0)]\" => PROPERTY))");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isBytes();
        boolean boolean24 = modelReader15.isDouble();
        boolean boolean25 = modelReader15.isPropertyEnd();
        boolean boolean26 = modelReader15.isPropertyEnd();
        boolean boolean27 = modelReader15.isDouble();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = modelReader15.getExpression();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't expression");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.LongModelValue longModelValue7 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str8 = longModelValue7.asString();
        double double10 = longModelValue7.asDouble((double) 32L);
        int int12 = longModelValue7.asInt((int) (short) 10);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory14 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream15 = null;
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream(inputStream15, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream17);
        org.jboss.dmr.stream.ModelReader modelReader19 = modelStreamFactory14.newModelReader((java.io.InputStream) inputStream18);
        java.io.OutputStream outputStream20 = null;
        org.jboss.dmr.Base64.OutputStream outputStream21 = new org.jboss.dmr.Base64.OutputStream(outputStream20);
        org.jboss.dmr.Base64.OutputStream outputStream22 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream21);
        outputStream21.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter25 = modelStreamFactory14.newModelWriter((java.io.OutputStream) outputStream21);
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelWriter25.writeListStart();
        longModelValue7.write(modelWriter25);
        listModelValue5.write(modelWriter25);
        long long30 = listModelValue5.asLong((long) (byte) 10);
        java.io.PrintWriter printWriter31 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.formatAsJSON(printWriter31, (int) '#', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory14);
        org.junit.Assert.assertNotNull(modelReader19);
        org.junit.Assert.assertNotNull(modelWriter25);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(0);
        boolean boolean2 = intModelValue1.asBoolean();
        org.jboss.dmr.ModelType modelType3 = intModelValue1.getType();
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        java.math.BigDecimal bigDecimal9 = intModelValue5.asBigDecimal();
        java.math.BigInteger bigInteger10 = intModelValue5.asBigInteger();
        boolean boolean11 = intModelValue1.equals(intModelValue5);
        boolean boolean13 = intModelValue1.asBoolean(true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType3.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        boolean boolean22 = modelReader21.isLong();
        boolean boolean23 = modelReader21.isListEnd();
        boolean boolean24 = modelReader21.isPropertyEnd();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = modelReader21.getBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't boolean");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream5 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3, (int) (byte) -1);
        outputStream3.suspendEncoding();
        outputStream3.write((int) (byte) 0);
        org.jboss.dmr.Base64.OutputStream outputStream10 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3, (int) 'b');
        outputStream3.write((int) (short) 0);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.get(strArray10);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asList();
        org.jboss.dmr.ListModelValue listModelValue17 = new org.jboss.dmr.ListModelValue(modelNodeList16);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue17);
        org.jboss.dmr.ModelValue modelValue19 = listModelValue17.resolve();
        int int21 = listModelValue17.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue17.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList23 = modelNode11.asPropertyList(propertyList22);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.get(strArray30);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue37);
        org.jboss.dmr.ModelValue modelValue39 = listModelValue37.resolve();
        int int41 = listModelValue37.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList42 = listModelValue37.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList43 = modelNode31.asPropertyList(propertyList42);
        modelNode11.setNoCopy(modelNode31);
        org.jboss.dmr.ModelNode modelNode45 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode11);
        org.jboss.dmr.ModelNode modelNode47 = modelNode11.set(false);
        java.math.BigInteger bigInteger48 = modelNode47.asBigIntegerOrNull();
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode51 = modelNode50.setEmptyList();
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode();
        java.lang.Long long53 = modelNode52.asLongOrNull();
        org.jboss.dmr.BooleanModelValue booleanModelValue56 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger57 = booleanModelValue56.asBigInteger();
        byte[] byteArray58 = booleanModelValue56.asBytes();
        org.jboss.dmr.ModelNode modelNode59 = modelNode52.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", byteArray58);
        org.jboss.dmr.ModelNode modelNode60 = modelNode51.add(byteArray58);
        modelNode47.setNoCopy(modelNode51);
        java.io.DataOutput dataOutput62 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode51.writeExternal(dataOutput62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(propertyList42);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNull(long53);
        org.junit.Assert.assertNotNull(booleanModelValue56);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode60);
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory10 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream11 = null;
        org.jboss.dmr.Base64.InputStream inputStream13 = new org.jboss.dmr.Base64.InputStream(inputStream11, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue15 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str16 = longModelValue15.asString();
        byte[] byteArray17 = longModelValue15.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue18 = new org.jboss.dmr.BytesModelValue(byteArray17);
        int int21 = inputStream13.read(byteArray17, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream13, (-1));
        org.jboss.dmr.stream.ModelReader modelReader24 = modelStreamFactory10.newModelReader((java.io.InputStream) inputStream23);
        boolean boolean25 = modelReader24.isBigInteger();
        boolean boolean26 = modelReader24.isLong();
        boolean boolean27 = modelReader24.isBigDecimal();
        boolean boolean28 = modelReader24.isUndefined();
        boolean boolean29 = modelReader24.isUndefined();
        boolean boolean30 = modelReader24.isListStart();
        boolean boolean31 = modelReader24.isListStart();
        boolean boolean32 = modelReader24.isUndefined();
        boolean boolean33 = modelReader24.isBigInteger();
        boolean boolean34 = modelReader24.isObjectStart();
        boolean boolean35 = modelReader24.isDouble();
        boolean boolean36 = objectModelValue0.equals((java.lang.Object) boolean35);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property37 = objectModelValue0.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNull(modelNode8);
        org.junit.Assert.assertNotNull(modelStreamFactory10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(modelReader24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        boolean boolean6 = doubleModelValue1.asBoolean(false);
        int int7 = doubleModelValue1.asInt();
        int int8 = doubleModelValue1.asInt();
        java.math.BigDecimal bigDecimal9 = doubleModelValue1.asBigDecimal();
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray12 = stringModelValue11.asBytes();
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal15 = longModelValue14.asBigDecimal();
        byte[] byteArray16 = longModelValue14.asBytes();
        boolean boolean17 = stringModelValue11.equals((java.lang.Object) byteArray16);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory19 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream20 = null;
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream(inputStream20, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue24 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str25 = longModelValue24.asString();
        byte[] byteArray26 = longModelValue24.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue27 = new org.jboss.dmr.BytesModelValue(byteArray26);
        int int30 = inputStream22.read(byteArray26, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream22, (-1));
        org.jboss.dmr.stream.ModelReader modelReader33 = modelStreamFactory19.newModelReader((java.io.InputStream) inputStream32);
        java.io.InputStream inputStream34 = null;
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream(inputStream34, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream36);
        byte[] byteArray39 = org.jboss.dmr.Base64.decode("true");
        boolean boolean41 = org.jboss.dmr.Base64.encodeToFile(byteArray39, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int44 = inputStream36.read(byteArray39, (int) 'l', 0);
        org.jboss.dmr.stream.ModelReader modelReader45 = modelStreamFactory19.newModelReader((java.io.InputStream) inputStream36);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory47 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream48 = null;
        org.jboss.dmr.Base64.InputStream inputStream50 = new org.jboss.dmr.Base64.InputStream(inputStream48, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream51 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream50);
        org.jboss.dmr.stream.ModelReader modelReader52 = modelStreamFactory47.newModelReader((java.io.InputStream) inputStream51);
        java.io.OutputStream outputStream53 = null;
        org.jboss.dmr.Base64.OutputStream outputStream54 = new org.jboss.dmr.Base64.OutputStream(outputStream53);
        org.jboss.dmr.Base64.OutputStream outputStream55 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream54);
        outputStream54.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter58 = modelStreamFactory47.newModelWriter((java.io.OutputStream) outputStream54);
        outputStream54.write(2);
        org.jboss.dmr.stream.ModelWriter modelWriter61 = modelStreamFactory19.newModelWriter((java.io.OutputStream) outputStream54);
        boolean boolean62 = stringModelValue11.equals((java.lang.Object) modelWriter61);
        doubleModelValue1.write(modelWriter61);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(modelReader33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(modelReader45);
        org.junit.Assert.assertNotNull(modelStreamFactory47);
        org.junit.Assert.assertNotNull(modelReader52);
        org.junit.Assert.assertNotNull(modelWriter58);
        org.junit.Assert.assertNotNull(modelWriter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        int int3 = booleanModelValue1.asInt();
        double double5 = booleanModelValue1.asDouble((double) 1);
        java.math.BigInteger bigInteger6 = booleanModelValue1.asBigInteger();
        java.lang.Object obj7 = null;
        boolean boolean8 = booleanModelValue1.equals(obj7);
        java.io.DataOutput dataOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            booleanModelValue1.writeExternal(dataOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((-1));
        org.jboss.dmr.ModelValue modelValue2 = intModelValue1.protect();
        org.jboss.dmr.IntModelValue intModelValue4 = new org.jboss.dmr.IntModelValue(10);
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList9 = modelNode8.asList();
        org.jboss.dmr.ListModelValue listModelValue10 = new org.jboss.dmr.ListModelValue(modelNodeList9);
        org.jboss.dmr.ModelValue modelValue11 = listModelValue10.resolve();
        boolean boolean12 = intModelValue4.equals((java.lang.Object) modelValue11);
        long long14 = intModelValue4.asLong(10L);
        org.jboss.dmr.ValueExpression valueExpression15 = intModelValue4.asExpression();
        int int16 = intModelValue4.asInt();
        boolean boolean17 = intModelValue1.equals(intModelValue4);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNodeList9);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        byte[] byteArray1 = org.jboss.dmr.Base64.decode("true");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(byteArray1);
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean7 = expressionValue4.equals(expressionValue6);
        org.jboss.dmr.ExpressionValue expressionValue9 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue11 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean12 = expressionValue9.equals(expressionValue11);
        boolean boolean13 = expressionValue4.equals(expressionValue11);
        org.jboss.dmr.ModelValue modelValue14 = expressionValue4.resolve();
        java.lang.String str15 = expressionValue4.asString();
        org.jboss.dmr.ModelValue modelValue16 = expressionValue4.resolve();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory18 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream19 = null;
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream(inputStream19, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream21);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory18.newModelReader((java.io.InputStream) inputStream22);
        java.io.OutputStream outputStream24 = null;
        org.jboss.dmr.Base64.OutputStream outputStream25 = new org.jboss.dmr.Base64.OutputStream(outputStream24);
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream25);
        outputStream25.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter29 = modelStreamFactory18.newModelWriter((java.io.OutputStream) outputStream25);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter29.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter32 = modelWriter30.writeInt((int) (byte) 10);
        expressionValue4.write(modelWriter30);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.set("hi!", 0.0d);
        org.jboss.dmr.Property property39 = new org.jboss.dmr.Property("", modelNode38);
        java.lang.String[] strArray40 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode41 = modelNode38.get(strArray40);
        org.jboss.dmr.ModelNode modelNode42 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int43 = modelNode42.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.setExpression("hi!", "hi!");
        java.lang.String str48 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode44);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList49 = modelNode44.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode50 = modelNode42.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList49);
        org.jboss.dmr.ModelNode modelNode51 = modelNode41.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList49);
        org.jboss.dmr.LongModelValue longModelValue53 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str54 = longModelValue53.asString();
        double double56 = longModelValue53.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression57 = longModelValue53.asExpression();
        byte[] byteArray58 = longModelValue53.asBytes();
        org.jboss.dmr.ModelNode modelNode59 = modelNode51.add(byteArray58);
        org.jboss.dmr.stream.ModelWriter modelWriter60 = modelWriter30.writeBytes(byteArray58);
        org.jboss.dmr.stream.ModelWriter modelWriter62 = modelWriter60.writeExpression("[]");
        modelNode2.write(modelWriter62);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.Property> propertyList64 = modelNode2.asPropertyListOrEmpty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertNotNull(modelStreamFactory18);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertNotNull(modelWriter29);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelWriter32);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str48, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelWriter60);
        org.junit.Assert.assertNotNull(modelWriter62);
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        long long5 = intModelValue1.asLong();
        long long6 = intModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression7 = intModelValue1.asExpression();
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        java.math.BigInteger bigInteger13 = intModelValue9.asBigInteger();
        boolean boolean15 = intModelValue9.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue17 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long19 = intModelValue17.asLong((long) 'b');
        java.lang.String str20 = intModelValue17.asString();
        boolean boolean21 = intModelValue9.equals(intModelValue17);
        int int23 = intModelValue17.asInt(112);
        double double24 = intModelValue17.asDouble();
        boolean boolean25 = intModelValue1.equals(intModelValue17);
        java.math.BigDecimal bigDecimal26 = intModelValue1.asBigDecimal();
        double double27 = intModelValue1.asDouble();
        boolean boolean29 = intModelValue1.asBoolean(false);
        boolean boolean30 = intModelValue1.asBoolean();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32" + "'", str20, "32");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 32.0d + "'", double24 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 32.0d + "'", double27 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.PropertyModelValue propertyModelValue3 = new org.jboss.dmr.PropertyModelValue("0.0", modelNode2);
        java.lang.String str4 = modelNode2.asString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        long long6 = intModelValue1.asLong();
        boolean boolean7 = intModelValue1.asBoolean();
        java.lang.String str8 = intModelValue1.asString();
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ListModelValue listModelValue16 = new org.jboss.dmr.ListModelValue(modelNodeList15);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue16);
        org.jboss.dmr.ModelValue modelValue18 = listModelValue16.resolve();
        int int20 = listModelValue16.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList21 = listModelValue16.asPropertyList();
        boolean boolean22 = intModelValue10.equals((java.lang.Object) listModelValue16);
        double double23 = intModelValue10.asDouble();
        long long25 = intModelValue10.asLong(1L);
        byte[] byteArray26 = intModelValue10.asBytes();
        boolean boolean27 = intModelValue1.equals(intModelValue10);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType28 = intModelValue1.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(propertyList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 32.0d + "'", double23 == 32.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue7.getChild((int) (short) 0);
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue18 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean19 = expressionValue16.equals(expressionValue18);
        org.jboss.dmr.ExpressionValue expressionValue21 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression22 = expressionValue21.asExpression();
        boolean boolean23 = expressionValue16.equals(expressionValue21);
        java.lang.String str24 = expressionValue16.asString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory26 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream27 = null;
        org.jboss.dmr.Base64.InputStream inputStream29 = new org.jboss.dmr.Base64.InputStream(inputStream27, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream30 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream29);
        org.jboss.dmr.stream.ModelReader modelReader31 = modelStreamFactory26.newModelReader((java.io.InputStream) inputStream30);
        java.io.OutputStream outputStream32 = null;
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream(outputStream32);
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream33);
        outputStream33.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelStreamFactory26.newModelWriter((java.io.OutputStream) outputStream33);
        org.jboss.dmr.stream.ModelWriter modelWriter38 = modelWriter37.writeListStart();
        expressionValue16.write(modelWriter38);
        propertyModelValue7.write(modelWriter38);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode42 = propertyModelValue7.requireChild("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np?b24gImhpISJiAAAAAQF4' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(modelStreamFactory26);
        org.junit.Assert.assertNotNull(modelReader31);
        org.junit.Assert.assertNotNull(modelWriter37);
        org.junit.Assert.assertNotNull(modelWriter38);
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory6 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream7 = null;
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream10 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream9);
        org.jboss.dmr.stream.ModelReader modelReader11 = modelStreamFactory6.newModelReader((java.io.InputStream) inputStream10);
        java.io.OutputStream outputStream12 = null;
        org.jboss.dmr.Base64.OutputStream outputStream13 = new org.jboss.dmr.Base64.OutputStream(outputStream12);
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream13);
        outputStream13.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelStreamFactory6.newModelWriter((java.io.OutputStream) outputStream13);
        org.jboss.dmr.stream.ModelWriter modelWriter18 = modelWriter17.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter20 = modelWriter18.writeInt((int) (byte) 10);
        stringModelValue4.write(modelWriter20);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter20.writeBoolean(false);
        stringModelValue1.write(modelWriter23);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter25 = modelWriter23.writePropertyEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting ',' or LIST_END");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertNotNull(modelStreamFactory6);
        org.junit.Assert.assertNotNull(modelReader11);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter18);
        org.junit.Assert.assertNotNull(modelWriter20);
        org.junit.Assert.assertNotNull(modelWriter23);
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.setExpression("hi!", "hi!");
        java.lang.String str6 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode2);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode2.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList7);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        org.jboss.dmr.Property property15 = new org.jboss.dmr.Property("", modelNode14);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.get(strArray16);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList22 = modelNode21.asList();
        org.jboss.dmr.ListModelValue listModelValue23 = new org.jboss.dmr.ListModelValue(modelNodeList22);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue23);
        org.jboss.dmr.ModelValue modelValue25 = listModelValue23.resolve();
        int int27 = listModelValue23.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList28 = listModelValue23.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList29 = modelNode17.asPropertyList(propertyList28);
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode34 = modelNode31.set("hi!", 0.0d);
        org.jboss.dmr.Property property35 = new org.jboss.dmr.Property("", modelNode34);
        java.lang.String[] strArray36 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.get(strArray36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode41 = modelNode38.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList42 = modelNode41.asList();
        org.jboss.dmr.ListModelValue listModelValue43 = new org.jboss.dmr.ListModelValue(modelNodeList42);
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue43);
        org.jboss.dmr.ModelValue modelValue45 = listModelValue43.resolve();
        int int47 = listModelValue43.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList48 = listModelValue43.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList49 = modelNode37.asPropertyList(propertyList48);
        modelNode17.setNoCopy(modelNode37);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode55 = modelNode52.set("hi!", 0.0d);
        org.jboss.dmr.Property property56 = new org.jboss.dmr.Property("", modelNode55);
        java.lang.String[] strArray57 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode58 = modelNode55.get(strArray57);
        org.jboss.dmr.ModelNode modelNode59 = modelNode37.get(strArray57);
        org.jboss.dmr.Property property61 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode59, true);
        org.jboss.dmr.ModelNode modelNode62 = modelNode8.add(property61);
        org.jboss.dmr.ModelNode modelNode63 = modelNode8.addEmptyObject();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str6, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNodeList22);
        org.junit.Assert.assertNotNull(modelValue25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(propertyList28);
        org.junit.Assert.assertNotNull(propertyList29);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNodeList42);
        org.junit.Assert.assertNotNull(modelValue45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(propertyList48);
        org.junit.Assert.assertNotNull(propertyList49);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNotNull(modelNode63);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        java.lang.String str20 = bytesModelValue19.asString();
        int int21 = bytesModelValue19.asInt();
        int int22 = bytesModelValue19.asInt();
        int int24 = bytesModelValue19.asInt(112);
        boolean boolean25 = bytesModelValue12.equals(bytesModelValue19);
        org.jboss.dmr.ObjectModelValue objectModelValue26 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode27 = objectModelValue26.asObject();
        org.jboss.dmr.ModelValue modelValue28 = objectModelValue26.protect();
        java.util.List<org.jboss.dmr.Property> propertyList29 = objectModelValue26.asPropertyList();
        org.jboss.dmr.LongModelValue longModelValue31 = new org.jboss.dmr.LongModelValue(97L);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory33 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream34 = null;
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream(inputStream34, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream36);
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory33.newModelReader((java.io.InputStream) inputStream37);
        java.io.OutputStream outputStream39 = null;
        org.jboss.dmr.Base64.OutputStream outputStream40 = new org.jboss.dmr.Base64.OutputStream(outputStream39);
        org.jboss.dmr.Base64.OutputStream outputStream41 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40);
        outputStream40.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter44 = modelStreamFactory33.newModelWriter((java.io.OutputStream) outputStream40);
        org.jboss.dmr.stream.ModelWriter modelWriter45 = modelWriter44.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue47 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray48 = intModelValue47.asBytes();
        int int50 = intModelValue47.asInt(0);
        java.math.BigInteger bigInteger51 = intModelValue47.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelWriter45.writeBigInteger(bigInteger51);
        org.jboss.dmr.stream.ModelWriter modelWriter53 = modelWriter45.writeListStart();
        longModelValue31.write(modelWriter53);
        objectModelValue26.write(modelWriter53);
        org.jboss.dmr.stream.ModelWriter modelWriter56 = modelWriter53.writeListStart();
        bytesModelValue19.write(modelWriter53);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str20, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelValue28);
        org.junit.Assert.assertNotNull(propertyList29);
        org.junit.Assert.assertNotNull(modelStreamFactory33);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertNotNull(modelWriter44);
        org.junit.Assert.assertNotNull(modelWriter45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(modelWriter53);
        org.junit.Assert.assertNotNull(modelWriter56);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        int int11 = listModelValue5.asInt((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode12 = listModelValue5.asObject();
        boolean boolean14 = listModelValue5.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue20);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue20.resolve();
        int int24 = listModelValue20.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList25 = listModelValue20.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = listModelValue20.asList();
        long long27 = listModelValue20.asLong();
        boolean boolean28 = listModelValue5.equals(listModelValue20);
        boolean boolean29 = listModelValue20.asBoolean();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("(\"Expression \\\"true\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0)))", false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6);
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream7, 0);
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream9, (int) (byte) 10);
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream11);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = modelNodeFactory0.readFrom((java.io.InputStream) inputStream11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        boolean boolean2 = org.jboss.dmr.Base64.decodeToFile("\"[(\\\"hi!\\\" => expression \\\"hi!\\\"),bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }]\"", "{\n    \"\" : {\n        \"hi!\" : 0.0\n    }\n}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        boolean boolean12 = listModelValue5.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue13 = listModelValue5.resolve();
        boolean boolean14 = listModelValue5.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue5.asList();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory17 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader22 = modelStreamFactory17.newModelReader((java.io.InputStream) inputStream21);
        java.io.OutputStream outputStream23 = null;
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream(outputStream23);
        org.jboss.dmr.Base64.OutputStream outputStream25 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream24);
        outputStream24.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelStreamFactory17.newModelWriter((java.io.OutputStream) outputStream24);
        org.jboss.dmr.stream.ModelWriter modelWriter29 = modelWriter28.writeListStart();
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode32 = modelNode31.resolve();
        java.lang.String str33 = modelNode31.asString();
        org.jboss.dmr.ModelNode modelNode35 = modelNode31.set((long) 52);
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.setExpression("hi!", "hi!");
        java.lang.String str41 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode37);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList42 = modelNode37.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode44 = modelNode37.set((double) 0);
        org.jboss.dmr.ModelType modelType46 = org.jboss.dmr.ModelType.PROPERTY;
        char char47 = modelType46.getTypeChar();
        org.jboss.dmr.ModelNode modelNode48 = modelNode37.set("[(\"hi!\" => 0.0)]", modelType46);
        org.jboss.dmr.Property property49 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode35.set(property49);
        org.jboss.dmr.ModelNode modelNode52 = modelNode35.set(false);
        boolean boolean53 = modelNode52.isProtected();
        org.jboss.dmr.ModelType modelType55 = org.jboss.dmr.ModelType.PROPERTY;
        char char56 = modelType55.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue57 = org.jboss.dmr.TypeModelValue.of(modelType55);
        char char58 = modelType55.getTypeChar();
        org.jboss.dmr.ModelNode modelNode59 = modelNode52.set("rO0ABXQAByJbOTdMXSI=", modelType55);
        org.jboss.dmr.stream.ModelWriter modelWriter60 = modelWriter29.writeType(modelType55);
        listModelValue5.write(modelWriter29);
        org.jboss.dmr.ModelValue modelValue62 = listModelValue5.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode63 = listModelValue5.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelStreamFactory17);
        org.junit.Assert.assertNotNull(modelReader22);
        org.junit.Assert.assertNotNull(modelWriter28);
        org.junit.Assert.assertNotNull(modelWriter29);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "true" + "'", str33, "true");
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str41, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList42);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertTrue("'" + modelType46 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType46.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + 'p' + "'", char47 == 'p');
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + modelType55 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType55.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char56 + "' != '" + 'p' + "'", char56 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue57);
        org.junit.Assert.assertTrue("'" + char58 + "' != '" + 'p' + "'", char58 == 'p');
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelWriter60);
        org.junit.Assert.assertNotNull(modelValue62);
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set(property11);
        org.jboss.dmr.ModelType modelType13 = org.jboss.dmr.ModelType.BOOLEAN;
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.set(modelType13);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(modelType16);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        org.jboss.dmr.ModelNode modelNode24 = modelNode17.set(property23);
        org.jboss.dmr.ModelNode modelNode25 = property23.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue(property23);
        java.util.List<org.jboss.dmr.Property> propertyList27 = propertyModelValue26.asPropertyList();
        org.jboss.dmr.ModelNode modelNode29 = propertyModelValue26.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode30 = modelNode29.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue33 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long34 = booleanModelValue33.asLong();
        org.jboss.dmr.ValueExpression valueExpression35 = booleanModelValue33.asExpression();
        java.lang.String str36 = valueExpression35.toString();
        org.jboss.dmr.ExpressionValue expressionValue38 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression39 = expressionValue38.asExpression();
        boolean boolean40 = valueExpression35.equals(valueExpression39);
        org.jboss.dmr.LongModelValue longModelValue42 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal43 = longModelValue42.asBigDecimal();
        int int44 = longModelValue42.asInt();
        org.jboss.dmr.ValueExpression valueExpression45 = longModelValue42.asExpression();
        boolean boolean46 = valueExpression39.equals(valueExpression45);
        int int47 = valueExpression45.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue49 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression50 = expressionValue49.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver51 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str52 = valueExpression50.resolveString(valueExpressionResolver51);
        java.math.BigInteger bigInteger53 = valueExpression45.resolveBigInteger(valueExpressionResolver51);
        org.jboss.dmr.ModelNode modelNode54 = modelNode29.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression45);
        org.jboss.dmr.ModelNode modelNode57 = modelNode54.add("AQ==", false);
        org.jboss.dmr.ModelType modelType58 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode59 = new org.jboss.dmr.ModelNode(modelType58);
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.set("hi!", 0.0d);
        org.jboss.dmr.Property property65 = new org.jboss.dmr.Property("", modelNode64);
        org.jboss.dmr.ModelNode modelNode66 = modelNode59.set(property65);
        org.jboss.dmr.PropertyModelValue propertyModelValue67 = new org.jboss.dmr.PropertyModelValue(property65);
        org.jboss.dmr.PropertyModelValue propertyModelValue68 = new org.jboss.dmr.PropertyModelValue(property65);
        org.jboss.dmr.ModelNode modelNode69 = modelNode54.add(property65);
        org.jboss.dmr.ModelNode modelNode70 = modelNode54.addEmptyObject();
        org.jboss.dmr.ModelNode modelNode71 = modelNode12.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3CUQ/8AAAAAAAAHg=", modelNode54);
        org.jboss.dmr.ModelNode modelNode73 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue75 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger76 = booleanModelValue75.asBigInteger();
        org.jboss.dmr.ModelNode modelNode77 = modelNode73.add(bigInteger76);
        org.jboss.dmr.ModelNode modelNode78 = modelNode73.clone();
        org.jboss.dmr.BooleanModelValue booleanModelValue79 = org.jboss.dmr.BooleanModelValue.TRUE;
        java.math.BigInteger bigInteger80 = booleanModelValue79.asBigInteger();
        boolean boolean81 = booleanModelValue79.asBoolean();
        java.math.BigInteger bigInteger82 = booleanModelValue79.asBigInteger();
        org.jboss.dmr.ModelNode modelNode83 = modelNode78.add(bigInteger82);
        org.jboss.dmr.Property property84 = new org.jboss.dmr.Property("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", modelNode78);
        org.jboss.dmr.ModelNode modelNode85 = modelNode71.set(property84);
        java.lang.String str86 = property84.getName();
        java.lang.String str87 = property84.getName();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + modelType13 + "' != '" + org.jboss.dmr.ModelType.BOOLEAN + "'", modelType13.equals(org.jboss.dmr.ModelType.BOOLEAN));
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType16.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(propertyList27);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(booleanModelValue33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(valueExpression35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Expression \"true\"" + "'", str36, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(valueExpression45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(valueExpression50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertTrue("'" + modelType58 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType58.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(booleanModelValue75);
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(modelNode77);
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertNotNull(booleanModelValue79);
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertNotNull(modelNode85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==" + "'", str86, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==" + "'", str87, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==");
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        byte[] byteArray3 = doubleModelValue1.asBytes();
        boolean boolean5 = doubleModelValue1.has("(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => 2)");
        double double6 = doubleModelValue1.asDouble();
        org.jboss.dmr.DoubleModelValue doubleModelValue7 = null;
        boolean boolean8 = doubleModelValue1.equals(doubleModelValue7);
        long long9 = doubleModelValue1.asLong();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.copy(false);
        int int8 = objectModelValue0.asInt(8);
        org.jboss.dmr.ModelType modelType9 = objectModelValue0.getType();
        java.util.List<org.jboss.dmr.Property> propertyList10 = objectModelValue0.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.OBJECT + "'", modelType9.equals(org.jboss.dmr.ModelType.OBJECT));
        org.junit.Assert.assertNotNull(propertyList10);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        double double5 = bytesModelValue4.asDouble();
        int int7 = bytesModelValue4.asInt((int) '#');
        int int9 = bytesModelValue4.asInt((int) (short) 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.9E-324d + "'", double5 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.ModelValue modelValue4 = longModelValue1.copy();
        double double5 = longModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        int int11 = listModelValue5.asInt((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode12 = listModelValue5.asObject();
        boolean boolean14 = listModelValue5.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue20);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue20.resolve();
        int int24 = listModelValue20.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList25 = listModelValue20.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = listModelValue20.asList();
        long long27 = listModelValue20.asLong();
        boolean boolean28 = listModelValue5.equals(listModelValue20);
        int int30 = listModelValue20.asInt((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode32 = listModelValue20.removeChild((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [1]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str5 = modelNode3.asString("true");
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long9 = modelNode8.asLong();
        org.jboss.dmr.ValueExpression valueExpression10 = modelNode8.asExpression();
        java.math.BigDecimal bigDecimal11 = valueExpression10.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode(bigDecimal11);
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode15 = modelNode3.setNoCopy("35", modelNode14);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        boolean boolean24 = modelNode21.hasDefined((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode25 = modelNode15.setNoCopy("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4", modelNode21);
        boolean boolean26 = expressionValue1.equals((java.lang.Object) modelNode21);
        org.jboss.dmr.ModelValue modelValue27 = expressionValue1.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = modelValue27.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "10" + "'", str5, "10");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(modelValue27);
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        java.lang.String[] strArray48 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode49 = modelNode46.get(strArray48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode28.get(strArray48);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode50, true);
        org.jboss.dmr.PropertyModelValue propertyModelValue53 = new org.jboss.dmr.PropertyModelValue(property52);
        org.jboss.dmr.Property property54 = propertyModelValue53.asProperty();
        org.jboss.dmr.ModelValue modelValue55 = propertyModelValue53.resolve();
        java.lang.String str56 = propertyModelValue53.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList57 = propertyModelValue53.asList();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode59 = propertyModelValue53.getChild((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(modelValue55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))" + "'", str56, "(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNodeList57);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        boolean boolean17 = objectModelValue7.equals(objectModelValue15);
        boolean boolean18 = objectModelValue7.asBoolean();
        java.io.DataOutput dataOutput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue7.writeExternal(dataOutput19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) 10);
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("(\"hi!\" => expression \"(\\\"hi!\\\" => 0.0)\")", (long) (short) -1);
        org.jboss.dmr.ModelType modelType5 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(modelType5);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode6.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue14 = new org.jboss.dmr.PropertyModelValue(property12);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = propertyModelValue14.asList();
        org.jboss.dmr.ModelValue modelValue16 = propertyModelValue14.protect();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = propertyModelValue14.asList();
        org.jboss.dmr.ModelNode modelNode18 = modelNode1.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList17);
        org.jboss.dmr.ModelNode modelNode20 = modelNode1.add((double) 10.0f);
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.add("H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgnC2F\ngdlAz6ACAF+odLA1AAAA", "100.0");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType5.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isObjectEnd();
        boolean boolean19 = modelReader15.isType();
        boolean boolean20 = modelReader15.isListStart();
        boolean boolean21 = modelReader15.isPropertyEnd();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = modelReader15.getBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't bytes");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        byte[] byteArray6 = intModelValue1.asBytes();
        long long8 = intModelValue1.asLong((long) 8);
        boolean boolean10 = intModelValue1.equals((java.lang.Object) 97L);
        byte[] byteArray11 = intModelValue1.asBytes();
        int int13 = intModelValue1.asInt((int) 'b');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelNode modelNode7 = modelNode3.setExpression("hi!", "(\"hi!\" => 0.0)");
        java.util.Set<java.lang.String> strSet8 = modelNode7.keys();
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str11 = intModelValue10.asString();
        double double13 = intModelValue10.asDouble((double) 2);
        java.math.BigDecimal bigDecimal14 = intModelValue10.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode(bigDecimal14);
        org.jboss.dmr.ModelNode modelNode16 = modelNode15.clear();
        org.jboss.dmr.ModelNode modelNode17 = modelNode16.clone();
        modelNode7.setNoCopy(modelNode16);
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.resolve();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = modelNode16.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode19);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        java.lang.String str1 = org.jboss.dmr.ModelValue.quote("bytes { 0x01 }");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\"bytes { 0x01 }\"" + "'", str1, "\"bytes { 0x01 }\"");
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue3 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger4 = booleanModelValue3.asBigInteger();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.add(bigInteger4);
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.clone();
        java.lang.String str8 = modelNode6.toJSONString(false);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("PROPERTY_VALUE", modelNode6);
        java.io.InputStream inputStream10 = null;
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream(inputStream10, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str15 = longModelValue14.asString();
        byte[] byteArray16 = longModelValue14.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue17 = new org.jboss.dmr.BytesModelValue(byteArray16);
        int int20 = inputStream12.read(byteArray16, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream12, (-1));
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream22);
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream23);
        // The following exception was thrown during execution in test generation
        try {
            modelNode6.readExternal((java.io.InputStream) inputStream23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1]" + "'", str8, "[1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        org.jboss.dmr.ModelValue modelValue3 = booleanModelValue1.protect();
        org.jboss.dmr.ValueExpression valueExpression4 = booleanModelValue1.asExpression();
        java.lang.String str5 = valueExpression4.getExpressionString();
        org.jboss.dmr.ExpressionValue expressionValue7 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression8 = expressionValue7.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver9 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str10 = valueExpression8.resolveString(valueExpressionResolver9);
        java.lang.String str12 = valueExpressionResolver9.resolvePart("{ \"35\" : 0.0 }");
        java.lang.String str14 = valueExpressionResolver9.resolvePart("{\n    \"EXPRESSION_VALUE\" : 35\n}");
        org.jboss.dmr.BooleanModelValue booleanModelValue15 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double16 = booleanModelValue15.asDouble();
        org.jboss.dmr.ModelValue modelValue17 = booleanModelValue15.copy();
        java.math.BigInteger bigInteger18 = booleanModelValue15.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue19 = new org.jboss.dmr.BigIntegerModelValue(bigInteger18);
        java.lang.String str20 = bigIntegerModelValue19.asString();
        org.jboss.dmr.BooleanModelValue booleanModelValue21 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double22 = booleanModelValue21.asDouble();
        org.jboss.dmr.ModelValue modelValue23 = booleanModelValue21.copy();
        java.math.BigInteger bigInteger24 = booleanModelValue21.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue25 = new org.jboss.dmr.BigIntegerModelValue(bigInteger24);
        int int27 = bigIntegerModelValue25.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.lang.String str32 = modelNode28.toString();
        org.jboss.dmr.ModelNode modelNode33 = modelNode28.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode35 = modelNode28.set(100);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.set("hi!", 0.0d);
        java.lang.String str40 = modelNode36.toString();
        org.jboss.dmr.ModelNode modelNode41 = modelNode36.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        org.jboss.dmr.ModelNode modelNode48 = modelNode36.set(property47);
        java.lang.String str49 = modelNode48.asString();
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode53 = modelNode50.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList54 = modelNode53.asList();
        org.jboss.dmr.ListModelValue listModelValue55 = new org.jboss.dmr.ListModelValue(modelNodeList54);
        org.jboss.dmr.ModelNode modelNode56 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue55);
        org.jboss.dmr.ModelValue modelValue57 = listModelValue55.resolve();
        int int59 = listModelValue55.asInt((int) (byte) 100);
        boolean boolean60 = listModelValue55.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList61 = listModelValue55.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = modelNode48.asList(modelNodeList61);
        org.jboss.dmr.ModelNode modelNode63 = modelNode35.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList61);
        boolean boolean64 = bigIntegerModelValue25.equals((java.lang.Object) modelNode35);
        boolean boolean65 = bigIntegerModelValue19.equals(bigIntegerModelValue25);
        boolean boolean67 = bigIntegerModelValue25.equals((java.lang.Object) "{}");
        org.jboss.dmr.ValueExpression valueExpression68 = bigIntegerModelValue25.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver69 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal70 = valueExpression68.resolveBigDecimal(valueExpressionResolver69);
        java.lang.String str71 = valueExpressionResolver9.resolve(valueExpression68);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = valueExpression4.resolveLong(valueExpressionResolver9);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"false\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNotNull(modelValue3);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "false" + "'", str5, "false");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(booleanModelValue15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(booleanModelValue21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(\"hi!\" => 0.0)" + "'", str32, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(\"hi!\" => 0.0)" + "'", str40, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str49, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNodeList54);
        org.junit.Assert.assertNotNull(modelValue57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(modelNodeList61);
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(valueExpression68);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        boolean boolean4 = objectModelValue0.equals((java.lang.Object) "-1");
        org.jboss.dmr.ModelValue modelValue5 = objectModelValue0.copy();
        boolean boolean7 = objectModelValue0.has("LIST");
        org.jboss.dmr.ModelValue modelValue9 = objectModelValue0.copy(true);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelValue9);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ObjectModelValue objectModelValue2 = null;
        boolean boolean3 = objectModelValue0.equals(objectModelValue2);
        java.lang.String str4 = objectModelValue0.asString();
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.copy(false);
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue0.copy();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue0.getChild("\"(\\\"hi!\\\" => 0.0)\"");
        java.io.PrintWriter printWriter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.format(printWriter10, (int) 'a', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertNotNull(modelNode9);
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.resolve();
        java.lang.String str3 = modelNode2.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode2.set("Expression \"1.0\"", false);
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger10 = booleanModelValue9.asBigInteger();
        java.math.BigInteger bigInteger11 = booleanModelValue9.asBigInteger();
        java.lang.String str12 = booleanModelValue9.asString();
        java.math.BigDecimal bigDecimal13 = booleanModelValue9.asBigDecimal();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = modelNode6.add("TYPE_MODEL_VALUE", bigDecimal13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "true" + "'", str12, "true");
        org.junit.Assert.assertNotNull(bigDecimal13);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver0 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long3 = booleanModelValue2.asLong();
        org.jboss.dmr.ValueExpression valueExpression4 = booleanModelValue2.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue5 = new org.jboss.dmr.ExpressionValue(valueExpression4);
        java.lang.String str6 = valueExpression4.getExpressionString();
        java.lang.String str7 = valueExpressionResolver0.resolve(valueExpression4);
        java.lang.String str9 = valueExpressionResolver0.resolvePart("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQACFBST1BFUlRZ");
        java.lang.String str11 = valueExpressionResolver0.resolvePart("{\n    \"EXPRESSION_VALUE\" : {\n        \"\" : {\n            \"hi!\" : 0.0\n        }\n    }\n}");
        org.junit.Assert.assertNotNull(valueExpressionResolver0);
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "true" + "'", str6, "true");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        int int3 = longModelValue1.asInt();
        org.jboss.dmr.ValueExpression valueExpression4 = longModelValue1.asExpression();
        int int6 = longModelValue1.asInt((int) 'p');
        long long7 = longModelValue1.asLong();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode("(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))");
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue((-1L));
        long long13 = longModelValue11.asLong((long) (byte) -1);
        int int15 = longModelValue11.asInt(0);
        org.jboss.dmr.ValueExpression valueExpression16 = longModelValue11.asExpression();
        org.jboss.dmr.ValueExpression valueExpression17 = longModelValue11.asExpression();
        org.jboss.dmr.ModelNode modelNode18 = modelNode9.set(valueExpression17);
        org.jboss.dmr.ModelNode modelNode20 = modelNode9.set((long) 32);
        boolean boolean21 = longModelValue1.equals((java.lang.Object) modelNode20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.Property> propertyList22 = modelNode20.asPropertyListOrEmpty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        boolean boolean12 = longModelValue1.asBoolean(false);
        boolean boolean14 = longModelValue1.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long18 = modelNode17.asLong();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.Property property45 = new org.jboss.dmr.Property("", modelNode44);
        java.lang.String[] strArray46 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.get(strArray46);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList52 = modelNode51.asList();
        org.jboss.dmr.ListModelValue listModelValue53 = new org.jboss.dmr.ListModelValue(modelNodeList52);
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue53);
        org.jboss.dmr.ModelValue modelValue55 = listModelValue53.resolve();
        int int57 = listModelValue53.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList58 = listModelValue53.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList59 = modelNode47.asPropertyList(propertyList58);
        modelNode27.setNoCopy(modelNode47);
        org.jboss.dmr.ModelNode modelNode61 = modelNode17.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode27);
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode66 = modelNode63.set("hi!", 0.0d);
        org.jboss.dmr.Property property67 = new org.jboss.dmr.Property("", modelNode66);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode69 = modelNode66.get(strArray68);
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int71 = modelNode70.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode72 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode75 = modelNode72.setExpression("hi!", "hi!");
        java.lang.String str76 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode72);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList77 = modelNode72.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode78 = modelNode70.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList77);
        org.jboss.dmr.ModelNode modelNode79 = modelNode69.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList77);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList80 = modelNode17.asList(modelNodeList77);
        org.jboss.dmr.PropertyModelValue propertyModelValue82 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode17, false);
        java.lang.String str83 = modelNode17.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode86 = modelNode17.set("Expression \"true\"", (long) (byte) -1);
        boolean boolean87 = longModelValue1.equals((java.lang.Object) "Expression \"true\"");
        byte[] byteArray88 = longModelValue1.asBytes();
        java.lang.String str89 = org.jboss.dmr.Base64.encodeBytes(byteArray88);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNodeList52);
        org.junit.Assert.assertNotNull(modelValue55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(propertyList58);
        org.junit.Assert.assertNotNull(propertyList59);
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str76, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList77);
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertNotNull(modelNode79);
        org.junit.Assert.assertNotNull(modelNodeList80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))" + "'", str83, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "AAAAAAAAAAE=" + "'", str89, "AAAAAAAAAAE=");
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = modelNode1.asObject();
        org.jboss.dmr.ModelNode modelNode10 = modelNode9.clear();
        org.jboss.dmr.LongModelValue longModelValue12 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str13 = longModelValue12.asString();
        byte[] byteArray14 = longModelValue12.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue15 = new org.jboss.dmr.BytesModelValue(byteArray14);
        java.lang.String str16 = bytesModelValue15.asString();
        int int17 = bytesModelValue15.asInt();
        long long19 = bytesModelValue15.asLong((long) (short) 1);
        int int20 = bytesModelValue15.asInt();
        double double21 = bytesModelValue15.asDouble();
        java.lang.String str22 = bytesModelValue15.toString();
        byte[] byteArray23 = bytesModelValue15.asBytes();
        org.jboss.dmr.ModelNode modelNode24 = modelNode9.set(byteArray23);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str16, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}" + "'", str22, "bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode24);
    }
}
