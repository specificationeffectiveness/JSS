package org.jboss.dmr;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (byte) -1);
        org.jboss.dmr.DoubleModelValue doubleModelValue3 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int5 = doubleModelValue3.asInt((int) 'l');
        java.math.BigDecimal bigDecimal6 = doubleModelValue3.asBigDecimal();
        boolean boolean7 = doubleModelValue1.equals(doubleModelValue3);
        byte[] byteArray8 = doubleModelValue1.asBytes();
        org.jboss.dmr.DoubleModelValue doubleModelValue10 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long11 = doubleModelValue10.asLong();
        boolean boolean13 = doubleModelValue10.asBoolean(true);
        long long15 = doubleModelValue10.asLong((long) 3);
        boolean boolean16 = doubleModelValue1.equals(doubleModelValue10);
        byte[] byteArray17 = doubleModelValue10.asBytes();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-65, -16, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[64, 36, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream5 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3, (int) (byte) -1);
        outputStream3.suspendEncoding();
        outputStream3.write(100);
        outputStream3.resumeEncoding();
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        int int11 = listModelValue5.asInt((int) (short) -1);
        org.jboss.dmr.ModelValue modelValue12 = listModelValue5.resolve();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(modelValue12);
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        boolean boolean8 = modelNode3.has("1L");
        org.jboss.dmr.DoubleModelValue doubleModelValue11 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long12 = doubleModelValue11.asLong();
        long long14 = doubleModelValue11.asLong((long) 32);
        java.math.BigInteger bigInteger15 = doubleModelValue11.asBigInteger();
        org.jboss.dmr.ModelNode modelNode16 = modelNode3.set("PROPERTY_VALUE", bigInteger15);
        java.lang.Class<?> wildcardClass17 = modelNode3.getClass();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory19 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream20 = null;
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream(inputStream20, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream22);
        org.jboss.dmr.stream.ModelReader modelReader24 = modelStreamFactory19.newModelReader((java.io.InputStream) inputStream23);
        java.io.OutputStream outputStream25 = null;
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream(outputStream25);
        org.jboss.dmr.Base64.OutputStream outputStream27 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream26);
        outputStream26.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelStreamFactory19.newModelWriter((java.io.OutputStream) outputStream26);
        stringModelValue11.write(modelWriter30);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter33 = modelWriter30.writeLong((long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory19);
        org.junit.Assert.assertNotNull(modelReader24);
        org.junit.Assert.assertNotNull(modelWriter30);
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        java.lang.String str1 = org.jboss.dmr.ValueExpression.quote("EXPRESSION_VALUE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "EXPRESSION_VALUE" + "'", str1, "EXPRESSION_VALUE");
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int3 = doubleModelValue1.asInt((int) 'l');
        java.math.BigDecimal bigDecimal4 = doubleModelValue1.asBigDecimal();
        byte[] byteArray5 = doubleModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression6 = doubleModelValue1.asExpression();
        java.math.BigInteger bigInteger7 = doubleModelValue1.asBigInteger();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertNotNull(bigInteger7);
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        boolean boolean10 = listModelValue5.asBoolean();
        long long11 = listModelValue5.asLong();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = modelNode16.set(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue24 = new org.jboss.dmr.PropertyModelValue(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue(property22);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = propertyModelValue25.asList();
        org.jboss.dmr.ModelNode modelNode27 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList26);
        org.jboss.dmr.IntModelValue intModelValue30 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str31 = intModelValue30.asString();
        double double33 = intModelValue30.asDouble((double) 2);
        java.math.BigDecimal bigDecimal34 = intModelValue30.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode35 = modelNode27.add("(\"hi!\" => 0.0)", bigDecimal34);
        boolean boolean36 = modelNode27.isProtected();
        org.jboss.dmr.IntModelValue intModelValue39 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str40 = intModelValue39.asString();
        double double42 = intModelValue39.asDouble((double) 2);
        java.math.BigDecimal bigDecimal43 = intModelValue39.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue44 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal43);
        long long45 = bigDecimalModelValue44.asLong();
        long long46 = bigDecimalModelValue44.asLong();
        long long48 = bigDecimalModelValue44.asLong((long) 'b');
        java.io.OutputStream outputStream49 = null;
        org.jboss.dmr.Base64.OutputStream outputStream50 = new org.jboss.dmr.Base64.OutputStream(outputStream49);
        outputStream50.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream52 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream50);
        org.jboss.dmr.Base64.OutputStream outputStream53 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream52);
        outputStream53.flushBase64();
        outputStream53.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream56 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream53);
        boolean boolean57 = bigDecimalModelValue44.equals((java.lang.Object) outputStream56);
        org.jboss.dmr.ValueExpression valueExpression58 = bigDecimalModelValue44.asExpression();
        org.jboss.dmr.ModelNode modelNode59 = modelNode27.add("rO0ABXQAiigiKFwiRXhwcmVzc2lvbiBcXFwiMVxcXCJcIiA9PiAoXCJvcmcuamJvc3MuZG1yLnN0cmVhbS5Nb2RlbEV4Y2VwdGlvbjogWyhcXFwiaGkhXFxcIiA9PiAwLjApXVwiID0+IEJZVEVTKSkiID0+IGV4cHJlc3Npb24gImJpZyBkZWNpbWFsIDEiKQ==", valueExpression58);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType15.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 32.0d + "'", double33 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "32" + "'", str40, "32");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 32.0d + "'", double42 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 32L + "'", long46 == 32L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 32L + "'", long48 == 32L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(valueExpression58);
        org.junit.Assert.assertNotNull(modelNode59);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        boolean boolean4 = modelNode1.has((int) '#');
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        boolean boolean9 = modelNode7.has((int) (short) 10);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue13 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger14 = booleanModelValue13.asBigInteger();
        org.jboss.dmr.ModelNode modelNode15 = modelNode11.add(bigInteger14);
        org.jboss.dmr.ModelNode modelNode16 = modelNode11.clone();
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        java.math.BigInteger bigInteger18 = booleanModelValue17.asBigInteger();
        boolean boolean19 = booleanModelValue17.asBoolean();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.ModelNode modelNode21 = modelNode16.add(bigInteger20);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", modelNode16);
        org.jboss.dmr.ModelNode modelNode23 = modelNode7.set(property22);
        org.jboss.dmr.ModelNode modelNode25 = modelNode23.set(false);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanModelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode25);
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        long long7 = bigDecimalModelValue6.asLong();
        long long8 = bigDecimalModelValue6.asLong();
        long long10 = bigDecimalModelValue6.asLong((long) 'b');
        java.io.OutputStream outputStream11 = null;
        org.jboss.dmr.Base64.OutputStream outputStream12 = new org.jboss.dmr.Base64.OutputStream(outputStream11);
        outputStream12.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream12);
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        outputStream15.flushBase64();
        outputStream15.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream15);
        boolean boolean19 = bigDecimalModelValue6.equals((java.lang.Object) outputStream18);
        org.jboss.dmr.ValueExpression valueExpression20 = bigDecimalModelValue6.asExpression();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode(valueExpression20);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(valueExpression20);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(0.0d);
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        org.jboss.dmr.IntModelValue intModelValue2 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str3 = intModelValue2.asString();
        double double5 = intModelValue2.asDouble((double) 100);
        java.math.BigInteger bigInteger6 = intModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(bigInteger6);
        boolean boolean9 = modelNode7.hasDefined((int) '4');
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.setExpression("hi!", "hi!");
        java.lang.String str14 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode10);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode10.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode17 = modelNode10.set((double) 0);
        org.jboss.dmr.ModelNode modelNode18 = modelNode10.clear();
        org.jboss.dmr.ObjectModelValue objectModelValue19 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode20 = objectModelValue19.asObject();
        java.util.Set<java.lang.String> strSet21 = objectModelValue19.getKeys();
        org.jboss.dmr.ModelNode modelNode23 = objectModelValue19.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean24 = objectModelValue19.asBoolean();
        int int26 = objectModelValue19.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode27 = objectModelValue19.asObject();
        java.util.Set<java.lang.String> strSet28 = modelNode27.keys();
        org.jboss.dmr.ModelNode modelNode29 = modelNode10.add(modelNode27);
        org.jboss.dmr.ModelNode modelNode30 = modelNode10.resolve();
        org.jboss.dmr.ModelNode modelNode31 = modelNode30.setEmptyList();
        org.jboss.dmr.ModelNode modelNode32 = modelNode7.set(modelNode30);
        org.jboss.dmr.Property property34 = new org.jboss.dmr.Property("\"true\"", modelNode7, true);
        org.jboss.dmr.BooleanModelValue booleanModelValue36 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double37 = booleanModelValue36.asDouble();
        org.jboss.dmr.ModelValue modelValue38 = booleanModelValue36.copy();
        java.math.BigInteger bigInteger39 = booleanModelValue36.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue40 = new org.jboss.dmr.BigIntegerModelValue(bigInteger39);
        java.lang.String str41 = bigIntegerModelValue40.asString();
        java.math.BigInteger bigInteger42 = bigIntegerModelValue40.asBigInteger();
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode(bigInteger42);
        org.jboss.dmr.ModelNode modelNode44 = modelNode7.add("1", bigInteger42);
        org.jboss.dmr.ModelNode modelNode46 = modelNode44.addExpression("(\"TYPE_MODEL_VALUE\" => bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n})");
        java.io.DataInputStream dataInputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode44.readExternal(dataInputStream47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "32" + "'", str3, "32");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 32.0d + "'", double5 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str14, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(modelNode23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(booleanModelValue36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue38);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNode46);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        java.math.BigInteger bigInteger6 = bigIntegerModelValue4.asBigInteger();
        long long7 = bigIntegerModelValue4.asLong();
        int int9 = bigIntegerModelValue4.asInt((int) 'l');
        double double11 = bigIntegerModelValue4.asDouble(0.0d);
        double double13 = bigIntegerModelValue4.asDouble(52.0d);
        int int14 = bigIntegerModelValue4.asInt();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.lang.String str5 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode1);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode1.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set((double) 0);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.PROPERTY;
        char char11 = modelType10.getTypeChar();
        org.jboss.dmr.ModelNode modelNode12 = modelNode1.set("[(\"hi!\" => 0.0)]", modelType10);
        org.jboss.dmr.Property property13 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode12);
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.STRING;
        org.jboss.dmr.ModelNode modelNode16 = modelNode12.set("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", modelType15);
        org.jboss.dmr.TypeModelValue typeModelValue17 = org.jboss.dmr.TypeModelValue.of(modelType15);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode(modelType15);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode(modelType15);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'p' + "'", char11 == 'p');
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType15.equals(org.jboss.dmr.ModelType.STRING));
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(typeModelValue17);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.get(strArray10);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asList();
        org.jboss.dmr.ListModelValue listModelValue17 = new org.jboss.dmr.ListModelValue(modelNodeList16);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue17);
        org.jboss.dmr.ModelValue modelValue19 = listModelValue17.resolve();
        int int21 = listModelValue17.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue17.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList23 = modelNode11.asPropertyList(propertyList22);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.get(strArray30);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue37);
        org.jboss.dmr.ModelValue modelValue39 = listModelValue37.resolve();
        int int41 = listModelValue37.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList42 = listModelValue37.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList43 = modelNode31.asPropertyList(propertyList42);
        modelNode11.setNoCopy(modelNode31);
        org.jboss.dmr.ModelNode modelNode45 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode11);
        org.jboss.dmr.ModelNode modelNode47 = modelNode11.set(false);
        org.jboss.dmr.LongModelValue longModelValue49 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str50 = longModelValue49.asString();
        byte[] byteArray51 = longModelValue49.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue52 = new org.jboss.dmr.BytesModelValue(byteArray51);
        java.lang.String str53 = bytesModelValue52.asString();
        int int54 = bytesModelValue52.asInt();
        long long56 = bytesModelValue52.asLong((long) (short) 1);
        long long57 = bytesModelValue52.asLong();
        byte[] byteArray58 = bytesModelValue52.asBytes();
        org.jboss.dmr.ModelNode modelNode59 = modelNode11.set(byteArray58);
        org.jboss.dmr.ModelNode modelNode60 = modelNode59.setEmptyList();
        org.jboss.dmr.ModelNode modelNode62 = modelNode59.addExpression("PROPERTY");
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int64 = modelNode63.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode65 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode68 = modelNode65.setExpression("hi!", "hi!");
        java.lang.String str69 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode65);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList70 = modelNode65.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode71 = modelNode63.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList70);
        org.jboss.dmr.ModelNode modelNode72 = modelNode63.resolve();
        boolean boolean73 = modelNode63.asBoolean();
        org.jboss.dmr.ModelNode modelNode75 = modelNode63.setExpression("(\"EXPRESSION_VALUE\" => 0.0)");
        modelNode62.setNoCopy(modelNode75);
        java.io.DataOutputStream dataOutputStream77 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode75.writeExternal(dataOutputStream77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(propertyList42);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str53, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str69, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(modelNode75);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double12 = booleanModelValue11.asDouble();
        org.jboss.dmr.ModelValue modelValue13 = booleanModelValue11.copy();
        java.math.BigInteger bigInteger14 = booleanModelValue11.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue15 = new org.jboss.dmr.BigIntegerModelValue(bigInteger14);
        java.lang.String str16 = bigIntegerModelValue15.asString();
        long long18 = bigIntegerModelValue15.asLong(32L);
        double double19 = bigIntegerModelValue15.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double21 = booleanModelValue20.asDouble();
        org.jboss.dmr.ModelValue modelValue22 = booleanModelValue20.copy();
        java.math.BigInteger bigInteger23 = booleanModelValue20.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = new org.jboss.dmr.BigIntegerModelValue(bigInteger23);
        double double26 = bigIntegerModelValue24.asDouble((double) 'b');
        boolean boolean27 = bigIntegerModelValue15.equals(bigIntegerModelValue24);
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double29 = booleanModelValue28.asDouble();
        org.jboss.dmr.ModelValue modelValue30 = booleanModelValue28.copy();
        java.math.BigInteger bigInteger31 = booleanModelValue28.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue32 = new org.jboss.dmr.BigIntegerModelValue(bigInteger31);
        long long34 = bigIntegerModelValue32.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue35 = null;
        boolean boolean36 = bigIntegerModelValue32.equals(bigIntegerModelValue35);
        boolean boolean37 = bigIntegerModelValue15.equals(bigIntegerModelValue32);
        java.math.BigDecimal bigDecimal38 = bigIntegerModelValue15.asBigDecimal();
        boolean boolean39 = bigIntegerModelValue4.equals(bigIntegerModelValue15);
        double double40 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue41 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double42 = booleanModelValue41.asDouble();
        org.jboss.dmr.ModelValue modelValue43 = booleanModelValue41.copy();
        java.math.BigInteger bigInteger44 = booleanModelValue41.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue45 = new org.jboss.dmr.BigIntegerModelValue(bigInteger44);
        int int47 = bigIntegerModelValue45.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        java.lang.String str52 = modelNode48.toString();
        org.jboss.dmr.ModelNode modelNode53 = modelNode48.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode55 = modelNode48.set(100);
        org.jboss.dmr.ModelNode modelNode56 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode59 = modelNode56.set("hi!", 0.0d);
        java.lang.String str60 = modelNode56.toString();
        org.jboss.dmr.ModelNode modelNode61 = modelNode56.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode66 = modelNode63.set("hi!", 0.0d);
        org.jboss.dmr.Property property67 = new org.jboss.dmr.Property("", modelNode66);
        org.jboss.dmr.ModelNode modelNode68 = modelNode56.set(property67);
        java.lang.String str69 = modelNode68.asString();
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode73 = modelNode70.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList74 = modelNode73.asList();
        org.jboss.dmr.ListModelValue listModelValue75 = new org.jboss.dmr.ListModelValue(modelNodeList74);
        org.jboss.dmr.ModelNode modelNode76 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue75);
        org.jboss.dmr.ModelValue modelValue77 = listModelValue75.resolve();
        int int79 = listModelValue75.asInt((int) (byte) 100);
        boolean boolean80 = listModelValue75.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList81 = listModelValue75.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList82 = modelNode68.asList(modelNodeList81);
        org.jboss.dmr.ModelNode modelNode83 = modelNode55.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList81);
        boolean boolean84 = bigIntegerModelValue45.equals((java.lang.Object) modelNode55);
        double double85 = bigIntegerModelValue45.asDouble();
        org.jboss.dmr.LongModelValue longModelValue87 = new org.jboss.dmr.LongModelValue((-1L));
        long long89 = longModelValue87.asLong((long) (byte) -1);
        byte[] byteArray90 = longModelValue87.asBytes();
        boolean boolean91 = bigIntegerModelValue45.equals((java.lang.Object) byteArray90);
        boolean boolean92 = bigIntegerModelValue4.equals(bigIntegerModelValue45);
        long long93 = bigIntegerModelValue4.asLong();
        double double95 = bigIntegerModelValue4.asDouble((double) 11975582L);
        java.math.BigDecimal bigDecimal96 = bigIntegerModelValue4.asBigDecimal();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(\"hi!\" => 0.0)" + "'", str52, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(\"hi!\" => 0.0)" + "'", str60, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str69, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertNotNull(modelNodeList74);
        org.junit.Assert.assertNotNull(modelValue77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(modelNodeList81);
        org.junit.Assert.assertNotNull(modelNodeList82);
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
        org.junit.Assert.assertNotNull(bigDecimal96);
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(false);
        int int3 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set(52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue12);
        org.jboss.dmr.ModelValue modelValue14 = listModelValue12.resolve();
        int int16 = listModelValue12.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList17 = listModelValue12.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue12.asPropertyList();
        org.jboss.dmr.ModelNode modelNode20 = listModelValue12.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.resolve();
        org.jboss.dmr.ModelNode modelNode22 = modelNode5.set("EXPRESSION_VALUE", modelNode21);
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set(true);
        org.jboss.dmr.ModelNode modelNode25 = modelNode24.resolve();
        java.lang.String str26 = modelNode24.asString();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.Property> propertyList28 = modelNode24.asPropertyList();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "true" + "'", str26, "true");
        org.junit.Assert.assertNotNull(modelNode27);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isListStart();
        boolean boolean23 = modelReader15.isUndefined();
        boolean boolean24 = modelReader15.isBigInteger();
        boolean boolean25 = modelReader15.isObjectStart();
        boolean boolean26 = modelReader15.isDouble();
        boolean boolean27 = modelReader15.isType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = modelReader15.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't string");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue15 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray16 = intModelValue15.asBytes();
        int int18 = intModelValue15.asInt(0);
        java.math.BigInteger bigInteger19 = intModelValue15.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter20 = modelWriter13.writeBigInteger(bigInteger19);
        org.jboss.dmr.stream.ModelWriter modelWriter21 = modelWriter13.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter21.writeLong((long) (short) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter25 = modelWriter23.writeString("\"\\\"AAAAIw==\\\"\"");
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        java.lang.String str30 = modelNode26.toString();
        org.jboss.dmr.ModelNode modelNode31 = modelNode26.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode33 = modelNode26.set(100);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode38 = modelNode36.set((int) '#');
        org.jboss.dmr.ModelNode modelNode39 = modelNode26.setNoCopy("EXPRESSION_VALUE", modelNode38);
        org.jboss.dmr.ModelNode modelNode40 = modelNode39.resolve();
        org.jboss.dmr.ModelNode modelNode42 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode45 = modelNode42.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode46 = modelNode45.setEmptyList();
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long49 = modelNode48.asLong();
        org.jboss.dmr.ValueExpression valueExpression50 = modelNode48.asExpression();
        java.math.BigDecimal bigDecimal51 = valueExpression50.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode(bigDecimal51);
        org.jboss.dmr.ModelNode modelNode53 = modelNode45.set(bigDecimal51);
        org.jboss.dmr.ModelNode modelNode54 = modelNode40.set("rO0ABXQABiJBQT09Ig==", bigDecimal51);
        org.jboss.dmr.stream.ModelWriter modelWriter55 = modelWriter25.writeBigDecimal(bigDecimal51);
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(modelWriter20);
        org.junit.Assert.assertNotNull(modelWriter21);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter25);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(\"hi!\" => 0.0)" + "'", str30, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(valueExpression50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelWriter55);
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        int int3 = booleanModelValue1.asInt();
        int int5 = booleanModelValue1.asInt(1);
        double double6 = booleanModelValue1.asDouble();
        int int7 = booleanModelValue1.asInt();
        long long9 = booleanModelValue1.asLong(52L);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigInteger();
        boolean boolean18 = modelReader15.isObjectEnd();
        boolean boolean19 = modelReader15.isBytes();
        boolean boolean20 = modelReader15.isBigDecimal();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal21 = modelReader15.getBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't big decimal");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream27 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26);
        org.jboss.dmr.stream.ModelReader modelReader28 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream26);
        java.io.OutputStream outputStream29 = null;
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream(outputStream29);
        outputStream30.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream32 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        outputStream32.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream35 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelStreamFactory3.newModelWriter((java.io.OutputStream) outputStream36);
        stringModelValue1.write(modelWriter37);
        org.jboss.dmr.StringModelValue stringModelValue40 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray41 = stringModelValue40.asBytes();
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal44 = longModelValue43.asBigDecimal();
        byte[] byteArray45 = longModelValue43.asBytes();
        boolean boolean46 = stringModelValue40.equals((java.lang.Object) byteArray45);
        org.jboss.dmr.StringModelValue stringModelValue48 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue50 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean51 = stringModelValue48.equals(stringModelValue50);
        byte[] byteArray52 = stringModelValue50.asBytes();
        java.lang.Object obj53 = null;
        boolean boolean54 = stringModelValue50.equals(obj53);
        byte[] byteArray55 = stringModelValue50.asBytes();
        boolean boolean56 = stringModelValue40.equals(stringModelValue50);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory58 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream59 = null;
        org.jboss.dmr.Base64.InputStream inputStream61 = new org.jboss.dmr.Base64.InputStream(inputStream59, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream62 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream61);
        org.jboss.dmr.stream.ModelReader modelReader63 = modelStreamFactory58.newModelReader((java.io.InputStream) inputStream62);
        java.io.OutputStream outputStream64 = null;
        org.jboss.dmr.Base64.OutputStream outputStream65 = new org.jboss.dmr.Base64.OutputStream(outputStream64);
        org.jboss.dmr.Base64.OutputStream outputStream66 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream65);
        outputStream65.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter69 = modelStreamFactory58.newModelWriter((java.io.OutputStream) outputStream65);
        stringModelValue50.write(modelWriter69);
        boolean boolean71 = stringModelValue1.equals(stringModelValue50);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode73 = stringModelValue1.removeChild((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertNotNull(modelReader28);
        org.junit.Assert.assertNotNull(modelWriter37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory58);
        org.junit.Assert.assertNotNull(modelReader63);
        org.junit.Assert.assertNotNull(modelWriter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.jboss.dmr.Base64.encodeFromFile("org.jboss.dmr.stream.ModelException: 100");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Error encoding from file org.jboss.dmr.stream.ModelException: 100");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        boolean boolean6 = doubleModelValue1.asBoolean(false);
        org.jboss.dmr.DoubleModelValue doubleModelValue7 = null;
        boolean boolean8 = doubleModelValue1.equals(doubleModelValue7);
        java.math.BigDecimal bigDecimal9 = doubleModelValue1.asBigDecimal();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(bigDecimal9);
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue7.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        boolean boolean15 = listModelValue13.asBoolean(true);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue13.resolve();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(modelValue16);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue7);
        org.jboss.dmr.ModelValue modelValue9 = listModelValue7.resolve();
        int int11 = listModelValue7.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList12 = listModelValue7.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList13 = listModelValue7.asPropertyList();
        org.jboss.dmr.ModelNode modelNode15 = listModelValue7.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        java.lang.String str21 = modelNode17.toString();
        org.jboss.dmr.ModelNode modelNode22 = modelNode17.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        org.jboss.dmr.Property property28 = new org.jboss.dmr.Property("", modelNode27);
        org.jboss.dmr.ModelNode modelNode29 = modelNode17.set(property28);
        org.jboss.dmr.PropertyModelValue propertyModelValue31 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode29, false);
        org.jboss.dmr.Property property32 = propertyModelValue31.asProperty();
        boolean boolean33 = listModelValue7.equals((java.lang.Object) propertyModelValue31);
        boolean boolean34 = longModelValue1.equals((java.lang.Object) listModelValue7);
        org.jboss.dmr.ModelNode modelNode35 = listModelValue7.asObject();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertNotNull(propertyList13);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(\"hi!\" => 0.0)" + "'", str21, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(modelNode35);
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelType modelType5 = modelNode3.getType();
        org.jboss.dmr.TypeModelValue typeModelValue6 = org.jboss.dmr.TypeModelValue.of(modelType5);
        java.lang.String str7 = typeModelValue6.asString();
        java.lang.String str8 = typeModelValue6.asString();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.setExpression("hi!", "hi!");
        java.lang.String str13 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode9);
        boolean boolean15 = modelNode9.hasDefined((-1));
        org.jboss.dmr.BooleanModelValue booleanModelValue16 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double17 = booleanModelValue16.asDouble();
        org.jboss.dmr.ModelValue modelValue18 = booleanModelValue16.copy();
        java.math.BigInteger bigInteger19 = booleanModelValue16.asBigInteger();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode(bigInteger19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode(bigInteger19);
        org.jboss.dmr.ModelNode modelNode22 = modelNode9.set(bigInteger19);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode(bigInteger19);
        org.jboss.dmr.ModelType modelType24 = modelNode23.getType();
        boolean boolean25 = typeModelValue6.equals((java.lang.Object) modelType24);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory27 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream28 = null;
        org.jboss.dmr.Base64.InputStream inputStream30 = new org.jboss.dmr.Base64.InputStream(inputStream28, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream31 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream30);
        org.jboss.dmr.stream.ModelReader modelReader32 = modelStreamFactory27.newModelReader((java.io.InputStream) inputStream31);
        java.io.OutputStream outputStream33 = null;
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream(outputStream33);
        org.jboss.dmr.Base64.OutputStream outputStream35 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream34);
        outputStream34.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter38 = modelStreamFactory27.newModelWriter((java.io.OutputStream) outputStream34);
        org.jboss.dmr.stream.ModelWriter modelWriter39 = modelWriter38.writeListStart();
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode42 = modelNode41.resolve();
        java.lang.String str43 = modelNode41.asString();
        org.jboss.dmr.ModelNode modelNode45 = modelNode41.set((long) 52);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode50 = modelNode47.setExpression("hi!", "hi!");
        java.lang.String str51 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode47);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList52 = modelNode47.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode54 = modelNode47.set((double) 0);
        org.jboss.dmr.ModelType modelType56 = org.jboss.dmr.ModelType.PROPERTY;
        char char57 = modelType56.getTypeChar();
        org.jboss.dmr.ModelNode modelNode58 = modelNode47.set("[(\"hi!\" => 0.0)]", modelType56);
        org.jboss.dmr.Property property59 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode58);
        org.jboss.dmr.ModelNode modelNode60 = modelNode45.set(property59);
        org.jboss.dmr.ModelNode modelNode62 = modelNode45.set(false);
        boolean boolean63 = modelNode62.isProtected();
        org.jboss.dmr.ModelType modelType65 = org.jboss.dmr.ModelType.PROPERTY;
        char char66 = modelType65.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue67 = org.jboss.dmr.TypeModelValue.of(modelType65);
        char char68 = modelType65.getTypeChar();
        org.jboss.dmr.ModelNode modelNode69 = modelNode62.set("rO0ABXQAByJbOTdMXSI=", modelType65);
        org.jboss.dmr.stream.ModelWriter modelWriter70 = modelWriter39.writeType(modelType65);
        typeModelValue6.write(modelWriter39);
        org.jboss.dmr.stream.ModelWriter modelWriter72 = modelWriter39.writeListEnd();
        org.jboss.dmr.ObjectModelValue objectModelValue73 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode74 = objectModelValue73.asObject();
        java.util.Set<java.lang.String> strSet75 = objectModelValue73.getKeys();
        org.jboss.dmr.ModelNode modelNode77 = objectModelValue73.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList78 = objectModelValue73.asList();
        org.jboss.dmr.ModelNode modelNode80 = objectModelValue73.getChild("\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\"");
        org.jboss.dmr.IntModelValue intModelValue82 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray83 = intModelValue82.asBytes();
        int int85 = intModelValue82.asInt(0);
        java.math.BigInteger bigInteger86 = intModelValue82.asBigInteger();
        org.jboss.dmr.ModelNode modelNode87 = modelNode80.set(bigInteger86);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter88 = modelWriter72.writeBigInteger(bigInteger86);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType5.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PROPERTY" + "'", str8, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str13, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(booleanModelValue16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + modelType24 + "' != '" + org.jboss.dmr.ModelType.BIG_INTEGER + "'", modelType24.equals(org.jboss.dmr.ModelType.BIG_INTEGER));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory27);
        org.junit.Assert.assertNotNull(modelReader32);
        org.junit.Assert.assertNotNull(modelWriter38);
        org.junit.Assert.assertNotNull(modelWriter39);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "true" + "'", str43, "true");
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str51, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList52);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertTrue("'" + modelType56 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType56.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + 'p' + "'", char57 == 'p');
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + modelType65 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType65.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char66 + "' != '" + 'p' + "'", char66 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue67);
        org.junit.Assert.assertTrue("'" + char68 + "' != '" + 'p' + "'", char68 == 'p');
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelWriter70);
        org.junit.Assert.assertNotNull(modelWriter72);
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNull(modelNode77);
        org.junit.Assert.assertNotNull(modelNodeList78);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(bigInteger86);
        org.junit.Assert.assertNotNull(modelNode87);
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isBoolean();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal20 = modelReader15.getBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't big decimal");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        java.math.BigInteger bigInteger1 = booleanModelValue0.asBigInteger();
        java.lang.Object obj2 = null;
        boolean boolean3 = booleanModelValue0.equals(obj2);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertNotNull(bigInteger1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 0);
        org.jboss.dmr.ObjectModelValue objectModelValue2 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode3 = objectModelValue2.asObject();
        java.util.Set<java.lang.String> strSet4 = objectModelValue2.getKeys();
        boolean boolean6 = objectModelValue2.asBoolean(false);
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue2.resolve();
        java.util.List<org.jboss.dmr.Property> propertyList8 = objectModelValue2.asPropertyList();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.Property> propertyList9 = modelNode1.asPropertyList(propertyList8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertNotNull(propertyList8);
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode3 = objectModelValue0.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue0.getChild("[(\"hi!\" => 0.0)]");
        java.util.List<org.jboss.dmr.Property> propertyList6 = objectModelValue0.asPropertyList();
        boolean boolean7 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue0.getChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        java.lang.String str10 = objectModelValue0.asString();
        org.jboss.dmr.ObjectModelValue objectModelValue11 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue11.asObject();
        java.util.Set<java.lang.String> strSet13 = objectModelValue11.getKeys();
        boolean boolean15 = objectModelValue11.has((int) 'a');
        boolean boolean17 = objectModelValue11.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue18 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue18.asObject();
        java.util.Set<java.lang.String> strSet20 = objectModelValue18.getKeys();
        boolean boolean22 = objectModelValue18.has((int) 'a');
        boolean boolean23 = objectModelValue11.equals(objectModelValue18);
        int int24 = objectModelValue18.asInt();
        org.jboss.dmr.ObjectModelValue objectModelValue25 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode26 = objectModelValue25.asObject();
        org.jboss.dmr.ModelValue modelValue27 = objectModelValue25.copy();
        int int29 = objectModelValue25.asInt((int) (short) 100);
        java.util.List<org.jboss.dmr.Property> propertyList30 = objectModelValue25.asPropertyList();
        java.lang.String str31 = objectModelValue25.asString();
        boolean boolean32 = objectModelValue18.equals(objectModelValue25);
        boolean boolean33 = objectModelValue0.equals(objectModelValue25);
        org.jboss.dmr.ModelNode modelNode35 = objectModelValue0.getChild("org.jboss.dmr.stream.ModelException: rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        java.lang.Long long36 = modelNode35.asLongOrNull();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(propertyList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined,\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => undefined}" + "'", str10, "{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined,\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => undefined}");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(propertyList30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNull(long36);
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        boolean boolean3 = typeModelValue2.asBoolean();
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray6 = booleanModelValue5.asBytes();
        java.lang.String str7 = booleanModelValue5.asString();
        int int8 = booleanModelValue5.asInt();
        boolean boolean9 = typeModelValue2.equals((java.lang.Object) booleanModelValue5);
        int int10 = booleanModelValue5.asInt();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.clear();
        int int10 = modelNode8.asInt(112);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ModelNode modelNode18 = modelNode14.setExpression("hi!", "(\"hi!\" => 0.0)");
        java.util.Set<java.lang.String> strSet19 = modelNode18.keys();
        boolean boolean20 = modelNode8.equals(modelNode18);
        org.jboss.dmr.ModelNode modelNode22 = modelNode8.add((long) (short) -1);
        org.jboss.dmr.ObjectModelValue objectModelValue23 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode24 = objectModelValue23.asObject();
        java.util.Set<java.lang.String> strSet25 = objectModelValue23.getKeys();
        org.jboss.dmr.ModelNode modelNode27 = objectModelValue23.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean28 = objectModelValue23.asBoolean();
        org.jboss.dmr.ModelNode modelNode30 = objectModelValue23.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue31 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode32 = objectModelValue31.asObject();
        java.util.Set<java.lang.String> strSet33 = objectModelValue31.getKeys();
        org.jboss.dmr.ModelNode modelNode35 = objectModelValue31.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean36 = objectModelValue31.asBoolean();
        int int38 = objectModelValue31.asInt((int) 'b');
        int int40 = objectModelValue31.asInt((int) '#');
        boolean boolean41 = objectModelValue23.equals(objectModelValue31);
        int int42 = objectModelValue31.asInt();
        java.util.Set<java.lang.String> strSet43 = objectModelValue31.getKeys();
        long long45 = objectModelValue31.asLong((long) 0);
        org.jboss.dmr.ModelType modelType46 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode(modelType46);
        org.jboss.dmr.LongModelValue longModelValue50 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str51 = longModelValue50.asString();
        byte[] byteArray52 = longModelValue50.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue53 = new org.jboss.dmr.BytesModelValue(byteArray52);
        java.lang.String str54 = bytesModelValue53.asString();
        int int55 = bytesModelValue53.asInt();
        long long57 = bytesModelValue53.asLong((long) (short) 1);
        long long58 = bytesModelValue53.asLong();
        java.math.BigDecimal bigDecimal59 = bytesModelValue53.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode60 = modelNode47.set("32", bigDecimal59);
        boolean boolean61 = objectModelValue31.equals((java.lang.Object) bigDecimal59);
        org.jboss.dmr.ModelNode modelNode62 = modelNode22.set(bigDecimal59);
        org.jboss.dmr.ObjectModelValue objectModelValue64 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode65 = objectModelValue64.asObject();
        org.jboss.dmr.ModelValue modelValue66 = objectModelValue64.copy();
        java.lang.String str67 = objectModelValue64.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue68 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode69 = objectModelValue68.asObject();
        java.util.Set<java.lang.String> strSet70 = objectModelValue68.getKeys();
        org.jboss.dmr.ModelNode modelNode72 = objectModelValue68.removeChild("1");
        boolean boolean73 = objectModelValue68.asBoolean();
        boolean boolean74 = objectModelValue64.equals(objectModelValue68);
        long long75 = objectModelValue68.asLong();
        org.jboss.dmr.ModelNode modelNode77 = objectModelValue68.getChild("\"\\\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\\\"\"");
        org.jboss.dmr.ModelNode modelNode80 = modelNode77.add("QA==", (long) '4');
        org.jboss.dmr.BooleanModelValue booleanModelValue81 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double82 = booleanModelValue81.asDouble();
        org.jboss.dmr.ModelValue modelValue83 = booleanModelValue81.copy();
        java.math.BigInteger bigInteger84 = booleanModelValue81.asBigInteger();
        org.jboss.dmr.ModelNode modelNode85 = new org.jboss.dmr.ModelNode(bigInteger84);
        org.jboss.dmr.ModelNode modelNode86 = new org.jboss.dmr.ModelNode(bigInteger84);
        int int87 = modelNode86.asInt();
        boolean boolean88 = modelNode80.equals(modelNode86);
        org.jboss.dmr.ModelNode modelNode89 = modelNode22.setNoCopy("[2L]", modelNode86);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode91 = modelNode89.remove((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 112 + "'", int10 == 112);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(modelNode27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(modelNode35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + modelType46 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType46.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str54, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNotNull(modelNode65);
        org.junit.Assert.assertNotNull(modelValue66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "{}" + "'", str67, "{}");
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNull(modelNode72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(modelNode77);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertNotNull(booleanModelValue81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue83);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(modelNode89);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue7);
        org.jboss.dmr.ModelValue modelValue9 = listModelValue7.resolve();
        int int11 = listModelValue7.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList12 = listModelValue7.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList13 = listModelValue7.asPropertyList();
        org.jboss.dmr.ModelNode modelNode15 = listModelValue7.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        java.lang.String str21 = modelNode17.toString();
        org.jboss.dmr.ModelNode modelNode22 = modelNode17.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        org.jboss.dmr.Property property28 = new org.jboss.dmr.Property("", modelNode27);
        org.jboss.dmr.ModelNode modelNode29 = modelNode17.set(property28);
        org.jboss.dmr.PropertyModelValue propertyModelValue31 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode29, false);
        org.jboss.dmr.Property property32 = propertyModelValue31.asProperty();
        boolean boolean33 = listModelValue7.equals((java.lang.Object) propertyModelValue31);
        boolean boolean34 = longModelValue1.equals((java.lang.Object) listModelValue7);
        org.jboss.dmr.ListModelValue listModelValue35 = null;
        boolean boolean36 = listModelValue7.equals(listModelValue35);
        long long37 = listModelValue7.asLong();
        boolean boolean38 = listModelValue7.asBoolean();
        long long39 = listModelValue7.asLong();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertNotNull(propertyList13);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(\"hi!\" => 0.0)" + "'", str21, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        boolean boolean17 = objectModelValue7.equals(objectModelValue15);
        int int18 = objectModelValue7.asInt();
        org.jboss.dmr.ModelNode modelNode20 = objectModelValue7.removeChild("rO0ABXQAByJbOTdMXSI=");
        org.jboss.dmr.ModelValue modelValue21 = objectModelValue7.protect();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(modelNode20);
        org.junit.Assert.assertNotNull(modelValue21);
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        org.jboss.dmr.ValueExpression valueExpression1 = new org.jboss.dmr.ValueExpression("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQAC0JJR19ERUNJTUFM");
        java.lang.String str2 = valueExpression1.resolveString();
        java.io.ObjectInput objectInput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression1.readExternal(objectInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQAC0JJR19ERUNJTUFM" + "'", str2, "rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQAC0JJR19ERUNJTUFM");
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((-1.0d));
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.clone();
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        java.lang.String str10 = bytesModelValue9.asString();
        int int11 = bytesModelValue9.asInt();
        long long13 = bytesModelValue9.asLong((long) (short) 1);
        long long14 = bytesModelValue9.asLong();
        java.math.BigDecimal bigDecimal15 = bytesModelValue9.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode16 = modelNode3.add("", bigDecimal15);
        boolean boolean18 = modelNode3.asBoolean(false);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str10, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        boolean boolean14 = typeModelValue10.equals(typeModelValue13);
        java.lang.String str15 = typeModelValue13.asString();
        boolean boolean17 = typeModelValue13.asBoolean(true);
        boolean boolean18 = typeModelValue5.equals(typeModelValue13);
        org.jboss.dmr.ValueExpression valueExpression19 = typeModelValue5.asExpression();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.set("hi!", 0.0d);
        java.lang.String str24 = modelNode20.toString();
        org.jboss.dmr.ModelNode modelNode25 = modelNode20.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode27 = modelNode20.set(100);
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode32 = modelNode30.set((int) '#');
        org.jboss.dmr.ModelNode modelNode33 = modelNode20.setNoCopy("EXPRESSION_VALUE", modelNode32);
        org.jboss.dmr.ModelNode modelNode34 = modelNode33.resolve();
        org.jboss.dmr.ModelType modelType35 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode(modelType35);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode41 = modelNode38.set("hi!", 0.0d);
        org.jboss.dmr.Property property42 = new org.jboss.dmr.Property("", modelNode41);
        org.jboss.dmr.ModelNode modelNode43 = modelNode36.set(property42);
        org.jboss.dmr.PropertyModelValue propertyModelValue44 = new org.jboss.dmr.PropertyModelValue(property42);
        org.jboss.dmr.PropertyModelValue propertyModelValue45 = new org.jboss.dmr.PropertyModelValue(property42);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList46 = propertyModelValue45.asList();
        org.jboss.dmr.ModelNode modelNode47 = modelNode34.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList46);
        org.jboss.dmr.LongModelValue longModelValue50 = new org.jboss.dmr.LongModelValue(1L);
        int int52 = longModelValue50.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue54 = new org.jboss.dmr.LongModelValue((-1L));
        long long56 = longModelValue54.asLong((long) (byte) -1);
        double double58 = longModelValue54.asDouble((double) 10.0f);
        boolean boolean59 = longModelValue50.equals(longModelValue54);
        org.jboss.dmr.ModelType modelType60 = longModelValue50.getType();
        org.jboss.dmr.ModelNode modelNode61 = modelNode47.set("{ \"35\" : 0.0 }", modelType60);
        org.jboss.dmr.TypeModelValue typeModelValue62 = org.jboss.dmr.TypeModelValue.of(modelType60);
        boolean boolean63 = typeModelValue5.equals(typeModelValue62);
        java.lang.String str64 = typeModelValue62.asString();
        java.lang.String str65 = typeModelValue62.toString();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PROPERTY" + "'", str15, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(\"hi!\" => 0.0)" + "'", str24, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertTrue("'" + modelType35 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType35.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNodeList46);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + modelType60 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType60.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(typeModelValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "LONG" + "'", str64, "LONG");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "LONG" + "'", str65, "LONG");
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        double double5 = bytesModelValue4.asDouble();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.set((int) '#');
        java.lang.Boolean boolean10 = modelNode7.asBooleanOrNull();
        java.lang.String str12 = modelNode7.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        boolean boolean13 = bytesModelValue4.equals((java.lang.Object) modelNode7);
        int int15 = bytesModelValue4.asInt(52);
        int int17 = bytesModelValue4.asInt((int) (short) 0);
        java.math.BigInteger bigInteger18 = bytesModelValue4.asBigInteger();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode20 = bytesModelValue4.requireChild("[big integer 1,big integer 1]");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '[big integer 1,big integer 1]' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.9E-324d + "'", double5 == 4.9E-324d);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "35" + "'", str12, "35");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(bigInteger18);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        java.lang.String str9 = org.jboss.dmr.Base64.encodeBytes(byteArray6, 1);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(byteArray6);
        java.lang.String str11 = modelNode10.asString();
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AQ==" + "'", str9, "AQ==");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bytes { 0x01 }" + "'", str11, "bytes { 0x01 }");
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(false);
        int int3 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set(52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue12);
        org.jboss.dmr.ModelValue modelValue14 = listModelValue12.resolve();
        int int16 = listModelValue12.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList17 = listModelValue12.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue12.asPropertyList();
        org.jboss.dmr.ModelNode modelNode20 = listModelValue12.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.resolve();
        org.jboss.dmr.ModelNode modelNode22 = modelNode5.set("EXPRESSION_VALUE", modelNode21);
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set(true);
        org.jboss.dmr.ModelNode modelNode26 = modelNode24.set((double) (byte) 10);
        org.jboss.dmr.ObjectModelValue objectModelValue28 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode29 = objectModelValue28.asObject();
        java.util.Set<java.lang.String> strSet30 = objectModelValue28.getKeys();
        org.jboss.dmr.ModelNode modelNode32 = objectModelValue28.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = objectModelValue28.asList();
        org.jboss.dmr.ModelNode modelNode35 = objectModelValue28.getChild("\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\"");
        org.jboss.dmr.ModelNode modelNode37 = modelNode35.add((long) 'a');
        int int39 = modelNode35.asInt((int) (byte) -1);
        java.lang.String str40 = modelNode35.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode43 = modelNode35.setExpression("{\n    \"EXPRESSION_VALUE\" : \"hi!\"\n}", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BWQAAjMyeA==");
        org.jboss.dmr.ModelNode modelNode44 = modelNode24.set("(\"expression \\\"hi!\\\"\" => bytes {\n    0x01\n})", modelNode43);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[97L]" + "'", str40, "[97L]");
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode44);
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long4 = modelNode3.asLong();
        org.jboss.dmr.ValueExpression valueExpression5 = modelNode3.asExpression();
        java.math.BigDecimal bigDecimal6 = valueExpression5.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(valueExpression5);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.set("AQ==");
        java.io.PrintWriter printWriter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode9.writeJSONString(printWriter10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = objectModelValue7.asList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        java.util.Set<java.lang.String> strSet17 = objectModelValue15.getKeys();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue15.removeChild("hi!");
        int int20 = objectModelValue15.asInt();
        org.jboss.dmr.ObjectModelValue objectModelValue21 = null;
        boolean boolean22 = objectModelValue15.equals(objectModelValue21);
        boolean boolean23 = objectModelValue7.equals(objectModelValue15);
        int int24 = objectModelValue7.asInt();
        long long25 = objectModelValue7.asLong();
        org.jboss.dmr.ObjectModelValue objectModelValue26 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode27 = objectModelValue26.asObject();
        java.util.Set<java.lang.String> strSet28 = objectModelValue26.getKeys();
        org.jboss.dmr.ModelNode modelNode30 = objectModelValue26.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode31 = objectModelValue26.asObject();
        org.jboss.dmr.ModelNode modelNode32 = objectModelValue26.asObject();
        int int33 = objectModelValue26.asInt();
        org.jboss.dmr.ModelValue modelValue34 = objectModelValue26.resolve();
        org.jboss.dmr.ModelNode modelNode35 = objectModelValue26.asObject();
        org.jboss.dmr.ModelNode modelNode37 = objectModelValue26.getChild("");
        boolean boolean38 = objectModelValue7.equals((java.lang.Object) modelNode37);
        org.jboss.dmr.ModelValue modelValue40 = objectModelValue7.copy(false);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(modelNode19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelValue34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(modelValue40);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue7);
        org.jboss.dmr.ModelValue modelValue9 = listModelValue7.resolve();
        int int11 = listModelValue7.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList12 = listModelValue7.asPropertyList();
        boolean boolean13 = intModelValue1.equals((java.lang.Object) listModelValue7);
        java.math.BigDecimal bigDecimal14 = intModelValue1.asBigDecimal();
        long long15 = intModelValue1.asLong();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        boolean boolean1 = objectModelValue0.asBoolean();
        int int3 = objectModelValue0.asInt(0);
        org.jboss.dmr.ModelValue modelValue4 = objectModelValue0.resolve();
        java.lang.String str5 = objectModelValue0.asString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = modelNode16.set(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue24 = new org.jboss.dmr.PropertyModelValue(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue(property22);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = propertyModelValue25.asList();
        org.jboss.dmr.ModelNode modelNode27 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList26);
        org.jboss.dmr.IntModelValue intModelValue30 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str31 = intModelValue30.asString();
        double double33 = intModelValue30.asDouble((double) 2);
        java.math.BigDecimal bigDecimal34 = intModelValue30.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode35 = modelNode27.add("(\"hi!\" => 0.0)", bigDecimal34);
        org.jboss.dmr.ModelNode modelNode37 = modelNode35.setExpression("\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        boolean boolean39 = modelNode35.hasDefined(100);
        org.jboss.dmr.ModelNode modelNode41 = org.jboss.dmr.ModelNode.fromString("[(\"hi!\" => expression \"hi!\"),bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }]");
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        org.jboss.dmr.ModelNode modelNode48 = property47.getValue();
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode53 = modelNode50.set("hi!", 0.0d);
        org.jboss.dmr.Property property54 = new org.jboss.dmr.Property("", modelNode53);
        java.lang.String[] strArray55 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode56 = modelNode53.get(strArray55);
        boolean boolean57 = modelNode48.has(strArray55);
        org.jboss.dmr.ModelNode modelNode58 = modelNode48.clear();
        org.jboss.dmr.ModelNode modelNode60 = modelNode41.insert(modelNode48, 0);
        boolean boolean61 = modelNode35.equals(modelNode60);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType15.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 32.0d + "'", double33 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.setEmptyList();
        boolean boolean16 = modelNode14.asBoolean(false);
        int int18 = modelNode14.asInt((int) (byte) -1);
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue20 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode21 = objectModelValue20.asObject();
        java.util.Set<java.lang.String> strSet22 = objectModelValue20.getKeys();
        boolean boolean24 = objectModelValue20.has((int) 'a');
        boolean boolean26 = objectModelValue20.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue27 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode28 = objectModelValue27.asObject();
        java.util.Set<java.lang.String> strSet29 = objectModelValue27.getKeys();
        boolean boolean31 = objectModelValue27.has((int) 'a');
        boolean boolean32 = objectModelValue20.equals(objectModelValue27);
        org.jboss.dmr.ModelNode modelNode33 = objectModelValue27.asObject();
        org.jboss.dmr.ModelNode modelNode35 = objectModelValue27.getChild("(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))");
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.set("\"org.jboss.dmr.stream.ModelException: (\\\"Expression \\\\\\\"1\\\\\\\"\\\" => (\\\"org.jboss.dmr.stream.ModelException: [(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => BYTES))\"", "");
        org.jboss.dmr.ModelNode modelNode41 = modelNode38.setExpression("false", "[]");
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        java.lang.String[] strArray48 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode49 = modelNode46.get(strArray48);
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode53 = modelNode50.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList54 = modelNode53.asList();
        org.jboss.dmr.ListModelValue listModelValue55 = new org.jboss.dmr.ListModelValue(modelNodeList54);
        org.jboss.dmr.ModelNode modelNode56 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue55);
        org.jboss.dmr.ModelValue modelValue57 = listModelValue55.resolve();
        int int59 = listModelValue55.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList60 = listModelValue55.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList61 = modelNode49.asPropertyList(propertyList60);
        org.jboss.dmr.ModelNode modelNode64 = modelNode49.setExpression("\"(\\\"hi!\\\" => 0.0)\"", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelNode modelNode65 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode68 = modelNode65.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList69 = modelNode68.asList();
        java.lang.String str71 = modelNode68.asString("true");
        boolean boolean73 = modelNode68.has("1L");
        org.jboss.dmr.ModelNode modelNode75 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode78 = modelNode75.set("hi!", 0.0d);
        org.jboss.dmr.Property property79 = new org.jboss.dmr.Property("", modelNode78);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode81 = modelNode78.get(strArray80);
        boolean boolean82 = modelNode68.has(strArray80);
        boolean boolean83 = modelNode49.has(strArray80);
        org.jboss.dmr.ModelNode modelNode84 = modelNode38.get(strArray80);
        org.jboss.dmr.ModelNode modelNode85 = modelNode14.get(strArray80);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNodeList54);
        org.junit.Assert.assertNotNull(modelValue57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(propertyList60);
        org.junit.Assert.assertNotNull(propertyList61);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNodeList69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(\"hi!\" => 0.0)" + "'", str71, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(modelNode81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertNotNull(modelNode85);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        double double15 = bigIntegerModelValue13.asDouble((double) 'b');
        boolean boolean16 = bigIntegerModelValue4.equals(bigIntegerModelValue13);
        org.jboss.dmr.ValueExpression valueExpression17 = bigIntegerModelValue4.asExpression();
        double double19 = bigIntegerModelValue4.asDouble((-1.0d));
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("AA==");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger5 = stringModelValue1.asBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"rO0ABXN\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = objectModelValue0.asList();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\"");
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.add((long) 'a');
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.add((double) 52L);
        boolean boolean12 = modelNode9.asBoolean();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        org.jboss.dmr.ValueExpression valueExpression1 = new org.jboss.dmr.ValueExpression("{ \"BYTES_VALUE\" : { \"EXPRESSION_VALUE\" : \"1.0\" } }");
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set("\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\"", "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        java.lang.Long long7 = modelNode6.asLongOrNull();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode6.asList(modelNodeList15);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = modelNode20.asList();
        org.jboss.dmr.ListModelValue listModelValue22 = new org.jboss.dmr.ListModelValue(modelNodeList21);
        java.lang.String str23 = listModelValue22.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList24 = listModelValue22.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode6.asList(modelNodeList24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode1.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList24);
        java.util.List<org.jboss.dmr.Property> propertyList27 = modelNode26.asPropertyList();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNull(long7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str23, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(propertyList27);
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        int int13 = listModelValue5.asInt();
        java.lang.String str14 = listModelValue5.asString();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        boolean boolean17 = listModelValue5.equals((java.lang.Object) modelType15);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory19 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream20 = null;
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream(inputStream20, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue24 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str25 = longModelValue24.asString();
        byte[] byteArray26 = longModelValue24.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue27 = new org.jboss.dmr.BytesModelValue(byteArray26);
        int int30 = inputStream22.read(byteArray26, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream22, (-1));
        org.jboss.dmr.stream.ModelReader modelReader33 = modelStreamFactory19.newModelReader((java.io.InputStream) inputStream32);
        boolean boolean34 = modelReader33.isBigInteger();
        boolean boolean35 = modelReader33.isLong();
        boolean boolean36 = modelReader33.isBigDecimal();
        boolean boolean37 = modelReader33.isUndefined();
        boolean boolean38 = modelReader33.isUndefined();
        boolean boolean39 = modelReader33.isObjectStart();
        boolean boolean40 = modelReader33.isObjectEnd();
        boolean boolean41 = modelReader33.isBytes();
        boolean boolean42 = modelReader33.isDouble();
        boolean boolean43 = modelReader33.isBigInteger();
        boolean boolean44 = listModelValue5.equals((java.lang.Object) boolean43);
        java.lang.String str45 = listModelValue5.toString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList46 = listModelValue5.asList();
        boolean boolean48 = listModelValue5.asBoolean(true);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType15.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(modelReader33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str45, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long10 = booleanModelValue9.asLong();
        org.jboss.dmr.ValueExpression valueExpression11 = booleanModelValue9.asExpression();
        java.lang.String str12 = valueExpression11.toString();
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression15 = expressionValue14.asExpression();
        boolean boolean16 = valueExpression11.equals(valueExpression15);
        java.lang.String str17 = valueExpression15.resolveString();
        org.jboss.dmr.ModelNode modelNode18 = modelNode3.set("Expression \"1\"", valueExpression15);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode22.asList();
        org.jboss.dmr.ModelNode modelNode26 = modelNode22.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType27 = modelNode22.getType();
        org.jboss.dmr.ModelNode modelNode28 = modelNode18.set(modelType27);
        org.jboss.dmr.ValueExpression valueExpression29 = modelNode28.asExpression();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Expression \"true\"" + "'", str12, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertTrue("'" + modelType27 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType27.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(valueExpression29);
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long10 = booleanModelValue9.asLong();
        org.jboss.dmr.ValueExpression valueExpression11 = booleanModelValue9.asExpression();
        java.lang.String str12 = valueExpression11.toString();
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression15 = expressionValue14.asExpression();
        boolean boolean16 = valueExpression11.equals(valueExpression15);
        java.lang.String str17 = valueExpression15.resolveString();
        org.jboss.dmr.ModelNode modelNode18 = modelNode3.set("Expression \"1\"", valueExpression15);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode22.asList();
        org.jboss.dmr.ModelNode modelNode26 = modelNode22.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType27 = modelNode22.getType();
        org.jboss.dmr.ModelNode modelNode28 = modelNode18.set(modelType27);
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList34 = modelNode33.asList();
        org.jboss.dmr.ListModelValue listModelValue35 = new org.jboss.dmr.ListModelValue(modelNodeList34);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue35);
        org.jboss.dmr.ModelValue modelValue37 = listModelValue35.resolve();
        int int39 = listModelValue35.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList40 = listModelValue35.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList41 = listModelValue35.asPropertyList();
        java.lang.String str42 = listModelValue35.asString();
        int int43 = listModelValue35.asInt();
        java.lang.String str44 = listModelValue35.asString();
        org.jboss.dmr.ModelType modelType45 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode(modelType45);
        boolean boolean47 = listModelValue35.equals((java.lang.Object) modelType45);
        org.jboss.dmr.TypeModelValue typeModelValue48 = org.jboss.dmr.TypeModelValue.of(modelType45);
        org.jboss.dmr.ModelNode modelNode49 = modelNode28.set("(\"Expression \\\"true\\\"\" => BIG_DECIMAL)", modelType45);
        org.jboss.dmr.LongModelValue longModelValue52 = new org.jboss.dmr.LongModelValue(1L);
        int int54 = longModelValue52.asInt((int) (byte) 0);
        java.math.BigInteger bigInteger55 = longModelValue52.asBigInteger();
        org.jboss.dmr.ModelNode modelNode56 = modelNode28.set("(\"(\\\"\\\\\\\"(\\\\\\\\\\\\\\\"hi!\\\\\\\\\\\\\\\" => 0.0)\\\\\\\"\\\" => (\\\"[(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => PROPERTY))\" => undefined)", bigInteger55);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Expression \"true\"" + "'", str12, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertTrue("'" + modelType27 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType27.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNodeList34);
        org.junit.Assert.assertNotNull(modelValue37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(propertyList41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str42, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str44, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType45 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType45.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(typeModelValue48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(modelNode56);
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode6 = modelNodeFactory0.readFrom("(\"hi!\" => [\n    (\"hi!\" => 0.0),\n    undefined\n])", true);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Unexpected character '(' while reading DMR stream");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.copy(false);
        int int7 = objectModelValue0.asInt();
        org.jboss.dmr.ModelValue modelValue9 = objectModelValue0.copy(true);
        org.jboss.dmr.ModelNode modelNode10 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("AAAAZA==", (int) 'J');
        // The following exception was thrown during execution in test generation
        try {
            long long14 = modelNode13.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode13);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelNode modelNode10 = property7.getValue();
        java.util.List<org.jboss.dmr.Property> propertyList11 = modelNode10.asPropertyListOrEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Double double12 = modelNode10.asDoubleOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(propertyList11);
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("PROPERTY", false);
        org.jboss.dmr.ModelNode modelNode6 = modelNodeFactory0.readFrom("bytes { 0x40, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }", false);
        org.jboss.dmr.ModelNode modelNode9 = modelNodeFactory0.readFrom("(\"hi!\" => [\n    (\"hi!\" => 0.0),\n    undefined\n])", false);
        java.io.InputStream inputStream10 = null;
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream(inputStream10, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str15 = longModelValue14.asString();
        byte[] byteArray16 = longModelValue14.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue17 = new org.jboss.dmr.BytesModelValue(byteArray16);
        int int20 = inputStream12.read(byteArray16, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream12, (-1));
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream22);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = modelNodeFactory0.readFrom((java.io.InputStream) inputStream23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        boolean boolean8 = typeModelValue5.asBoolean();
        org.jboss.dmr.ModelType modelType9 = typeModelValue5.asType();
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.PROPERTY;
        char char11 = modelType10.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue12 = org.jboss.dmr.TypeModelValue.of(modelType10);
        org.jboss.dmr.ModelType modelType13 = org.jboss.dmr.ModelType.PROPERTY;
        char char14 = modelType13.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue15 = org.jboss.dmr.TypeModelValue.of(modelType13);
        boolean boolean16 = typeModelValue12.equals(typeModelValue15);
        java.lang.String str17 = typeModelValue15.asString();
        boolean boolean18 = typeModelValue5.equals(typeModelValue15);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode20 = typeModelValue15.removeChild((int) 's');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'p' + "'", char11 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue12);
        org.junit.Assert.assertTrue("'" + modelType13 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType13.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + 'p' + "'", char14 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PROPERTY" + "'", str17, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.Set<java.lang.String> strSet16 = propertyModelValue15.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList17 = propertyModelValue15.asPropertyList();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.lang.String str23 = modelNode19.toString();
        org.jboss.dmr.ModelNode modelNode24 = modelNode19.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode19.set(property30);
        org.jboss.dmr.PropertyModelValue propertyModelValue33 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode31, false);
        java.util.Set<java.lang.String> strSet34 = propertyModelValue33.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList35 = propertyModelValue33.asPropertyList();
        java.util.Set<java.lang.String> strSet36 = propertyModelValue33.getKeys();
        boolean boolean37 = propertyModelValue15.equals(propertyModelValue33);
        org.jboss.dmr.ModelValue modelValue38 = propertyModelValue15.copy();
        org.jboss.dmr.ModelValue modelValue39 = propertyModelValue15.protect();
        java.util.Set<java.lang.String> strSet40 = propertyModelValue15.getKeys();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(\"hi!\" => 0.0)" + "'", str23, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(propertyList35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(modelValue38);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertNotNull(strSet40);
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        org.jboss.dmr.ModelValue modelValue10 = bigDecimalModelValue7.protect();
        boolean boolean11 = bigDecimalModelValue7.asBoolean();
        java.math.BigInteger bigInteger12 = bigDecimalModelValue7.asBigInteger();
        java.math.BigInteger bigInteger13 = bigDecimalModelValue7.asBigInteger();
        double double14 = bigDecimalModelValue7.asDouble();
        java.lang.String str15 = bigDecimalModelValue7.asString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0" + "'", str15, "1.0");
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        org.jboss.dmr.ObjectModelValue objectModelValue3 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue3.asObject();
        java.util.Set<java.lang.String> strSet5 = objectModelValue3.getKeys();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue3.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean8 = objectModelValue3.asBoolean();
        int int10 = objectModelValue3.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode11 = objectModelValue3.asObject();
        boolean boolean12 = objectModelValue0.equals(objectModelValue3);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = objectModelValue0.asList();
        org.jboss.dmr.ModelValue modelValue14 = objectModelValue0.protect();
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.formatAsJSON(printWriter15, (int) (short) 10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue14);
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelValue modelValue11 = propertyModelValue10.clone();
        java.lang.String str12 = propertyModelValue10.asString();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = propertyModelValue10.requireChild("{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined,\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => undefined}");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined,\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => undefined}' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str12, "(\"\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isBigInteger();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isListStart();
        boolean boolean23 = modelReader15.isType();
        boolean boolean24 = modelReader15.isListEnd();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        int int6 = booleanModelValue1.asInt(52);
        java.math.BigDecimal bigDecimal7 = booleanModelValue1.asBigDecimal();
        int int9 = booleanModelValue1.asInt((int) 'Z');
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        int int13 = listModelValue5.asInt();
        java.lang.String str14 = listModelValue5.asString();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        boolean boolean17 = listModelValue5.equals((java.lang.Object) modelType15);
        org.jboss.dmr.ModelValue modelValue18 = listModelValue5.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property19 = listModelValue5.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType15.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelValue18);
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        long long7 = bigDecimalModelValue6.asLong();
        long long8 = bigDecimalModelValue6.asLong();
        int int10 = bigDecimalModelValue6.asInt((-1));
        boolean boolean12 = bigDecimalModelValue6.asBoolean(false);
        double double14 = bigDecimalModelValue6.asDouble((double) 100L);
        java.math.BigInteger bigInteger15 = bigDecimalModelValue6.asBigInteger();
        java.math.BigInteger bigInteger16 = bigDecimalModelValue6.asBigInteger();
        java.lang.String str17 = bigDecimalModelValue6.asString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32" + "'", str17, "32");
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        java.math.BigDecimal bigDecimal5 = booleanModelValue1.asBigDecimal();
        org.jboss.dmr.ModelValue modelValue6 = booleanModelValue1.protect();
        org.jboss.dmr.ValueExpression valueExpression7 = booleanModelValue1.asExpression();
        double double8 = booleanModelValue1.asDouble();
        java.math.BigDecimal bigDecimal9 = booleanModelValue1.asBigDecimal();
        boolean boolean11 = booleanModelValue1.has("52");
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        org.jboss.dmr.ValueExpression valueExpression18 = stringModelValue11.asExpression();
        org.jboss.dmr.StringModelValue stringModelValue20 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue22 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue24 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean25 = stringModelValue22.equals(stringModelValue24);
        byte[] byteArray26 = stringModelValue24.asBytes();
        java.lang.Object obj27 = null;
        boolean boolean28 = stringModelValue24.equals(obj27);
        boolean boolean30 = stringModelValue24.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean31 = stringModelValue20.equals(stringModelValue24);
        boolean boolean32 = stringModelValue11.equals(stringModelValue24);
        java.lang.String str33 = stringModelValue24.asString();
        org.jboss.dmr.ObjectModelValue objectModelValue34 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode35 = objectModelValue34.asObject();
        java.util.Set<java.lang.String> strSet36 = objectModelValue34.getKeys();
        boolean boolean38 = objectModelValue34.has((int) 'a');
        boolean boolean40 = objectModelValue34.has("");
        java.util.List<org.jboss.dmr.Property> propertyList41 = objectModelValue34.asPropertyList();
        long long42 = objectModelValue34.asLong();
        org.jboss.dmr.ModelValue modelValue43 = objectModelValue34.resolve();
        org.jboss.dmr.ModelValue modelValue44 = objectModelValue34.resolve();
        boolean boolean45 = stringModelValue24.equals((java.lang.Object) modelValue44);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = stringModelValue24.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str33, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(propertyList41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(modelValue43);
        org.junit.Assert.assertNotNull(modelValue44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.STRING;
        char char1 = modelType0.getTypeChar();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType0.equals(org.jboss.dmr.ModelType.STRING));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 's' + "'", char1 == 's');
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigDecimal bigDecimal10 = bigDecimalModelValue7.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue7.asExpression();
        org.jboss.dmr.ValueExpression valueExpression12 = bigDecimalModelValue7.asExpression();
        org.jboss.dmr.ModelType modelType13 = bigDecimalModelValue7.getType();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + modelType13 + "' != '" + org.jboss.dmr.ModelType.BIG_DECIMAL + "'", modelType13.equals(org.jboss.dmr.ModelType.BIG_DECIMAL));
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        boolean boolean6 = modelNode0.hasDefined((-1));
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode(bigInteger10);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode(bigInteger10);
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.set(bigInteger10);
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue14 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        int int15 = bigIntegerModelValue14.asInt();
        boolean boolean17 = bigIntegerModelValue14.asBoolean(false);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.set((double) (-1.0f));
        double double13 = modelNode9.asDouble(1.0d);
        org.jboss.dmr.LongModelValue longModelValue15 = new org.jboss.dmr.LongModelValue(1L);
        long long17 = longModelValue15.asLong((long) (short) 0);
        java.lang.String str18 = longModelValue15.asString();
        org.jboss.dmr.ValueExpression valueExpression19 = longModelValue15.asExpression();
        org.jboss.dmr.ModelNode modelNode20 = modelNode9.set(valueExpression19);
        org.jboss.dmr.IntModelValue intModelValue22 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long24 = intModelValue22.asLong((long) 'b');
        java.lang.String str25 = intModelValue22.asString();
        long long26 = intModelValue22.asLong();
        long long27 = intModelValue22.asLong();
        org.jboss.dmr.ValueExpression valueExpression28 = intModelValue22.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver29 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal30 = valueExpression28.resolveBigDecimal(valueExpressionResolver29);
        java.lang.String str31 = valueExpression19.resolveString(valueExpressionResolver29);
        org.jboss.dmr.BooleanModelValue booleanModelValue33 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long34 = booleanModelValue33.asLong();
        org.jboss.dmr.ValueExpression valueExpression35 = booleanModelValue33.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue36 = new org.jboss.dmr.ExpressionValue(valueExpression35);
        org.jboss.dmr.BooleanModelValue booleanModelValue37 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double38 = booleanModelValue37.asDouble();
        org.jboss.dmr.ModelValue modelValue39 = booleanModelValue37.copy();
        java.math.BigInteger bigInteger40 = booleanModelValue37.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue41 = new org.jboss.dmr.BigIntegerModelValue(bigInteger40);
        java.lang.String str42 = bigIntegerModelValue41.asString();
        java.math.BigInteger bigInteger43 = bigIntegerModelValue41.asBigInteger();
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode(bigInteger43);
        org.jboss.dmr.LongModelValue longModelValue46 = new org.jboss.dmr.LongModelValue((-1L));
        long long48 = longModelValue46.asLong((long) (byte) -1);
        int int50 = longModelValue46.asInt(0);
        org.jboss.dmr.ValueExpression valueExpression51 = longModelValue46.asExpression();
        org.jboss.dmr.ModelNode modelNode52 = modelNode44.set(valueExpression51);
        org.jboss.dmr.DoubleModelValue doubleModelValue54 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long55 = doubleModelValue54.asLong();
        boolean boolean56 = doubleModelValue54.asBoolean();
        byte[] byteArray57 = doubleModelValue54.asBytes();
        int int59 = doubleModelValue54.asInt((int) ' ');
        boolean boolean60 = doubleModelValue54.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression61 = doubleModelValue54.asExpression();
        org.jboss.dmr.BooleanModelValue booleanModelValue63 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long64 = booleanModelValue63.asLong();
        org.jboss.dmr.ValueExpression valueExpression65 = booleanModelValue63.asExpression();
        java.lang.String str66 = valueExpression65.toString();
        org.jboss.dmr.ExpressionValue expressionValue68 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression69 = expressionValue68.asExpression();
        boolean boolean70 = valueExpression65.equals(valueExpression69);
        org.jboss.dmr.LongModelValue longModelValue72 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal73 = longModelValue72.asBigDecimal();
        int int74 = longModelValue72.asInt();
        org.jboss.dmr.ValueExpression valueExpression75 = longModelValue72.asExpression();
        boolean boolean76 = valueExpression69.equals(valueExpression75);
        int int77 = valueExpression75.resolveInt();
        org.jboss.dmr.BooleanModelValue booleanModelValue79 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long80 = booleanModelValue79.asLong();
        org.jboss.dmr.ValueExpression valueExpression81 = booleanModelValue79.asExpression();
        java.lang.String str82 = valueExpression81.toString();
        org.jboss.dmr.ExpressionValue expressionValue84 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression85 = expressionValue84.asExpression();
        boolean boolean86 = valueExpression81.equals(valueExpression85);
        java.lang.String str87 = valueExpression85.resolveString();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver88 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str89 = valueExpression85.resolveString(valueExpressionResolver88);
        java.lang.String str90 = valueExpression75.resolveString(valueExpressionResolver88);
        java.lang.String str91 = valueExpression61.resolveString(valueExpressionResolver88);
        long long92 = valueExpression51.resolveLong(valueExpressionResolver88);
        java.lang.String str93 = valueExpression35.resolveString(valueExpressionResolver88);
        java.math.BigDecimal bigDecimal94 = valueExpression19.resolveBigDecimal(valueExpressionResolver88);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "32" + "'", str25, "32");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(booleanModelValue33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(valueExpression35);
        org.junit.Assert.assertNotNull(booleanModelValue37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(valueExpression51);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10L + "'", long55 == 10L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(valueExpression61);
        org.junit.Assert.assertNotNull(booleanModelValue63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(valueExpression65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Expression \"true\"" + "'", str66, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(valueExpression75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(booleanModelValue79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(valueExpression81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Expression \"true\"" + "'", str82, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "52" + "'", str90, "52");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "10.0" + "'", str91, "10.0");
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "true" + "'", str93, "true");
        org.junit.Assert.assertNotNull(bigDecimal94);
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(10);
        boolean boolean3 = intModelValue1.asBoolean(false);
        byte[] byteArray4 = intModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue5 = new org.jboss.dmr.BytesModelValue(byteArray4);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 10]");
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        java.io.InputStream inputStream22 = null;
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24);
        org.jboss.dmr.stream.ModelReader modelReader26 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream24);
        java.io.OutputStream outputStream27 = null;
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream(outputStream27);
        outputStream28.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream28);
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        outputStream30.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream34);
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream34);
        outputStream36.flushBase64();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelReader26);
        org.junit.Assert.assertNotNull(modelWriter35);
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        java.math.BigDecimal bigDecimal15 = bytesModelValue12.asBigDecimal();
        java.lang.Object obj16 = null;
        boolean boolean17 = bytesModelValue12.equals(obj16);
        java.io.DataOutput dataOutput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue12.writeExternal(dataOutput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", byteArray6);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long11 = modelNode10.asLong();
        org.jboss.dmr.ValueExpression valueExpression12 = modelNode10.asExpression();
        java.math.BigDecimal bigDecimal13 = valueExpression12.resolveBigDecimal();
        java.lang.String str14 = valueExpression12.getExpressionString();
        org.jboss.dmr.ModelNode modelNode15 = modelNode0.set("BYTES_VALUE", valueExpression12);
        org.jboss.dmr.ModelNode modelNode16 = modelNode0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = modelNode16.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1.0" + "'", str14, "1.0");
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode16);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue5 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean6 = stringModelValue3.equals(stringModelValue5);
        byte[] byteArray7 = stringModelValue5.asBytes();
        java.lang.Object obj8 = null;
        boolean boolean9 = stringModelValue5.equals(obj8);
        boolean boolean11 = stringModelValue5.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean12 = stringModelValue1.equals(stringModelValue5);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = stringModelValue1.getChild(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set(property11);
        org.jboss.dmr.ModelType modelType13 = org.jboss.dmr.ModelType.BOOLEAN;
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.set(modelType13);
        char char15 = modelType13.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue16 = org.jboss.dmr.TypeModelValue.of(modelType13);
        org.jboss.dmr.ModelType modelType17 = typeModelValue16.asType();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + modelType13 + "' != '" + org.jboss.dmr.ModelType.BOOLEAN + "'", modelType13.equals(org.jboss.dmr.ModelType.BOOLEAN));
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'Z' + "'", char15 == 'Z');
        org.junit.Assert.assertNotNull(typeModelValue16);
        org.junit.Assert.assertTrue("'" + modelType17 + "' != '" + org.jboss.dmr.ModelType.BOOLEAN + "'", modelType17.equals(org.jboss.dmr.ModelType.BOOLEAN));
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        java.lang.String str5 = stringModelValue4.toString();
        boolean boolean6 = stringModelValue1.equals(stringModelValue4);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger12 = booleanModelValue11.asBigInteger();
        byte[] byteArray13 = booleanModelValue11.asBytes();
        org.jboss.dmr.ModelNode modelNode14 = modelNode8.set("expression \"hi!\"", byteArray13);
        java.lang.String str16 = org.jboss.dmr.Base64.encodeBytes(byteArray13, 1);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(byteArray13);
        boolean boolean18 = stringModelValue4.equals((java.lang.Object) byteArray13);
        java.io.PrintWriter printWriter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue4.formatAsJSON(printWriter19, 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"" + "'", str5, "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AQ==" + "'", str16, "AQ==");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.get(strArray10);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asList();
        org.jboss.dmr.ListModelValue listModelValue17 = new org.jboss.dmr.ListModelValue(modelNodeList16);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue17);
        org.jboss.dmr.ModelValue modelValue19 = listModelValue17.resolve();
        int int21 = listModelValue17.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue17.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList23 = modelNode11.asPropertyList(propertyList22);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.get(strArray30);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue37);
        org.jboss.dmr.ModelValue modelValue39 = listModelValue37.resolve();
        int int41 = listModelValue37.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList42 = listModelValue37.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList43 = modelNode31.asPropertyList(propertyList42);
        modelNode11.setNoCopy(modelNode31);
        org.jboss.dmr.ModelNode modelNode45 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode11);
        org.jboss.dmr.ModelNode modelNode47 = modelNode11.set(false);
        org.jboss.dmr.LongModelValue longModelValue49 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str50 = longModelValue49.asString();
        byte[] byteArray51 = longModelValue49.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue52 = new org.jboss.dmr.BytesModelValue(byteArray51);
        java.lang.String str53 = bytesModelValue52.asString();
        int int54 = bytesModelValue52.asInt();
        long long56 = bytesModelValue52.asLong((long) (short) 1);
        long long57 = bytesModelValue52.asLong();
        byte[] byteArray58 = bytesModelValue52.asBytes();
        org.jboss.dmr.ModelNode modelNode59 = modelNode11.set(byteArray58);
        org.jboss.dmr.ModelNode modelNode60 = modelNode59.setEmptyList();
        org.jboss.dmr.ModelType modelType61 = modelNode60.getType();
        org.jboss.dmr.BooleanModelValue booleanModelValue63 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long64 = booleanModelValue63.asLong();
        org.jboss.dmr.ValueExpression valueExpression65 = booleanModelValue63.asExpression();
        java.lang.String str66 = valueExpression65.toString();
        org.jboss.dmr.ModelNode modelNode67 = modelNode60.add(valueExpression65);
        org.jboss.dmr.ModelNode modelNode69 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode72 = modelNode69.set("hi!", 0.0d);
        org.jboss.dmr.Property property73 = new org.jboss.dmr.Property("", modelNode72);
        org.jboss.dmr.Property property74 = property73.clone();
        org.jboss.dmr.ModelNode modelNode75 = modelNode67.set(property73);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode77 = modelNode67.remove("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(propertyList42);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str53, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertTrue("'" + modelType61 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType61.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(booleanModelValue63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(valueExpression65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Expression \"true\"" + "'", str66, "Expression \"true\"");
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(modelNode75);
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set(property11);
        java.lang.String str13 = modelNode12.asString();
        org.jboss.dmr.ModelType modelType14 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode(modelType14);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("", modelNode20);
        org.jboss.dmr.ModelNode modelNode22 = modelNode15.set(property21);
        org.jboss.dmr.ModelNode modelNode23 = property21.getValue();
        org.jboss.dmr.ModelNode modelNode24 = modelNode12.set(property21);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode24.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode28 = modelNode24.set("", true);
        org.jboss.dmr.ModelNode modelNode29 = modelNode24.setEmptyObject();
        java.math.BigInteger bigInteger31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode32 = modelNode29.add("AAAAZA==", bigInteger31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str13, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType14.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode29);
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        long long5 = intModelValue1.asLong(0L);
        org.jboss.dmr.IntModelValue intModelValue7 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long9 = intModelValue7.asLong((long) 'b');
        java.lang.String str10 = intModelValue7.asString();
        java.math.BigInteger bigInteger11 = intModelValue7.asBigInteger();
        byte[] byteArray12 = intModelValue7.asBytes();
        long long14 = intModelValue7.asLong((long) 8);
        boolean boolean15 = intModelValue1.equals(intModelValue7);
        int int16 = intModelValue7.asInt();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = modelNode20.asList();
        org.jboss.dmr.ListModelValue listModelValue22 = new org.jboss.dmr.ListModelValue(modelNodeList21);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue22);
        org.jboss.dmr.ModelValue modelValue24 = listModelValue22.resolve();
        int int26 = listModelValue22.asInt((int) (byte) 100);
        boolean boolean28 = listModelValue22.has(0);
        org.jboss.dmr.LongModelValue longModelValue30 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str31 = longModelValue30.asString();
        byte[] byteArray32 = longModelValue30.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue33 = new org.jboss.dmr.BytesModelValue(byteArray32);
        java.lang.String str34 = bytesModelValue33.asString();
        int int35 = bytesModelValue33.asInt();
        byte[] byteArray36 = bytesModelValue33.asBytes();
        org.jboss.dmr.LongModelValue longModelValue38 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str39 = longModelValue38.asString();
        byte[] byteArray40 = longModelValue38.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue41 = new org.jboss.dmr.BytesModelValue(byteArray40);
        java.lang.String str42 = bytesModelValue41.asString();
        int int43 = bytesModelValue41.asInt();
        int int44 = bytesModelValue41.asInt();
        org.jboss.dmr.LongModelValue longModelValue46 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str47 = longModelValue46.asString();
        byte[] byteArray48 = longModelValue46.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue49 = new org.jboss.dmr.BytesModelValue(byteArray48);
        double double50 = bytesModelValue49.asDouble();
        boolean boolean51 = bytesModelValue41.equals(bytesModelValue49);
        byte[] byteArray52 = bytesModelValue49.asBytes();
        java.math.BigInteger bigInteger53 = bytesModelValue49.asBigInteger();
        boolean boolean54 = bytesModelValue33.equals(bytesModelValue49);
        int int56 = bytesModelValue49.asInt((int) 'J');
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory58 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream59 = null;
        org.jboss.dmr.Base64.InputStream inputStream61 = new org.jboss.dmr.Base64.InputStream(inputStream59, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream62 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream61);
        org.jboss.dmr.stream.ModelReader modelReader63 = modelStreamFactory58.newModelReader((java.io.InputStream) inputStream62);
        java.io.OutputStream outputStream64 = null;
        org.jboss.dmr.Base64.OutputStream outputStream65 = new org.jboss.dmr.Base64.OutputStream(outputStream64);
        org.jboss.dmr.Base64.OutputStream outputStream66 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream65);
        outputStream65.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter69 = modelStreamFactory58.newModelWriter((java.io.OutputStream) outputStream65);
        org.jboss.dmr.stream.ModelWriter modelWriter70 = modelWriter69.writeListStart();
        bytesModelValue49.write(modelWriter70);
        org.jboss.dmr.BooleanModelValue booleanModelValue73 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray74 = booleanModelValue73.asBytes();
        java.lang.String str75 = booleanModelValue73.asString();
        int int76 = booleanModelValue73.asInt();
        long long77 = booleanModelValue73.asLong();
        boolean boolean79 = booleanModelValue73.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger80 = booleanModelValue73.asBigInteger();
        java.lang.String str81 = booleanModelValue73.asString();
        byte[] byteArray82 = booleanModelValue73.asBytes();
        java.lang.String str84 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) byteArray82, 10);
        org.jboss.dmr.stream.ModelWriter modelWriter85 = modelWriter70.writeBytes(byteArray82);
        org.jboss.dmr.stream.ModelWriter modelWriter87 = modelWriter70.writeDouble((double) 'Z');
        listModelValue22.write(modelWriter87);
        intModelValue7.write(modelWriter87);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "32" + "'", str10, "32");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str34, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str42, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4.9E-324d + "'", double50 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory58);
        org.junit.Assert.assertNotNull(modelReader63);
        org.junit.Assert.assertNotNull(modelWriter69);
        org.junit.Assert.assertNotNull(modelWriter70);
        org.junit.Assert.assertNotNull(booleanModelValue73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "true" + "'", str75, "true");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "true" + "'", str81, "true");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA" + "'", str84, "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.junit.Assert.assertNotNull(modelWriter85);
        org.junit.Assert.assertNotNull(modelWriter87);
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue8 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode5, false);
        boolean boolean10 = propertyModelValue8.has("10.0");
        org.jboss.dmr.ModelNode modelNode12 = propertyModelValue8.getChild(0);
        org.jboss.dmr.PropertyModelValue propertyModelValue14 = new org.jboss.dmr.PropertyModelValue("Expression \"1\"", modelNode12, true);
        java.util.Set<java.lang.String> strSet15 = propertyModelValue14.getKeys();
        java.lang.String str16 = propertyModelValue14.asString();
        java.io.PrintWriter printWriter17 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue14.formatAsJSON(printWriter17, 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(\"Expression \\\"1\\\"\" => (\"hi!\" => expression \"hi!\"))" + "'", str16, "(\"Expression \\\"1\\\"\" => (\"hi!\" => expression \"hi!\"))");
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream5 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3, (int) (byte) -1);
        outputStream3.suspendEncoding();
        outputStream3.write(100);
        outputStream3.flushBase64();
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = objectModelValue7.asList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        org.jboss.dmr.ModelValue modelValue17 = objectModelValue15.protect();
        long long18 = objectModelValue15.asLong();
        boolean boolean20 = objectModelValue15.has("(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")");
        boolean boolean21 = objectModelValue15.asBoolean();
        boolean boolean22 = objectModelValue7.equals(objectModelValue15);
        int int24 = objectModelValue7.asInt((int) 'p');
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set(property11);
        java.lang.String str13 = modelNode12.asString();
        org.jboss.dmr.ModelType modelType14 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode(modelType14);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("", modelNode20);
        org.jboss.dmr.ModelNode modelNode22 = modelNode15.set(property21);
        org.jboss.dmr.ModelNode modelNode23 = property21.getValue();
        org.jboss.dmr.ModelNode modelNode24 = modelNode12.set(property21);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode24.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode28 = modelNode24.set("", true);
        org.jboss.dmr.ModelNode modelNode29 = modelNode24.setEmptyObject();
        // The following exception was thrown during execution in test generation
        try {
            double double31 = modelNode24.asDouble(97.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str13, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType14.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode29);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode(valueExpression11);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver13 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str15 = valueExpressionResolver13.resolvePart("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        java.lang.String str17 = valueExpressionResolver13.resolvePart("\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\"");
        java.lang.String str19 = valueExpressionResolver13.resolvePart("{\n    \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : {\n        \"hi!\" : 0.0\n    }\n}");
        java.lang.String str21 = valueExpressionResolver13.resolvePart("{\"hi!\" => 0.0}");
        // The following exception was thrown during execution in test generation
        try {
            int int22 = valueExpression11.resolveInt(valueExpressionResolver13);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"hi!\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.lang.String str5 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode1);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode1.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set((double) 0);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.PROPERTY;
        char char11 = modelType10.getTypeChar();
        org.jboss.dmr.ModelNode modelNode12 = modelNode1.set("[(\"hi!\" => 0.0)]", modelType10);
        org.jboss.dmr.Property property13 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode12);
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.STRING;
        org.jboss.dmr.ModelNode modelNode16 = modelNode12.set("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", modelType15);
        org.jboss.dmr.Validation.validate(modelNode12, "rO0ABXA=");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'p' + "'", char11 == 'p');
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType15.equals(org.jboss.dmr.ModelType.STRING));
        org.junit.Assert.assertNotNull(modelNode16);
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        boolean boolean12 = modelNode9.equals((java.lang.Object) 100L);
        boolean boolean13 = modelNode1.equals(modelNode9);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("", modelNode18);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.get(strArray20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int23 = modelNode22.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.setExpression("hi!", "hi!");
        java.lang.String str28 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode24);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList29 = modelNode24.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode30 = modelNode22.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode32 = modelNode9.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode34 = modelNode9.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.PropertyModelValue propertyModelValue36 = new org.jboss.dmr.PropertyModelValue("1.0", modelNode9, false);
        boolean boolean37 = modelNode9.asBoolean();
        org.jboss.dmr.IntModelValue intModelValue39 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str40 = intModelValue39.asString();
        double double42 = intModelValue39.asDouble((double) 2);
        java.math.BigInteger bigInteger43 = intModelValue39.asBigInteger();
        org.jboss.dmr.ModelNode modelNode44 = modelNode9.add(bigInteger43);
        org.jboss.dmr.ModelNode modelNode46 = modelNode9.add(true);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str28, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "32" + "'", str40, "32");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 32.0d + "'", double42 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNode46);
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        byte[] byteArray3 = stringModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue1.asExpression();
        byte[] byteArray5 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue7 = new org.jboss.dmr.StringModelValue("[big integer 1,big integer 1]");
        org.jboss.dmr.ValueExpression valueExpression8 = stringModelValue7.asExpression();
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long12 = intModelValue10.asLong((long) 'b');
        java.lang.String str13 = intModelValue10.asString();
        java.math.BigDecimal bigDecimal14 = intModelValue10.asBigDecimal();
        java.math.BigInteger bigInteger15 = intModelValue10.asBigInteger();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger21 = booleanModelValue20.asBigInteger();
        byte[] byteArray22 = booleanModelValue20.asBytes();
        org.jboss.dmr.ModelNode modelNode23 = modelNode17.set("expression \"hi!\"", byteArray22);
        org.jboss.dmr.ModelNode modelNode24 = modelNode23.clear();
        org.jboss.dmr.BooleanModelValue booleanModelValue26 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger27 = booleanModelValue26.asBigInteger();
        byte[] byteArray28 = booleanModelValue26.asBytes();
        boolean boolean29 = booleanModelValue26.asBoolean();
        byte[] byteArray30 = booleanModelValue26.asBytes();
        org.jboss.dmr.DoubleModelValue doubleModelValue32 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long33 = doubleModelValue32.asLong();
        boolean boolean34 = doubleModelValue32.asBoolean();
        byte[] byteArray35 = doubleModelValue32.asBytes();
        java.math.BigInteger bigInteger36 = doubleModelValue32.asBigInteger();
        boolean boolean37 = booleanModelValue26.equals((java.lang.Object) bigInteger36);
        org.jboss.dmr.ModelNode modelNode38 = modelNode23.set(bigInteger36);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory40 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream41 = null;
        org.jboss.dmr.Base64.InputStream inputStream43 = new org.jboss.dmr.Base64.InputStream(inputStream41, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream43);
        org.jboss.dmr.stream.ModelReader modelReader45 = modelStreamFactory40.newModelReader((java.io.InputStream) inputStream44);
        java.io.OutputStream outputStream46 = null;
        org.jboss.dmr.Base64.OutputStream outputStream47 = new org.jboss.dmr.Base64.OutputStream(outputStream46);
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream47);
        outputStream47.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelStreamFactory40.newModelWriter((java.io.OutputStream) outputStream47);
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelWriter51.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter54 = modelWriter51.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter56 = modelWriter54.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter58 = modelWriter54.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter60 = modelWriter54.writeLong((long) 52);
        modelNode23.write(modelWriter60);
        intModelValue10.write(modelWriter60);
        stringModelValue7.write(modelWriter60);
        boolean boolean64 = stringModelValue1.equals(stringModelValue7);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = stringModelValue1.asDouble((double) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32" + "'", str13, "32");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(booleanModelValue26);
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelStreamFactory40);
        org.junit.Assert.assertNotNull(modelReader45);
        org.junit.Assert.assertNotNull(modelWriter51);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(modelWriter54);
        org.junit.Assert.assertNotNull(modelWriter56);
        org.junit.Assert.assertNotNull(modelWriter58);
        org.junit.Assert.assertNotNull(modelWriter60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.clear();
        int int10 = modelNode8.asInt(112);
        java.lang.String str12 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode8, (int) 'b');
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.lang.String str17 = modelNode13.toString();
        org.jboss.dmr.ModelNode modelNode18 = modelNode13.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode20 = modelNode13.set(100);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode25 = modelNode23.set((int) '#');
        org.jboss.dmr.ModelNode modelNode26 = modelNode13.setNoCopy("EXPRESSION_VALUE", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode26.resolve();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode32 = modelNode31.setEmptyList();
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long35 = modelNode34.asLong();
        org.jboss.dmr.ValueExpression valueExpression36 = modelNode34.asExpression();
        java.math.BigDecimal bigDecimal37 = valueExpression36.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode(bigDecimal37);
        org.jboss.dmr.ModelNode modelNode39 = modelNode31.set(bigDecimal37);
        org.jboss.dmr.ModelNode modelNode40 = modelNode26.set(bigDecimal37);
        org.jboss.dmr.ModelType modelType42 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode(modelType42);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode48 = modelNode45.set("hi!", 0.0d);
        org.jboss.dmr.Property property49 = new org.jboss.dmr.Property("", modelNode48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode43.set(property49);
        org.jboss.dmr.ModelNode modelNode51 = property49.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue52 = new org.jboss.dmr.PropertyModelValue(property49);
        java.util.List<org.jboss.dmr.Property> propertyList53 = propertyModelValue52.asPropertyList();
        org.jboss.dmr.ModelNode modelNode55 = propertyModelValue52.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode56 = modelNode55.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue59 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long60 = booleanModelValue59.asLong();
        org.jboss.dmr.ValueExpression valueExpression61 = booleanModelValue59.asExpression();
        java.lang.String str62 = valueExpression61.toString();
        org.jboss.dmr.ExpressionValue expressionValue64 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression65 = expressionValue64.asExpression();
        boolean boolean66 = valueExpression61.equals(valueExpression65);
        org.jboss.dmr.LongModelValue longModelValue68 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal69 = longModelValue68.asBigDecimal();
        int int70 = longModelValue68.asInt();
        org.jboss.dmr.ValueExpression valueExpression71 = longModelValue68.asExpression();
        boolean boolean72 = valueExpression65.equals(valueExpression71);
        int int73 = valueExpression71.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue75 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression76 = expressionValue75.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver77 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str78 = valueExpression76.resolveString(valueExpressionResolver77);
        java.math.BigInteger bigInteger79 = valueExpression71.resolveBigInteger(valueExpressionResolver77);
        org.jboss.dmr.ModelNode modelNode80 = modelNode55.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression71);
        org.jboss.dmr.ModelNode modelNode81 = modelNode40.set("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression71);
        boolean boolean83 = modelNode40.has(52);
        boolean boolean85 = modelNode40.hasDefined("(\"35\" => 0.0)");
        boolean boolean86 = modelNode8.equals(modelNode40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Double double87 = modelNode40.asDoubleOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 112 + "'", int10 == 112);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgnLG0\nAgDPxTfOMAAAAA==" + "'", str12, "H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgnLG0\nAgDPxTfOMAAAAA==");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(\"hi!\" => 0.0)" + "'", str17, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(valueExpression36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertTrue("'" + modelType42 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType42.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(propertyList53);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(booleanModelValue59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(valueExpression61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Expression \"true\"" + "'", str62, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(valueExpression71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(valueExpression76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1" + "'", str78, "1");
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertNotNull(modelNode81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.StringModelValue stringModelValue6 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        boolean boolean7 = stringModelValue3.equals(stringModelValue6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression12 = stringModelValue11.asExpression();
        boolean boolean13 = stringModelValue9.equals(stringModelValue11);
        boolean boolean14 = stringModelValue6.equals(stringModelValue11);
        byte[] byteArray15 = stringModelValue6.asBytes();
        java.lang.String str16 = stringModelValue6.asString();
        java.lang.String str17 = stringModelValue6.asString();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = stringModelValue6.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Expression \"true\"\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Expression \"true\"" + "'", str16, "Expression \"true\"");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Expression \"true\"" + "'", str17, "Expression \"true\"");
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long4 = modelNode3.asLong();
        org.jboss.dmr.ValueExpression valueExpression5 = modelNode3.asExpression();
        java.math.BigDecimal bigDecimal6 = valueExpression5.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(valueExpression5);
        org.jboss.dmr.ModelType modelType8 = modelNode7.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = modelNode7.remove((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.EXPRESSION + "'", modelType8.equals(org.jboss.dmr.ModelType.EXPRESSION));
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        int int6 = intModelValue1.asInt((int) (byte) 100);
        long long8 = intModelValue1.asLong(100L);
        java.lang.String str9 = intModelValue1.asString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "32" + "'", str9, "32");
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        int int11 = modelNode1.asInt(2);
        org.jboss.dmr.ModelType modelType13 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.set("[(\"hi!\" => 0.0)]", modelType13);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory16 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream17 = null;
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream(inputStream17, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream19);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory16.newModelReader((java.io.InputStream) inputStream20);
        java.io.OutputStream outputStream22 = null;
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream(outputStream22);
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream23);
        outputStream23.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelStreamFactory16.newModelWriter((java.io.OutputStream) outputStream23);
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter27.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter27.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter32 = modelWriter27.writeDouble((double) 100.0f);
        org.jboss.dmr.stream.ModelWriter modelWriter34 = modelWriter27.writeDouble((double) '#');
        modelNode1.write(modelWriter27);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger36 = modelNode1.asBigIntegerOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + modelType13 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType13.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelStreamFactory16);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter28);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelWriter32);
        org.junit.Assert.assertNotNull(modelWriter34);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'I');
        org.jboss.dmr.ObjectModelValue objectModelValue2 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode3 = objectModelValue2.asObject();
        java.util.Set<java.lang.String> strSet4 = objectModelValue2.getKeys();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue2.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelValue modelValue8 = objectModelValue2.copy(false);
        int int9 = objectModelValue2.asInt();
        java.lang.String str10 = objectModelValue2.asString();
        boolean boolean11 = objectModelValue2.asBoolean();
        java.util.Set<java.lang.String> strSet12 = objectModelValue2.getKeys();
        org.jboss.dmr.ObjectModelValue objectModelValue13 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode14 = objectModelValue13.asObject();
        java.util.Set<java.lang.String> strSet15 = objectModelValue13.getKeys();
        boolean boolean17 = objectModelValue13.has((int) 'a');
        boolean boolean19 = objectModelValue13.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue20 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode21 = objectModelValue20.asObject();
        java.util.Set<java.lang.String> strSet22 = objectModelValue20.getKeys();
        boolean boolean24 = objectModelValue20.has((int) 'a');
        boolean boolean25 = objectModelValue13.equals(objectModelValue20);
        org.jboss.dmr.ModelNode modelNode27 = objectModelValue13.getChild("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==");
        boolean boolean28 = objectModelValue2.equals(objectModelValue13);
        boolean boolean30 = objectModelValue13.has("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BWwAAAAAeA==");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = objectModelValue13.asList();
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        java.lang.Long long33 = modelNode32.asLongOrNull();
        java.lang.String str34 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode32);
        org.jboss.dmr.ModelType modelType36 = org.jboss.dmr.ModelType.LONG;
        org.jboss.dmr.ModelNode modelNode37 = modelNode32.set("rO0ABXNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5n\nLk51bWJlcoaslR0LlOCLAgAAeHAAAABk", modelType36);
        modelNode37.protect();
        boolean boolean39 = objectModelValue13.equals((java.lang.Object) modelNode37);
        boolean boolean40 = modelNode1.equals(modelNode37);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(modelNode6);
        org.junit.Assert.assertNotNull(modelValue8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertNull(long33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4" + "'", str34, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.junit.Assert.assertTrue("'" + modelType36 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType36.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelValue modelValue11 = listModelValue5.clone();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory13 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream14 = null;
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream(inputStream14, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue18 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str19 = longModelValue18.asString();
        byte[] byteArray20 = longModelValue18.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue21 = new org.jboss.dmr.BytesModelValue(byteArray20);
        int int24 = inputStream16.read(byteArray20, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream16, (-1));
        org.jboss.dmr.stream.ModelReader modelReader27 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream26);
        java.io.InputStream inputStream28 = null;
        org.jboss.dmr.Base64.InputStream inputStream30 = new org.jboss.dmr.Base64.InputStream(inputStream28, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream31 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream30);
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream30);
        org.jboss.dmr.stream.ModelReader modelReader33 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream30);
        java.io.InputStream inputStream34 = null;
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream(inputStream34, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream36);
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream36);
        java.io.OutputStream outputStream39 = null;
        org.jboss.dmr.Base64.OutputStream outputStream40 = new org.jboss.dmr.Base64.OutputStream(outputStream39);
        outputStream40.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream42 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40);
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream42);
        outputStream42.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream42);
        org.jboss.dmr.Base64.OutputStream outputStream46 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream42);
        org.jboss.dmr.stream.ModelWriter modelWriter47 = modelStreamFactory13.newModelWriter((java.io.OutputStream) outputStream46);
        listModelValue5.write(modelWriter47);
        int int49 = listModelValue5.asInt();
        org.jboss.dmr.ModelValue modelValue50 = listModelValue5.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode52 = listModelValue5.insertChild(100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelStreamFactory13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(modelReader27);
        org.junit.Assert.assertNotNull(modelReader33);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertNotNull(modelWriter47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(modelValue50);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        boolean boolean18 = listModelValue13.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray19 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean20 = listModelValue13.equals((java.lang.Object) modelNodeArray19);
        boolean boolean21 = typeModelValue5.equals((java.lang.Object) listModelValue13);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue13.resolve();
        org.jboss.dmr.ModelValue modelValue23 = listModelValue13.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = modelValue23.requireChild("{ \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : { \"hi!\" : 0.0 } }");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '{ \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : { \"hi!\" : 0.0 } }' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(modelNodeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(modelValue23);
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        double double5 = doubleModelValue1.asDouble();
        org.jboss.dmr.ValueExpression valueExpression6 = doubleModelValue1.asExpression();
        java.lang.String str7 = valueExpression6.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = valueExpression6.resolveBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Expression \"10.0\"" + "'", str7, "Expression \"10.0\"");
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(10);
        org.jboss.dmr.IntModelValue intModelValue3 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long5 = intModelValue3.asLong((long) 'b');
        java.lang.String str6 = intModelValue3.asString();
        java.math.BigDecimal bigDecimal7 = intModelValue3.asBigDecimal();
        java.math.BigInteger bigInteger8 = intModelValue3.asBigInteger();
        java.math.BigDecimal bigDecimal9 = intModelValue3.asBigDecimal();
        boolean boolean10 = intModelValue1.equals(intModelValue3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "32" + "'", str6, "32");
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory4 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream5 = null;
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream(inputStream5, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream8 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream7);
        org.jboss.dmr.stream.ModelReader modelReader9 = modelStreamFactory4.newModelReader((java.io.InputStream) inputStream8);
        java.io.OutputStream outputStream10 = null;
        org.jboss.dmr.Base64.OutputStream outputStream11 = new org.jboss.dmr.Base64.OutputStream(outputStream10);
        org.jboss.dmr.Base64.OutputStream outputStream12 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream11);
        outputStream11.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelStreamFactory4.newModelWriter((java.io.OutputStream) outputStream11);
        doubleModelValue1.write(modelWriter15);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter15.writeListStart();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertNotNull(modelStreamFactory4);
        org.junit.Assert.assertNotNull(modelReader9);
        org.junit.Assert.assertNotNull(modelWriter15);
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        boolean boolean15 = intModelValue9.asBoolean(true);
        java.math.BigDecimal bigDecimal16 = intModelValue9.asBigDecimal();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(bigDecimal16);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long2 = longModelValue1.asLong();
        int int3 = longModelValue1.asInt();
        org.jboss.dmr.ModelValue modelValue4 = longModelValue1.protect();
        double double5 = longModelValue1.asDouble();
        java.lang.String str6 = longModelValue1.asString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        int int4 = objectModelValue0.asInt((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue5 = objectModelValue0.protect();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property6 = objectModelValue0.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(modelValue5);
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode19 = modelNode18.setEmptyList();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long22 = modelNode21.asLong();
        org.jboss.dmr.ValueExpression valueExpression23 = modelNode21.asExpression();
        java.math.BigDecimal bigDecimal24 = valueExpression23.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode18.set(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode27 = modelNode13.set(bigDecimal24);
        org.jboss.dmr.ModelType modelType29 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode(modelType29);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        org.jboss.dmr.Property property36 = new org.jboss.dmr.Property("", modelNode35);
        org.jboss.dmr.ModelNode modelNode37 = modelNode30.set(property36);
        org.jboss.dmr.ModelNode modelNode38 = property36.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue39 = new org.jboss.dmr.PropertyModelValue(property36);
        java.util.List<org.jboss.dmr.Property> propertyList40 = propertyModelValue39.asPropertyList();
        org.jboss.dmr.ModelNode modelNode42 = propertyModelValue39.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode43 = modelNode42.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue46 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long47 = booleanModelValue46.asLong();
        org.jboss.dmr.ValueExpression valueExpression48 = booleanModelValue46.asExpression();
        java.lang.String str49 = valueExpression48.toString();
        org.jboss.dmr.ExpressionValue expressionValue51 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression52 = expressionValue51.asExpression();
        boolean boolean53 = valueExpression48.equals(valueExpression52);
        org.jboss.dmr.LongModelValue longModelValue55 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal56 = longModelValue55.asBigDecimal();
        int int57 = longModelValue55.asInt();
        org.jboss.dmr.ValueExpression valueExpression58 = longModelValue55.asExpression();
        boolean boolean59 = valueExpression52.equals(valueExpression58);
        int int60 = valueExpression58.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue62 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression63 = expressionValue62.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver64 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str65 = valueExpression63.resolveString(valueExpressionResolver64);
        java.math.BigInteger bigInteger66 = valueExpression58.resolveBigInteger(valueExpressionResolver64);
        org.jboss.dmr.ModelNode modelNode67 = modelNode42.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression58);
        org.jboss.dmr.ModelNode modelNode68 = modelNode27.set("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression58);
        boolean boolean70 = modelNode27.has(52);
        org.jboss.dmr.ModelNode modelNode72 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long73 = modelNode72.asLong();
        org.jboss.dmr.ValueExpression valueExpression74 = modelNode72.asExpression();
        java.math.BigDecimal bigDecimal75 = valueExpression74.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode76 = new org.jboss.dmr.ModelNode(bigDecimal75);
        org.jboss.dmr.ModelNode modelNode77 = new org.jboss.dmr.ModelNode(bigDecimal75);
        org.jboss.dmr.ModelNode modelNode78 = modelNode27.set(bigDecimal75);
        org.jboss.dmr.ModelNode modelNode79 = new org.jboss.dmr.ModelNode(bigDecimal75);
        org.jboss.dmr.ModelNode modelNode80 = new org.jboss.dmr.ModelNode(bigDecimal75);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + modelType29 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType29.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(booleanModelValue46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(valueExpression48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Expression \"true\"" + "'", str49, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(valueExpression58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(valueExpression63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(valueExpression74);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(modelNode78);
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(bigInteger3);
        boolean boolean6 = modelNode5.isProtected();
        org.jboss.dmr.ModelNode modelNode7 = modelNode5.clone();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode11 = modelNode10.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue12 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue12.asObject();
        java.util.Set<java.lang.String> strSet14 = objectModelValue12.getKeys();
        boolean boolean16 = objectModelValue12.has((int) 'a');
        boolean boolean18 = objectModelValue12.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue19 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode20 = objectModelValue19.asObject();
        java.util.Set<java.lang.String> strSet21 = objectModelValue19.getKeys();
        boolean boolean23 = objectModelValue19.has((int) 'a');
        boolean boolean24 = objectModelValue12.equals(objectModelValue19);
        org.jboss.dmr.ModelNode modelNode25 = objectModelValue19.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = objectModelValue19.asList();
        org.jboss.dmr.ModelNode modelNode27 = modelNode10.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList26);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode10, true);
        org.jboss.dmr.ModelNode modelNode31 = modelNode10.add(2);
        boolean boolean33 = modelNode31.asBoolean(false);
        boolean boolean35 = modelNode31.hasDefined("AAAAIA==");
        org.jboss.dmr.IntModelValue intModelValue38 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long40 = intModelValue38.asLong((long) 'b');
        java.lang.String str41 = intModelValue38.asString();
        java.math.BigInteger bigInteger42 = intModelValue38.asBigInteger();
        byte[] byteArray43 = intModelValue38.asBytes();
        long long45 = intModelValue38.asLong((long) 8);
        boolean boolean47 = intModelValue38.equals((java.lang.Object) 97L);
        java.math.BigDecimal bigDecimal48 = intModelValue38.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode49 = modelNode31.add("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")", bigDecimal48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode5.set(bigDecimal48);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode52 = modelNode5.get("(\"-1\" => bytes {\n    0x01\n})");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "32" + "'", str41, "32");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.lang.String str6 = modelNode2.toString();
        org.jboss.dmr.ModelNode modelNode7 = modelNode2.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set(100);
        org.jboss.dmr.ModelNode modelNode10 = modelNode1.add(modelNode2);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((double) (-1.0f));
        double double14 = modelNode10.asDouble(1.0d);
        org.jboss.dmr.ModelNode modelNode15 = modelNode10.setEmptyList();
        org.jboss.dmr.PropertyModelValue propertyModelValue16 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3CUQ/8AAAAAAAAHg=", modelNode10);
        boolean boolean18 = propertyModelValue16.has("(\"\\\"org.jboss.dmr.stream.ModelException: (\\\\\\\"Expression \\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\"\\\\\\\" => (\\\\\\\"org.jboss.dmr.stream.ModelException: [(\\\\\\\\\\\\\\\"hi!\\\\\\\\\\\\\\\" => 0.0)]\\\\\\\" => BYTES))\\\"\" => false)");
        java.io.PrintWriter printWriter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue16.formatAsJSON(printWriter19, (int) 'i', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        int int13 = objectModelValue7.asInt();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        java.lang.String str15 = objectModelValue7.toString();
        long long17 = objectModelValue7.asLong(73L);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        byte[] byteArray3 = booleanModelValue1.asBytes();
        int int5 = booleanModelValue1.asInt((int) (short) 1);
        int int6 = booleanModelValue1.asInt();
        org.jboss.dmr.ValueExpression valueExpression7 = booleanModelValue1.asExpression();
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str10 = intModelValue9.asString();
        double double12 = intModelValue9.asDouble((double) 2);
        java.math.BigInteger bigInteger13 = intModelValue9.asBigInteger();
        java.math.BigInteger bigInteger14 = intModelValue9.asBigInteger();
        byte[] byteArray15 = intModelValue9.asBytes();
        int int16 = intModelValue9.asInt();
        boolean boolean17 = booleanModelValue1.equals((java.lang.Object) intModelValue9);
        double double18 = intModelValue9.asDouble();
        org.jboss.dmr.ValueExpression valueExpression19 = intModelValue9.asExpression();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "32" + "'", str10, "32");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
        org.junit.Assert.assertNotNull(valueExpression19);
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        org.jboss.dmr.ModelType modelType1 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(modelType1);
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.set("hi!", 0.0d);
        org.jboss.dmr.Property property8 = new org.jboss.dmr.Property("", modelNode7);
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set(property8);
        org.jboss.dmr.ModelNode modelNode10 = property8.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property8);
        java.util.List<org.jboss.dmr.Property> propertyList12 = propertyModelValue11.asPropertyList();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue11.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = modelNode14.setEmptyList();
        boolean boolean17 = modelNode15.asBoolean(false);
        org.jboss.dmr.ObjectModelValue objectModelValue19 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode20 = objectModelValue19.asObject();
        org.jboss.dmr.ModelNode modelNode22 = objectModelValue19.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode24 = objectModelValue19.getChild("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("PROPERTY_VALUE", modelNode24);
        modelNode15.setNoCopy(modelNode24);
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger29 = booleanModelValue28.asBigInteger();
        byte[] byteArray30 = booleanModelValue28.asBytes();
        boolean boolean31 = booleanModelValue28.asBoolean();
        byte[] byteArray32 = booleanModelValue28.asBytes();
        org.jboss.dmr.DoubleModelValue doubleModelValue34 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long35 = doubleModelValue34.asLong();
        boolean boolean36 = doubleModelValue34.asBoolean();
        byte[] byteArray37 = doubleModelValue34.asBytes();
        java.math.BigInteger bigInteger38 = doubleModelValue34.asBigInteger();
        boolean boolean39 = booleanModelValue28.equals((java.lang.Object) bigInteger38);
        org.jboss.dmr.ModelNode modelNode40 = modelNode15.set(bigInteger38);
        org.jboss.dmr.PropertyModelValue propertyModelValue41 = new org.jboss.dmr.PropertyModelValue("\"AAAAIA==\"", modelNode15);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode44 = modelNode15.add("{\n    \"EXPRESSION_VALUE\" : {\n        \"\" : {\n            \"hi!\" : 0.0\n        }\n    }\n}", (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType1 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType1.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(modelNode40);
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromJSONString("[1]");
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.add(true);
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("true", (double) 8);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.lang.String str11 = modelNode7.toString();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(100);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode19 = modelNode17.set((int) '#');
        org.jboss.dmr.ModelNode modelNode20 = modelNode7.setNoCopy("EXPRESSION_VALUE", modelNode19);
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.resolve();
        org.jboss.dmr.ModelType modelType22 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode(modelType22);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode23.set(property29);
        org.jboss.dmr.PropertyModelValue propertyModelValue31 = new org.jboss.dmr.PropertyModelValue(property29);
        org.jboss.dmr.PropertyModelValue propertyModelValue32 = new org.jboss.dmr.PropertyModelValue(property29);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = propertyModelValue32.asList();
        org.jboss.dmr.ModelNode modelNode34 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList33);
        org.jboss.dmr.IntModelValue intModelValue37 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str38 = intModelValue37.asString();
        double double40 = intModelValue37.asDouble((double) 2);
        java.math.BigDecimal bigDecimal41 = intModelValue37.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode42 = modelNode34.add("(\"hi!\" => 0.0)", bigDecimal41);
        org.jboss.dmr.ModelNode modelNode43 = modelNode3.set(bigDecimal41);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue44 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal41);
        long long46 = bigDecimalModelValue44.asLong((long) 112);
        java.math.BigDecimal bigDecimal47 = bigDecimalModelValue44.asBigDecimal();
        long long49 = bigDecimalModelValue44.asLong(112L);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"hi!\" => 0.0)" + "'", str11, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertTrue("'" + modelType22 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType22.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "32" + "'", str38, "32");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 32L + "'", long46 == 32L);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 32L + "'", long49 == 32L);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        org.jboss.dmr.ObjectModelValue objectModelValue6 = null;
        boolean boolean7 = objectModelValue4.equals(objectModelValue6);
        boolean boolean8 = objectModelValue0.equals(objectModelValue6);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asList();
        boolean boolean17 = objectModelValue0.equals((java.lang.Object) modelNode15);
        org.jboss.dmr.BooleanModelValue booleanModelValue19 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double20 = booleanModelValue19.asDouble();
        org.jboss.dmr.ModelValue modelValue21 = booleanModelValue19.copy();
        java.math.BigInteger bigInteger22 = booleanModelValue19.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue23 = new org.jboss.dmr.BigIntegerModelValue(bigInteger22);
        double double25 = bigIntegerModelValue23.asDouble((double) 'b');
        java.lang.String str26 = bigIntegerModelValue23.asString();
        org.jboss.dmr.ValueExpression valueExpression27 = bigIntegerModelValue23.asExpression();
        boolean boolean29 = bigIntegerModelValue23.asBoolean(true);
        boolean boolean30 = bigIntegerModelValue23.asBoolean();
        boolean boolean31 = bigIntegerModelValue23.asBoolean();
        org.jboss.dmr.BooleanModelValue booleanModelValue32 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double33 = booleanModelValue32.asDouble();
        org.jboss.dmr.ModelValue modelValue34 = booleanModelValue32.copy();
        java.math.BigInteger bigInteger35 = booleanModelValue32.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue36 = new org.jboss.dmr.BigIntegerModelValue(bigInteger35);
        int int38 = bigIntegerModelValue36.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue39 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double40 = booleanModelValue39.asDouble();
        org.jboss.dmr.ModelValue modelValue41 = booleanModelValue39.copy();
        java.math.BigInteger bigInteger42 = booleanModelValue39.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue43 = new org.jboss.dmr.BigIntegerModelValue(bigInteger42);
        java.lang.String str44 = bigIntegerModelValue43.asString();
        java.math.BigInteger bigInteger45 = bigIntegerModelValue43.asBigInteger();
        boolean boolean46 = bigIntegerModelValue36.equals(bigIntegerModelValue43);
        boolean boolean47 = bigIntegerModelValue23.equals(bigIntegerModelValue43);
        java.math.BigDecimal bigDecimal48 = bigIntegerModelValue23.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue49 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode15.set("", bigDecimal48);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(booleanModelValue19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanModelValue32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(modelNode50);
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode4 = modelNode3.setEmptyList();
        org.jboss.dmr.ModelNode modelNode5 = modelNode3.asObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode5.get("Expression \"true\"");
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str11 = intModelValue10.asString();
        double double13 = intModelValue10.asDouble((double) 2);
        java.math.BigInteger bigInteger14 = intModelValue10.asBigInteger();
        org.jboss.dmr.ModelNode modelNode15 = modelNode7.set("Expression \"true\"", bigInteger14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Long long16 = modelNode7.asLongOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(modelNode15);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("1");
        boolean boolean5 = objectModelValue0.asBoolean();
        int int7 = objectModelValue0.asInt(0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList8 = objectModelValue0.asList();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.setExpression("hi!", "hi!");
        java.lang.String str14 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode10);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode10.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode17 = modelNode10.set((double) 0);
        org.jboss.dmr.ModelNode modelNode18 = modelNode10.clear();
        org.jboss.dmr.IntModelValue intModelValue21 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long23 = intModelValue21.asLong((long) 'b');
        java.lang.String str24 = intModelValue21.asString();
        java.math.BigInteger bigInteger25 = intModelValue21.asBigInteger();
        org.jboss.dmr.ModelNode modelNode26 = modelNode18.add("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", bigInteger25);
        org.jboss.dmr.Property property28 = new org.jboss.dmr.Property("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => bytes {\n    0xb6, 0xbb, 0x9e\n})", modelNode18, true);
        boolean boolean29 = objectModelValue0.equals((java.lang.Object) property28);
        org.jboss.dmr.ModelNode modelNode30 = objectModelValue0.asObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode32 = objectModelValue0.requireChild("\"\\\"[(\\\\\\\"hi!\\\\\\\" => expression \\\\\\\"hi!\\\\\\\"),bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }]\\\"\"");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '\"\\\"[(\\\\\\\"hi!\\\\\\\" => expression \\\\\\\"hi!\\\\\\\"),bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }]\\\"\"' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(modelNodeList8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str14, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "32" + "'", str24, "32");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(modelNode30);
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        org.jboss.dmr.ModelType modelType1 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(modelType1);
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.set("hi!", 0.0d);
        org.jboss.dmr.Property property8 = new org.jboss.dmr.Property("", modelNode7);
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set(property8);
        org.jboss.dmr.ModelNode modelNode10 = property8.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property8);
        java.util.List<org.jboss.dmr.Property> propertyList12 = propertyModelValue11.asPropertyList();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue11.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = modelNode14.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue18 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long19 = booleanModelValue18.asLong();
        org.jboss.dmr.ValueExpression valueExpression20 = booleanModelValue18.asExpression();
        java.lang.String str21 = valueExpression20.toString();
        org.jboss.dmr.ExpressionValue expressionValue23 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression24 = expressionValue23.asExpression();
        boolean boolean25 = valueExpression20.equals(valueExpression24);
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal28 = longModelValue27.asBigDecimal();
        int int29 = longModelValue27.asInt();
        org.jboss.dmr.ValueExpression valueExpression30 = longModelValue27.asExpression();
        boolean boolean31 = valueExpression24.equals(valueExpression30);
        int int32 = valueExpression30.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue34 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression35 = expressionValue34.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver36 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str37 = valueExpression35.resolveString(valueExpressionResolver36);
        java.math.BigInteger bigInteger38 = valueExpression30.resolveBigInteger(valueExpressionResolver36);
        org.jboss.dmr.ModelNode modelNode39 = modelNode14.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression30);
        org.jboss.dmr.ModelNode modelNode42 = modelNode39.add("AQ==", false);
        org.jboss.dmr.PropertyModelValue propertyModelValue43 = new org.jboss.dmr.PropertyModelValue("[]", modelNode42);
        org.jboss.dmr.ModelNode modelNode46 = modelNode42.set("", (long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode48 = modelNode42.remove(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType1 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType1.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(booleanModelValue18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Expression \"true\"" + "'", str21, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(valueExpression35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode46);
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        long long4 = objectModelValue0.asLong((long) 0);
        boolean boolean6 = objectModelValue0.has("[97L]");
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue0.protect();
        java.lang.String str8 = modelValue7.toString();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        long long4 = doubleModelValue1.asLong((long) 32);
        byte[] byteArray5 = doubleModelValue1.asBytes();
        boolean boolean6 = doubleModelValue1.asBoolean();
        byte[] byteArray7 = doubleModelValue1.asBytes();
        java.lang.String str9 = org.jboss.dmr.Base64.encodeBytes(byteArray7, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "QCQAAAAAAAA=" + "'", str9, "QCQAAAAAAAA=");
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        boolean boolean18 = listModelValue13.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray19 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean20 = listModelValue13.equals((java.lang.Object) modelNodeArray19);
        boolean boolean21 = typeModelValue5.equals((java.lang.Object) listModelValue13);
        boolean boolean22 = typeModelValue5.asBoolean();
        java.lang.String str23 = typeModelValue5.asString();
        boolean boolean24 = typeModelValue5.asBoolean();
        org.jboss.dmr.ModelType modelType25 = org.jboss.dmr.ModelType.PROPERTY;
        char char26 = modelType25.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue27 = org.jboss.dmr.TypeModelValue.of(modelType25);
        boolean boolean28 = typeModelValue27.asBoolean();
        java.lang.String str29 = typeModelValue27.asString();
        boolean boolean31 = typeModelValue27.asBoolean(false);
        boolean boolean32 = typeModelValue5.equals(typeModelValue27);
        org.jboss.dmr.ValueExpression valueExpression33 = typeModelValue5.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = typeModelValue5.asInt((int) 'e');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(modelNodeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PROPERTY" + "'", str23, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + modelType25 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType25.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + 'p' + "'", char26 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PROPERTY" + "'", str29, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(valueExpression33);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        int int4 = objectModelValue0.asInt((int) (short) 100);
        long long6 = objectModelValue0.asLong((long) (byte) 10);
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.asObject();
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str11 = intModelValue10.asString();
        double double13 = intModelValue10.asDouble((double) 2);
        java.math.BigInteger bigInteger14 = intModelValue10.asBigInteger();
        java.math.BigInteger bigInteger15 = intModelValue10.asBigInteger();
        byte[] byteArray16 = intModelValue10.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode17 = modelNode7.add("rO0ABXQAEUV4cHJlc3Npb24gInRydWUi", byteArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 32]");
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("1L");
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode(modelType3);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        org.jboss.dmr.ModelNode modelNode11 = modelNode4.set(property10);
        org.jboss.dmr.ModelNode modelNode12 = property10.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue13 = new org.jboss.dmr.PropertyModelValue(property10);
        org.jboss.dmr.BooleanModelValue booleanModelValue15 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray16 = booleanModelValue15.asBytes();
        boolean boolean17 = propertyModelValue13.equals((java.lang.Object) byteArray16);
        org.jboss.dmr.ModelNode modelNode18 = modelNode1.set("(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\" => (\"hi!\" => 0.0))", byteArray16);
        org.jboss.dmr.ModelNode modelNode20 = modelNode1.set("52");
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        boolean boolean25 = modelNode23.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue("TYPE_MODEL_VALUE", modelNode23);
        org.jboss.dmr.ModelNode modelNode28 = propertyModelValue26.getChild(0);
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long31 = modelNode30.asLong();
        org.jboss.dmr.ValueExpression valueExpression32 = modelNode30.asExpression();
        java.math.BigDecimal bigDecimal33 = valueExpression32.resolveBigDecimal();
        java.lang.String str34 = valueExpression32.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue36 = new org.jboss.dmr.LongModelValue(1L);
        long long38 = longModelValue36.asLong((long) (short) 0);
        java.lang.String str39 = longModelValue36.asString();
        org.jboss.dmr.ValueExpression valueExpression40 = longModelValue36.asExpression();
        int int41 = valueExpression40.resolveInt();
        boolean boolean42 = valueExpression32.equals(valueExpression40);
        org.jboss.dmr.ModelNode modelNode43 = modelNode28.set(valueExpression32);
        java.math.BigDecimal bigDecimal44 = valueExpression32.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode45 = modelNode20.set(bigDecimal44);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode50 = modelNode47.set("hi!", 0.0d);
        java.lang.String str51 = modelNode47.toString();
        org.jboss.dmr.ModelNode modelNode52 = modelNode47.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode57 = modelNode54.set("hi!", 0.0d);
        org.jboss.dmr.Property property58 = new org.jboss.dmr.Property("", modelNode57);
        org.jboss.dmr.ModelNode modelNode59 = modelNode47.set(property58);
        org.jboss.dmr.PropertyModelValue propertyModelValue61 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode59, false);
        boolean boolean63 = modelNode59.has(2);
        org.jboss.dmr.BooleanModelValue booleanModelValue66 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long67 = booleanModelValue66.asLong();
        org.jboss.dmr.ValueExpression valueExpression68 = booleanModelValue66.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue69 = new org.jboss.dmr.ExpressionValue(valueExpression68);
        java.lang.String str70 = valueExpression68.getExpressionString();
        org.jboss.dmr.ModelNode modelNode71 = modelNode59.set("true", valueExpression68);
        org.jboss.dmr.ModelNode modelNode72 = modelNode20.set(valueExpression68);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode74 = modelNode20.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType3.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(booleanModelValue15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1.0" + "'", str34, "1.0");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(valueExpression40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(\"hi!\" => 0.0)" + "'", str51, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(booleanModelValue66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(valueExpression68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "true" + "'", str70, "true");
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(modelNode72);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.Set<java.lang.String> strSet16 = propertyModelValue15.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList17 = propertyModelValue15.asPropertyList();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.lang.String str23 = modelNode19.toString();
        org.jboss.dmr.ModelNode modelNode24 = modelNode19.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode19.set(property30);
        org.jboss.dmr.PropertyModelValue propertyModelValue33 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode31, false);
        java.util.Set<java.lang.String> strSet34 = propertyModelValue33.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList35 = propertyModelValue33.asPropertyList();
        java.util.Set<java.lang.String> strSet36 = propertyModelValue33.getKeys();
        boolean boolean37 = propertyModelValue15.equals(propertyModelValue33);
        org.jboss.dmr.ModelValue modelValue38 = propertyModelValue15.copy();
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.set("hi!", 0.0d);
        org.jboss.dmr.Property property44 = new org.jboss.dmr.Property("", modelNode43);
        java.lang.String[] strArray45 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.get(strArray45);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode50 = modelNode47.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList51 = modelNode50.asList();
        org.jboss.dmr.ListModelValue listModelValue52 = new org.jboss.dmr.ListModelValue(modelNodeList51);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue52);
        org.jboss.dmr.ModelValue modelValue54 = listModelValue52.resolve();
        int int56 = listModelValue52.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList57 = listModelValue52.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList58 = modelNode46.asPropertyList(propertyList57);
        org.jboss.dmr.ModelNode modelNode60 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode63 = modelNode60.set("hi!", 0.0d);
        org.jboss.dmr.Property property64 = new org.jboss.dmr.Property("", modelNode63);
        java.lang.String[] strArray65 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode66 = modelNode63.get(strArray65);
        org.jboss.dmr.ModelNode modelNode67 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode70 = modelNode67.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList71 = modelNode70.asList();
        org.jboss.dmr.ListModelValue listModelValue72 = new org.jboss.dmr.ListModelValue(modelNodeList71);
        org.jboss.dmr.ModelNode modelNode73 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue72);
        org.jboss.dmr.ModelValue modelValue74 = listModelValue72.resolve();
        int int76 = listModelValue72.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList77 = listModelValue72.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList78 = modelNode66.asPropertyList(propertyList77);
        modelNode46.setNoCopy(modelNode66);
        org.jboss.dmr.ModelNode modelNode81 = modelNode66.set((long) 100);
        org.jboss.dmr.ModelNode modelNode83 = modelNode66.set(35L);
        boolean boolean84 = propertyModelValue15.equals((java.lang.Object) modelNode66);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(\"hi!\" => 0.0)" + "'", str23, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(propertyList35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(modelValue38);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNodeList51);
        org.junit.Assert.assertNotNull(modelValue54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(propertyList57);
        org.junit.Assert.assertNotNull(propertyList58);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNodeList71);
        org.junit.Assert.assertNotNull(modelValue74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(propertyList77);
        org.junit.Assert.assertNotNull(propertyList78);
        org.junit.Assert.assertNotNull(modelNode81);
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        boolean boolean3 = modelNode1.hasDefined((int) (byte) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long7 = booleanModelValue5.asLong((long) 32);
        int int8 = booleanModelValue5.asInt();
        java.math.BigDecimal bigDecimal9 = booleanModelValue5.asBigDecimal();
        org.jboss.dmr.ModelValue modelValue10 = booleanModelValue5.protect();
        org.jboss.dmr.ValueExpression valueExpression11 = booleanModelValue5.asExpression();
        org.jboss.dmr.ModelNode modelNode12 = modelNode1.set(valueExpression11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int14 = modelNode13.asIntOrNull();
        int int16 = modelNode13.asInt(10);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str21 = modelNode19.asString("true");
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long25 = modelNode24.asLong();
        org.jboss.dmr.ValueExpression valueExpression26 = modelNode24.asExpression();
        java.math.BigDecimal bigDecimal27 = valueExpression26.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode(bigDecimal27);
        org.jboss.dmr.ModelNode modelNode30 = modelNode28.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode31 = modelNode19.setNoCopy("35", modelNode30);
        boolean boolean33 = modelNode30.hasDefined("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.ModelNode modelNode35 = modelNode30.set("\"bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}\"");
        org.jboss.dmr.BooleanModelValue booleanModelValue38 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long40 = booleanModelValue38.asLong((long) 32);
        int int41 = booleanModelValue38.asInt();
        java.math.BigDecimal bigDecimal42 = booleanModelValue38.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode43 = modelNode30.set("\"\\\"1L\\\"\"", bigDecimal42);
        java.lang.String str45 = modelNode30.toJSONString(false);
        org.jboss.dmr.ModelNode modelNode46 = modelNode13.set("Expression \"10.0\"", modelNode30);
        modelNode12.setNoCopy(modelNode46);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10" + "'", str21, "10");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(booleanModelValue38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{\n    \"\\\"\\\\\\\"1L\\\\\\\"\\\"\" : 0\n}" + "'", str45, "{\n    \"\\\"\\\\\\\"1L\\\\\\\"\\\"\" : 0\n}");
        org.junit.Assert.assertNotNull(modelNode46);
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.lang.String str5 = objectModelValue0.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = objectModelValue0.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        java.io.PrintWriter printWriter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue7.format(printWriter8, (int) (short) 1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNotNull(modelNodeList6);
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        int int6 = doubleModelValue1.asInt(2);
        double double8 = doubleModelValue1.asDouble(0.0d);
        java.lang.String str9 = doubleModelValue1.asString();
        java.math.BigDecimal bigDecimal10 = doubleModelValue1.asBigDecimal();
        int int11 = doubleModelValue1.asInt();
        java.io.DataOutput dataOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue1.writeExternal(dataOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10.0" + "'", str9, "10.0");
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        boolean boolean12 = longModelValue1.asBoolean(false);
        boolean boolean14 = longModelValue1.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long17 = modelNode16.asLong();
        org.jboss.dmr.ValueExpression valueExpression18 = modelNode16.asExpression();
        java.math.BigDecimal bigDecimal19 = valueExpression18.resolveBigDecimal();
        java.lang.String str20 = valueExpression18.getExpressionString();
        java.math.BigDecimal bigDecimal21 = valueExpression18.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue22 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal21);
        int int24 = bigDecimalModelValue22.asInt(0);
        boolean boolean25 = bigDecimalModelValue22.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression26 = bigDecimalModelValue22.asExpression();
        long long27 = bigDecimalModelValue22.asLong();
        boolean boolean28 = bigDecimalModelValue22.asBoolean();
        boolean boolean29 = longModelValue1.equals((java.lang.Object) bigDecimalModelValue22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1.0" + "'", str20, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        boolean boolean3 = typeModelValue2.asBoolean();
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray6 = booleanModelValue5.asBytes();
        java.lang.String str7 = booleanModelValue5.asString();
        int int8 = booleanModelValue5.asInt();
        boolean boolean9 = typeModelValue2.equals((java.lang.Object) booleanModelValue5);
        org.jboss.dmr.ValueExpression valueExpression10 = typeModelValue2.asExpression();
        boolean boolean11 = typeModelValue2.asBoolean();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        java.math.BigInteger bigInteger9 = bigDecimalModelValue7.asBigInteger();
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        java.lang.String str16 = valueExpression14.getExpressionString();
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue18 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal17);
        boolean boolean19 = bigDecimalModelValue18.asBoolean();
        long long20 = bigDecimalModelValue18.asLong();
        org.jboss.dmr.IntModelValue intModelValue22 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str23 = intModelValue22.asString();
        double double25 = intModelValue22.asDouble((double) 2);
        java.math.BigDecimal bigDecimal26 = intModelValue22.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue27 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal26);
        boolean boolean28 = bigDecimalModelValue18.equals(bigDecimalModelValue27);
        boolean boolean30 = bigDecimalModelValue18.asBoolean(false);
        int int32 = bigDecimalModelValue18.asInt(3);
        boolean boolean33 = bigDecimalModelValue7.equals(bigDecimalModelValue18);
        org.jboss.dmr.stream.ModelWriter modelWriter34 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue7.write(modelWriter34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0" + "'", str16, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32" + "'", str23, "32");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        long long3 = longModelValue1.asLong((long) (byte) -1);
        org.jboss.dmr.ValueExpression valueExpression4 = longModelValue1.asExpression();
        org.jboss.dmr.ModelType modelType5 = org.jboss.dmr.ModelType.PROPERTY;
        char char6 = modelType5.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue7 = org.jboss.dmr.TypeModelValue.of(modelType5);
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        boolean boolean11 = typeModelValue7.equals(typeModelValue10);
        java.lang.String str12 = typeModelValue10.asString();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        boolean boolean23 = listModelValue18.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray24 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean25 = listModelValue18.equals((java.lang.Object) modelNodeArray24);
        boolean boolean26 = typeModelValue10.equals((java.lang.Object) listModelValue18);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue34 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode31, false);
        boolean boolean35 = listModelValue18.equals((java.lang.Object) "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        boolean boolean36 = valueExpression4.equals((java.lang.Object) listModelValue18);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode37 = listModelValue18.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType5.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'p' + "'", char6 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue7);
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PROPERTY" + "'", str12, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(modelNodeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        boolean boolean4 = modelNode1.has((int) '#');
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode9 = modelNode1.set("1");
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.setExpression("org.jboss.dmr.stream.ModelException: 1");
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        java.math.BigDecimal bigDecimal5 = booleanModelValue1.asBigDecimal();
        org.jboss.dmr.ModelValue modelValue6 = booleanModelValue1.protect();
        org.jboss.dmr.stream.ModelEvent modelEvent7 = org.jboss.dmr.stream.ModelEvent.LONG;
        boolean boolean8 = booleanModelValue1.equals((java.lang.Object) modelEvent7);
        double double9 = booleanModelValue1.asDouble();
        long long10 = booleanModelValue1.asLong();
        long long11 = booleanModelValue1.asLong();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertTrue("'" + modelEvent7 + "' != '" + org.jboss.dmr.stream.ModelEvent.LONG + "'", modelEvent7.equals(org.jboss.dmr.stream.ModelEvent.LONG));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.ModelNode modelNode15 = modelNode14.resolve();
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(modelType16);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        org.jboss.dmr.ModelNode modelNode24 = modelNode17.set(property23);
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue(property23);
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue(property23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = propertyModelValue26.asList();
        org.jboss.dmr.ModelNode modelNode28 = modelNode15.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList27);
        org.jboss.dmr.IntModelValue intModelValue31 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str32 = intModelValue31.asString();
        double double34 = intModelValue31.asDouble((double) 2);
        java.math.BigDecimal bigDecimal35 = intModelValue31.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode36 = modelNode28.add("(\"hi!\" => 0.0)", bigDecimal35);
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.set("hi!", 0.0d);
        java.lang.String str41 = modelNode37.toString();
        org.jboss.dmr.ModelNode modelNode42 = modelNode37.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode44 = modelNode37.set(100);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode49 = modelNode47.set((int) '#');
        org.jboss.dmr.ModelNode modelNode50 = modelNode37.setNoCopy("EXPRESSION_VALUE", modelNode49);
        org.jboss.dmr.ModelNode modelNode53 = modelNode37.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode56 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode59 = modelNode56.set("hi!", 0.0d);
        java.lang.String str60 = modelNode56.toString();
        org.jboss.dmr.ModelNode modelNode61 = modelNode56.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode63 = modelNode56.set(100);
        org.jboss.dmr.ModelNode modelNode64 = modelNode55.add(modelNode56);
        int int66 = modelNode56.asInt(2);
        org.jboss.dmr.ModelType modelType68 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode69 = modelNode56.set("[(\"hi!\" => 0.0)]", modelType68);
        org.jboss.dmr.ModelNode modelNode70 = modelNode53.set("\"BYTES_VALUE\"", modelType68);
        org.jboss.dmr.ModelNode modelNode71 = modelNode28.add(modelNode70);
        org.jboss.dmr.Property property72 = new org.jboss.dmr.Property("\"35\"", modelNode71);
        org.jboss.dmr.ModelNode modelNode75 = modelNode71.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BWwAAAAAeA==", (long) (byte) -1);
        org.jboss.dmr.ModelNode modelNode78 = modelNode71.set("{\n    \"[(\\\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\\\" => big integer 32)]\" : 1\n}", (double) 32L);
        java.io.PrintWriter printWriter79 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode78.writeString(printWriter79, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType16.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "32" + "'", str32, "32");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 32.0d + "'", double34 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(\"hi!\" => 0.0)" + "'", str41, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(\"hi!\" => 0.0)" + "'", str60, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + modelType68 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType68.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertNotNull(modelNode78);
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter12.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter15.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelWriter15.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter21 = modelWriter15.writeString("(\"true\" => INT)");
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter21.writeDouble((double) (short) 0);
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelWriter21.writeListEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter25 = modelWriter21.writeListEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(modelWriter21);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter24);
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelType modelType5 = modelNode3.getType();
        org.jboss.dmr.TypeModelValue typeModelValue6 = org.jboss.dmr.TypeModelValue.of(modelType5);
        org.jboss.dmr.ModelType modelType7 = org.jboss.dmr.ModelType.PROPERTY;
        char char8 = modelType7.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue9 = org.jboss.dmr.TypeModelValue.of(modelType7);
        java.lang.String str10 = typeModelValue9.asString();
        boolean boolean11 = typeModelValue6.equals(typeModelValue9);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory13 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream14 = null;
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream(inputStream14, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream16);
        org.jboss.dmr.stream.ModelReader modelReader18 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream17);
        java.io.OutputStream outputStream19 = null;
        org.jboss.dmr.Base64.OutputStream outputStream20 = new org.jboss.dmr.Base64.OutputStream(outputStream19);
        org.jboss.dmr.Base64.OutputStream outputStream21 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream20);
        outputStream20.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelStreamFactory13.newModelWriter((java.io.OutputStream) outputStream20);
        java.io.OutputStream outputStream25 = null;
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream(outputStream25);
        outputStream26.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream26);
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream28, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        outputStream31.resumeEncoding();
        outputStream31.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter34 = modelStreamFactory13.newModelWriter((java.io.OutputStream) outputStream31);
        typeModelValue9.write(modelWriter34);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter37 = modelWriter34.writeDouble((double) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType5.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue6);
        org.junit.Assert.assertTrue("'" + modelType7 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType7.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + 'p' + "'", char8 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY" + "'", str10, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory13);
        org.junit.Assert.assertNotNull(modelReader18);
        org.junit.Assert.assertNotNull(modelWriter24);
        org.junit.Assert.assertNotNull(modelWriter34);
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue7 = new org.jboss.dmr.LongModelValue(1L);
        long long9 = longModelValue7.asLong((long) (short) 0);
        java.lang.String str10 = longModelValue7.asString();
        org.jboss.dmr.ValueExpression valueExpression11 = longModelValue7.asExpression();
        int int12 = valueExpression11.resolveInt();
        boolean boolean13 = valueExpression3.equals(valueExpression11);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver14 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue16 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long17 = booleanModelValue16.asLong();
        org.jboss.dmr.ValueExpression valueExpression18 = booleanModelValue16.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue19 = new org.jboss.dmr.ExpressionValue(valueExpression18);
        java.lang.String str20 = valueExpression18.getExpressionString();
        java.lang.String str21 = valueExpressionResolver14.resolve(valueExpression18);
        long long22 = valueExpression11.resolveLong(valueExpressionResolver14);
        org.jboss.dmr.BooleanModelValue booleanModelValue24 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long25 = booleanModelValue24.asLong();
        org.jboss.dmr.ValueExpression valueExpression26 = booleanModelValue24.asExpression();
        java.lang.String str27 = valueExpression26.toString();
        org.jboss.dmr.ExpressionValue expressionValue29 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression30 = expressionValue29.asExpression();
        boolean boolean31 = valueExpression26.equals(valueExpression30);
        org.jboss.dmr.LongModelValue longModelValue33 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal34 = longModelValue33.asBigDecimal();
        int int35 = longModelValue33.asInt();
        org.jboss.dmr.ValueExpression valueExpression36 = longModelValue33.asExpression();
        boolean boolean37 = valueExpression30.equals(valueExpression36);
        java.lang.String str38 = valueExpressionResolver14.resolve(valueExpression30);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = valueExpression30.resolveString(valueExpressionResolver39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver14);
        org.junit.Assert.assertNotNull(booleanModelValue16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "true" + "'", str20, "true");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "true" + "'", str21, "true");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(booleanModelValue24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Expression \"true\"" + "'", str27, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(valueExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue8 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue8.asObject();
        java.util.Set<java.lang.String> strSet10 = objectModelValue8.getKeys();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue8.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean13 = objectModelValue8.asBoolean();
        int int15 = objectModelValue8.asInt((int) 'b');
        int int17 = objectModelValue8.asInt((int) '#');
        boolean boolean18 = objectModelValue0.equals(objectModelValue8);
        int int19 = objectModelValue8.asInt();
        java.util.Set<java.lang.String> strSet20 = objectModelValue8.getKeys();
        long long22 = objectModelValue8.asLong((long) 0);
        org.jboss.dmr.ModelType modelType23 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode(modelType23);
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        java.lang.String str31 = bytesModelValue30.asString();
        int int32 = bytesModelValue30.asInt();
        long long34 = bytesModelValue30.asLong((long) (short) 1);
        long long35 = bytesModelValue30.asLong();
        java.math.BigDecimal bigDecimal36 = bytesModelValue30.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode37 = modelNode24.set("32", bigDecimal36);
        boolean boolean38 = objectModelValue8.equals((java.lang.Object) bigDecimal36);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) objectModelValue8);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory41 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream42 = null;
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream(inputStream42, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream44);
        org.jboss.dmr.stream.ModelReader modelReader46 = modelStreamFactory41.newModelReader((java.io.InputStream) inputStream45);
        java.io.OutputStream outputStream47 = null;
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream(outputStream47);
        org.jboss.dmr.Base64.OutputStream outputStream49 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream48);
        outputStream48.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelStreamFactory41.newModelWriter((java.io.OutputStream) outputStream48);
        org.jboss.dmr.stream.ModelWriter modelWriter53 = modelWriter52.writeListStart();
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode56 = modelNode55.resolve();
        java.lang.String str57 = modelNode55.asString();
        org.jboss.dmr.ModelNode modelNode59 = modelNode55.set((long) 52);
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.setExpression("hi!", "hi!");
        java.lang.String str65 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode61);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList66 = modelNode61.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode68 = modelNode61.set((double) 0);
        org.jboss.dmr.ModelType modelType70 = org.jboss.dmr.ModelType.PROPERTY;
        char char71 = modelType70.getTypeChar();
        org.jboss.dmr.ModelNode modelNode72 = modelNode61.set("[(\"hi!\" => 0.0)]", modelType70);
        org.jboss.dmr.Property property73 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode72);
        org.jboss.dmr.ModelNode modelNode74 = modelNode59.set(property73);
        org.jboss.dmr.ModelNode modelNode76 = modelNode59.set(false);
        boolean boolean77 = modelNode76.isProtected();
        org.jboss.dmr.ModelType modelType79 = org.jboss.dmr.ModelType.PROPERTY;
        char char80 = modelType79.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue81 = org.jboss.dmr.TypeModelValue.of(modelType79);
        char char82 = modelType79.getTypeChar();
        org.jboss.dmr.ModelNode modelNode83 = modelNode76.set("rO0ABXQAByJbOTdMXSI=", modelType79);
        org.jboss.dmr.stream.ModelWriter modelWriter84 = modelWriter53.writeType(modelType79);
        org.jboss.dmr.stream.ModelWriter modelWriter86 = modelWriter84.writeBoolean(true);
        objectModelValue8.write(modelWriter86);
        java.util.List<org.jboss.dmr.Property> propertyList88 = objectModelValue8.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + modelType23 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType23.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str31, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory41);
        org.junit.Assert.assertNotNull(modelReader46);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(modelWriter53);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "true" + "'", str57, "true");
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str65, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList66);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertTrue("'" + modelType70 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType70.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char71 + "' != '" + 'p' + "'", char71 == 'p');
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + modelType79 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType79.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + 'p' + "'", char80 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + 'p' + "'", char82 == 'p');
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertNotNull(modelWriter84);
        org.junit.Assert.assertNotNull(modelWriter86);
        org.junit.Assert.assertNotNull(propertyList88);
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.setEmptyList();
        boolean boolean16 = modelNode14.asBoolean(false);
        org.jboss.dmr.ObjectModelValue objectModelValue18 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue18.asObject();
        org.jboss.dmr.ModelNode modelNode21 = objectModelValue18.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode23 = objectModelValue18.getChild("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.Property property24 = new org.jboss.dmr.Property("PROPERTY_VALUE", modelNode23);
        modelNode14.setNoCopy(modelNode23);
        int int27 = modelNode23.asInt(32);
        org.jboss.dmr.ModelNode modelNode29 = modelNode23.get((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = modelNode29.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertNotNull(modelNode29);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        boolean boolean11 = bigIntegerModelValue4.asBoolean();
        boolean boolean12 = bigIntegerModelValue4.asBoolean();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue4.asBigInteger();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(bigInteger13);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream19.resumeEncoding();
        outputStream19.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream19);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        int int33 = inputStream25.read(byteArray29, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (-1));
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (int) 'p');
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream25);
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25);
        org.jboss.dmr.Base64.InputStream inputStream40 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = inputStream25.available();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelReader38);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        boolean boolean4 = modelNode1.has((int) '#');
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.clone();
        java.io.PrintWriter printWriter9 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode8.writeString(printWriter9, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue3 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger4 = booleanModelValue3.asBigInteger();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.add(bigInteger4);
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.clone();
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        java.math.BigInteger bigInteger8 = booleanModelValue7.asBigInteger();
        boolean boolean9 = booleanModelValue7.asBoolean();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode11 = modelNode6.add(bigInteger10);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", modelNode6);
        boolean boolean14 = modelNode6.hasDefined((int) 's');
        boolean boolean16 = modelNode6.has("rO0ABXQAA2hpIQ==");
        org.junit.Assert.assertNotNull(booleanModelValue3);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        boolean boolean6 = doubleModelValue1.asBoolean(false);
        int int7 = doubleModelValue1.asInt();
        int int8 = doubleModelValue1.asInt();
        java.math.BigDecimal bigDecimal9 = doubleModelValue1.asBigDecimal();
        int int11 = doubleModelValue1.asInt(10);
        org.jboss.dmr.ValueExpression valueExpression12 = doubleModelValue1.asExpression();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(valueExpression12);
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        org.jboss.dmr.ModelNode modelNode6 = modelNodeFactory0.readFrom("0.0", true);
        org.jboss.dmr.ModelNode modelNode9 = modelNodeFactory0.readFrom("(\"hi!\" => expression \"hi!\")", false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory11 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream12 = null;
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream12, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        int int22 = inputStream14.read(byteArray18, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream14, (-1));
        org.jboss.dmr.stream.ModelReader modelReader25 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream24);
        java.io.InputStream inputStream26 = null;
        org.jboss.dmr.Base64.InputStream inputStream28 = new org.jboss.dmr.Base64.InputStream(inputStream26, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue30 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str31 = longModelValue30.asString();
        byte[] byteArray32 = longModelValue30.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue33 = new org.jboss.dmr.BytesModelValue(byteArray32);
        int int36 = inputStream28.read(byteArray32, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.stream.ModelReader modelReader37 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream28);
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream28, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream41 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream39, (int) 'l');
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode43 = modelNodeFactory0.readFrom((java.io.InputStream) inputStream39, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelStreamFactory11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(modelReader25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(modelReader37);
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        byte[] byteArray6 = intModelValue1.asBytes();
        long long8 = intModelValue1.asLong((long) 8);
        boolean boolean10 = intModelValue1.equals((java.lang.Object) 97L);
        java.math.BigDecimal bigDecimal11 = intModelValue1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue12 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal11);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.setExpression("hi!", "hi!");
        java.lang.String str18 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode14);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode14.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode21 = modelNode14.set((double) 0);
        org.jboss.dmr.ModelNode modelNode22 = modelNode14.clear();
        org.jboss.dmr.ObjectModelValue objectModelValue23 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode24 = objectModelValue23.asObject();
        java.util.Set<java.lang.String> strSet25 = objectModelValue23.getKeys();
        org.jboss.dmr.ModelNode modelNode27 = objectModelValue23.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean28 = objectModelValue23.asBoolean();
        int int30 = objectModelValue23.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode31 = objectModelValue23.asObject();
        java.util.Set<java.lang.String> strSet32 = modelNode31.keys();
        org.jboss.dmr.ModelNode modelNode33 = modelNode14.add(modelNode31);
        boolean boolean34 = modelNode33.asBoolean();
        org.jboss.dmr.Property property35 = new org.jboss.dmr.Property("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwACM=", modelNode33);
        boolean boolean36 = bigDecimalModelValue12.equals((java.lang.Object) modelNode33);
        org.jboss.dmr.ModelNode modelNode37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode38 = modelNode33.set(modelNode37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newValue is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str18, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(modelNode27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream19);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream20);
        boolean boolean22 = modelReader21.isBytes();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = modelReader21.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't double");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isExpression();
        boolean boolean18 = modelReader15.isObjectStart();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = modelReader15.getBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't boolean");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ValueExpression valueExpression4 = modelNode2.asExpression();
        java.math.BigDecimal bigDecimal5 = valueExpression4.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long8 = booleanModelValue7.asLong();
        org.jboss.dmr.ValueExpression valueExpression9 = booleanModelValue7.asExpression();
        boolean boolean11 = valueExpression9.equals((java.lang.Object) 'p');
        boolean boolean12 = valueExpression4.equals(valueExpression9);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode(valueExpression4);
        org.jboss.dmr.Property property15 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode13, false);
        org.jboss.dmr.PropertyModelValue propertyModelValue16 = new org.jboss.dmr.PropertyModelValue(property15);
        java.util.Set<java.lang.String> strSet17 = propertyModelValue16.getKeys();
        boolean boolean19 = propertyModelValue16.has("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: 1");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        byte[] byteArray5 = doubleModelValue1.asBytes();
        org.jboss.dmr.DoubleModelValue doubleModelValue7 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        boolean boolean8 = doubleModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression9 = doubleModelValue7.asExpression();
        org.jboss.dmr.ModelValue modelValue10 = doubleModelValue7.clone();
        org.jboss.dmr.DoubleModelValue doubleModelValue12 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long13 = doubleModelValue12.asLong();
        boolean boolean15 = doubleModelValue12.asBoolean(true);
        int int17 = doubleModelValue12.asInt(2);
        double double19 = doubleModelValue12.asDouble(0.0d);
        org.jboss.dmr.DoubleModelValue doubleModelValue21 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long22 = doubleModelValue21.asLong();
        boolean boolean23 = doubleModelValue21.asBoolean();
        byte[] byteArray24 = doubleModelValue21.asBytes();
        int int26 = doubleModelValue21.asInt((int) ' ');
        long long27 = doubleModelValue21.asLong();
        org.jboss.dmr.ValueExpression valueExpression28 = doubleModelValue21.asExpression();
        java.math.BigInteger bigInteger29 = doubleModelValue21.asBigInteger();
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList34 = modelNode33.asList();
        org.jboss.dmr.ListModelValue listModelValue35 = new org.jboss.dmr.ListModelValue(modelNodeList34);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue35);
        org.jboss.dmr.ModelValue modelValue37 = listModelValue35.resolve();
        int int39 = listModelValue35.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList40 = listModelValue35.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = listModelValue35.asList();
        long long42 = listModelValue35.asLong();
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode46.asList();
        org.jboss.dmr.ListModelValue listModelValue48 = new org.jboss.dmr.ListModelValue(modelNodeList47);
        java.lang.String str49 = listModelValue48.asString();
        long long50 = listModelValue48.asLong();
        int int52 = listModelValue48.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue53 = listModelValue48.protect();
        boolean boolean55 = listModelValue48.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue56 = listModelValue48.resolve();
        boolean boolean57 = listModelValue48.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList58 = listModelValue48.asList();
        boolean boolean59 = listModelValue35.equals(listModelValue48);
        java.util.List<org.jboss.dmr.Property> propertyList60 = listModelValue35.asPropertyList();
        boolean boolean61 = doubleModelValue21.equals((java.lang.Object) propertyList60);
        double double63 = doubleModelValue21.asDouble((double) '4');
        boolean boolean64 = doubleModelValue12.equals(doubleModelValue21);
        org.jboss.dmr.ValueExpression valueExpression65 = doubleModelValue12.asExpression();
        double double66 = doubleModelValue12.asDouble();
        boolean boolean67 = doubleModelValue7.equals(doubleModelValue12);
        boolean boolean68 = doubleModelValue1.equals(doubleModelValue12);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNodeList34);
        org.junit.Assert.assertNotNull(modelValue37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str49, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(modelValue53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(modelValue56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(modelNodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(propertyList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(valueExpression65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        long long6 = intModelValue1.asLong();
        boolean boolean7 = intModelValue1.asBoolean();
        java.lang.String str8 = intModelValue1.asString();
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long12 = intModelValue10.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue14 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long16 = intModelValue14.asLong((long) 'b');
        java.lang.String str17 = intModelValue14.asString();
        boolean boolean18 = intModelValue10.equals(intModelValue14);
        int int19 = intModelValue14.asInt();
        long long20 = intModelValue14.asLong();
        boolean boolean21 = intModelValue1.equals(intModelValue14);
        int int22 = intModelValue1.asInt();
        int int23 = intModelValue1.asInt();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32L + "'", long16 == 32L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32" + "'", str17, "32");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.resolve();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.lang.String str13 = modelNode9.toString();
        org.jboss.dmr.ModelNode modelNode14 = modelNode9.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode16 = modelNode9.set(100);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode21 = modelNode19.set((int) '#');
        org.jboss.dmr.ModelNode modelNode22 = modelNode9.setNoCopy("EXPRESSION_VALUE", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.lang.String str27 = modelNode23.toString();
        org.jboss.dmr.ModelNode modelNode28 = modelNode23.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.set("hi!", 0.0d);
        org.jboss.dmr.Property property34 = new org.jboss.dmr.Property("", modelNode33);
        org.jboss.dmr.ModelNode modelNode35 = modelNode23.set(property34);
        java.lang.String str36 = modelNode35.asString();
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = modelNode40.asList();
        org.jboss.dmr.ListModelValue listModelValue42 = new org.jboss.dmr.ListModelValue(modelNodeList41);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue42);
        org.jboss.dmr.ModelValue modelValue44 = listModelValue42.resolve();
        int int46 = listModelValue42.asInt((int) (byte) 100);
        boolean boolean47 = listModelValue42.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList48 = listModelValue42.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList49 = modelNode35.asList(modelNodeList48);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList50 = modelNode22.asList(modelNodeList48);
        modelNode7.setNoCopy(modelNode22);
        boolean boolean53 = modelNode7.has("{ \"\\\"AA==\\\"\" : 10 }");
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"hi!\" => 0.0)" + "'", str13, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(\"hi!\" => 0.0)" + "'", str27, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str36, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertNotNull(modelValue44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(modelNodeList48);
        org.junit.Assert.assertNotNull(modelNodeList49);
        org.junit.Assert.assertNotNull(modelNodeList50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        boolean boolean4 = modelNode2.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.PropertyModelValue propertyModelValue5 = new org.jboss.dmr.PropertyModelValue("TYPE_MODEL_VALUE", modelNode2);
        org.jboss.dmr.ModelNode modelNode7 = propertyModelValue5.getChild(0);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property8 = modelNode7.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(modelNode7);
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isUndefined();
        boolean boolean19 = modelReader15.isBytes();
        boolean boolean20 = modelReader15.isBigInteger();
        boolean boolean21 = modelReader15.isPropertyStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isListEnd();
        // The following exception was thrown during execution in test generation
        try {
            modelReader15.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been read");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        byte[] byteArray8 = intModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression9 = intModelValue1.asExpression();
        byte[] byteArray10 = intModelValue1.asBytes();
        double double11 = intModelValue1.asDouble();
        long long13 = intModelValue1.asLong((long) 0);
        java.math.BigDecimal bigDecimal14 = intModelValue1.asBigDecimal();
        java.lang.String str15 = intModelValue1.asString();
        org.jboss.dmr.DoubleModelValue doubleModelValue17 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int19 = doubleModelValue17.asInt((int) 'l');
        java.math.BigDecimal bigDecimal20 = doubleModelValue17.asBigDecimal();
        byte[] byteArray21 = doubleModelValue17.asBytes();
        double double23 = doubleModelValue17.asDouble(1.0d);
        boolean boolean24 = doubleModelValue17.asBoolean();
        int int25 = doubleModelValue17.asInt();
        boolean boolean26 = intModelValue1.equals((java.lang.Object) int25);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 32.0d + "'", double11 == 32.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "32" + "'", str15, "32");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.get(strArray11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = modelNode12.asPropertyList(propertyList23);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList43 = listModelValue38.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList44 = modelNode32.asPropertyList(propertyList43);
        modelNode12.setNoCopy(modelNode32);
        org.jboss.dmr.ModelNode modelNode46 = modelNode2.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode12);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("", modelNode51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode54 = modelNode51.get(strArray53);
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int56 = modelNode55.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.setExpression("hi!", "hi!");
        java.lang.String str61 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode57);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = modelNode57.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode63 = modelNode55.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        org.jboss.dmr.ModelNode modelNode64 = modelNode54.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode2.asList(modelNodeList62);
        org.jboss.dmr.PropertyModelValue propertyModelValue67 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode2, false);
        java.lang.String str68 = modelNode2.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode71 = modelNode2.set("Expression \"true\"", (long) (byte) -1);
        org.jboss.dmr.ModelNode modelNode73 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int74 = modelNode73.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode76 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long77 = modelNode76.asLong();
        org.jboss.dmr.ValueExpression valueExpression78 = modelNode76.asExpression();
        java.math.BigDecimal bigDecimal79 = valueExpression78.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode80 = modelNode73.set(valueExpression78);
        org.jboss.dmr.Property property82 = new org.jboss.dmr.Property("\"1L\"", modelNode73, false);
        java.lang.String str83 = property82.getName();
        org.jboss.dmr.ModelNode modelNode84 = modelNode2.set(property82);
        org.jboss.dmr.ModelNode modelNode85 = property82.getValue();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str61, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))" + "'", str68, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(valueExpression78);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\"1L\"" + "'", str83, "\"1L\"");
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertNotNull(modelNode85);
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("[(\"(\\\"\\\\\\\"(\\\\\\\\\\\\\\\"hi!\\\\\\\\\\\\\\\" => 0.0)\\\\\\\"\\\" => bytes {\n    0xb6, 0xbb, 0x9e\n})\" => \"AAAAZA==\")]");
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.get(strArray11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = modelNode12.asPropertyList(propertyList23);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList43 = listModelValue38.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList44 = modelNode32.asPropertyList(propertyList43);
        modelNode12.setNoCopy(modelNode32);
        org.jboss.dmr.ModelNode modelNode46 = modelNode2.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode12);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("", modelNode51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode54 = modelNode51.get(strArray53);
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int56 = modelNode55.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.setExpression("hi!", "hi!");
        java.lang.String str61 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode57);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = modelNode57.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode63 = modelNode55.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        org.jboss.dmr.ModelNode modelNode64 = modelNode54.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode2.asList(modelNodeList62);
        org.jboss.dmr.PropertyModelValue propertyModelValue67 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode2, false);
        boolean boolean69 = propertyModelValue67.has("1L");
        org.jboss.dmr.ModelValue modelValue70 = propertyModelValue67.protect();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str61, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(modelValue70);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        boolean boolean7 = modelNode4.hasDefined((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.setExpression("hi!", "hi!");
        java.lang.String str13 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode9);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode9.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode16 = modelNode9.set((double) 0);
        boolean boolean17 = modelNode9.isProtected();
        boolean boolean19 = modelNode9.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode22 = modelNode9.set("hi!", (long) (short) 100);
        org.jboss.dmr.ModelNode modelNode23 = modelNode4.setNoCopy("", modelNode22);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = modelNode23.add(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str13, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        boolean boolean8 = objectModelValue4.has((int) 'a');
        boolean boolean10 = objectModelValue4.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue11 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue11.asObject();
        java.util.Set<java.lang.String> strSet13 = objectModelValue11.getKeys();
        boolean boolean15 = objectModelValue11.has((int) 'a');
        boolean boolean16 = objectModelValue4.equals(objectModelValue11);
        org.jboss.dmr.ModelNode modelNode17 = objectModelValue11.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = objectModelValue11.asList();
        org.jboss.dmr.ModelNode modelNode19 = modelNode2.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList18);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode2, true);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.setExpression("hi!", "hi!");
        java.lang.String str26 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode22);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode22.asListOrEmpty();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode2.asList(modelNodeList27);
        org.jboss.dmr.ModelNode modelNode31 = modelNode2.setExpression("{ \"35\" : 0.0 }", "{\n    \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : {\n        \"EXPRESSION_VALUE\" : \"true\"\n    }\n}");
        java.io.InputStream inputStream32 = null;
        org.jboss.dmr.Base64.InputStream inputStream34 = new org.jboss.dmr.Base64.InputStream(inputStream32, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue36 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str37 = longModelValue36.asString();
        byte[] byteArray38 = longModelValue36.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue39 = new org.jboss.dmr.BytesModelValue(byteArray38);
        int int42 = inputStream34.read(byteArray38, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream34, (-1));
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream44);
        org.jboss.dmr.Base64.InputStream inputStream46 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream44);
        org.jboss.dmr.Base64.InputStream inputStream48 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream46, 0);
        // The following exception was thrown during execution in test generation
        try {
            modelNode2.readExternal((java.io.InputStream) inputStream46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str26, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isInt();
        boolean boolean17 = modelReader15.isObjectStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelEvent modelEvent18 = modelReader15.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream19.resumeEncoding();
        outputStream19.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream19);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        int int33 = inputStream25.read(byteArray29, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (-1));
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (int) 'p');
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream25);
        boolean boolean39 = modelReader38.isObjectStart();
        boolean boolean40 = modelReader38.isPropertyEnd();
        boolean boolean41 = modelReader38.isLong();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        boolean boolean11 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.LongModelValue longModelValue13 = new org.jboss.dmr.LongModelValue(1L);
        int int15 = longModelValue13.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue((-1L));
        long long19 = longModelValue17.asLong((long) (byte) -1);
        double double21 = longModelValue17.asDouble((double) 10.0f);
        boolean boolean22 = longModelValue13.equals(longModelValue17);
        byte[] byteArray23 = longModelValue17.asBytes();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) longModelValue17);
        boolean boolean25 = bigDecimalModelValue7.equals((java.lang.Object) modelNode24);
        int int27 = bigDecimalModelValue7.asInt(32);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("[big integer 1,big integer 1]");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType2 = stringModelValue1.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.jboss.dmr.ModelType.[big integer 1,big integer 1]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(bigDecimal5);
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.clear();
        org.jboss.dmr.Validation.validate(modelNode6, "1L");
        org.jboss.dmr.ModelNode modelNode11 = modelNode6.add((double) (short) 1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.lang.String str11 = listModelValue5.asString();
        int int13 = listModelValue5.asInt(2);
        java.io.PrintWriter printWriter14 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.formatAsJSON(printWriter14, 1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str11, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("(\"hi!\" => 0.0)");
        java.io.OutputStream outputStream2 = null;
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream(outputStream2);
        outputStream3.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream5 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.Base64.OutputStream outputStream6 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream5);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger12 = booleanModelValue11.asBigInteger();
        byte[] byteArray13 = booleanModelValue11.asBytes();
        org.jboss.dmr.ModelNode modelNode14 = modelNode8.set("expression \"hi!\"", byteArray13);
        outputStream5.write(byteArray13);
        org.jboss.dmr.ModelNode modelNode16 = modelNode1.set(byteArray13);
        org.jboss.dmr.DoubleModelValue doubleModelValue19 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        boolean boolean20 = doubleModelValue19.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression21 = doubleModelValue19.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue22 = new org.jboss.dmr.ExpressionValue(valueExpression21);
        org.jboss.dmr.ModelNode modelNode23 = modelNode16.set("[(\"hi!\" => 0.0)]", valueExpression21);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode25 = modelNode23.get((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        java.lang.String str5 = stringModelValue4.toString();
        boolean boolean6 = stringModelValue1.equals(stringModelValue4);
        byte[] byteArray7 = stringModelValue1.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = stringModelValue1.asDouble(2.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"" + "'", str5, "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", (long) 32);
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("{\n    \"hi!\" : {\n        \"EXPRESSION_VALUE\" : \"hi!\"\n    }\n}", (int) 'a');
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("[{ \"hi!\" : 0.0 }]", 8);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode10);
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        boolean boolean5 = valueExpression3.equals((java.lang.Object) 'p');
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue(valueExpression3);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        double double13 = bigIntegerModelValue11.asDouble((double) 'b');
        int int14 = bigIntegerModelValue11.asInt();
        org.jboss.dmr.ValueExpression valueExpression15 = bigIntegerModelValue11.asExpression();
        boolean boolean16 = valueExpression3.equals((java.lang.Object) valueExpression15);
        java.lang.String str17 = valueExpression15.resolveString();
        org.jboss.dmr.BooleanModelValue booleanModelValue18 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double19 = booleanModelValue18.asDouble();
        org.jboss.dmr.ModelValue modelValue20 = booleanModelValue18.copy();
        java.math.BigInteger bigInteger21 = booleanModelValue18.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue22 = new org.jboss.dmr.BigIntegerModelValue(bigInteger21);
        double double24 = bigIntegerModelValue22.asDouble((double) 'b');
        java.lang.String str25 = bigIntegerModelValue22.asString();
        org.jboss.dmr.ValueExpression valueExpression26 = bigIntegerModelValue22.asExpression();
        boolean boolean28 = bigIntegerModelValue22.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue30 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long31 = booleanModelValue30.asLong();
        org.jboss.dmr.ValueExpression valueExpression32 = booleanModelValue30.asExpression();
        java.lang.String str33 = valueExpression32.toString();
        org.jboss.dmr.ExpressionValue expressionValue35 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression36 = expressionValue35.asExpression();
        boolean boolean37 = valueExpression32.equals(valueExpression36);
        org.jboss.dmr.LongModelValue longModelValue39 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal40 = longModelValue39.asBigDecimal();
        int int41 = longModelValue39.asInt();
        org.jboss.dmr.ValueExpression valueExpression42 = longModelValue39.asExpression();
        boolean boolean43 = valueExpression36.equals(valueExpression42);
        int int44 = valueExpression42.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue46 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression47 = expressionValue46.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver48 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str49 = valueExpression47.resolveString(valueExpressionResolver48);
        java.math.BigInteger bigInteger50 = valueExpression42.resolveBigInteger(valueExpressionResolver48);
        java.lang.String str52 = valueExpressionResolver48.resolvePart("1L");
        java.lang.String str54 = valueExpressionResolver48.resolvePart("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==");
        boolean boolean55 = bigIntegerModelValue22.equals((java.lang.Object) valueExpressionResolver48);
        java.lang.String str57 = valueExpressionResolver48.resolvePart("(\"hi!\" => 0.0)");
        org.jboss.dmr.ExpressionValue expressionValue59 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue61 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean62 = expressionValue59.equals(expressionValue61);
        org.jboss.dmr.ExpressionValue expressionValue64 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue66 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean67 = expressionValue64.equals(expressionValue66);
        boolean boolean68 = expressionValue59.equals(expressionValue66);
        org.jboss.dmr.ExpressionValue expressionValue70 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str71 = expressionValue70.asString();
        boolean boolean72 = expressionValue59.equals(expressionValue70);
        org.jboss.dmr.ModelValue modelValue73 = expressionValue59.resolve();
        org.jboss.dmr.ExpressionValue expressionValue75 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression76 = expressionValue75.asExpression();
        boolean boolean77 = expressionValue59.equals(expressionValue75);
        org.jboss.dmr.ModelValue modelValue78 = expressionValue75.resolve();
        org.jboss.dmr.ValueExpression valueExpression79 = expressionValue75.asExpression();
        java.lang.String str80 = valueExpressionResolver48.resolve(valueExpression79);
        java.math.BigDecimal bigDecimal81 = valueExpression15.resolveBigDecimal(valueExpressionResolver48);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(booleanModelValue18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(booleanModelValue30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Expression \"true\"" + "'", str33, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(valueExpression42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(valueExpression47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(modelValue73);
        org.junit.Assert.assertNotNull(valueExpression76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(modelValue78);
        org.junit.Assert.assertNotNull(valueExpression79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(bigDecimal81);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromJSONString("(\"\" => big integer 1)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unexpected character '(' while reading DMR stream");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        java.math.BigDecimal bigDecimal10 = bigDecimalModelValue7.asBigDecimal();
        boolean boolean11 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long14 = modelNode13.asLong();
        org.jboss.dmr.ValueExpression valueExpression15 = modelNode13.asExpression();
        java.math.BigDecimal bigDecimal16 = valueExpression15.resolveBigDecimal();
        java.lang.String str17 = valueExpression15.getExpressionString();
        java.math.BigDecimal bigDecimal18 = valueExpression15.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue19 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal18);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue20 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal18);
        org.jboss.dmr.ValueExpression valueExpression21 = bigDecimalModelValue20.asExpression();
        double double23 = bigDecimalModelValue20.asDouble((double) 'l');
        long long24 = bigDecimalModelValue20.asLong();
        boolean boolean25 = bigDecimalModelValue7.equals(bigDecimalModelValue20);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long28 = modelNode27.asLong();
        org.jboss.dmr.ValueExpression valueExpression29 = modelNode27.asExpression();
        java.math.BigDecimal bigDecimal30 = valueExpression29.resolveBigDecimal();
        java.lang.String str31 = valueExpression29.getExpressionString();
        java.math.BigDecimal bigDecimal32 = valueExpression29.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue33 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal32);
        int int35 = bigDecimalModelValue33.asInt(0);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory37 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream38 = null;
        org.jboss.dmr.Base64.InputStream inputStream40 = new org.jboss.dmr.Base64.InputStream(inputStream38, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream41 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream40);
        org.jboss.dmr.stream.ModelReader modelReader42 = modelStreamFactory37.newModelReader((java.io.InputStream) inputStream41);
        java.io.OutputStream outputStream43 = null;
        org.jboss.dmr.Base64.OutputStream outputStream44 = new org.jboss.dmr.Base64.OutputStream(outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream44);
        outputStream44.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter48 = modelStreamFactory37.newModelWriter((java.io.OutputStream) outputStream44);
        org.jboss.dmr.stream.ModelWriter modelWriter49 = modelWriter48.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue51 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray52 = intModelValue51.asBytes();
        int int54 = intModelValue51.asInt(0);
        java.math.BigInteger bigInteger55 = intModelValue51.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter56 = modelWriter49.writeBigInteger(bigInteger55);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str59 = org.jboss.dmr.Base64.encodeBytes(byteArray57, (int) '#');
        org.jboss.dmr.stream.ModelWriter modelWriter60 = modelWriter49.writeBytes(byteArray57);
        bigDecimalModelValue33.write(modelWriter49);
        bigDecimalModelValue7.write(modelWriter49);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0" + "'", str17, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1.0" + "'", str31, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory37);
        org.junit.Assert.assertNotNull(modelReader42);
        org.junit.Assert.assertNotNull(modelWriter48);
        org.junit.Assert.assertNotNull(modelWriter49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(modelWriter56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "H4sIAAAAAAAAAAMAAAAAAAAAAAA=" + "'", str59, "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        org.junit.Assert.assertNotNull(modelWriter60);
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.Property property4 = new org.jboss.dmr.Property("AQ==", modelNode2, false);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.clear();
        int int10 = modelNode8.asInt(112);
        java.lang.String str12 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode8, (int) 'b');
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger18 = booleanModelValue17.asBigInteger();
        byte[] byteArray19 = booleanModelValue17.asBytes();
        org.jboss.dmr.ModelNode modelNode20 = modelNode14.set("expression \"hi!\"", byteArray19);
        org.jboss.dmr.ModelNode modelNode22 = modelNode20.setExpression("undefined");
        org.jboss.dmr.ModelNode modelNode23 = modelNode8.add(modelNode22);
        boolean boolean25 = modelNode8.hasDefined("(\"Expression \\\"true\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0)))");
        org.jboss.dmr.ModelNode modelNode28 = modelNode8.set("Expression \"10.0\"", 112);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode30 = modelNode8.require("(\"\" => (\"hi!\" => 0.0))");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '(\"\" => (\"hi!\" => 0.0))' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 112 + "'", int10 == 112);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgnLG0\nAgDPxTfOMAAAAA==" + "'", str12, "H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgnLG0\nAgDPxTfOMAAAAA==");
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(modelNode28);
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(false);
        int int3 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set(52);
        java.math.BigDecimal bigDecimal6 = modelNode5.asBigDecimalOrNull();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(bigDecimal6);
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        boolean boolean16 = objectModelValue15.asBoolean();
        int int18 = objectModelValue15.asInt(0);
        org.jboss.dmr.ModelValue modelValue20 = objectModelValue15.copy(false);
        boolean boolean21 = objectModelValue7.equals(objectModelValue15);
        org.jboss.dmr.ModelValue modelValue22 = objectModelValue15.resolve();
        int int23 = objectModelValue15.asInt();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        boolean boolean18 = listModelValue13.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray19 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean20 = listModelValue13.equals((java.lang.Object) modelNodeArray19);
        boolean boolean21 = typeModelValue5.equals((java.lang.Object) listModelValue13);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue13.resolve();
        long long23 = listModelValue13.asLong();
        int int24 = listModelValue13.asInt();
        org.jboss.dmr.ModelValue modelValue25 = listModelValue13.protect();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList30 = modelNode29.asList();
        org.jboss.dmr.ListModelValue listModelValue31 = new org.jboss.dmr.ListModelValue(modelNodeList30);
        java.lang.String str32 = listModelValue31.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = listModelValue31.asList();
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = modelNode37.asList();
        org.jboss.dmr.ListModelValue listModelValue39 = new org.jboss.dmr.ListModelValue(modelNodeList38);
        java.lang.String str40 = listModelValue39.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = listModelValue39.asList();
        boolean boolean42 = listModelValue31.equals(listModelValue39);
        org.jboss.dmr.ModelValue modelValue43 = listModelValue31.copy();
        boolean boolean45 = listModelValue31.asBoolean(true);
        boolean boolean47 = listModelValue31.has(32);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList52 = modelNode51.asList();
        org.jboss.dmr.ListModelValue listModelValue53 = new org.jboss.dmr.ListModelValue(modelNodeList52);
        java.lang.String str54 = listModelValue53.asString();
        long long55 = listModelValue53.asLong();
        java.lang.String str56 = listModelValue53.asString();
        org.jboss.dmr.ModelNode modelNode58 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode61 = modelNode58.set("hi!", 0.0d);
        org.jboss.dmr.Property property62 = new org.jboss.dmr.Property("", modelNode61);
        org.jboss.dmr.Property property63 = property62.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue64 = new org.jboss.dmr.PropertyModelValue(property62);
        org.jboss.dmr.ModelType modelType65 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode66 = new org.jboss.dmr.ModelNode(modelType65);
        org.jboss.dmr.ModelNode modelNode68 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode71 = modelNode68.set("hi!", 0.0d);
        org.jboss.dmr.Property property72 = new org.jboss.dmr.Property("", modelNode71);
        org.jboss.dmr.ModelNode modelNode73 = modelNode66.set(property72);
        org.jboss.dmr.PropertyModelValue propertyModelValue74 = new org.jboss.dmr.PropertyModelValue(property72);
        org.jboss.dmr.ModelValue modelValue75 = propertyModelValue74.copy();
        boolean boolean76 = propertyModelValue64.equals(propertyModelValue74);
        boolean boolean77 = listModelValue53.equals((java.lang.Object) propertyModelValue74);
        boolean boolean78 = listModelValue31.equals(listModelValue53);
        boolean boolean79 = listModelValue13.equals(listModelValue53);
        int int80 = listModelValue53.asInt();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(modelNodeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(modelValue25);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNodeList30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str32, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str40, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(modelValue43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNodeList52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str54, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str56, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + modelType65 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType65.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertNotNull(modelValue75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.ModelNode modelNode17 = modelNode1.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.PropertyModelValue propertyModelValue18 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==", modelNode17);
        org.jboss.dmr.ModelNode modelNode21 = modelNode17.set("[1]", (long) 'b');
        java.io.OutputStream outputStream23 = null;
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream(outputStream23);
        outputStream24.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream24);
        org.jboss.dmr.Base64.OutputStream outputStream27 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream26);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue32 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger33 = booleanModelValue32.asBigInteger();
        byte[] byteArray34 = booleanModelValue32.asBytes();
        org.jboss.dmr.ModelNode modelNode35 = modelNode29.set("expression \"hi!\"", byteArray34);
        outputStream26.write(byteArray34);
        org.jboss.dmr.LongModelValue longModelValue38 = new org.jboss.dmr.LongModelValue(1L);
        long long39 = longModelValue38.asLong();
        byte[] byteArray40 = longModelValue38.asBytes();
        outputStream26.write(byteArray40, 2, (int) (short) -1);
        org.jboss.dmr.BytesModelValue bytesModelValue44 = new org.jboss.dmr.BytesModelValue(byteArray40);
        org.jboss.dmr.LongModelValue longModelValue46 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str47 = longModelValue46.asString();
        byte[] byteArray48 = longModelValue46.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue49 = new org.jboss.dmr.BytesModelValue(byteArray48);
        java.lang.String str50 = bytesModelValue49.asString();
        int int51 = bytesModelValue49.asInt();
        byte[] byteArray52 = bytesModelValue49.asBytes();
        org.jboss.dmr.LongModelValue longModelValue54 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str55 = longModelValue54.asString();
        byte[] byteArray56 = longModelValue54.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue57 = new org.jboss.dmr.BytesModelValue(byteArray56);
        java.lang.String str58 = bytesModelValue57.asString();
        int int59 = bytesModelValue57.asInt();
        int int60 = bytesModelValue57.asInt();
        org.jboss.dmr.LongModelValue longModelValue62 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str63 = longModelValue62.asString();
        byte[] byteArray64 = longModelValue62.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue65 = new org.jboss.dmr.BytesModelValue(byteArray64);
        double double66 = bytesModelValue65.asDouble();
        boolean boolean67 = bytesModelValue57.equals(bytesModelValue65);
        byte[] byteArray68 = bytesModelValue65.asBytes();
        java.math.BigInteger bigInteger69 = bytesModelValue65.asBigInteger();
        boolean boolean70 = bytesModelValue49.equals(bytesModelValue65);
        double double71 = bytesModelValue65.asDouble();
        long long72 = bytesModelValue65.asLong();
        boolean boolean73 = bytesModelValue44.equals(bytesModelValue65);
        java.math.BigInteger bigInteger74 = bytesModelValue44.asBigInteger();
        org.jboss.dmr.ModelNode modelNode75 = modelNode17.set("H4sIAAAAAAAAAHNQYQADAAsATXcIAAAA", bigInteger74);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(booleanModelValue32);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str50, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str58, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4.9E-324d + "'", double66 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 4.9E-324d + "'", double71 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(modelNode75);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromBase64String("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==");
            org.junit.Assert.fail("Expected exception of type java.io.InvalidObjectException; message: Invalid type character '?'");
        } catch (java.io.InvalidObjectException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        boolean boolean7 = booleanModelValue1.equals((java.lang.Object) '4');
        boolean boolean8 = booleanModelValue1.asBoolean();
        java.lang.String str9 = booleanModelValue1.asString();
        org.jboss.dmr.ModelValue modelValue10 = booleanModelValue1.clone();
        org.jboss.dmr.ValueExpression valueExpression11 = modelValue10.asExpression();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertNotNull(valueExpression11);
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.math.BigInteger bigInteger5 = bytesModelValue4.asBigInteger();
        java.io.DataOutput dataOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue4.writeExternal(dataOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger5);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        org.jboss.dmr.Base64.OutputStream outputStream2 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream2);
        outputStream2.resumeEncoding();
        outputStream2.resumeEncoding();
        outputStream2.write(3);
        outputStream2.write((int) 'l');
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        org.jboss.dmr.ModelNode modelNode15 = objectModelValue7.getChild("(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))");
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.add("(\"hi!\" => 0.0)", (long) 32);
        org.jboss.dmr.ModelNode modelNode21 = org.jboss.dmr.ModelNode.fromJSONString("[1]");
        org.jboss.dmr.ModelNode modelNode23 = modelNode21.add(true);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.get(strArray30);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue37);
        org.jboss.dmr.ModelValue modelValue39 = listModelValue37.resolve();
        int int41 = listModelValue37.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList42 = listModelValue37.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList43 = modelNode31.asPropertyList(propertyList42);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode48 = modelNode45.set("hi!", 0.0d);
        org.jboss.dmr.Property property49 = new org.jboss.dmr.Property("", modelNode48);
        java.lang.String[] strArray50 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.get(strArray50);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode55 = modelNode52.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList56 = modelNode55.asList();
        org.jboss.dmr.ListModelValue listModelValue57 = new org.jboss.dmr.ListModelValue(modelNodeList56);
        org.jboss.dmr.ModelNode modelNode58 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue57);
        org.jboss.dmr.ModelValue modelValue59 = listModelValue57.resolve();
        int int61 = listModelValue57.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList62 = listModelValue57.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList63 = modelNode51.asPropertyList(propertyList62);
        modelNode31.setNoCopy(modelNode51);
        boolean boolean65 = modelNode51.isProtected();
        org.jboss.dmr.ModelNode modelNode68 = modelNode51.set("", (double) 8);
        org.jboss.dmr.ModelNode modelNode71 = new org.jboss.dmr.ModelNode(1L);
        org.jboss.dmr.ValueExpression valueExpression72 = modelNode71.asExpression();
        org.jboss.dmr.ModelNode modelNode73 = modelNode68.set("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwACM=", valueExpression72);
        java.lang.String str74 = valueExpression72.resolveString();
        org.jboss.dmr.ModelNode modelNode75 = modelNode21.set(valueExpression72);
        org.jboss.dmr.ModelNode modelNode76 = modelNode18.add("32", valueExpression72);
        org.jboss.dmr.ModelNode modelNode77 = modelNode76.resolve();
        org.jboss.dmr.ModelNode modelNode79 = modelNode76.set(false);
        long long80 = modelNode79.asLong();
        double double81 = modelNode79.asDouble();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(propertyList42);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNodeList56);
        org.junit.Assert.assertNotNull(modelValue59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(propertyList62);
        org.junit.Assert.assertNotNull(propertyList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(valueExpression72);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1" + "'", str74, "1");
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertNotNull(modelNode77);
        org.junit.Assert.assertNotNull(modelNode79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        org.jboss.dmr.ModelValue modelValue15 = objectModelValue7.protect();
        org.jboss.dmr.ModelNode modelNode17 = objectModelValue7.getChild("[97L]");
        java.util.Set<java.lang.String> strSet18 = objectModelValue7.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode20 = objectModelValue7.requireChild("\"H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgnC2F\\ngdlAz6ACAF+odLA1AAAA\"");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '\"H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgnC2F\\ngdlAz6ACAF+odLA1AAAA\"' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream5 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            outputStream5.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        boolean boolean2 = modelNode0.hasDefined("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add((long) (byte) 1);
        org.jboss.dmr.LongModelValue longModelValue7 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal8 = longModelValue7.asBigDecimal();
        int int9 = longModelValue7.asInt();
        org.jboss.dmr.ValueExpression valueExpression10 = longModelValue7.asExpression();
        double double11 = longModelValue7.asDouble();
        org.jboss.dmr.LongModelValue longModelValue13 = new org.jboss.dmr.LongModelValue(1L);
        long long15 = longModelValue13.asLong((long) (short) 0);
        java.lang.String str16 = longModelValue13.asString();
        byte[] byteArray17 = longModelValue13.asBytes();
        org.jboss.dmr.ModelType modelType18 = longModelValue13.getType();
        long long20 = longModelValue13.asLong(1L);
        boolean boolean21 = longModelValue7.equals(longModelValue13);
        java.math.BigInteger bigInteger22 = longModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode23 = modelNode4.add("rO0ABXA=", bigInteger22);
        boolean boolean25 = modelNode4.has((int) '4');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType18 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType18.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        org.jboss.dmr.ValueExpression valueExpression1 = new org.jboss.dmr.ValueExpression("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==");
        // The following exception was thrown during execution in test generation
        try {
            long long2 = valueExpression1.resolveLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np?b24gIjEiZQADaGkheA==\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue7.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode16 = modelNode14.set((double) 0L);
        java.lang.String str18 = modelNode14.toJSONString(false);
        org.jboss.dmr.ModelNode modelNode20 = modelNode14.set(false);
        org.jboss.dmr.LongModelValue longModelValue23 = new org.jboss.dmr.LongModelValue(1L);
        int int25 = longModelValue23.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue((-1L));
        long long29 = longModelValue27.asLong((long) (byte) -1);
        double double31 = longModelValue27.asDouble((double) 10.0f);
        boolean boolean32 = longModelValue23.equals(longModelValue27);
        byte[] byteArray33 = longModelValue27.asBytes();
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) longModelValue27);
        byte[] byteArray35 = longModelValue27.asBytes();
        org.jboss.dmr.ValueExpression valueExpression36 = longModelValue27.asExpression();
        org.jboss.dmr.ValueExpression valueExpression37 = longModelValue27.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode38 = modelNode14.add("QUFBQUFBQUFBQUU9", valueExpression37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0.0" + "'", str18, "0.0");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(valueExpression36);
        org.junit.Assert.assertNotNull(valueExpression37);
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        int int10 = bigDecimalModelValue7.asInt();
        int int11 = bigDecimalModelValue7.asInt();
        java.lang.String str12 = bigDecimalModelValue7.asString();
        java.lang.String str13 = bigDecimalModelValue7.asString();
        long long14 = bigDecimalModelValue7.asLong();
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long17 = modelNode16.asLong();
        org.jboss.dmr.ValueExpression valueExpression18 = modelNode16.asExpression();
        java.math.BigDecimal bigDecimal19 = valueExpression18.resolveBigDecimal();
        java.lang.String str20 = valueExpression18.getExpressionString();
        java.math.BigDecimal bigDecimal21 = valueExpression18.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue22 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal21);
        boolean boolean23 = bigDecimalModelValue22.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression24 = bigDecimalModelValue22.asExpression();
        int int25 = bigDecimalModelValue22.asInt();
        long long26 = bigDecimalModelValue22.asLong();
        double double27 = bigDecimalModelValue22.asDouble();
        double double28 = bigDecimalModelValue22.asDouble();
        boolean boolean29 = bigDecimalModelValue7.equals(bigDecimalModelValue22);
        java.io.PrintWriter printWriter30 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue7.format(printWriter30, (int) (byte) 100, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0" + "'", str12, "1.0");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0" + "'", str13, "1.0");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1.0" + "'", str20, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.BooleanModelValue booleanModelValue6 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger7 = booleanModelValue6.asBigInteger();
        byte[] byteArray8 = booleanModelValue6.asBytes();
        outputStream3.write(byteArray8, (int) (short) -1, (int) (byte) 0);
        org.jboss.dmr.Base64.OutputStream outputStream12 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        outputStream12.suspendEncoding();
        outputStream12.suspendEncoding();
        org.junit.Assert.assertNotNull(booleanModelValue6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.set(4.9E-324d);
        org.jboss.dmr.ModelNode modelNode13 = modelNode9.set((long) (byte) 0);
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode9.asExpression();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(valueExpression14);
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) 8);
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue8 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue8.asObject();
        java.util.Set<java.lang.String> strSet10 = objectModelValue8.getKeys();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue8.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean13 = objectModelValue8.asBoolean();
        int int15 = objectModelValue8.asInt((int) 'b');
        int int17 = objectModelValue8.asInt((int) '#');
        boolean boolean18 = objectModelValue0.equals(objectModelValue8);
        org.jboss.dmr.ModelValue modelValue19 = objectModelValue8.resolve();
        org.jboss.dmr.ModelValue modelValue20 = objectModelValue8.resolve();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(modelValue20);
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        byte[] byteArray6 = intModelValue1.asBytes();
        boolean boolean8 = intModelValue1.has("[1]");
        long long10 = intModelValue1.asLong((long) (byte) 10);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) intModelValue1);
        java.math.BigDecimal bigDecimal12 = intModelValue1.asBigDecimal();
        org.jboss.dmr.ModelValue modelValue13 = intModelValue1.clone();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory15 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader20 = modelStreamFactory15.newModelReader((java.io.InputStream) inputStream19);
        java.io.OutputStream outputStream21 = null;
        org.jboss.dmr.Base64.OutputStream outputStream22 = new org.jboss.dmr.Base64.OutputStream(outputStream21);
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream22);
        outputStream22.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelStreamFactory15.newModelWriter((java.io.OutputStream) outputStream22);
        intModelValue1.write(modelWriter26);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(modelStreamFactory15);
        org.junit.Assert.assertNotNull(modelReader20);
        org.junit.Assert.assertNotNull(modelWriter26);
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        byte[] byteArray7 = bytesModelValue4.asBytes();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        java.lang.String str13 = bytesModelValue12.asString();
        int int14 = bytesModelValue12.asInt();
        int int15 = bytesModelValue12.asInt();
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        double double21 = bytesModelValue20.asDouble();
        boolean boolean22 = bytesModelValue12.equals(bytesModelValue20);
        byte[] byteArray23 = bytesModelValue20.asBytes();
        java.math.BigInteger bigInteger24 = bytesModelValue20.asBigInteger();
        boolean boolean25 = bytesModelValue4.equals(bytesModelValue20);
        byte[] byteArray26 = bytesModelValue20.asBytes();
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        java.lang.String str32 = bytesModelValue31.asString();
        int int33 = bytesModelValue31.asInt();
        long long35 = bytesModelValue31.asLong((long) (short) 1);
        int int36 = bytesModelValue31.asInt();
        int int37 = bytesModelValue31.asInt();
        byte[] byteArray38 = bytesModelValue31.asBytes();
        org.jboss.dmr.LongModelValue longModelValue40 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str41 = longModelValue40.asString();
        byte[] byteArray42 = longModelValue40.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue43 = new org.jboss.dmr.BytesModelValue(byteArray42);
        java.lang.String str44 = bytesModelValue43.asString();
        int int45 = bytesModelValue43.asInt();
        long long47 = bytesModelValue43.asLong((long) (short) 1);
        int int48 = bytesModelValue43.asInt();
        double double49 = bytesModelValue43.asDouble();
        boolean boolean50 = bytesModelValue31.equals(bytesModelValue43);
        boolean boolean51 = bytesModelValue20.equals(bytesModelValue31);
        int int52 = bytesModelValue20.asInt();
        org.jboss.dmr.LongModelValue longModelValue54 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str55 = longModelValue54.asString();
        byte[] byteArray56 = longModelValue54.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue57 = new org.jboss.dmr.BytesModelValue(byteArray56);
        java.lang.String str58 = bytesModelValue57.asString();
        int int59 = bytesModelValue57.asInt();
        int int61 = bytesModelValue57.asInt((int) 'a');
        java.lang.String str62 = bytesModelValue57.asString();
        long long63 = bytesModelValue57.asLong();
        java.lang.String str64 = bytesModelValue57.asString();
        boolean boolean65 = bytesModelValue20.equals(bytesModelValue57);
        java.math.BigInteger bigInteger66 = bytesModelValue20.asBigInteger();
        int int68 = bytesModelValue20.asInt((int) 'l');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str13, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str32, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str44, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4.9E-324d + "'", double49 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str58, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str62, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str64, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        int int7 = bigIntegerModelValue4.asInt();
        org.jboss.dmr.BooleanModelValue booleanModelValue8 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double9 = booleanModelValue8.asDouble();
        org.jboss.dmr.ModelValue modelValue10 = booleanModelValue8.copy();
        java.math.BigInteger bigInteger11 = booleanModelValue8.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue12 = new org.jboss.dmr.BigIntegerModelValue(bigInteger11);
        double double14 = bigIntegerModelValue12.asDouble((double) 'b');
        java.lang.String str15 = bigIntegerModelValue12.asString();
        org.jboss.dmr.ValueExpression valueExpression16 = bigIntegerModelValue12.asExpression();
        boolean boolean18 = bigIntegerModelValue12.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue19 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double20 = booleanModelValue19.asDouble();
        org.jboss.dmr.ModelValue modelValue21 = booleanModelValue19.copy();
        java.math.BigInteger bigInteger22 = booleanModelValue19.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue23 = new org.jboss.dmr.BigIntegerModelValue(bigInteger22);
        java.lang.String str24 = bigIntegerModelValue23.asString();
        long long26 = bigIntegerModelValue23.asLong(32L);
        double double27 = bigIntegerModelValue23.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double29 = booleanModelValue28.asDouble();
        org.jboss.dmr.ModelValue modelValue30 = booleanModelValue28.copy();
        java.math.BigInteger bigInteger31 = booleanModelValue28.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue32 = new org.jboss.dmr.BigIntegerModelValue(bigInteger31);
        double double34 = bigIntegerModelValue32.asDouble((double) 'b');
        boolean boolean35 = bigIntegerModelValue23.equals(bigIntegerModelValue32);
        org.jboss.dmr.BooleanModelValue booleanModelValue36 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double37 = booleanModelValue36.asDouble();
        org.jboss.dmr.ModelValue modelValue38 = booleanModelValue36.copy();
        java.math.BigInteger bigInteger39 = booleanModelValue36.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue40 = new org.jboss.dmr.BigIntegerModelValue(bigInteger39);
        long long42 = bigIntegerModelValue40.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue43 = null;
        boolean boolean44 = bigIntegerModelValue40.equals(bigIntegerModelValue43);
        boolean boolean45 = bigIntegerModelValue23.equals(bigIntegerModelValue40);
        java.math.BigDecimal bigDecimal46 = bigIntegerModelValue23.asBigDecimal();
        boolean boolean47 = bigIntegerModelValue12.equals(bigIntegerModelValue23);
        int int49 = bigIntegerModelValue23.asInt((int) (byte) -1);
        boolean boolean50 = bigIntegerModelValue4.equals(bigIntegerModelValue23);
        org.jboss.dmr.ValueExpression valueExpression51 = bigIntegerModelValue4.asExpression();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(booleanModelValue19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(booleanModelValue36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue38);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(valueExpression51);
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((-1));
        java.math.BigDecimal bigDecimal7 = doubleModelValue1.asBigDecimal();
        double double9 = doubleModelValue1.asDouble((double) 100);
        int int11 = doubleModelValue1.asInt(5);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = objectModelValue0.asList();
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.resolve();
        java.io.PrintWriter printWriter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.writeString(printWriter7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelValue6);
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        double double5 = bytesModelValue4.asDouble();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.set((int) '#');
        java.lang.Boolean boolean10 = modelNode7.asBooleanOrNull();
        java.lang.String str12 = modelNode7.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        boolean boolean13 = bytesModelValue4.equals((java.lang.Object) modelNode7);
        int int15 = bytesModelValue4.asInt(52);
        double double16 = bytesModelValue4.asDouble();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        java.lang.String str22 = modelNode18.toString();
        org.jboss.dmr.ModelNode modelNode23 = modelNode18.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode25 = modelNode18.set(100);
        org.jboss.dmr.ModelNode modelNode26 = modelNode17.add(modelNode18);
        int int28 = modelNode18.asInt(2);
        org.jboss.dmr.ModelType modelType30 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode31 = modelNode18.set("[(\"hi!\" => 0.0)]", modelType30);
        org.jboss.dmr.TypeModelValue typeModelValue32 = org.jboss.dmr.TypeModelValue.of(modelType30);
        boolean boolean33 = bytesModelValue4.equals((java.lang.Object) modelType30);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory35 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream36 = null;
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream(inputStream36, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory35.newModelReader((java.io.InputStream) inputStream39);
        java.io.OutputStream outputStream41 = null;
        org.jboss.dmr.Base64.OutputStream outputStream42 = new org.jboss.dmr.Base64.OutputStream(outputStream41);
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream42);
        outputStream42.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter46 = modelStreamFactory35.newModelWriter((java.io.OutputStream) outputStream42);
        org.jboss.dmr.stream.ModelWriter modelWriter47 = modelWriter46.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter49 = modelWriter46.writeInt((int) '4');
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode53 = modelNode50.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList54 = modelNode53.asList();
        org.jboss.dmr.ListModelValue listModelValue55 = new org.jboss.dmr.ListModelValue(modelNodeList54);
        org.jboss.dmr.ModelNode modelNode56 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue55);
        org.jboss.dmr.ModelValue modelValue57 = listModelValue55.resolve();
        int int59 = listModelValue55.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList60 = listModelValue55.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList61 = listModelValue55.asPropertyList();
        java.lang.String str62 = listModelValue55.asString();
        int int63 = listModelValue55.asInt();
        java.lang.String str64 = listModelValue55.asString();
        org.jboss.dmr.ModelType modelType65 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode66 = new org.jboss.dmr.ModelNode(modelType65);
        boolean boolean67 = listModelValue55.equals((java.lang.Object) modelType65);
        org.jboss.dmr.TypeModelValue typeModelValue68 = org.jboss.dmr.TypeModelValue.of(modelType65);
        org.jboss.dmr.TypeModelValue typeModelValue69 = org.jboss.dmr.TypeModelValue.of(modelType65);
        org.jboss.dmr.stream.ModelWriter modelWriter70 = modelWriter46.writeType(modelType65);
        bytesModelValue4.write(modelWriter46);
        org.jboss.dmr.stream.ModelWriter modelWriter73 = modelWriter46.writeExpression("(\"hi!\" => [\n    (\"hi!\" => 0.0),\n    undefined\n])");
        org.jboss.dmr.stream.ModelWriter modelWriter75 = modelWriter46.writeString("{ \"Expression \\\"true\\\"\" : { \"hi!\" : 0.0 } }");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.9E-324d + "'", double5 == 4.9E-324d);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "35" + "'", str12, "35");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4.9E-324d + "'", double16 == 4.9E-324d);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(\"hi!\" => 0.0)" + "'", str22, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + modelType30 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType30.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(typeModelValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory35);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelWriter46);
        org.junit.Assert.assertNotNull(modelWriter47);
        org.junit.Assert.assertNotNull(modelWriter49);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNodeList54);
        org.junit.Assert.assertNotNull(modelValue57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(propertyList60);
        org.junit.Assert.assertNotNull(propertyList61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str62, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str64, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType65 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType65.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(typeModelValue68);
        org.junit.Assert.assertNotNull(typeModelValue69);
        org.junit.Assert.assertNotNull(modelWriter70);
        org.junit.Assert.assertNotNull(modelWriter73);
        org.junit.Assert.assertNotNull(modelWriter75);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int4 = modelNode3.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode10 = modelNode3.set(valueExpression8);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("\"1L\"", modelNode3, false);
        org.jboss.dmr.PropertyModelValue propertyModelValue13 = new org.jboss.dmr.PropertyModelValue(property12);
        boolean boolean14 = stringModelValue1.equals((java.lang.Object) property12);
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        java.lang.String str17 = stringModelValue16.toString();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int19 = modelNode18.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.setExpression("hi!", "hi!");
        java.lang.String str24 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode20);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode20.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode26 = modelNode18.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList25);
        java.util.List<org.jboss.dmr.Property> propertyList27 = modelNode26.asPropertyList();
        boolean boolean28 = stringModelValue16.equals((java.lang.Object) modelNode26);
        boolean boolean29 = stringModelValue1.equals(stringModelValue16);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = stringModelValue16.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"" + "'", str17, "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str24, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(propertyList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        int int11 = listModelValue5.asInt((int) (short) -1);
        long long13 = listModelValue5.asLong((long) (short) 10);
        org.jboss.dmr.ModelValue modelValue14 = listModelValue5.protect();
        long long15 = listModelValue5.asLong();
        org.jboss.dmr.ModelValue modelValue16 = listModelValue5.protect();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory18 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream19 = null;
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream(inputStream19, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream21);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory18.newModelReader((java.io.InputStream) inputStream22);
        java.io.OutputStream outputStream24 = null;
        org.jboss.dmr.Base64.OutputStream outputStream25 = new org.jboss.dmr.Base64.OutputStream(outputStream24);
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream25);
        outputStream25.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter29 = modelStreamFactory18.newModelWriter((java.io.OutputStream) outputStream25);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter29.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter32 = modelWriter29.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter34 = modelWriter32.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter36 = modelWriter32.writeBoolean(true);
        listModelValue5.write(modelWriter36);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property38 = listModelValue5.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertNotNull(modelStreamFactory18);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertNotNull(modelWriter29);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelWriter32);
        org.junit.Assert.assertNotNull(modelWriter34);
        org.junit.Assert.assertNotNull(modelWriter36);
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isPropertyStart();
        boolean boolean17 = modelReader15.isPropertyStart();
        boolean boolean18 = modelReader15.isExpression();
        boolean boolean19 = modelReader15.isType();
        boolean boolean20 = modelReader15.isListStart();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger21 = modelReader15.getBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't big integer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int8 = bytesModelValue4.asInt((int) 'a');
        int int9 = bytesModelValue4.asInt();
        int int10 = bytesModelValue4.asInt();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue20 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str21 = longModelValue20.asString();
        byte[] byteArray22 = longModelValue20.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue23 = new org.jboss.dmr.BytesModelValue(byteArray22);
        int int26 = inputStream18.read(byteArray22, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.stream.ModelReader modelReader27 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream29 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream31 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream29, (int) 'l');
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode32 = org.jboss.dmr.ModelNode.fromBase64((java.io.InputStream) inputStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(modelReader27);
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        int int3 = longModelValue1.asInt();
        org.jboss.dmr.ValueExpression valueExpression4 = longModelValue1.asExpression();
        long long6 = longModelValue1.asLong((long) 1);
        java.math.BigInteger bigInteger7 = longModelValue1.asBigInteger();
        java.math.BigDecimal bigDecimal8 = longModelValue1.asBigDecimal();
        java.io.PrintWriter printWriter9 = null;
        // The following exception was thrown during execution in test generation
        try {
            longModelValue1.format(printWriter9, (int) (byte) 10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal8);
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        boolean boolean4 = stringModelValue1.equals((java.lang.Object) (-1.0d));
        java.lang.String str5 = stringModelValue1.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent6 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) modelEvent6);
        java.lang.String str8 = stringModelValue1.asString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory10 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream11 = null;
        org.jboss.dmr.Base64.InputStream inputStream13 = new org.jboss.dmr.Base64.InputStream(inputStream11, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream13);
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory10.newModelReader((java.io.InputStream) inputStream14);
        java.io.OutputStream outputStream16 = null;
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream(outputStream16);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream17);
        outputStream17.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter21 = modelStreamFactory10.newModelWriter((java.io.OutputStream) outputStream17);
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelWriter21.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelWriter21.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelWriter24.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter24.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter28.writeLong(100L);
        stringModelValue1.write(modelWriter30);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = stringModelValue1.asInt((int) 'e');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str5, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent6 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent6.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str8, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelStreamFactory10);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelWriter21);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertNotNull(modelWriter24);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertNotNull(modelWriter28);
        org.junit.Assert.assertNotNull(modelWriter30);
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, 0);
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream5, (int) (byte) 10);
        org.jboss.dmr.Base64.InputStream inputStream8 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream7);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = inputStream8.skip((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.StringModelValue stringModelValue6 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        boolean boolean7 = stringModelValue3.equals(stringModelValue6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression12 = stringModelValue11.asExpression();
        boolean boolean13 = stringModelValue9.equals(stringModelValue11);
        boolean boolean14 = stringModelValue6.equals(stringModelValue11);
        byte[] byteArray15 = stringModelValue6.asBytes();
        java.lang.String str16 = stringModelValue6.asString();
        java.lang.String str17 = stringModelValue6.asString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Expression \"true\"" + "'", str16, "Expression \"true\"");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Expression \"true\"" + "'", str17, "Expression \"true\"");
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        boolean boolean4 = booleanModelValue1.asBoolean();
        java.math.BigDecimal bigDecimal5 = booleanModelValue1.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        boolean boolean13 = modelNode10.hasDefined((int) (short) -1);
        boolean boolean14 = booleanModelValue1.equals((java.lang.Object) modelNode10);
        double double15 = booleanModelValue1.asDouble();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        byte[] byteArray2 = stringModelValue1.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = stringModelValue1.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z?cy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA?AAAAeA==\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[114, 79, 48, 65, 66, 88, 78, 121, 65, 66, 100, 118, 99, 109, 99, 117, 97, 109, 74, 118, 99, 51, 77, 117, 90, 71, 49, 121, 76, 107, 49, 118, 90, 71, 86, 115, 84, 109, 57, 107, 90, 82, 119, 116, 111, 85, 83, 100, 111, 52, 52, 47, 68, 65, 65, 65, 101, 72, 66, 51, 82, 51, 65, 65, 78, 87, 57, 121, 90, 121, 53, 113, 89, 109, 57, 122, 10, 99, 121, 53, 107, 98, 88, 73, 117, 99, 51, 82, 121, 90, 87, 70, 116, 76, 107, 49, 118, 90, 71, 86, 115, 82, 88, 104, 106, 90, 88, 66, 48, 97, 87, 57, 117, 79, 105, 66, 98, 75, 67, 74, 111, 97, 83, 69, 105, 73, 68, 48, 43, 73, 68, 65, 117, 77, 67, 108, 100, 99, 65, 65, 68, 97, 71, 107, 104, 82, 65, 65, 65, 65, 65, 65, 65, 10, 65, 65, 65, 65, 101, 65, 61, 61]");
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str3 = modelNode1.asString("true");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(bigDecimal9);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.setNoCopy("35", modelNode12);
        boolean boolean15 = modelNode12.hasDefined("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.ModelNode modelNode17 = modelNode12.set("\"bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}\"");
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long22 = booleanModelValue20.asLong((long) 32);
        int int23 = booleanModelValue20.asInt();
        java.math.BigDecimal bigDecimal24 = booleanModelValue20.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode25 = modelNode12.set("\"\\\"1L\\\"\"", bigDecimal24);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode(bigDecimal24);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(modelNode25);
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        byte[] byteArray1 = org.jboss.dmr.Base64.decode("rO0ABXQADEFBQUFBQUFBQUFFPQ==");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 116, 0, 12, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 69, 61]");
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        int int34 = inputStream26.read(byteArray30, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (-1));
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader41 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream38);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger42 = modelReader41.getBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't big integer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelReader41);
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ModelType modelType9 = typeModelValue5.asType();
        boolean boolean11 = typeModelValue5.asBoolean(true);
        java.lang.String str12 = typeModelValue5.asString();
        java.lang.String str13 = typeModelValue5.asString();
        boolean boolean15 = typeModelValue5.asBoolean(false);
        org.jboss.dmr.ModelType modelType16 = typeModelValue5.asType();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(modelType16);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PROPERTY" + "'", str12, "PROPERTY");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PROPERTY" + "'", str13, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType16.equals(org.jboss.dmr.ModelType.PROPERTY));
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3Fm8AAAABAABwAANo\naSFEAAAAAAAAAAB4");
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        double double2 = intModelValue1.asDouble();
        int int3 = intModelValue1.asInt();
        long long5 = intModelValue1.asLong((long) (short) 10);
        boolean boolean6 = intModelValue1.asBoolean();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 32.0d + "'", double2 == 32.0d);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        double double5 = doubleModelValue1.asDouble();
        org.jboss.dmr.ValueExpression valueExpression6 = doubleModelValue1.asExpression();
        java.lang.String str7 = doubleModelValue1.asString();
        org.jboss.dmr.DoubleModelValue doubleModelValue9 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long10 = doubleModelValue9.asLong();
        boolean boolean11 = doubleModelValue9.asBoolean();
        java.math.BigInteger bigInteger12 = doubleModelValue9.asBigInteger();
        byte[] byteArray13 = doubleModelValue9.asBytes();
        boolean boolean14 = doubleModelValue1.equals(doubleModelValue9);
        org.jboss.dmr.ValueExpression valueExpression15 = doubleModelValue1.asExpression();
        java.math.BigInteger bigInteger16 = doubleModelValue1.asBigInteger();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10.0" + "'", str7, "10.0");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertNotNull(bigInteger16);
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        java.lang.Throwable throwable3 = null;
        org.jboss.dmr.stream.ModelException modelException4 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable3);
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException4);
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException4);
        org.jboss.dmr.stream.ModelException modelException7 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException6);
        org.jboss.dmr.stream.ModelException modelException8 = new org.jboss.dmr.stream.ModelException("(\"hi!\" => expression \"hi!\")", (java.lang.Throwable) modelException7);
        org.jboss.dmr.stream.ModelException modelException9 = new org.jboss.dmr.stream.ModelException("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => (\"[(\\\"hi!\\\" => 0.0)]\" => PROPERTY))", (java.lang.Throwable) modelException8);
        org.jboss.dmr.stream.ModelException modelException10 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException9);
        java.lang.Throwable[] throwableArray11 = modelException10.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue4.removeChild("1");
        boolean boolean9 = objectModelValue4.asBoolean();
        boolean boolean10 = objectModelValue0.equals(objectModelValue4);
        long long11 = objectModelValue4.asLong();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue4.getChild("\"\\\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\\\"\"");
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.add("QA==", (long) '4');
        org.jboss.dmr.ModelNode modelNode17 = modelNode16.clear();
        java.lang.String str18 = modelNode16.asStringOrNull();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal19 = modelNode16.asBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isDouble();
        boolean boolean19 = modelReader15.isPropertyStart();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = modelReader15.getInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't int");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        java.lang.Long long46 = modelNode45.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray47 = new org.jboss.dmr.ModelNode[] { modelNode41, modelNode45 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList48 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48, modelNodeArray47);
        org.jboss.dmr.ModelNode modelNode50 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long54 = modelNode53.asLong();
        org.jboss.dmr.ValueExpression valueExpression55 = modelNode53.asExpression();
        java.math.BigDecimal bigDecimal56 = valueExpression55.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue58 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long59 = booleanModelValue58.asLong();
        org.jboss.dmr.ValueExpression valueExpression60 = booleanModelValue58.asExpression();
        boolean boolean62 = valueExpression60.equals((java.lang.Object) 'p');
        boolean boolean63 = valueExpression55.equals(valueExpression60);
        org.jboss.dmr.ModelNode modelNode64 = new org.jboss.dmr.ModelNode(valueExpression55);
        org.jboss.dmr.Property property66 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode64, false);
        org.jboss.dmr.ModelNode modelNode69 = modelNode64.set("rO0ABXQAUXJPMEFCWE55QUJkdmNtY3VhbUp2YzNNdVpHMXlMazF2WkdWc1RtOWtaUnd0b1VTZG80\nNC9EQUFBZUhCM0RIQUFBMmhwSVdVQUEyaHAKSVhnPQ==", 0L);
        org.jboss.dmr.ModelNode modelNode71 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode74 = modelNode71.setExpression("hi!", "hi!");
        java.lang.String str75 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode71);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList76 = modelNode71.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode78 = modelNode71.set((double) 0);
        boolean boolean79 = modelNode71.isProtected();
        boolean boolean81 = modelNode71.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode84 = modelNode71.set("hi!", (long) (short) 100);
        org.jboss.dmr.ModelNode modelNode85 = modelNode64.set("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")", modelNode71);
        org.jboss.dmr.ModelNode modelNode86 = modelNode7.set(modelNode85);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = modelNode86.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNull(long46);
        org.junit.Assert.assertNotNull(modelNodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(valueExpression55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(booleanModelValue58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(valueExpression60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str75, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList76);
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertNotNull(modelNode85);
        org.junit.Assert.assertNotNull(modelNode86);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.set("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"");
        org.jboss.dmr.BooleanModelValue booleanModelValue12 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long14 = booleanModelValue12.asLong((long) 32);
        int int15 = booleanModelValue12.asInt();
        java.math.BigDecimal bigDecimal16 = booleanModelValue12.asBigDecimal();
        org.jboss.dmr.ModelValue modelValue17 = booleanModelValue12.protect();
        org.jboss.dmr.stream.ModelEvent modelEvent18 = org.jboss.dmr.stream.ModelEvent.LONG;
        boolean boolean19 = booleanModelValue12.equals((java.lang.Object) modelEvent18);
        double double20 = booleanModelValue12.asDouble();
        byte[] byteArray21 = booleanModelValue12.asBytes();
        org.jboss.dmr.ModelNode modelNode22 = modelNode9.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3CUQ/8AAAAAAAAHg=", byteArray21);
        org.jboss.dmr.ModelNode modelNode25 = modelNode9.setExpression("(\"BYTES_VALUE\" => expression \"1.0\")", "");
        org.jboss.dmr.ModelType modelType26 = modelNode25.getType();
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(booleanModelValue12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + modelEvent18 + "' != '" + org.jboss.dmr.stream.ModelEvent.LONG + "'", modelEvent18.equals(org.jboss.dmr.stream.ModelEvent.LONG));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0]");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertTrue("'" + modelType26 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType26.equals(org.jboss.dmr.ModelType.PROPERTY));
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigDecimal bigDecimal10 = bigDecimalModelValue7.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue7.asExpression();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long14 = modelNode13.asLong();
        org.jboss.dmr.ValueExpression valueExpression15 = modelNode13.asExpression();
        java.math.BigDecimal bigDecimal16 = valueExpression15.resolveBigDecimal();
        java.lang.String str17 = valueExpression15.getExpressionString();
        java.math.BigDecimal bigDecimal18 = valueExpression15.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue19 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal18);
        int int21 = bigDecimalModelValue19.asInt(0);
        java.math.BigInteger bigInteger22 = bigDecimalModelValue19.asBigInteger();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long25 = modelNode24.asLong();
        org.jboss.dmr.ValueExpression valueExpression26 = modelNode24.asExpression();
        java.math.BigDecimal bigDecimal27 = valueExpression26.resolveBigDecimal();
        java.lang.String str28 = valueExpression26.getExpressionString();
        java.math.BigDecimal bigDecimal29 = valueExpression26.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue30 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal29);
        boolean boolean31 = bigDecimalModelValue30.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression32 = bigDecimalModelValue30.asExpression();
        int int33 = bigDecimalModelValue30.asInt();
        long long34 = bigDecimalModelValue30.asLong();
        long long36 = bigDecimalModelValue30.asLong(32L);
        boolean boolean37 = bigDecimalModelValue19.equals(bigDecimalModelValue30);
        double double39 = bigDecimalModelValue19.asDouble((double) (short) -1);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long42 = modelNode41.asLong();
        org.jboss.dmr.ValueExpression valueExpression43 = modelNode41.asExpression();
        java.math.BigDecimal bigDecimal44 = valueExpression43.resolveBigDecimal();
        java.lang.String str45 = valueExpression43.getExpressionString();
        java.math.BigDecimal bigDecimal46 = valueExpression43.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue47 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal46);
        boolean boolean48 = bigDecimalModelValue47.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression49 = bigDecimalModelValue47.asExpression();
        int int50 = bigDecimalModelValue47.asInt();
        long long51 = bigDecimalModelValue47.asLong();
        long long53 = bigDecimalModelValue47.asLong(32L);
        boolean boolean54 = bigDecimalModelValue19.equals(bigDecimalModelValue47);
        int int55 = bigDecimalModelValue47.asInt();
        java.math.BigDecimal bigDecimal56 = bigDecimalModelValue47.asBigDecimal();
        boolean boolean57 = bigDecimalModelValue7.equals(bigDecimalModelValue47);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0" + "'", str17, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0" + "'", str28, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(valueExpression43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1.0" + "'", str45, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(valueExpression49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.resolve();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList9 = modelNode7.asListOrEmpty();
        java.io.PrintWriter printWriter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode7.writeJSONString(printWriter10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNodeList9);
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwAGI=");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean6 = stringModelValue3.equals((java.lang.Object) (-1.0d));
        boolean boolean7 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        java.lang.String str14 = modelNode11.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long18 = booleanModelValue17.asLong();
        org.jboss.dmr.ValueExpression valueExpression19 = booleanModelValue17.asExpression();
        java.lang.String str20 = valueExpression19.toString();
        org.jboss.dmr.ExpressionValue expressionValue22 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression23 = expressionValue22.asExpression();
        boolean boolean24 = valueExpression19.equals(valueExpression23);
        java.lang.String str25 = valueExpression23.resolveString();
        org.jboss.dmr.ModelNode modelNode26 = modelNode11.set("Expression \"1\"", valueExpression23);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = modelNode30.asList();
        org.jboss.dmr.ModelNode modelNode34 = modelNode30.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType35 = modelNode30.getType();
        org.jboss.dmr.ModelNode modelNode36 = modelNode26.set(modelType35);
        java.lang.String str37 = modelNode36.asString();
        boolean boolean39 = modelNode36.hasDefined(52);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory41 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream42 = null;
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream(inputStream42, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream44);
        org.jboss.dmr.stream.ModelReader modelReader46 = modelStreamFactory41.newModelReader((java.io.InputStream) inputStream45);
        java.io.OutputStream outputStream47 = null;
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream(outputStream47);
        org.jboss.dmr.Base64.OutputStream outputStream49 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream48);
        outputStream48.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelStreamFactory41.newModelWriter((java.io.OutputStream) outputStream48);
        org.jboss.dmr.stream.ModelWriter modelWriter53 = modelWriter52.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue55 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray56 = intModelValue55.asBytes();
        int int58 = intModelValue55.asInt(0);
        java.math.BigInteger bigInteger59 = intModelValue55.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter60 = modelWriter53.writeBigInteger(bigInteger59);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str63 = org.jboss.dmr.Base64.encodeBytes(byteArray61, (int) '#');
        org.jboss.dmr.stream.ModelWriter modelWriter64 = modelWriter53.writeBytes(byteArray61);
        modelNode36.write(modelWriter53);
        org.jboss.dmr.stream.ModelWriter modelWriter67 = modelWriter53.writeString("rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51\nbWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAIw==");
        stringModelValue3.write(modelWriter67);
        java.io.PrintWriter printWriter69 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue3.formatAsJSON(printWriter69, (int) '4', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(\"hi!\" => 0.0)" + "'", str14, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Expression \"true\"" + "'", str20, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertTrue("'" + modelType35 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType35.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PROPERTY" + "'", str37, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory41);
        org.junit.Assert.assertNotNull(modelReader46);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(modelWriter53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(modelWriter60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "H4sIAAAAAAAAAAMAAAAAAAAAAAA=" + "'", str63, "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        org.junit.Assert.assertNotNull(modelWriter64);
        org.junit.Assert.assertNotNull(modelWriter67);
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromJSONString("1.0");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelType modelType3 = modelNode2.getType();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue8 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue8.asObject();
        java.util.Set<java.lang.String> strSet10 = objectModelValue8.getKeys();
        boolean boolean12 = objectModelValue8.has((int) 'a');
        boolean boolean14 = objectModelValue8.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        java.util.Set<java.lang.String> strSet17 = objectModelValue15.getKeys();
        boolean boolean19 = objectModelValue15.has((int) 'a');
        boolean boolean20 = objectModelValue8.equals(objectModelValue15);
        org.jboss.dmr.ModelNode modelNode21 = objectModelValue15.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList22 = objectModelValue15.asList();
        org.jboss.dmr.ModelNode modelNode23 = modelNode6.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList22);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode6, true);
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue(property25);
        org.jboss.dmr.ModelValue modelValue27 = propertyModelValue26.copy();
        boolean boolean28 = modelNode2.equals((java.lang.Object) propertyModelValue26);
        boolean boolean30 = propertyModelValue26.has((int) (short) 1);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.OBJECT + "'", modelType3.equals(org.jboss.dmr.ModelType.OBJECT));
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNodeList22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long10 = booleanModelValue9.asLong();
        org.jboss.dmr.ValueExpression valueExpression11 = booleanModelValue9.asExpression();
        java.lang.String str12 = valueExpression11.toString();
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression15 = expressionValue14.asExpression();
        boolean boolean16 = valueExpression11.equals(valueExpression15);
        java.lang.String str17 = valueExpression15.resolveString();
        org.jboss.dmr.ModelNode modelNode18 = modelNode3.set("Expression \"1\"", valueExpression15);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode22.asList();
        org.jboss.dmr.ModelNode modelNode26 = modelNode22.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType27 = modelNode22.getType();
        org.jboss.dmr.ModelNode modelNode28 = modelNode18.set(modelType27);
        java.lang.String str29 = modelNode28.asString();
        boolean boolean31 = modelNode28.hasDefined(52);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory33 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream34 = null;
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream(inputStream34, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream36);
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory33.newModelReader((java.io.InputStream) inputStream37);
        java.io.OutputStream outputStream39 = null;
        org.jboss.dmr.Base64.OutputStream outputStream40 = new org.jboss.dmr.Base64.OutputStream(outputStream39);
        org.jboss.dmr.Base64.OutputStream outputStream41 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40);
        outputStream40.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter44 = modelStreamFactory33.newModelWriter((java.io.OutputStream) outputStream40);
        org.jboss.dmr.stream.ModelWriter modelWriter45 = modelWriter44.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue47 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray48 = intModelValue47.asBytes();
        int int50 = intModelValue47.asInt(0);
        java.math.BigInteger bigInteger51 = intModelValue47.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelWriter45.writeBigInteger(bigInteger51);
        byte[] byteArray53 = new byte[] {};
        java.lang.String str55 = org.jboss.dmr.Base64.encodeBytes(byteArray53, (int) '#');
        org.jboss.dmr.stream.ModelWriter modelWriter56 = modelWriter45.writeBytes(byteArray53);
        modelNode28.write(modelWriter45);
        org.jboss.dmr.stream.ModelWriter modelWriter59 = modelWriter45.writeString("rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51\nbWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAIw==");
        org.jboss.dmr.stream.ModelWriter modelWriter61 = modelWriter45.writeExpression("Expression \"(\"\" => (\"hi!\" => 0.0))\"");
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Expression \"true\"" + "'", str12, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertTrue("'" + modelType27 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType27.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PROPERTY" + "'", str29, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory33);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertNotNull(modelWriter44);
        org.junit.Assert.assertNotNull(modelWriter45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "H4sIAAAAAAAAAAMAAAAAAAAAAAA=" + "'", str55, "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        org.junit.Assert.assertNotNull(modelWriter56);
        org.junit.Assert.assertNotNull(modelWriter59);
        org.junit.Assert.assertNotNull(modelWriter61);
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromJSONString("[{\n    \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\\nIXg=\" : {\n        \"hi!\" : {\n            \"EXPRESSION_VALUE\" : \"hi!\"\n        }\n    }\n}]");
        org.junit.Assert.assertNotNull(modelNode1);
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        byte[] byteArray3 = booleanModelValue1.asBytes();
        boolean boolean4 = booleanModelValue1.asBoolean();
        byte[] byteArray5 = booleanModelValue1.asBytes();
        org.jboss.dmr.DoubleModelValue doubleModelValue7 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long8 = doubleModelValue7.asLong();
        boolean boolean9 = doubleModelValue7.asBoolean();
        byte[] byteArray10 = doubleModelValue7.asBytes();
        java.math.BigInteger bigInteger11 = doubleModelValue7.asBigInteger();
        boolean boolean12 = booleanModelValue1.equals((java.lang.Object) bigInteger11);
        long long13 = booleanModelValue1.asLong();
        long long14 = booleanModelValue1.asLong();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        boolean boolean11 = intModelValue5.asBoolean(true);
        int int12 = intModelValue5.asInt();
        int int13 = intModelValue5.asInt();
        java.math.BigDecimal bigDecimal14 = intModelValue5.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long18 = modelNode17.asLong();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.Property property45 = new org.jboss.dmr.Property("", modelNode44);
        java.lang.String[] strArray46 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.get(strArray46);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList52 = modelNode51.asList();
        org.jboss.dmr.ListModelValue listModelValue53 = new org.jboss.dmr.ListModelValue(modelNodeList52);
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue53);
        org.jboss.dmr.ModelValue modelValue55 = listModelValue53.resolve();
        int int57 = listModelValue53.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList58 = listModelValue53.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList59 = modelNode47.asPropertyList(propertyList58);
        modelNode27.setNoCopy(modelNode47);
        org.jboss.dmr.ModelNode modelNode61 = modelNode17.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode27);
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode66 = modelNode63.set("hi!", 0.0d);
        org.jboss.dmr.Property property67 = new org.jboss.dmr.Property("", modelNode66);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode69 = modelNode66.get(strArray68);
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int71 = modelNode70.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode72 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode75 = modelNode72.setExpression("hi!", "hi!");
        java.lang.String str76 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode72);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList77 = modelNode72.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode78 = modelNode70.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList77);
        org.jboss.dmr.ModelNode modelNode79 = modelNode69.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList77);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList80 = modelNode17.asList(modelNodeList77);
        org.jboss.dmr.PropertyModelValue propertyModelValue82 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode17, false);
        boolean boolean84 = propertyModelValue82.has("1L");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList85 = propertyModelValue82.asList();
        org.jboss.dmr.ListModelValue listModelValue86 = new org.jboss.dmr.ListModelValue(modelNodeList85);
        boolean boolean87 = intModelValue5.equals((java.lang.Object) listModelValue86);
        long long88 = intModelValue5.asLong();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNodeList52);
        org.junit.Assert.assertNotNull(modelValue55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(propertyList58);
        org.junit.Assert.assertNotNull(propertyList59);
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str76, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList77);
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertNotNull(modelNode79);
        org.junit.Assert.assertNotNull(modelNodeList80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(modelNodeList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 32L + "'", long88 == 32L);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        int int7 = bigIntegerModelValue4.asInt();
        double double8 = bigIntegerModelValue4.asDouble();
        java.math.BigInteger bigInteger9 = bigIntegerModelValue4.asBigInteger();
        java.math.BigDecimal bigDecimal10 = bigIntegerModelValue4.asBigDecimal();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(bigDecimal10);
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ModelValue modelValue11 = expressionValue1.resolve();
        java.lang.String str12 = expressionValue1.asString();
        org.jboss.dmr.ModelValue modelValue13 = expressionValue1.resolve();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory15 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader20 = modelStreamFactory15.newModelReader((java.io.InputStream) inputStream19);
        java.io.OutputStream outputStream21 = null;
        org.jboss.dmr.Base64.OutputStream outputStream22 = new org.jboss.dmr.Base64.OutputStream(outputStream21);
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream22);
        outputStream22.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelStreamFactory15.newModelWriter((java.io.OutputStream) outputStream22);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelWriter26.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter29 = modelWriter27.writeInt((int) (byte) 10);
        expressionValue1.write(modelWriter27);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        org.jboss.dmr.Property property36 = new org.jboss.dmr.Property("", modelNode35);
        java.lang.String[] strArray37 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.get(strArray37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int40 = modelNode39.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.setExpression("hi!", "hi!");
        java.lang.String str45 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode41);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList46 = modelNode41.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode47 = modelNode39.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList46);
        org.jboss.dmr.ModelNode modelNode48 = modelNode38.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList46);
        org.jboss.dmr.LongModelValue longModelValue50 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str51 = longModelValue50.asString();
        double double53 = longModelValue50.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression54 = longModelValue50.asExpression();
        byte[] byteArray55 = longModelValue50.asBytes();
        org.jboss.dmr.ModelNode modelNode56 = modelNode48.add(byteArray55);
        org.jboss.dmr.stream.ModelWriter modelWriter57 = modelWriter27.writeBytes(byteArray55);
        org.jboss.dmr.stream.ModelWriter modelWriter59 = modelWriter57.writeExpression("[]");
        org.jboss.dmr.BooleanModelValue booleanModelValue61 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger62 = booleanModelValue61.asBigInteger();
        byte[] byteArray63 = booleanModelValue61.asBytes();
        boolean boolean65 = org.jboss.dmr.Base64.encodeToFile(byteArray63, "1L");
        boolean boolean67 = org.jboss.dmr.Base64.encodeToFile(byteArray63, "[(\"hi!\" => 0.0)]");
        org.jboss.dmr.stream.ModelWriter modelWriter68 = modelWriter59.writeBytes(byteArray63);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(modelStreamFactory15);
        org.junit.Assert.assertNotNull(modelReader20);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter29);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str45, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList46);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(modelWriter57);
        org.junit.Assert.assertNotNull(modelWriter59);
        org.junit.Assert.assertNotNull(booleanModelValue61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(modelWriter68);
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'd');
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.setEmptyObject();
        int int3 = modelNode2.asInt();
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 'd');
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode4 = modelNode1.add("(\"\\\"Expression \\\\\\\"true\\\\\\\"\\\"\" => [\n    (\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=\" => (\"hi!\" => expression \"hi!\")),\n    73.0\n])", 52L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue4.removeChild("1");
        boolean boolean9 = objectModelValue4.asBoolean();
        boolean boolean10 = objectModelValue0.equals(objectModelValue4);
        long long11 = objectModelValue4.asLong();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue4.getChild("\"\\\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\\\"\"");
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.add("QA==", (long) '4');
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double18 = booleanModelValue17.asDouble();
        org.jboss.dmr.ModelValue modelValue19 = booleanModelValue17.copy();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode(bigInteger20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode(bigInteger20);
        int int23 = modelNode22.asInt();
        boolean boolean24 = modelNode16.equals(modelNode22);
        org.jboss.dmr.Validation.validate(modelNode16, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")");
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        boolean boolean11 = intModelValue5.asBoolean(true);
        org.jboss.dmr.ValueExpression valueExpression12 = intModelValue5.asExpression();
        org.jboss.dmr.IntModelValue intModelValue14 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long16 = intModelValue14.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue18 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long20 = intModelValue18.asLong((long) 'b');
        java.lang.String str21 = intModelValue18.asString();
        boolean boolean22 = intModelValue14.equals(intModelValue18);
        int int24 = intModelValue14.asInt(1);
        boolean boolean25 = intModelValue5.equals(intModelValue14);
        org.jboss.dmr.ValueExpression valueExpression26 = intModelValue14.asExpression();
        java.lang.String str27 = intModelValue14.asString();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32L + "'", long16 == 32L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "32" + "'", str21, "32");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "32" + "'", str27, "32");
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression14 = expressionValue13.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str17 = expressionValue16.toString();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        boolean boolean24 = expressionValue16.equals((java.lang.Object) property23);
        boolean boolean25 = expressionValue13.equals(expressionValue16);
        boolean boolean26 = expressionValue8.equals((java.lang.Object) boolean25);
        org.jboss.dmr.ValueExpression valueExpression27 = expressionValue8.asExpression();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode(valueExpression27);
        org.jboss.dmr.ModelNode modelNode29 = modelNode28.setEmptyList();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.add((long) 2);
        boolean boolean33 = modelNode28.hasDefined((int) (short) -1);
        java.lang.String str34 = modelNode28.asStringOrNull();
        boolean boolean35 = modelNode28.isProtected();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "expression \"hi!\"" + "'", str17, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[2L]" + "'", str34, "[2L]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        int int4 = objectModelValue0.asInt((int) (short) 100);
        boolean boolean5 = objectModelValue0.asBoolean();
        boolean boolean6 = objectModelValue0.asBoolean();
        boolean boolean7 = objectModelValue0.asBoolean();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int4 = modelNode3.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode10 = modelNode3.set(valueExpression8);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("\"1L\"", modelNode3, false);
        org.jboss.dmr.PropertyModelValue propertyModelValue13 = new org.jboss.dmr.PropertyModelValue(property12);
        boolean boolean14 = stringModelValue1.equals((java.lang.Object) property12);
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        java.lang.String str17 = stringModelValue16.toString();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int19 = modelNode18.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.setExpression("hi!", "hi!");
        java.lang.String str24 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode20);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode20.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode26 = modelNode18.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList25);
        java.util.List<org.jboss.dmr.Property> propertyList27 = modelNode26.asPropertyList();
        boolean boolean28 = stringModelValue16.equals((java.lang.Object) modelNode26);
        boolean boolean29 = stringModelValue1.equals(stringModelValue16);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = stringModelValue16.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"" + "'", str17, "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str24, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(propertyList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.protect();
        java.util.List<org.jboss.dmr.Property> propertyList3 = objectModelValue0.asPropertyList();
        java.lang.String str4 = objectModelValue0.asString();
        org.jboss.dmr.ObjectModelValue objectModelValue5 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue5.asObject();
        java.util.Set<java.lang.String> strSet7 = objectModelValue5.getKeys();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue5.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        int int11 = objectModelValue5.asInt(10);
        org.jboss.dmr.ModelValue modelValue12 = objectModelValue5.copy();
        int int14 = objectModelValue5.asInt((int) (short) 10);
        boolean boolean15 = objectModelValue0.equals(objectModelValue5);
        org.jboss.dmr.ModelNode modelNode17 = objectModelValue5.getChild("\"\\\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\\\"\"");
        org.jboss.dmr.ModelNode modelNode19 = modelNode17.add(10.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode21 = modelNode19.insert(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(propertyList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(modelNode9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode19);
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) 112);
        java.lang.String str2 = doubleModelValue1.asString();
        byte[] byteArray3 = doubleModelValue1.asBytes();
        long long5 = doubleModelValue1.asLong(112L);
        int int6 = doubleModelValue1.asInt();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory8 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream9 = null;
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream(inputStream9, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream11);
        org.jboss.dmr.stream.ModelReader modelReader13 = modelStreamFactory8.newModelReader((java.io.InputStream) inputStream12);
        java.io.OutputStream outputStream14 = null;
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream(outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream15);
        outputStream15.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelStreamFactory8.newModelWriter((java.io.OutputStream) outputStream15);
        org.jboss.dmr.stream.ModelWriter modelWriter20 = modelWriter19.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelWriter19.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelWriter22.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelWriter22.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelWriter26.writeUndefined();
        doubleModelValue1.write(modelWriter27);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "112.0" + "'", str2, "112.0");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[64, 92, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 112L + "'", long5 == 112L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 112 + "'", int6 == 112);
        org.junit.Assert.assertNotNull(modelStreamFactory8);
        org.junit.Assert.assertNotNull(modelReader13);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(modelWriter20);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertNotNull(modelWriter24);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertNotNull(modelWriter27);
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue4.removeChild("1");
        boolean boolean9 = objectModelValue4.asBoolean();
        boolean boolean10 = objectModelValue0.equals(objectModelValue4);
        long long11 = objectModelValue4.asLong();
        java.util.Set<java.lang.String> strSet12 = objectModelValue4.getKeys();
        org.jboss.dmr.ModelNode modelNode14 = objectModelValue4.removeChild("rO0ABX5yAB9vcmcuamJvc3MuZG1yLnN0cmVhbS5Nb2RlbEV2ZW50AAAAAAAAAAASAAB4cgAOamF2\nYS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAADSU5U");
        org.jboss.dmr.ModelValue modelValue15 = objectModelValue4.protect();
        java.util.List<org.jboss.dmr.Property> propertyList16 = objectModelValue4.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(modelNode14);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertNotNull(propertyList16);
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        boolean boolean22 = modelReader21.isString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = modelReader21.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't string");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        boolean boolean11 = modelNode8.equals((java.lang.Object) 100L);
        boolean boolean12 = modelNode0.equals(modelNode8);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int22 = modelNode21.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.setExpression("hi!", "hi!");
        java.lang.String str27 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode23.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode29 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode8.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode33 = modelNode8.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode35 = modelNode8.add(false);
        org.jboss.dmr.ExpressionValue expressionValue37 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str38 = expressionValue37.toString();
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.set("hi!", 0.0d);
        org.jboss.dmr.Property property44 = new org.jboss.dmr.Property("", modelNode43);
        boolean boolean45 = expressionValue37.equals((java.lang.Object) property44);
        org.jboss.dmr.ModelValue modelValue46 = expressionValue37.copy();
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long49 = modelNode48.asLong();
        org.jboss.dmr.ValueExpression valueExpression50 = modelNode48.asExpression();
        java.math.BigDecimal bigDecimal51 = valueExpression50.resolveBigDecimal();
        java.lang.String str52 = valueExpression50.getExpressionString();
        java.math.BigDecimal bigDecimal53 = valueExpression50.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue54 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal53);
        int int56 = bigDecimalModelValue54.asInt(0);
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList61 = modelNode60.asList();
        org.jboss.dmr.ListModelValue listModelValue62 = new org.jboss.dmr.ListModelValue(modelNodeList61);
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue62);
        org.jboss.dmr.ModelValue modelValue64 = listModelValue62.resolve();
        int int66 = listModelValue62.asInt((int) (byte) 100);
        boolean boolean67 = bigDecimalModelValue54.equals((java.lang.Object) listModelValue62);
        java.util.List<org.jboss.dmr.Property> propertyList68 = listModelValue62.asPropertyList();
        boolean boolean69 = expressionValue37.equals((java.lang.Object) propertyList68);
        java.util.List<org.jboss.dmr.Property> propertyList70 = modelNode35.asPropertyList(propertyList68);
        org.jboss.dmr.ModelNode modelNode71 = modelNode35.add();
        modelNode71.protect();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str27, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "expression \"hi!\"" + "'", str38, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(modelValue46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(valueExpression50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1.0" + "'", str52, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(modelNodeList61);
        org.junit.Assert.assertNotNull(modelValue64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(propertyList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(propertyList70);
        org.junit.Assert.assertNotNull(modelNode71);
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        org.jboss.dmr.ModelNode modelNode5 = org.jboss.dmr.ModelNode.FALSE;
        boolean boolean6 = booleanModelValue1.equals((java.lang.Object) modelNode5);
        java.math.BigInteger bigInteger7 = booleanModelValue1.asBigInteger();
        boolean boolean9 = booleanModelValue1.asBoolean(true);
        boolean boolean11 = booleanModelValue1.has("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQAC0JJR19ERUNJTUFM");
        int int13 = booleanModelValue1.asInt((int) (byte) 10);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        org.jboss.dmr.ModelType modelType11 = longModelValue1.getType();
        int int12 = longModelValue1.asInt();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = longModelValue1.requireChild("\"big decimal 32\"");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '\"big decimal 32\"' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType11.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        byte[] byteArray5 = doubleModelValue1.asBytes();
        byte[] byteArray6 = doubleModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue7 = new org.jboss.dmr.BytesModelValue(byteArray6);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[64, 36, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.jboss.dmr.Base64.decode("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => (\"[(\\\"hi!\\\" => 0.0)]\" => PROPERTY))");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Bad Base64 input character at 0: 40(decimal)");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        boolean boolean12 = longModelValue1.asBoolean(false);
        boolean boolean14 = longModelValue1.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long18 = modelNode17.asLong();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.Property property45 = new org.jboss.dmr.Property("", modelNode44);
        java.lang.String[] strArray46 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.get(strArray46);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList52 = modelNode51.asList();
        org.jboss.dmr.ListModelValue listModelValue53 = new org.jboss.dmr.ListModelValue(modelNodeList52);
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue53);
        org.jboss.dmr.ModelValue modelValue55 = listModelValue53.resolve();
        int int57 = listModelValue53.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList58 = listModelValue53.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList59 = modelNode47.asPropertyList(propertyList58);
        modelNode27.setNoCopy(modelNode47);
        org.jboss.dmr.ModelNode modelNode61 = modelNode17.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode27);
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode66 = modelNode63.set("hi!", 0.0d);
        org.jboss.dmr.Property property67 = new org.jboss.dmr.Property("", modelNode66);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode69 = modelNode66.get(strArray68);
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int71 = modelNode70.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode72 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode75 = modelNode72.setExpression("hi!", "hi!");
        java.lang.String str76 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode72);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList77 = modelNode72.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode78 = modelNode70.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList77);
        org.jboss.dmr.ModelNode modelNode79 = modelNode69.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList77);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList80 = modelNode17.asList(modelNodeList77);
        org.jboss.dmr.PropertyModelValue propertyModelValue82 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode17, false);
        java.lang.String str83 = modelNode17.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode86 = modelNode17.set("Expression \"true\"", (long) (byte) -1);
        boolean boolean87 = longModelValue1.equals((java.lang.Object) "Expression \"true\"");
        byte[] byteArray88 = longModelValue1.asBytes();
        boolean boolean89 = longModelValue1.asBoolean();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNodeList52);
        org.junit.Assert.assertNotNull(modelValue55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(propertyList58);
        org.junit.Assert.assertNotNull(propertyList59);
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str76, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList77);
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertNotNull(modelNode79);
        org.junit.Assert.assertNotNull(modelNodeList80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))" + "'", str83, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        long long3 = longModelValue1.asLong((long) (byte) -1);
        int int5 = longModelValue1.asInt(0);
        org.jboss.dmr.ValueExpression valueExpression6 = longModelValue1.asExpression();
        long long8 = longModelValue1.asLong((long) 0);
        int int10 = longModelValue1.asInt((int) (byte) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue12 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long14 = booleanModelValue12.asLong((long) 32);
        int int15 = booleanModelValue12.asInt();
        org.jboss.dmr.ModelNode modelNode16 = org.jboss.dmr.ModelNode.FALSE;
        boolean boolean17 = booleanModelValue12.equals((java.lang.Object) modelNode16);
        double double18 = booleanModelValue12.asDouble();
        org.jboss.dmr.ValueExpression valueExpression19 = booleanModelValue12.asExpression();
        boolean boolean20 = longModelValue1.equals((java.lang.Object) booleanModelValue12);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(booleanModelValue12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        long long4 = doubleModelValue1.asLong((long) (short) -1);
        double double6 = doubleModelValue1.asDouble(0.0d);
        java.math.BigInteger bigInteger7 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue8 = new org.jboss.dmr.BigIntegerModelValue(bigInteger7);
        org.jboss.dmr.ValueExpression valueExpression9 = bigIntegerModelValue8.asExpression();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(valueExpression9);
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = propertyModelValue10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = listModelValue12.asList();
        int int14 = listModelValue12.asInt();
        org.jboss.dmr.ModelValue modelValue15 = listModelValue12.protect();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(modelValue15);
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str5 = longModelValue4.asString();
        byte[] byteArray6 = longModelValue4.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue7 = new org.jboss.dmr.BytesModelValue(byteArray6);
        java.lang.String str8 = bytesModelValue7.asString();
        int int9 = bytesModelValue7.asInt();
        long long11 = bytesModelValue7.asLong((long) (short) 1);
        long long12 = bytesModelValue7.asLong();
        java.math.BigDecimal bigDecimal13 = bytesModelValue7.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.set("32", bigDecimal13);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue15 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal13);
        int int16 = bigDecimalModelValue15.asInt();
        org.jboss.dmr.ModelType modelType17 = org.jboss.dmr.ModelType.BYTES;
        boolean boolean18 = bigDecimalModelValue15.equals((java.lang.Object) modelType17);
        java.math.BigInteger bigInteger19 = bigDecimalModelValue15.asBigInteger();
        long long20 = bigDecimalModelValue15.asLong();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType0.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str8, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + modelType17 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType17.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        java.lang.String str4 = valueExpression3.toString();
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression7 = expressionValue6.asExpression();
        boolean boolean8 = valueExpression3.equals(valueExpression7);
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal11 = longModelValue10.asBigDecimal();
        int int12 = longModelValue10.asInt();
        org.jboss.dmr.ValueExpression valueExpression13 = longModelValue10.asExpression();
        boolean boolean14 = valueExpression7.equals(valueExpression13);
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue18 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean19 = stringModelValue16.equals(stringModelValue18);
        byte[] byteArray20 = stringModelValue18.asBytes();
        org.jboss.dmr.ValueExpression valueExpression21 = stringModelValue18.asExpression();
        boolean boolean22 = valueExpression13.equals(valueExpression21);
        java.lang.String str23 = valueExpression13.getExpressionString();
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode26 = modelNode25.clear();
        boolean boolean28 = modelNode25.has((int) '#');
        org.jboss.dmr.ModelNode modelNode31 = modelNode25.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode33 = modelNode25.set("1");
        org.jboss.dmr.BooleanModelValue booleanModelValue35 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long36 = booleanModelValue35.asLong();
        org.jboss.dmr.ValueExpression valueExpression37 = booleanModelValue35.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue38 = new org.jboss.dmr.ExpressionValue(valueExpression37);
        java.lang.String str39 = valueExpression37.getExpressionString();
        boolean boolean40 = modelNode25.equals((java.lang.Object) valueExpression37);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver41 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        boolean boolean42 = valueExpression37.resolveBoolean(valueExpressionResolver41);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = valueExpression13.resolveBoolean(valueExpressionResolver41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Expression \"true\"" + "'", str4, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "52" + "'", str23, "52");
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(booleanModelValue35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(valueExpression37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "true" + "'", str39, "true");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        java.lang.String str8 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList9 = modelNode7.asListOrEmpty();
        org.jboss.dmr.StringModelValue stringModelValue12 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression13 = stringModelValue12.asExpression();
        boolean boolean15 = stringModelValue12.equals((java.lang.Object) (-1.0d));
        java.lang.String str16 = stringModelValue12.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent17 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean18 = stringModelValue12.equals((java.lang.Object) modelEvent17);
        org.jboss.dmr.StringModelValue stringModelValue20 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue22 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue24 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean25 = stringModelValue22.equals(stringModelValue24);
        byte[] byteArray26 = stringModelValue24.asBytes();
        java.lang.Object obj27 = null;
        boolean boolean28 = stringModelValue24.equals(obj27);
        boolean boolean30 = stringModelValue24.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean31 = stringModelValue20.equals(stringModelValue24);
        boolean boolean32 = stringModelValue12.equals(stringModelValue24);
        org.jboss.dmr.ValueExpression valueExpression33 = stringModelValue12.asExpression();
        org.jboss.dmr.ModelNode modelNode34 = modelNode7.set("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQACFBST1BFUlRZ", valueExpression33);
        boolean boolean36 = modelNode34.has((int) 'J');
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4" + "'", str8, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4");
        org.junit.Assert.assertNotNull(modelNodeList9);
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str16, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent17 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent17.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(valueExpression33);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = listModelValue5.getChild((int) (short) 0);
        boolean boolean14 = listModelValue5.asBoolean();
        org.jboss.dmr.ModelNode modelNode16 = listModelValue5.requireChild((int) (short) 0);
        java.lang.String str17 = listModelValue5.asString();
        boolean boolean19 = listModelValue5.has(100);
        int int21 = listModelValue5.asInt((int) (byte) 0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str17, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("org.jboss.dmr.stream.ModelException: \"35\"");
        boolean boolean3 = expressionValue1.has("\"PROPERTY_VALUE\"");
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.set("hi!", 0.0d);
        java.lang.String str8 = modelNode4.toString();
        org.jboss.dmr.ModelNode modelNode9 = modelNode4.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode11 = modelNode4.set(100);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode16 = modelNode14.set((int) '#');
        org.jboss.dmr.ModelNode modelNode17 = modelNode4.setNoCopy("EXPRESSION_VALUE", modelNode16);
        org.jboss.dmr.ModelNode modelNode20 = modelNode4.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.LongModelValue longModelValue22 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str23 = longModelValue22.asString();
        byte[] byteArray24 = longModelValue22.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue25 = new org.jboss.dmr.BytesModelValue(byteArray24);
        java.lang.String str26 = bytesModelValue25.asString();
        int int27 = bytesModelValue25.asInt();
        byte[] byteArray28 = bytesModelValue25.asBytes();
        org.jboss.dmr.LongModelValue longModelValue30 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str31 = longModelValue30.asString();
        byte[] byteArray32 = longModelValue30.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue33 = new org.jboss.dmr.BytesModelValue(byteArray32);
        java.lang.String str34 = bytesModelValue33.asString();
        int int35 = bytesModelValue33.asInt();
        int int36 = bytesModelValue33.asInt();
        org.jboss.dmr.LongModelValue longModelValue38 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str39 = longModelValue38.asString();
        byte[] byteArray40 = longModelValue38.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue41 = new org.jboss.dmr.BytesModelValue(byteArray40);
        double double42 = bytesModelValue41.asDouble();
        boolean boolean43 = bytesModelValue33.equals(bytesModelValue41);
        byte[] byteArray44 = bytesModelValue41.asBytes();
        java.math.BigInteger bigInteger45 = bytesModelValue41.asBigInteger();
        boolean boolean46 = bytesModelValue25.equals(bytesModelValue41);
        int int48 = bytesModelValue41.asInt((int) 'J');
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory50 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream51 = null;
        org.jboss.dmr.Base64.InputStream inputStream53 = new org.jboss.dmr.Base64.InputStream(inputStream51, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream54 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream53);
        org.jboss.dmr.stream.ModelReader modelReader55 = modelStreamFactory50.newModelReader((java.io.InputStream) inputStream54);
        java.io.OutputStream outputStream56 = null;
        org.jboss.dmr.Base64.OutputStream outputStream57 = new org.jboss.dmr.Base64.OutputStream(outputStream56);
        org.jboss.dmr.Base64.OutputStream outputStream58 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream57);
        outputStream57.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter61 = modelStreamFactory50.newModelWriter((java.io.OutputStream) outputStream57);
        org.jboss.dmr.stream.ModelWriter modelWriter62 = modelWriter61.writeListStart();
        bytesModelValue41.write(modelWriter62);
        modelNode4.write(modelWriter62);
        org.jboss.dmr.stream.ModelWriter modelWriter66 = modelWriter62.writeExpression("big decimal 32");
        expressionValue1.write(modelWriter62);
        java.io.PrintWriter printWriter68 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.format(printWriter68, (int) 'Z', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"hi!\" => 0.0)" + "'", str8, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str26, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str34, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4.9E-324d + "'", double42 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory50);
        org.junit.Assert.assertNotNull(modelReader55);
        org.junit.Assert.assertNotNull(modelWriter61);
        org.junit.Assert.assertNotNull(modelWriter62);
        org.junit.Assert.assertNotNull(modelWriter66);
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        long long4 = booleanModelValue1.asLong();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("{\n    \"TYPE_MODEL_VALUE\" => undefined,\n    \"[(\\\"hi!\\\" => 0.0)]\" => undefined,\n    \"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => undefined\n}");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("{}");
        java.lang.String str4 = stringModelValue3.asString();
        byte[] byteArray5 = stringModelValue3.asBytes();
        boolean boolean6 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.ValueExpression valueExpression7 = stringModelValue3.asExpression();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[123, 125]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(valueExpression7);
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        org.jboss.dmr.Validation.validate(modelNode0, "[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelType modelType6 = modelNode0.getType();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.set((long) 52);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType6.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode9);
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        org.jboss.dmr.stream.ModelException modelException1 = new org.jboss.dmr.stream.ModelException("\"35\"");
        java.lang.Throwable[] throwableArray2 = modelException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = modelReader15.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't double");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        double double16 = bigIntegerModelValue4.asDouble(0.0d);
        double double18 = bigIntegerModelValue4.asDouble((double) 100.0f);
        java.math.BigInteger bigInteger19 = bigIntegerModelValue4.asBigInteger();
        java.math.BigInteger bigInteger20 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.BooleanModelValue booleanModelValue22 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray23 = booleanModelValue22.asBytes();
        java.lang.String str24 = booleanModelValue22.asString();
        int int25 = booleanModelValue22.asInt();
        long long26 = booleanModelValue22.asLong();
        boolean boolean28 = booleanModelValue22.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger29 = booleanModelValue22.asBigInteger();
        java.math.BigInteger bigInteger30 = booleanModelValue22.asBigInteger();
        java.math.BigDecimal bigDecimal31 = booleanModelValue22.asBigDecimal();
        boolean boolean32 = bigIntegerModelValue4.equals((java.lang.Object) bigDecimal31);
        java.math.BigDecimal bigDecimal33 = bigIntegerModelValue4.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression34 = bigIntegerModelValue4.asExpression();
        long long35 = bigIntegerModelValue4.asLong();
        java.lang.String str36 = bigIntegerModelValue4.asString();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(booleanModelValue22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "true" + "'", str24, "true");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(valueExpression34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = modelNode4.setEmptyList();
        org.jboss.dmr.ModelNode modelNode6 = modelNode4.asObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode6.get("Expression \"true\"");
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("\"\\\"1L\\\"\"", modelNode8);
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property9);
        org.jboss.dmr.Property property11 = property9.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue12 = new org.jboss.dmr.PropertyModelValue(property11);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        byte[] byteArray0 = null;
        org.jboss.dmr.BytesModelValue bytesModelValue1 = new org.jboss.dmr.BytesModelValue(byteArray0);
        // The following exception was thrown during execution in test generation
        try {
            int int2 = bytesModelValue1.asInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        int int7 = objectModelValue0.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode9 = modelNode8.clone();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        org.jboss.dmr.Property property15 = new org.jboss.dmr.Property("", modelNode14);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.get(strArray16);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList22 = modelNode21.asList();
        org.jboss.dmr.ListModelValue listModelValue23 = new org.jboss.dmr.ListModelValue(modelNodeList22);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue23);
        org.jboss.dmr.ModelValue modelValue25 = listModelValue23.resolve();
        int int27 = listModelValue23.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList28 = listModelValue23.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList29 = modelNode17.asPropertyList(propertyList28);
        org.jboss.dmr.ModelNode modelNode32 = modelNode17.setExpression("\"(\\\"hi!\\\" => 0.0)\"", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelNode modelNode35 = modelNode17.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", (double) 0.0f);
        boolean boolean37 = modelNode17.hasDefined((int) 'b');
        org.jboss.dmr.ModelNode modelNode40 = modelNode17.set("Expression \"hi!\"", false);
        org.jboss.dmr.StringModelValue stringModelValue42 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression43 = stringModelValue42.asExpression();
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode(valueExpression43);
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode49 = modelNode46.set("hi!", 0.0d);
        org.jboss.dmr.Property property50 = new org.jboss.dmr.Property("", modelNode49);
        java.lang.String[] strArray51 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode52 = modelNode49.get(strArray51);
        boolean boolean53 = modelNode44.has(strArray51);
        boolean boolean54 = modelNode17.has(strArray51);
        org.jboss.dmr.ModelNode modelNode55 = modelNode8.get(strArray51);
        org.jboss.dmr.ModelNode modelNode58 = modelNode55.set("expression \"1\"", (int) 'I');
        java.lang.String str60 = modelNode58.asString("\"Expression \\\"true\\\"\"");
        boolean boolean62 = modelNode58.hasDefined(97);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNodeList22);
        org.junit.Assert.assertNotNull(modelValue25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(propertyList28);
        org.junit.Assert.assertNotNull(propertyList29);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(valueExpression43);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(\"expression \\\"1\\\"\" => 73)" + "'", str60, "(\"expression \\\"1\\\"\" => 73)");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        long long3 = longModelValue1.asLong((long) (byte) -1);
        int int5 = longModelValue1.asInt(0);
        byte[] byteArray6 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue7 = new org.jboss.dmr.BytesModelValue(byteArray6);
        java.lang.String str11 = org.jboss.dmr.Base64.encodeBytes(byteArray6, (int) 'p', 0, (int) 'p');
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray6);
        org.jboss.dmr.IntModelValue intModelValue14 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str15 = intModelValue14.asString();
        double double17 = intModelValue14.asDouble((double) 2);
        int int18 = intModelValue14.asInt();
        byte[] byteArray19 = intModelValue14.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        org.jboss.dmr.LongModelValue longModelValue22 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str23 = longModelValue22.asString();
        byte[] byteArray24 = longModelValue22.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue25 = new org.jboss.dmr.BytesModelValue(byteArray24);
        java.lang.String str26 = bytesModelValue25.asString();
        int int27 = bytesModelValue25.asInt();
        int int28 = bytesModelValue25.asInt();
        org.jboss.dmr.LongModelValue longModelValue30 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str31 = longModelValue30.asString();
        byte[] byteArray32 = longModelValue30.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue33 = new org.jboss.dmr.BytesModelValue(byteArray32);
        double double34 = bytesModelValue33.asDouble();
        boolean boolean35 = bytesModelValue25.equals(bytesModelValue33);
        byte[] byteArray36 = bytesModelValue33.asBytes();
        java.math.BigInteger bigInteger37 = bytesModelValue33.asBigInteger();
        java.lang.String str38 = bytesModelValue33.asString();
        long long40 = bytesModelValue33.asLong((long) (short) 0);
        boolean boolean41 = bytesModelValue20.equals(bytesModelValue33);
        int int42 = bytesModelValue33.asInt();
        boolean boolean43 = bytesModelValue12.equals(bytesModelValue33);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "32" + "'", str15, "32");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 32]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str26, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4.9E-324d + "'", double34 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str38, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.lang.String str11 = modelNode7.toString();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(100);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        java.lang.String str28 = modelNode27.asString();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        boolean boolean39 = listModelValue34.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = listModelValue34.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = modelNode27.asList(modelNodeList40);
        org.jboss.dmr.ModelNode modelNode42 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList40);
        boolean boolean43 = bigIntegerModelValue4.equals((java.lang.Object) modelNode14);
        int int44 = bigIntegerModelValue4.asInt();
        int int45 = bigIntegerModelValue4.asInt();
        boolean boolean46 = bigIntegerModelValue4.asBoolean();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode48 = bigIntegerModelValue4.requireChild((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [1]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"hi!\" => 0.0)" + "'", str11, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str28, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(modelNodeList40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        boolean boolean11 = intModelValue5.asBoolean(true);
        int int12 = intModelValue5.asInt();
        int int13 = intModelValue5.asInt();
        java.math.BigDecimal bigDecimal14 = intModelValue5.asBigDecimal();
        long long16 = intModelValue5.asLong((long) '4');
        long long18 = intModelValue5.asLong(11975582L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32L + "'", long16 == 32L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        boolean boolean11 = modelNode8.equals((java.lang.Object) 100L);
        boolean boolean12 = modelNode0.equals(modelNode8);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int22 = modelNode21.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.setExpression("hi!", "hi!");
        java.lang.String str27 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode23.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode29 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode8.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode33 = modelNode8.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        boolean boolean35 = modelNode8.hasDefined("1L");
        java.lang.String str37 = modelNode8.toJSONString(true);
        org.jboss.dmr.ModelNode modelNode39 = modelNode8.add(32);
        java.io.PrintWriter printWriter40 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode39.formatAsJSON(printWriter40, (int) 's', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str27, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[{ \"hi!\" : { \"EXPRESSION_VALUE\" : \"hi!\" } },\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\"]" + "'", str37, "[{ \"hi!\" : { \"EXPRESSION_VALUE\" : \"hi!\" } },\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\"]");
        org.junit.Assert.assertNotNull(modelNode39);
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode6.asList();
        org.jboss.dmr.ListModelValue listModelValue8 = new org.jboss.dmr.ListModelValue(modelNodeList7);
        long long9 = listModelValue8.asLong();
        long long10 = listModelValue8.asLong();
        boolean boolean12 = listModelValue8.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode13 = listModelValue8.asObject();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("\"EXPRESSION_VALUE\"", 0.0d);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode16);
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        int int15 = objectModelValue7.asInt();
        long long16 = objectModelValue7.asLong();
        long long18 = objectModelValue7.asLong((long) (byte) 1);
        boolean boolean20 = objectModelValue7.asBoolean(false);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        byte[] byteArray5 = longModelValue1.asBytes();
        org.jboss.dmr.ModelType modelType6 = longModelValue1.getType();
        java.lang.String str7 = longModelValue1.asString();
        int int9 = longModelValue1.asInt((int) (short) 1);
        long long10 = longModelValue1.asLong();
        org.jboss.dmr.LongModelValue longModelValue12 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal13 = longModelValue12.asBigDecimal();
        byte[] byteArray14 = longModelValue12.asBytes();
        org.jboss.dmr.ValueExpression valueExpression15 = longModelValue12.asExpression();
        org.jboss.dmr.ModelValue modelValue16 = longModelValue12.protect();
        java.math.BigInteger bigInteger17 = longModelValue12.asBigInteger();
        boolean boolean18 = longModelValue1.equals(longModelValue12);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType6.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.lang.String str5 = objectModelValue0.asString();
        boolean boolean7 = objectModelValue0.has("H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        double double12 = longModelValue9.asDouble((double) 32L);
        int int14 = longModelValue9.asInt((int) (short) 10);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory16 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream17 = null;
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream(inputStream17, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream19);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory16.newModelReader((java.io.InputStream) inputStream20);
        java.io.OutputStream outputStream22 = null;
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream(outputStream22);
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream23);
        outputStream23.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelStreamFactory16.newModelWriter((java.io.OutputStream) outputStream23);
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter27.writeListStart();
        longModelValue9.write(modelWriter27);
        objectModelValue0.write(modelWriter27);
        long long32 = objectModelValue0.asLong(2L);
        long long33 = objectModelValue0.asLong();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList34 = objectModelValue0.asList();
        boolean boolean35 = objectModelValue0.asBoolean();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory16);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(modelNodeList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        boolean boolean11 = bigDecimalModelValue7.asBoolean();
        java.lang.String str12 = bigDecimalModelValue7.asString();
        long long14 = bigDecimalModelValue7.asLong((long) 52);
        long long15 = bigDecimalModelValue7.asLong();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0" + "'", str12, "1.0");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.protect();
        org.jboss.dmr.Property property13 = propertyModelValue7.asProperty();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue7.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList15 = modelNode14.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(propertyList15);
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.clear();
        org.jboss.dmr.ObjectModelValue objectModelValue9 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode10 = objectModelValue9.asObject();
        java.util.Set<java.lang.String> strSet11 = objectModelValue9.getKeys();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue9.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean14 = objectModelValue9.asBoolean();
        int int16 = objectModelValue9.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode17 = objectModelValue9.asObject();
        java.util.Set<java.lang.String> strSet18 = modelNode17.keys();
        org.jboss.dmr.ModelNode modelNode19 = modelNode0.add(modelNode17);
        org.jboss.dmr.ModelNode modelNode20 = modelNode0.resolve();
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.setEmptyList();
        modelNode20.protect();
        org.jboss.dmr.Validation.validate(modelNode20, "rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQACkVYUFJFU1NJT04=");
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(modelNode13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        double double5 = bytesModelValue4.asDouble();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.set((int) '#');
        java.lang.Boolean boolean10 = modelNode7.asBooleanOrNull();
        java.lang.String str12 = modelNode7.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        boolean boolean13 = bytesModelValue4.equals((java.lang.Object) modelNode7);
        int int15 = bytesModelValue4.asInt(52);
        double double16 = bytesModelValue4.asDouble();
        int int18 = bytesModelValue4.asInt((int) 'a');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.9E-324d + "'", double5 == 4.9E-324d);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "35" + "'", str12, "35");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4.9E-324d + "'", double16 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 0);
        org.jboss.dmr.DoubleModelValue doubleModelValue3 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long4 = doubleModelValue3.asLong();
        long long6 = doubleModelValue3.asLong((long) 32);
        org.jboss.dmr.ModelValue modelValue7 = doubleModelValue3.protect();
        byte[] byteArray8 = doubleModelValue3.asBytes();
        boolean boolean9 = doubleModelValue1.equals(doubleModelValue3);
        org.jboss.dmr.DoubleModelValue doubleModelValue11 = new org.jboss.dmr.DoubleModelValue(0.0d);
        int int13 = doubleModelValue11.asInt(1);
        boolean boolean14 = doubleModelValue3.equals(doubleModelValue11);
        java.lang.String str15 = doubleModelValue3.asString();
        java.math.BigDecimal bigDecimal16 = doubleModelValue3.asBigDecimal();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10.0" + "'", str15, "10.0");
        org.junit.Assert.assertNotNull(bigDecimal16);
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelValue modelValue11 = propertyModelValue10.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue10.asList();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.lang.String str18 = modelNode14.toString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode14.set(property25);
        org.jboss.dmr.PropertyModelValue propertyModelValue28 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode26, false);
        org.jboss.dmr.Property property29 = propertyModelValue28.asProperty();
        boolean boolean30 = propertyModelValue10.equals(propertyModelValue28);
        org.jboss.dmr.ModelValue modelValue31 = propertyModelValue28.protect();
        java.lang.String str32 = propertyModelValue28.asString();
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        java.lang.String str38 = modelNode34.toString();
        org.jboss.dmr.ModelNode modelNode39 = modelNode34.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode41 = modelNode34.set(100);
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode46 = modelNode44.set((int) '#');
        org.jboss.dmr.ModelNode modelNode47 = modelNode34.setNoCopy("EXPRESSION_VALUE", modelNode46);
        org.jboss.dmr.ModelNode modelNode50 = modelNode34.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.PropertyModelValue propertyModelValue51 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==", modelNode50);
        org.jboss.dmr.ModelValue modelValue52 = propertyModelValue51.resolve();
        org.jboss.dmr.Property property53 = propertyModelValue51.asProperty();
        boolean boolean54 = propertyModelValue28.equals(propertyModelValue51);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(\"hi!\" => 0.0)" + "'", str18, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(modelValue31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))" + "'", str32, "(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))");
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(\"hi!\" => 0.0)" + "'", str38, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelValue52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        java.math.BigDecimal bigDecimal10 = bigDecimalModelValue7.asBigDecimal();
        boolean boolean11 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long14 = modelNode13.asLong();
        org.jboss.dmr.ValueExpression valueExpression15 = modelNode13.asExpression();
        java.math.BigDecimal bigDecimal16 = valueExpression15.resolveBigDecimal();
        java.lang.String str17 = valueExpression15.getExpressionString();
        java.math.BigDecimal bigDecimal18 = valueExpression15.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue19 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal18);
        boolean boolean20 = bigDecimalModelValue19.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression21 = bigDecimalModelValue19.asExpression();
        int int22 = bigDecimalModelValue19.asInt();
        double double24 = bigDecimalModelValue19.asDouble((double) 'l');
        boolean boolean25 = bigDecimalModelValue7.equals(bigDecimalModelValue19);
        boolean boolean27 = bigDecimalModelValue19.asBoolean(false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0" + "'", str17, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str3 = modelNode1.asString("true");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(bigDecimal9);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.setNoCopy("35", modelNode12);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asListOrEmpty();
        modelNode13.protect();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = modelNode13.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((-1.0d));
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.clear();
        org.jboss.dmr.Property property4 = new org.jboss.dmr.Property("35", modelNode3);
        org.jboss.dmr.Property property5 = property4.clone();
        java.lang.String str6 = property5.getName();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "35" + "'", str6, "35");
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.get(strArray11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = modelNode12.asPropertyList(propertyList23);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList43 = listModelValue38.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList44 = modelNode32.asPropertyList(propertyList43);
        modelNode12.setNoCopy(modelNode32);
        org.jboss.dmr.ModelNode modelNode46 = modelNode2.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode12);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("", modelNode51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode54 = modelNode51.get(strArray53);
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int56 = modelNode55.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.setExpression("hi!", "hi!");
        java.lang.String str61 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode57);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = modelNode57.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode63 = modelNode55.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        org.jboss.dmr.ModelNode modelNode64 = modelNode54.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode2.asList(modelNodeList62);
        org.jboss.dmr.PropertyModelValue propertyModelValue67 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode2, false);
        java.lang.String str68 = modelNode2.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode71 = modelNode2.set("Expression \"true\"", (long) (byte) -1);
        org.jboss.dmr.ModelNode modelNode73 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int74 = modelNode73.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode76 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long77 = modelNode76.asLong();
        org.jboss.dmr.ValueExpression valueExpression78 = modelNode76.asExpression();
        java.math.BigDecimal bigDecimal79 = valueExpression78.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode80 = modelNode73.set(valueExpression78);
        org.jboss.dmr.Property property82 = new org.jboss.dmr.Property("\"1L\"", modelNode73, false);
        java.lang.String str83 = property82.getName();
        org.jboss.dmr.ModelNode modelNode84 = modelNode2.set(property82);
        org.jboss.dmr.ModelNode modelNode87 = modelNode2.set("", false);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str61, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))" + "'", str68, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(valueExpression78);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\"1L\"" + "'", str83, "\"1L\"");
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertNotNull(modelNode87);
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream5 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream6 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream5);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger12 = booleanModelValue11.asBigInteger();
        byte[] byteArray13 = booleanModelValue11.asBytes();
        org.jboss.dmr.ModelNode modelNode14 = modelNode8.set("expression \"hi!\"", byteArray13);
        outputStream5.write(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = org.jboss.dmr.Base64.encodeBytes(byteArray13, (-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertNotNull(modelNode14);
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream19.resumeEncoding();
        outputStream19.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream19);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        int int33 = inputStream25.read(byteArray29, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (-1));
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (int) 'p');
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream25);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = inputStream25.skip((long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelReader38);
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        byte[] byteArray21 = org.jboss.dmr.Base64.decode("true");
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int26 = inputStream18.read(byteArray21, (int) 'l', 0);
        org.jboss.dmr.stream.ModelReader modelReader27 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory29 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream30 = null;
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream(inputStream30, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream32);
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory29.newModelReader((java.io.InputStream) inputStream33);
        java.io.OutputStream outputStream35 = null;
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream(outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream36);
        outputStream36.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelStreamFactory29.newModelWriter((java.io.OutputStream) outputStream36);
        outputStream36.write(2);
        org.jboss.dmr.stream.ModelWriter modelWriter43 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream36);
        // The following exception was thrown during execution in test generation
        try {
            outputStream36.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(modelReader27);
        org.junit.Assert.assertNotNull(modelStreamFactory29);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter43);
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        boolean boolean22 = modelReader21.isString();
        boolean boolean23 = modelReader21.isLong();
        boolean boolean24 = modelReader21.isListEnd();
        boolean boolean25 = modelReader21.isType();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger26 = modelReader21.getBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't big integer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver0 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long3 = booleanModelValue2.asLong();
        org.jboss.dmr.ValueExpression valueExpression4 = booleanModelValue2.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue5 = new org.jboss.dmr.ExpressionValue(valueExpression4);
        java.lang.String str6 = valueExpression4.getExpressionString();
        java.lang.String str7 = valueExpressionResolver0.resolve(valueExpression4);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) 'e');
        org.jboss.dmr.ValueExpression valueExpression10 = intModelValue9.asExpression();
        java.lang.String str11 = valueExpressionResolver0.resolve(valueExpression10);
        java.lang.String str13 = valueExpressionResolver0.resolvePart("bytes { 0x28, 0x22, 0x22, 0x20, 0x3d, 0x3e, 0x20, 0x28, 0x22, 0x68, 0x69, 0x21, 0x22, 0x20, 0x3d, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29 }");
        org.junit.Assert.assertNotNull(valueExpressionResolver0);
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "true" + "'", str6, "true");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "101" + "'", str11, "101");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.Set<java.lang.String> strSet16 = propertyModelValue15.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList17 = propertyModelValue15.asPropertyList();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.lang.String str23 = modelNode19.toString();
        org.jboss.dmr.ModelNode modelNode24 = modelNode19.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode19.set(property30);
        org.jboss.dmr.PropertyModelValue propertyModelValue33 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode31, false);
        java.util.Set<java.lang.String> strSet34 = propertyModelValue33.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList35 = propertyModelValue33.asPropertyList();
        java.util.Set<java.lang.String> strSet36 = propertyModelValue33.getKeys();
        boolean boolean37 = propertyModelValue15.equals(propertyModelValue33);
        org.jboss.dmr.Property property38 = propertyModelValue15.asProperty();
        org.jboss.dmr.ModelNode modelNode39 = propertyModelValue15.asObject();
        boolean boolean41 = modelNode39.has("");
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode((int) 'b');
        java.math.BigDecimal bigDecimal44 = modelNode43.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode45 = modelNode39.set(bigDecimal44);
        boolean boolean47 = modelNode45.hasDefined("[(\"[(\\\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\\\" => big integer 32)]\" => expression \"52\"),(\"AQ==\" => false),(\"\" => (\"hi!\" => 0.0)),big integer 1]");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(\"hi!\" => 0.0)" + "'", str23, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(propertyList35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        long long3 = modelNode1.asLong((long) '4');
        long long5 = modelNode1.asLong(97L);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode7 = modelNode1.add(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        java.io.InputStream inputStream22 = null;
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24);
        org.jboss.dmr.stream.ModelReader modelReader26 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream24);
        java.io.OutputStream outputStream27 = null;
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream(outputStream27);
        outputStream28.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream28);
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue36 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger37 = booleanModelValue36.asBigInteger();
        byte[] byteArray38 = booleanModelValue36.asBytes();
        org.jboss.dmr.ModelNode modelNode39 = modelNode33.set("expression \"hi!\"", byteArray38);
        outputStream30.write(byteArray38);
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream30);
        java.io.InputStream inputStream42 = null;
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream(inputStream42, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue46 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str47 = longModelValue46.asString();
        byte[] byteArray48 = longModelValue46.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue49 = new org.jboss.dmr.BytesModelValue(byteArray48);
        int int52 = inputStream44.read(byteArray48, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream54 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream44, (-1));
        java.nio.charset.Charset charset55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelReader modelReader56 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream54, charset55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelReader26);
        org.junit.Assert.assertNotNull(booleanModelValue36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelWriter41);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isObjectEnd();
        boolean boolean19 = modelReader15.isType();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal20 = modelReader15.getBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't big decimal");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream19.resumeEncoding();
        outputStream19.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream19);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        int int33 = inputStream25.read(byteArray29, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (-1));
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (int) 'p');
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream25);
        boolean boolean39 = modelReader38.isInt();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        org.jboss.dmr.ValueExpression valueExpression18 = stringModelValue11.asExpression();
        org.jboss.dmr.StringModelValue stringModelValue20 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue22 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue24 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean25 = stringModelValue22.equals(stringModelValue24);
        byte[] byteArray26 = stringModelValue24.asBytes();
        java.lang.Object obj27 = null;
        boolean boolean28 = stringModelValue24.equals(obj27);
        boolean boolean30 = stringModelValue24.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean31 = stringModelValue20.equals(stringModelValue24);
        boolean boolean32 = stringModelValue11.equals(stringModelValue24);
        byte[] byteArray33 = stringModelValue24.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = stringModelValue24.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.set((int) (short) 100);
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.set("hi!", 0.0d);
        java.lang.String str8 = modelNode4.toString();
        org.jboss.dmr.ModelNode modelNode9 = modelNode4.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode11 = modelNode4.set(100);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode16 = modelNode14.set((int) '#');
        org.jboss.dmr.ModelNode modelNode17 = modelNode4.setNoCopy("EXPRESSION_VALUE", modelNode16);
        org.jboss.dmr.ModelNode modelNode18 = modelNode17.setEmptyList();
        modelNode1.setNoCopy(modelNode18);
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double21 = booleanModelValue20.asDouble();
        org.jboss.dmr.ModelValue modelValue22 = booleanModelValue20.copy();
        java.math.BigInteger bigInteger23 = booleanModelValue20.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = new org.jboss.dmr.BigIntegerModelValue(bigInteger23);
        long long26 = bigIntegerModelValue24.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue27 = null;
        boolean boolean28 = bigIntegerModelValue24.equals(bigIntegerModelValue27);
        org.jboss.dmr.ValueExpression valueExpression29 = bigIntegerModelValue24.asExpression();
        org.jboss.dmr.BooleanModelValue booleanModelValue31 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray32 = booleanModelValue31.asBytes();
        boolean boolean33 = booleanModelValue31.asBoolean();
        java.lang.String str34 = booleanModelValue31.asString();
        java.math.BigDecimal bigDecimal35 = booleanModelValue31.asBigDecimal();
        boolean boolean36 = bigIntegerModelValue24.equals((java.lang.Object) bigDecimal35);
        org.jboss.dmr.ModelNode modelNode37 = modelNode18.add(bigDecimal35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.String> strSet38 = modelNode37.keys();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"hi!\" => 0.0)" + "'", str8, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertNotNull(booleanModelValue31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "true" + "'", str34, "true");
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(modelNode37);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 0);
        byte[] byteArray2 = doubleModelValue1.asBytes();
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) doubleModelValue1);
        org.jboss.dmr.DoubleModelValue doubleModelValue4 = null;
        boolean boolean5 = doubleModelValue1.equals(doubleModelValue4);
        org.jboss.dmr.ObjectModelValue objectModelValue6 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue6.asObject();
        java.util.Set<java.lang.String> strSet8 = objectModelValue6.getKeys();
        org.jboss.dmr.ModelNode modelNode10 = objectModelValue6.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean11 = objectModelValue6.asBoolean();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue6.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue14 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode15 = objectModelValue14.asObject();
        java.util.Set<java.lang.String> strSet16 = objectModelValue14.getKeys();
        org.jboss.dmr.ModelNode modelNode18 = objectModelValue14.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean19 = objectModelValue14.asBoolean();
        int int21 = objectModelValue14.asInt((int) 'b');
        int int23 = objectModelValue14.asInt((int) '#');
        boolean boolean24 = objectModelValue6.equals(objectModelValue14);
        int int25 = objectModelValue14.asInt();
        java.util.Set<java.lang.String> strSet26 = objectModelValue14.getKeys();
        org.jboss.dmr.ModelValue modelValue27 = objectModelValue14.resolve();
        boolean boolean28 = doubleModelValue1.equals((java.lang.Object) objectModelValue14);
        boolean boolean30 = doubleModelValue1.has("true");
        org.jboss.dmr.DoubleModelValue doubleModelValue32 = new org.jboss.dmr.DoubleModelValue((double) (short) 0);
        byte[] byteArray33 = doubleModelValue32.asBytes();
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) doubleModelValue32);
        org.jboss.dmr.DoubleModelValue doubleModelValue35 = null;
        boolean boolean36 = doubleModelValue32.equals(doubleModelValue35);
        org.jboss.dmr.ObjectModelValue objectModelValue37 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode38 = objectModelValue37.asObject();
        java.util.Set<java.lang.String> strSet39 = objectModelValue37.getKeys();
        org.jboss.dmr.ModelNode modelNode41 = objectModelValue37.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean42 = objectModelValue37.asBoolean();
        org.jboss.dmr.ModelNode modelNode44 = objectModelValue37.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue45 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode46 = objectModelValue45.asObject();
        java.util.Set<java.lang.String> strSet47 = objectModelValue45.getKeys();
        org.jboss.dmr.ModelNode modelNode49 = objectModelValue45.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean50 = objectModelValue45.asBoolean();
        int int52 = objectModelValue45.asInt((int) 'b');
        int int54 = objectModelValue45.asInt((int) '#');
        boolean boolean55 = objectModelValue37.equals(objectModelValue45);
        int int56 = objectModelValue45.asInt();
        java.util.Set<java.lang.String> strSet57 = objectModelValue45.getKeys();
        org.jboss.dmr.ModelValue modelValue58 = objectModelValue45.resolve();
        boolean boolean59 = doubleModelValue32.equals((java.lang.Object) objectModelValue45);
        long long61 = doubleModelValue32.asLong(0L);
        long long63 = doubleModelValue32.asLong((long) 1);
        boolean boolean64 = doubleModelValue1.equals(doubleModelValue32);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(modelNode18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(modelNode41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNull(modelNode49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(modelValue58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream19.resumeEncoding();
        outputStream19.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream19);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        int int33 = inputStream25.read(byteArray29, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (-1));
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (int) 'p');
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream25);
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25);
        org.jboss.dmr.Base64.InputStream inputStream40 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25);
        org.jboss.dmr.IntModelValue intModelValue42 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long44 = intModelValue42.asLong((long) 'b');
        java.lang.String str45 = intModelValue42.asString();
        java.math.BigInteger bigInteger46 = intModelValue42.asBigInteger();
        boolean boolean48 = intModelValue42.asBoolean(false);
        byte[] byteArray49 = intModelValue42.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = inputStream25.read(byteArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "32" + "'", str45, "32");
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 0, 32]");
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.lang.String str11 = modelNode7.toString();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set(100);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        java.lang.String str28 = modelNode27.asString();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        boolean boolean39 = listModelValue34.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList40 = listModelValue34.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = modelNode27.asList(modelNodeList40);
        org.jboss.dmr.ModelNode modelNode42 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList40);
        boolean boolean43 = bigIntegerModelValue4.equals((java.lang.Object) modelNode14);
        int int44 = bigIntegerModelValue4.asInt();
        int int45 = bigIntegerModelValue4.asInt();
        boolean boolean46 = bigIntegerModelValue4.asBoolean();
        org.jboss.dmr.ModelValue modelValue47 = bigIntegerModelValue4.protect();
        int int49 = bigIntegerModelValue4.asInt(3);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"hi!\" => 0.0)" + "'", str11, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str28, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(modelNodeList40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(modelValue47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        org.jboss.dmr.ExpressionValue expressionValue2 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean5 = expressionValue2.equals(expressionValue4);
        org.jboss.dmr.ExpressionValue expressionValue7 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue9 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean10 = expressionValue7.equals(expressionValue9);
        boolean boolean11 = expressionValue2.equals(expressionValue9);
        org.jboss.dmr.ValueExpression valueExpression12 = expressionValue9.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression15 = expressionValue14.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue17 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str18 = expressionValue17.toString();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.set("hi!", 0.0d);
        org.jboss.dmr.Property property24 = new org.jboss.dmr.Property("", modelNode23);
        boolean boolean25 = expressionValue17.equals((java.lang.Object) property24);
        boolean boolean26 = expressionValue14.equals(expressionValue17);
        boolean boolean27 = expressionValue9.equals((java.lang.Object) boolean26);
        org.jboss.dmr.ValueExpression valueExpression28 = expressionValue9.asExpression();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode(valueExpression28);
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4", "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        java.lang.String str34 = modelNode32.asString("\"35\"");
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.setExpression("hi!", "hi!");
        java.lang.String str39 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode35);
        boolean boolean41 = modelNode35.hasDefined((-1));
        org.jboss.dmr.BooleanModelValue booleanModelValue42 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double43 = booleanModelValue42.asDouble();
        org.jboss.dmr.ModelValue modelValue44 = booleanModelValue42.copy();
        java.math.BigInteger bigInteger45 = booleanModelValue42.asBigInteger();
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode(bigInteger45);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode(bigInteger45);
        org.jboss.dmr.ModelNode modelNode48 = modelNode35.set(bigInteger45);
        boolean boolean49 = modelNode32.equals(modelNode35);
        org.jboss.dmr.PropertyModelValue propertyModelValue50 = new org.jboss.dmr.PropertyModelValue("\"bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}\"", modelNode35);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode55 = modelNode52.set("hi!", 0.0d);
        java.lang.String str56 = modelNode52.toString();
        org.jboss.dmr.ModelNode modelNode57 = modelNode52.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode59 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode62 = modelNode59.set("hi!", 0.0d);
        org.jboss.dmr.Property property63 = new org.jboss.dmr.Property("", modelNode62);
        org.jboss.dmr.ModelNode modelNode64 = modelNode52.set(property63);
        org.jboss.dmr.PropertyModelValue propertyModelValue66 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode64, false);
        java.util.Set<java.lang.String> strSet67 = propertyModelValue66.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList68 = propertyModelValue66.asPropertyList();
        java.util.Set<java.lang.String> strSet69 = propertyModelValue66.getKeys();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList70 = propertyModelValue66.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.ModelNode> modelNodeList71 = modelNode35.asList(modelNodeList70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "expression \"hi!\"" + "'", str18, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4\" => \"\\\"(\\\\\\\"\\\\\\\" => (\\\\\\\"hi!\\\\\\\" => 0.0))\\\"\")" + "'", str34, "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4\" => \"\\\"(\\\\\\\"\\\\\\\" => (\\\\\\\"hi!\\\\\\\" => 0.0))\\\"\")");
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str39, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(booleanModelValue42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue44);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(\"hi!\" => 0.0)" + "'", str56, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(propertyList68);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(modelNodeList70);
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue15 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray16 = intModelValue15.asBytes();
        int int18 = intModelValue15.asInt(0);
        java.math.BigInteger bigInteger19 = intModelValue15.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter20 = modelWriter13.writeBigInteger(bigInteger19);
        org.jboss.dmr.stream.ModelWriter modelWriter21 = modelWriter13.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter21.writeLong((long) (short) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelWriter21.writePropertyStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter25 = modelWriter21.writePropertyEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(modelWriter20);
        org.junit.Assert.assertNotNull(modelWriter21);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter24);
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(true);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream16);
        org.jboss.dmr.stream.ModelReader modelReader18 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelReader modelReader20 = modelStreamFactory1.newModelReader(inputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader18);
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) 'a');
        int int9 = longModelValue1.asInt((int) '4');
        org.jboss.dmr.ObjectModelValue objectModelValue10 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode11 = objectModelValue10.asObject();
        java.util.Set<java.lang.String> strSet12 = objectModelValue10.getKeys();
        org.jboss.dmr.ModelNode modelNode14 = objectModelValue10.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean15 = objectModelValue10.asBoolean();
        org.jboss.dmr.ModelNode modelNode17 = objectModelValue10.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue18 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue18.asObject();
        java.util.Set<java.lang.String> strSet20 = objectModelValue18.getKeys();
        org.jboss.dmr.ModelNode modelNode22 = objectModelValue18.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean23 = objectModelValue18.asBoolean();
        int int25 = objectModelValue18.asInt((int) 'b');
        int int27 = objectModelValue18.asInt((int) '#');
        boolean boolean28 = objectModelValue10.equals(objectModelValue18);
        int int29 = objectModelValue18.asInt();
        boolean boolean30 = longModelValue1.equals((java.lang.Object) objectModelValue18);
        int int32 = objectModelValue18.asInt((int) 'I');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long18 = booleanModelValue17.asLong();
        org.jboss.dmr.ValueExpression valueExpression19 = booleanModelValue17.asExpression();
        java.lang.String str20 = valueExpression19.toString();
        org.jboss.dmr.ExpressionValue expressionValue22 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression23 = expressionValue22.asExpression();
        boolean boolean24 = valueExpression19.equals(valueExpression23);
        org.jboss.dmr.LongModelValue longModelValue26 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal27 = longModelValue26.asBigDecimal();
        int int28 = longModelValue26.asInt();
        org.jboss.dmr.ValueExpression valueExpression29 = longModelValue26.asExpression();
        boolean boolean30 = valueExpression23.equals(valueExpression29);
        int int31 = valueExpression29.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue33 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression34 = expressionValue33.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver35 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str36 = valueExpression34.resolveString(valueExpressionResolver35);
        java.math.BigInteger bigInteger37 = valueExpression29.resolveBigInteger(valueExpressionResolver35);
        org.jboss.dmr.ModelNode modelNode38 = modelNode13.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression29);
        org.jboss.dmr.ModelNode modelNode41 = modelNode38.add("AQ==", false);
        org.jboss.dmr.ModelType modelType42 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode(modelType42);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode48 = modelNode45.set("hi!", 0.0d);
        org.jboss.dmr.Property property49 = new org.jboss.dmr.Property("", modelNode48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode43.set(property49);
        org.jboss.dmr.PropertyModelValue propertyModelValue51 = new org.jboss.dmr.PropertyModelValue(property49);
        org.jboss.dmr.PropertyModelValue propertyModelValue52 = new org.jboss.dmr.PropertyModelValue(property49);
        org.jboss.dmr.ModelNode modelNode53 = modelNode38.add(property49);
        org.jboss.dmr.LongModelValue longModelValue55 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str56 = longModelValue55.asString();
        byte[] byteArray57 = longModelValue55.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue58 = new org.jboss.dmr.BytesModelValue(byteArray57);
        java.math.BigDecimal bigDecimal59 = bytesModelValue58.asBigDecimal();
        java.math.BigInteger bigInteger60 = bytesModelValue58.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue61 = new org.jboss.dmr.BigIntegerModelValue(bigInteger60);
        org.jboss.dmr.ModelNode modelNode62 = modelNode53.add(bigInteger60);
        org.jboss.dmr.ModelNode modelNode64 = modelNode53.add((double) 'd');
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Expression \"true\"" + "'", str20, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(valueExpression34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertTrue("'" + modelType42 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType42.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigInteger60);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNotNull(modelNode64);
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        int int15 = intModelValue9.asInt(112);
        double double17 = intModelValue9.asDouble((double) '#');
        double double18 = intModelValue9.asDouble();
        org.jboss.dmr.ValueExpression valueExpression19 = intModelValue9.asExpression();
        boolean boolean21 = intModelValue9.asBoolean(true);
        org.jboss.dmr.IntModelValue intModelValue23 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long25 = intModelValue23.asLong((long) 'b');
        java.lang.String str26 = intModelValue23.asString();
        java.math.BigDecimal bigDecimal27 = intModelValue23.asBigDecimal();
        long long28 = intModelValue23.asLong();
        boolean boolean29 = intModelValue23.asBoolean();
        java.lang.String str30 = intModelValue23.asString();
        org.jboss.dmr.IntModelValue intModelValue32 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long34 = intModelValue32.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue36 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long38 = intModelValue36.asLong((long) 'b');
        java.lang.String str39 = intModelValue36.asString();
        boolean boolean40 = intModelValue32.equals(intModelValue36);
        int int41 = intModelValue36.asInt();
        long long42 = intModelValue36.asLong();
        boolean boolean43 = intModelValue23.equals(intModelValue36);
        org.jboss.dmr.IntModelValue intModelValue45 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long47 = intModelValue45.asLong((long) '#');
        double double48 = intModelValue45.asDouble();
        boolean boolean49 = intModelValue45.asBoolean();
        boolean boolean50 = intModelValue36.equals(intModelValue45);
        int int52 = intModelValue36.asInt(2);
        boolean boolean53 = intModelValue36.asBoolean();
        boolean boolean54 = intModelValue9.equals(intModelValue36);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "32" + "'", str30, "32");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32L + "'", long34 == 32L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 32L + "'", long38 == 32L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "32" + "'", str39, "32");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 32 + "'", int41 == 32);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 32L + "'", long42 == 32L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 32L + "'", long47 == 32L);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 32.0d + "'", double48 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 32 + "'", int52 == 32);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.math.BigInteger bigInteger16 = bytesModelValue12.asBigInteger();
        org.jboss.dmr.LongModelValue longModelValue18 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str19 = longModelValue18.asString();
        byte[] byteArray20 = longModelValue18.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue21 = new org.jboss.dmr.BytesModelValue(byteArray20);
        double double22 = bytesModelValue21.asDouble();
        boolean boolean23 = bytesModelValue12.equals(bytesModelValue21);
        org.jboss.dmr.ModelValue modelValue24 = bytesModelValue12.protect();
        org.jboss.dmr.LongModelValue longModelValue26 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str27 = longModelValue26.asString();
        byte[] byteArray28 = longModelValue26.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue29 = new org.jboss.dmr.BytesModelValue(byteArray28);
        java.lang.String str30 = bytesModelValue29.asString();
        int int31 = bytesModelValue29.asInt();
        int int32 = bytesModelValue29.asInt();
        org.jboss.dmr.LongModelValue longModelValue34 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str35 = longModelValue34.asString();
        byte[] byteArray36 = longModelValue34.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue37 = new org.jboss.dmr.BytesModelValue(byteArray36);
        double double38 = bytesModelValue37.asDouble();
        boolean boolean39 = bytesModelValue29.equals(bytesModelValue37);
        byte[] byteArray40 = bytesModelValue37.asBytes();
        java.math.BigInteger bigInteger41 = bytesModelValue37.asBigInteger();
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str44 = longModelValue43.asString();
        byte[] byteArray45 = longModelValue43.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue46 = new org.jboss.dmr.BytesModelValue(byteArray45);
        double double47 = bytesModelValue46.asDouble();
        boolean boolean48 = bytesModelValue37.equals(bytesModelValue46);
        boolean boolean49 = bytesModelValue12.equals(bytesModelValue46);
        int int51 = bytesModelValue46.asInt(35);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.9E-324d + "'", double22 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str30, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4.9E-324d + "'", double38 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4.9E-324d + "'", double47 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = modelNode16.set(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue24 = new org.jboss.dmr.PropertyModelValue(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue(property22);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = propertyModelValue25.asList();
        org.jboss.dmr.ModelNode modelNode27 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList26);
        org.jboss.dmr.IntModelValue intModelValue30 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str31 = intModelValue30.asString();
        double double33 = intModelValue30.asDouble((double) 2);
        java.math.BigDecimal bigDecimal34 = intModelValue30.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode35 = modelNode27.add("(\"hi!\" => 0.0)", bigDecimal34);
        int int37 = modelNode27.asInt(0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = modelNode27.asList();
        org.jboss.dmr.ModelNode modelNode40 = modelNode27.add(false);
        java.lang.String str41 = modelNode27.asStringOrNull();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType15.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 32.0d + "'", double33 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[(\"\" => (\"hi!\" => 0.0)),(\"(\\\"hi!\\\" => 0.0)\" => big decimal 32),false]" + "'", str41, "[(\"\" => (\"hi!\" => 0.0)),(\"(\\\"hi!\\\" => 0.0)\" => big decimal 32),false]");
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        int int3 = longModelValue1.asInt();
        org.jboss.dmr.ValueExpression valueExpression4 = longModelValue1.asExpression();
        double double5 = longModelValue1.asDouble();
        long long7 = longModelValue1.asLong((long) (short) -1);
        boolean boolean9 = longModelValue1.asBoolean(false);
        double double11 = longModelValue1.asDouble((double) 97L);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 52.0d + "'", double5 == 52.0d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.setExpression("hi!", "hi!");
        java.lang.String str7 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode3);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList8 = modelNode3.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode10 = modelNode3.set((double) 0);
        org.jboss.dmr.ModelNode modelNode11 = modelNode3.clear();
        org.jboss.dmr.IntModelValue intModelValue14 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long16 = intModelValue14.asLong((long) 'b');
        java.lang.String str17 = intModelValue14.asString();
        java.math.BigInteger bigInteger18 = intModelValue14.asBigInteger();
        org.jboss.dmr.ModelNode modelNode19 = modelNode11.add("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", bigInteger18);
        org.jboss.dmr.ModelNode modelNode20 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", bigInteger18);
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.asObject();
        org.jboss.dmr.ModelNode modelNode22 = modelNode21.asObject();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("", "(\"hi!\" => expression \"(\\\"hi!\\\" => 0.0)\")");
        modelNode22.protect();
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal29 = longModelValue28.asBigDecimal();
        int int30 = longModelValue28.asInt();
        org.jboss.dmr.ValueExpression valueExpression31 = longModelValue28.asExpression();
        int int33 = longModelValue28.asInt((int) 'p');
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.set("hi!", 0.0d);
        org.jboss.dmr.Property property40 = new org.jboss.dmr.Property("", modelNode39);
        boolean boolean42 = modelNode39.equals((java.lang.Object) 100L);
        org.jboss.dmr.Property property44 = new org.jboss.dmr.Property("[(\"hi!\" => 0.0)]", modelNode39, false);
        org.jboss.dmr.Property property45 = property44.clone();
        boolean boolean46 = longModelValue28.equals((java.lang.Object) property44);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode47 = modelNode22.set(property44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str7, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32L + "'", long16 == 32L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32" + "'", str17, "32");
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        double double4 = intModelValue1.asDouble();
        boolean boolean5 = intModelValue1.asBoolean();
        long long7 = intModelValue1.asLong(52L);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str10 = intModelValue9.asString();
        double double12 = intModelValue9.asDouble((double) 2);
        java.math.BigInteger bigInteger13 = intModelValue9.asBigInteger();
        double double14 = intModelValue9.asDouble();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int16 = modelNode15.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.setExpression("hi!", "hi!");
        java.lang.String str21 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode17);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList22 = modelNode17.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode23 = modelNode15.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList22);
        boolean boolean24 = intModelValue9.equals((java.lang.Object) modelNode15);
        java.lang.String str25 = intModelValue9.asString();
        double double26 = intModelValue9.asDouble();
        boolean boolean27 = intModelValue1.equals(intModelValue9);
        org.jboss.dmr.IntModelValue intModelValue29 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str30 = intModelValue29.asString();
        double double32 = intModelValue29.asDouble((double) 2);
        java.math.BigDecimal bigDecimal33 = intModelValue29.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue34 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal33);
        long long35 = bigDecimalModelValue34.asLong();
        long long36 = bigDecimalModelValue34.asLong();
        int int38 = bigDecimalModelValue34.asInt((-1));
        boolean boolean40 = bigDecimalModelValue34.asBoolean(false);
        double double42 = bigDecimalModelValue34.asDouble((double) 100L);
        java.math.BigInteger bigInteger43 = bigDecimalModelValue34.asBigInteger();
        java.math.BigInteger bigInteger44 = bigDecimalModelValue34.asBigInteger();
        boolean boolean45 = intModelValue9.equals((java.lang.Object) bigDecimalModelValue34);
        boolean boolean47 = bigDecimalModelValue34.asBoolean(true);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "32" + "'", str10, "32");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str21, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "32" + "'", str25, "32");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "32" + "'", str30, "32");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 32.0d + "'", double32 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 32L + "'", long35 == 32L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 32L + "'", long36 == 32L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 32.0d + "'", double42 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        org.jboss.dmr.ModelNode modelNode6 = modelNodeFactory0.readFrom("100", false);
        org.jboss.dmr.ModelNode modelNode9 = modelNodeFactory0.readFrom("\"-1\"", false);
        java.io.InputStream inputStream10 = null;
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream(inputStream10, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream13 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream12);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream13);
        java.nio.charset.Charset charset15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode17 = modelNodeFactory0.readFrom((java.io.InputStream) inputStream14, charset15, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode9);
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        org.jboss.dmr.Property property6 = property5.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue(property5);
        org.jboss.dmr.PropertyModelValue propertyModelValue8 = new org.jboss.dmr.PropertyModelValue(property5);
        org.jboss.dmr.ModelValue modelValue9 = propertyModelValue8.copy();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.setExpression("hi!", "hi!");
        java.lang.String str14 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode10);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode10.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode17 = modelNode10.set((double) 0);
        org.jboss.dmr.ModelNode modelNode18 = modelNode10.clear();
        org.jboss.dmr.IntModelValue intModelValue21 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long23 = intModelValue21.asLong((long) 'b');
        java.lang.String str24 = intModelValue21.asString();
        java.math.BigInteger bigInteger25 = intModelValue21.asBigInteger();
        org.jboss.dmr.ModelNode modelNode26 = modelNode18.add("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", bigInteger25);
        java.lang.String str28 = modelNode18.asString("(\"hi!\" => 0.0)");
        boolean boolean29 = propertyModelValue8.equals((java.lang.Object) "(\"hi!\" => 0.0)");
        org.jboss.dmr.ModelValue modelValue30 = propertyModelValue8.copy();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str14, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "32" + "'", str24, "32");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]" + "'", str28, "[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(modelValue30);
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double3 = longModelValue1.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        byte[] byteArray8 = longModelValue5.asBytes();
        boolean boolean9 = longModelValue1.equals(longModelValue5);
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue11.asLong((long) (short) 0);
        java.math.BigInteger bigInteger14 = longModelValue11.asBigInteger();
        boolean boolean15 = longModelValue5.equals(longModelValue11);
        java.lang.String str16 = longModelValue11.asString();
        org.jboss.dmr.ModelValue modelValue17 = longModelValue11.copy();
        org.jboss.dmr.ValueExpression valueExpression18 = modelValue17.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver19 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.ValueExpression valueExpression21 = new org.jboss.dmr.ValueExpression("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        java.lang.String str22 = valueExpressionResolver19.resolve(valueExpression21);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long25 = modelNode24.asLong();
        org.jboss.dmr.ValueExpression valueExpression26 = modelNode24.asExpression();
        java.math.BigDecimal bigDecimal27 = valueExpression26.resolveBigDecimal();
        java.lang.String str28 = valueExpression26.getExpressionString();
        java.math.BigDecimal bigDecimal29 = valueExpression26.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue30 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal29);
        boolean boolean31 = bigDecimalModelValue30.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression32 = bigDecimalModelValue30.asExpression();
        int int33 = bigDecimalModelValue30.asInt();
        java.math.BigDecimal bigDecimal34 = bigDecimalModelValue30.asBigDecimal();
        double double36 = bigDecimalModelValue30.asDouble(4.9E-324d);
        org.jboss.dmr.ValueExpression valueExpression37 = bigDecimalModelValue30.asExpression();
        java.lang.String str38 = valueExpressionResolver19.resolve(valueExpression37);
        boolean boolean39 = valueExpression18.equals(valueExpression37);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertNotNull(valueExpressionResolver19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))" + "'", str22, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0" + "'", str28, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1.0" + "'", str38, "1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        org.jboss.dmr.ObjectModelValue objectModelValue6 = null;
        boolean boolean7 = objectModelValue4.equals(objectModelValue6);
        boolean boolean8 = objectModelValue0.equals(objectModelValue6);
        org.jboss.dmr.ModelValue modelValue9 = objectModelValue0.resolve();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(modelValue9);
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        boolean boolean10 = listModelValue5.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray11 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean12 = listModelValue5.equals((java.lang.Object) modelNodeArray11);
        long long13 = listModelValue5.asLong();
        org.jboss.dmr.ModelNode modelNode14 = listModelValue5.asObject();
        java.io.ObjectOutput objectOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode14.writeExternal(objectOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(modelNodeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(modelNode14);
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream14, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = inputStream14.markSupported();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigDecimal bigDecimal10 = bigDecimalModelValue7.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue7.asExpression();
        java.math.BigInteger bigInteger12 = bigDecimalModelValue7.asBigInteger();
        double double14 = bigDecimalModelValue7.asDouble((double) (short) 0);
        long long16 = bigDecimalModelValue7.asLong((long) 'I');
        org.jboss.dmr.BooleanModelValue booleanModelValue18 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long20 = booleanModelValue18.asLong(0L);
        java.lang.String str21 = booleanModelValue18.asString();
        boolean boolean22 = bigDecimalModelValue7.equals((java.lang.Object) booleanModelValue18);
        java.lang.String str23 = booleanModelValue18.asString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(booleanModelValue18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "true" + "'", str21, "true");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "true" + "'", str23, "true");
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        int int7 = bigIntegerModelValue4.asInt();
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.ExpressionValue expressionValue10 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue12 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean13 = expressionValue10.equals(expressionValue12);
        org.jboss.dmr.ExpressionValue expressionValue15 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression16 = expressionValue15.asExpression();
        boolean boolean17 = expressionValue10.equals(expressionValue15);
        org.jboss.dmr.ObjectModelValue objectModelValue18 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue18.asObject();
        java.util.Set<java.lang.String> strSet20 = objectModelValue18.getKeys();
        org.jboss.dmr.ModelNode modelNode22 = objectModelValue18.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        int int24 = objectModelValue18.asInt(10);
        boolean boolean25 = expressionValue15.equals((java.lang.Object) objectModelValue18);
        java.lang.String str26 = expressionValue15.asString();
        boolean boolean27 = bigIntegerModelValue4.equals((java.lang.Object) str26);
        java.lang.String str28 = bigIntegerModelValue4.asString();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(modelNode22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelValue modelValue11 = listModelValue5.clone();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory13 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream14 = null;
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream(inputStream14, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue18 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str19 = longModelValue18.asString();
        byte[] byteArray20 = longModelValue18.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue21 = new org.jboss.dmr.BytesModelValue(byteArray20);
        int int24 = inputStream16.read(byteArray20, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream16, (-1));
        org.jboss.dmr.stream.ModelReader modelReader27 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream26);
        java.io.InputStream inputStream28 = null;
        org.jboss.dmr.Base64.InputStream inputStream30 = new org.jboss.dmr.Base64.InputStream(inputStream28, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream31 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream30);
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream30);
        org.jboss.dmr.stream.ModelReader modelReader33 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream30);
        java.io.InputStream inputStream34 = null;
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream(inputStream34, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream36);
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream36);
        java.io.OutputStream outputStream39 = null;
        org.jboss.dmr.Base64.OutputStream outputStream40 = new org.jboss.dmr.Base64.OutputStream(outputStream39);
        outputStream40.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream42 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40);
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream42);
        outputStream42.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream42);
        org.jboss.dmr.Base64.OutputStream outputStream46 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream42);
        org.jboss.dmr.stream.ModelWriter modelWriter47 = modelStreamFactory13.newModelWriter((java.io.OutputStream) outputStream46);
        listModelValue5.write(modelWriter47);
        int int49 = listModelValue5.asInt();
        org.jboss.dmr.LongModelValue longModelValue51 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str52 = longModelValue51.asString();
        byte[] byteArray53 = longModelValue51.asBytes();
        org.jboss.dmr.ModelType modelType54 = org.jboss.dmr.ModelType.OBJECT;
        boolean boolean55 = longModelValue51.equals((java.lang.Object) modelType54);
        boolean boolean56 = listModelValue5.equals((java.lang.Object) longModelValue51);
        double double57 = longModelValue51.asDouble();
        java.io.DataOutput dataOutput58 = null;
        // The following exception was thrown during execution in test generation
        try {
            longModelValue51.writeExternal(dataOutput58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelStreamFactory13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(modelReader27);
        org.junit.Assert.assertNotNull(modelReader33);
        org.junit.Assert.assertNotNull(modelReader38);
        org.junit.Assert.assertNotNull(modelWriter47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType54 + "' != '" + org.jboss.dmr.ModelType.OBJECT + "'", modelType54.equals(org.jboss.dmr.ModelType.OBJECT));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        org.jboss.dmr.ObjectModelValue objectModelValue3 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue3.asObject();
        java.util.Set<java.lang.String> strSet5 = objectModelValue3.getKeys();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue3.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean8 = objectModelValue3.asBoolean();
        int int10 = objectModelValue3.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode11 = objectModelValue3.asObject();
        boolean boolean12 = objectModelValue0.equals(objectModelValue3);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = objectModelValue3.asList();
        boolean boolean14 = objectModelValue3.asBoolean();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        java.lang.String str20 = bytesModelValue19.asString();
        int int21 = bytesModelValue19.asInt();
        int int22 = bytesModelValue19.asInt();
        int int24 = bytesModelValue19.asInt(112);
        boolean boolean25 = bytesModelValue12.equals(bytesModelValue19);
        double double27 = bytesModelValue19.asDouble((double) (-1));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str20, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4.9E-324d + "'", double27 == 4.9E-324d);
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        double double15 = bigIntegerModelValue13.asDouble((double) 'b');
        boolean boolean16 = bigIntegerModelValue4.equals(bigIntegerModelValue13);
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double18 = booleanModelValue17.asDouble();
        org.jboss.dmr.ModelValue modelValue19 = booleanModelValue17.copy();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue21 = new org.jboss.dmr.BigIntegerModelValue(bigInteger20);
        long long23 = bigIntegerModelValue21.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = null;
        boolean boolean25 = bigIntegerModelValue21.equals(bigIntegerModelValue24);
        boolean boolean26 = bigIntegerModelValue4.equals(bigIntegerModelValue21);
        int int27 = bigIntegerModelValue4.asInt();
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double29 = booleanModelValue28.asDouble();
        org.jboss.dmr.ModelValue modelValue30 = booleanModelValue28.copy();
        java.math.BigInteger bigInteger31 = booleanModelValue28.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue32 = new org.jboss.dmr.BigIntegerModelValue(bigInteger31);
        int int34 = bigIntegerModelValue32.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue35 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double36 = booleanModelValue35.asDouble();
        org.jboss.dmr.ModelValue modelValue37 = booleanModelValue35.copy();
        java.math.BigInteger bigInteger38 = booleanModelValue35.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue39 = new org.jboss.dmr.BigIntegerModelValue(bigInteger38);
        java.lang.String str40 = bigIntegerModelValue39.asString();
        java.math.BigInteger bigInteger41 = bigIntegerModelValue39.asBigInteger();
        boolean boolean42 = bigIntegerModelValue32.equals(bigIntegerModelValue39);
        double double44 = bigIntegerModelValue32.asDouble(0.0d);
        int int45 = bigIntegerModelValue32.asInt();
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode49 = modelNode46.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList50 = modelNode49.asList();
        java.lang.String str52 = modelNode49.asString("true");
        org.jboss.dmr.ModelNode modelNode54 = modelNode49.set((double) 'a');
        org.jboss.dmr.LongModelValue longModelValue56 = new org.jboss.dmr.LongModelValue(1L);
        long long58 = longModelValue56.asLong((long) (short) 0);
        java.lang.String str59 = longModelValue56.asString();
        org.jboss.dmr.ValueExpression valueExpression60 = longModelValue56.asExpression();
        int int61 = valueExpression60.resolveInt();
        org.jboss.dmr.ModelNode modelNode62 = modelNode49.set(valueExpression60);
        org.jboss.dmr.IntModelValue intModelValue64 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str65 = intModelValue64.asString();
        double double67 = intModelValue64.asDouble((double) 2);
        java.math.BigDecimal bigDecimal68 = intModelValue64.asBigDecimal();
        boolean boolean69 = valueExpression60.equals((java.lang.Object) intModelValue64);
        int int70 = intModelValue64.asInt();
        org.jboss.dmr.IntModelValue intModelValue72 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long74 = intModelValue72.asLong((long) 'b');
        java.lang.String str75 = intModelValue72.asString();
        java.math.BigInteger bigInteger76 = intModelValue72.asBigInteger();
        double double78 = intModelValue72.asDouble(0.0d);
        double double79 = intModelValue72.asDouble();
        boolean boolean80 = intModelValue72.asBoolean();
        int int81 = intModelValue72.asInt();
        boolean boolean82 = intModelValue64.equals(intModelValue72);
        boolean boolean83 = bigIntegerModelValue32.equals((java.lang.Object) boolean82);
        boolean boolean84 = bigIntegerModelValue4.equals(bigIntegerModelValue32);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNodeList50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(\"hi!\" => 0.0)" + "'", str52, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(valueExpression60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "32" + "'", str65, "32");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 32.0d + "'", double67 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 32L + "'", long74 == 32L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "32" + "'", str75, "32");
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 32.0d + "'", double78 == 32.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 32.0d + "'", double79 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 32 + "'", int81 == 32);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        byte[] byteArray21 = org.jboss.dmr.Base64.decode("true");
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int26 = inputStream18.read(byteArray21, (int) 'l', 0);
        org.jboss.dmr.stream.ModelReader modelReader27 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        org.jboss.dmr.LongModelValue longModelValue29 = new org.jboss.dmr.LongModelValue((-1L));
        long long31 = longModelValue29.asLong((long) (byte) -1);
        boolean boolean33 = longModelValue29.asBoolean(false);
        java.io.OutputStream outputStream34 = null;
        org.jboss.dmr.Base64.OutputStream outputStream35 = new org.jboss.dmr.Base64.OutputStream(outputStream34);
        outputStream35.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream39 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream37, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream40 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream39);
        outputStream40.resumeEncoding();
        boolean boolean42 = longModelValue29.equals((java.lang.Object) outputStream40);
        org.jboss.dmr.Base64.OutputStream outputStream44 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40, (int) (short) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter45 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream40);
        java.io.Reader reader46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelReader modelReader47 = modelStreamFactory1.newModelReader(reader46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(modelReader27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(modelWriter45);
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue4.removeChild("1");
        boolean boolean9 = objectModelValue4.asBoolean();
        boolean boolean10 = objectModelValue0.equals(objectModelValue4);
        long long11 = objectModelValue4.asLong();
        org.jboss.dmr.ModelValue modelValue12 = objectModelValue4.resolve();
        java.io.PrintWriter printWriter13 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelValue12.writeJSONString(printWriter13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(modelValue12);
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression4 = doubleModelValue1.asExpression();
        byte[] byteArray5 = doubleModelValue1.asBytes();
        double double6 = doubleModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        int int13 = listModelValue5.asInt();
        org.jboss.dmr.ModelValue modelValue14 = listModelValue5.resolve();
        int int16 = listModelValue5.asInt(52);
        int int17 = listModelValue5.asInt();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        boolean boolean8 = typeModelValue5.asBoolean();
        org.jboss.dmr.ModelType modelType9 = typeModelValue5.asType();
        boolean boolean10 = typeModelValue5.asBoolean();
        boolean boolean12 = typeModelValue5.asBoolean(false);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        long long10 = bigIntegerModelValue4.asLong((long) '4');
        org.jboss.dmr.ValueExpression valueExpression11 = bigIntegerModelValue4.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue12 = new org.jboss.dmr.ExpressionValue(valueExpression11);
        java.io.PrintWriter printWriter13 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue12.formatAsJSON(printWriter13, (int) 'i', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(valueExpression11);
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        byte[] byteArray6 = intModelValue1.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        java.lang.String str13 = listModelValue12.asString();
        long long14 = listModelValue12.asLong();
        int int16 = listModelValue12.asInt((int) '4');
        int int18 = listModelValue12.asInt((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode19 = listModelValue12.asObject();
        boolean boolean21 = listModelValue12.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = modelNode25.asList();
        org.jboss.dmr.ListModelValue listModelValue27 = new org.jboss.dmr.ListModelValue(modelNodeList26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue27);
        org.jboss.dmr.ModelValue modelValue29 = listModelValue27.resolve();
        int int31 = listModelValue27.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList32 = listModelValue27.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = listModelValue27.asList();
        long long34 = listModelValue27.asLong();
        boolean boolean35 = listModelValue12.equals(listModelValue27);
        boolean boolean36 = intModelValue1.equals((java.lang.Object) listModelValue27);
        boolean boolean38 = intModelValue1.asBoolean(true);
        byte[] byteArray39 = intModelValue1.asBytes();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str13, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelValue29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 32]");
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.get(strArray11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = modelNode12.asPropertyList(propertyList23);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.get(strArray31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList43 = listModelValue38.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList44 = modelNode32.asPropertyList(propertyList43);
        modelNode12.setNoCopy(modelNode32);
        org.jboss.dmr.ModelNode modelNode46 = modelNode2.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode12);
        boolean boolean47 = modelNode12.isDefined();
        org.jboss.dmr.PropertyModelValue propertyModelValue49 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==", modelNode12, true);
        boolean boolean51 = propertyModelValue49.has("[1]");
        org.jboss.dmr.DoubleModelValue doubleModelValue53 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int55 = doubleModelValue53.asInt((int) 'l');
        java.math.BigDecimal bigDecimal56 = doubleModelValue53.asBigDecimal();
        byte[] byteArray57 = doubleModelValue53.asBytes();
        int int59 = doubleModelValue53.asInt((int) (byte) 1);
        org.jboss.dmr.StringModelValue stringModelValue61 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory63 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream64 = null;
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream(inputStream64, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream67 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream66);
        org.jboss.dmr.stream.ModelReader modelReader68 = modelStreamFactory63.newModelReader((java.io.InputStream) inputStream67);
        java.io.OutputStream outputStream69 = null;
        org.jboss.dmr.Base64.OutputStream outputStream70 = new org.jboss.dmr.Base64.OutputStream(outputStream69);
        org.jboss.dmr.Base64.OutputStream outputStream71 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream70);
        outputStream70.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter74 = modelStreamFactory63.newModelWriter((java.io.OutputStream) outputStream70);
        org.jboss.dmr.stream.ModelWriter modelWriter75 = modelWriter74.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter77 = modelWriter75.writeInt((int) (byte) 10);
        stringModelValue61.write(modelWriter77);
        doubleModelValue53.write(modelWriter77);
        propertyModelValue49.write(modelWriter77);
        boolean boolean82 = propertyModelValue49.has("[2L]");
        org.jboss.dmr.ModelNode modelNode83 = propertyModelValue49.asObject();
        org.jboss.dmr.ModelNode modelNode86 = modelNode83.setExpression("AQ==", "{ \"(\\\"Expression \\\\\\\"true\\\\\\\"\\\" => (\\\"org.jboss.dmr.stream.ModelException: [(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => (\\\"hi!\\\" => 0.0)))\" : 1 }");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(modelStreamFactory63);
        org.junit.Assert.assertNotNull(modelReader68);
        org.junit.Assert.assertNotNull(modelWriter74);
        org.junit.Assert.assertNotNull(modelWriter75);
        org.junit.Assert.assertNotNull(modelWriter77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertNotNull(modelNode86);
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double3 = longModelValue1.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        byte[] byteArray8 = longModelValue5.asBytes();
        boolean boolean9 = longModelValue1.equals(longModelValue5);
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue11.asLong((long) (short) 0);
        java.math.BigInteger bigInteger14 = longModelValue11.asBigInteger();
        boolean boolean15 = longModelValue5.equals(longModelValue11);
        boolean boolean16 = longModelValue11.asBoolean();
        double double17 = longModelValue11.asDouble();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue5 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean6 = stringModelValue3.equals(stringModelValue5);
        byte[] byteArray7 = stringModelValue5.asBytes();
        java.lang.Object obj8 = null;
        boolean boolean9 = stringModelValue5.equals(obj8);
        boolean boolean11 = stringModelValue5.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean12 = stringModelValue1.equals(stringModelValue5);
        byte[] byteArray13 = stringModelValue5.asBytes();
        org.jboss.dmr.ModelValue modelValue14 = stringModelValue5.clone();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = stringModelValue5.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(modelValue14);
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        int int3 = booleanModelValue1.asInt();
        org.jboss.dmr.DoubleModelValue doubleModelValue5 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long6 = doubleModelValue5.asLong();
        boolean boolean7 = doubleModelValue5.asBoolean();
        boolean boolean8 = booleanModelValue1.equals((java.lang.Object) doubleModelValue5);
        java.lang.String str9 = doubleModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression10 = doubleModelValue5.asExpression();
        double double12 = doubleModelValue5.asDouble((double) (byte) 1);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10.0" + "'", str9, "10.0");
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.protect();
        java.util.List<org.jboss.dmr.Property> propertyList3 = objectModelValue0.asPropertyList();
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue(97L);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory7 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream8 = null;
        org.jboss.dmr.Base64.InputStream inputStream10 = new org.jboss.dmr.Base64.InputStream(inputStream8, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream10);
        org.jboss.dmr.stream.ModelReader modelReader12 = modelStreamFactory7.newModelReader((java.io.InputStream) inputStream11);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        outputStream14.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter18 = modelStreamFactory7.newModelWriter((java.io.OutputStream) outputStream14);
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelWriter18.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue21 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray22 = intModelValue21.asBytes();
        int int24 = intModelValue21.asInt(0);
        java.math.BigInteger bigInteger25 = intModelValue21.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelWriter19.writeBigInteger(bigInteger25);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelWriter19.writeListStart();
        longModelValue5.write(modelWriter27);
        objectModelValue0.write(modelWriter27);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter27.writeListStart();
        org.jboss.dmr.LongModelValue longModelValue32 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str33 = longModelValue32.asString();
        byte[] byteArray34 = longModelValue32.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue35 = new org.jboss.dmr.BytesModelValue(byteArray34);
        java.lang.String str36 = bytesModelValue35.asString();
        int int37 = bytesModelValue35.asInt();
        int int38 = bytesModelValue35.asInt();
        org.jboss.dmr.LongModelValue longModelValue40 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str41 = longModelValue40.asString();
        byte[] byteArray42 = longModelValue40.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue43 = new org.jboss.dmr.BytesModelValue(byteArray42);
        double double44 = bytesModelValue43.asDouble();
        boolean boolean45 = bytesModelValue35.equals(bytesModelValue43);
        org.jboss.dmr.LongModelValue longModelValue47 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str48 = longModelValue47.asString();
        byte[] byteArray49 = longModelValue47.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue50 = new org.jboss.dmr.BytesModelValue(byteArray49);
        boolean boolean51 = bytesModelValue43.equals(bytesModelValue50);
        java.math.BigInteger bigInteger52 = bytesModelValue50.asBigInteger();
        double double54 = bytesModelValue50.asDouble((double) 32);
        org.jboss.dmr.LongModelValue longModelValue56 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str57 = longModelValue56.asString();
        byte[] byteArray58 = longModelValue56.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue59 = new org.jboss.dmr.BytesModelValue(byteArray58);
        java.lang.String str60 = bytesModelValue59.asString();
        int int61 = bytesModelValue59.asInt();
        int int62 = bytesModelValue59.asInt();
        org.jboss.dmr.LongModelValue longModelValue64 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str65 = longModelValue64.asString();
        byte[] byteArray66 = longModelValue64.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue67 = new org.jboss.dmr.BytesModelValue(byteArray66);
        double double68 = bytesModelValue67.asDouble();
        boolean boolean69 = bytesModelValue59.equals(bytesModelValue67);
        org.jboss.dmr.LongModelValue longModelValue71 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str72 = longModelValue71.asString();
        byte[] byteArray73 = longModelValue71.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue74 = new org.jboss.dmr.BytesModelValue(byteArray73);
        boolean boolean75 = bytesModelValue67.equals(bytesModelValue74);
        boolean boolean76 = bytesModelValue50.equals(bytesModelValue74);
        org.jboss.dmr.LongModelValue longModelValue78 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str79 = longModelValue78.asString();
        byte[] byteArray80 = longModelValue78.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue81 = new org.jboss.dmr.BytesModelValue(byteArray80);
        double double82 = bytesModelValue81.asDouble();
        java.math.BigDecimal bigDecimal83 = bytesModelValue81.asBigDecimal();
        double double85 = bytesModelValue81.asDouble((double) (-1.0f));
        double double86 = bytesModelValue81.asDouble();
        byte[] byteArray87 = bytesModelValue81.asBytes();
        boolean boolean88 = bytesModelValue50.equals(bytesModelValue81);
        byte[] byteArray89 = bytesModelValue81.asBytes();
        org.jboss.dmr.stream.ModelWriter modelWriter90 = modelWriter30.writeBytes(byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            modelWriter90.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been written");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(propertyList3);
        org.junit.Assert.assertNotNull(modelStreamFactory7);
        org.junit.Assert.assertNotNull(modelReader12);
        org.junit.Assert.assertNotNull(modelWriter18);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str36, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4.9E-324d + "'", double44 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 4.9E-324d + "'", double54 == 4.9E-324d);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str60, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4.9E-324d + "'", double68 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1" + "'", str72, "1");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 4.9E-324d + "'", double82 == 4.9E-324d);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4.9E-324d + "'", double85 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 4.9E-324d + "'", double86 == 4.9E-324d);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelWriter90);
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression9 = bigDecimalModelValue7.asExpression();
        int int10 = bigDecimalModelValue7.asInt();
        long long11 = bigDecimalModelValue7.asLong();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory13 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream14 = null;
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream(inputStream14, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream16);
        org.jboss.dmr.stream.ModelReader modelReader18 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream17);
        java.io.OutputStream outputStream19 = null;
        org.jboss.dmr.Base64.OutputStream outputStream20 = new org.jboss.dmr.Base64.OutputStream(outputStream19);
        org.jboss.dmr.Base64.OutputStream outputStream21 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream20);
        outputStream20.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelStreamFactory13.newModelWriter((java.io.OutputStream) outputStream20);
        org.jboss.dmr.stream.ModelWriter modelWriter25 = modelWriter24.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelWriter24.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter29 = modelWriter27.writeBoolean(true);
        bigDecimalModelValue7.write(modelWriter27);
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelWriter27.writeListStart();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(modelStreamFactory13);
        org.junit.Assert.assertNotNull(modelReader18);
        org.junit.Assert.assertNotNull(modelWriter24);
        org.junit.Assert.assertNotNull(modelWriter25);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter29);
        org.junit.Assert.assertNotNull(modelWriter31);
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        boolean boolean7 = booleanModelValue1.equals((java.lang.Object) '4');
        java.lang.String str8 = booleanModelValue1.asString();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBoolean();
        boolean boolean19 = modelReader15.isPropertyEnd();
        boolean boolean20 = modelReader15.isBigDecimal();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = modelReader15.getExpression();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't expression");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = modelNode16.set(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue24 = new org.jboss.dmr.PropertyModelValue(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue(property22);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = propertyModelValue25.asList();
        org.jboss.dmr.ModelNode modelNode27 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList26);
        org.jboss.dmr.IntModelValue intModelValue30 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str31 = intModelValue30.asString();
        double double33 = intModelValue30.asDouble((double) 2);
        java.math.BigDecimal bigDecimal34 = intModelValue30.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode35 = modelNode27.add("(\"hi!\" => 0.0)", bigDecimal34);
        org.jboss.dmr.ModelNode modelNode37 = modelNode27.get((int) (byte) 10);
        org.jboss.dmr.ModelNode modelNode39 = modelNode27.addExpression("QA==");
        java.io.OutputStream outputStream40 = null;
        org.jboss.dmr.Base64.OutputStream outputStream41 = new org.jboss.dmr.Base64.OutputStream(outputStream40);
        outputStream41.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream41);
        org.jboss.dmr.Base64.OutputStream outputStream44 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        outputStream43.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream46 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        outputStream43.suspendEncoding();
        outputStream43.resumeEncoding();
        // The following exception was thrown during execution in test generation
        try {
            modelNode27.writeExternal((java.io.OutputStream) outputStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType15.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 32.0d + "'", double33 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode39);
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(97L);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6);
        org.jboss.dmr.stream.ModelReader modelReader8 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream7);
        java.io.OutputStream outputStream9 = null;
        org.jboss.dmr.Base64.OutputStream outputStream10 = new org.jboss.dmr.Base64.OutputStream(outputStream9);
        org.jboss.dmr.Base64.OutputStream outputStream11 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream10);
        outputStream10.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter14 = modelStreamFactory3.newModelWriter((java.io.OutputStream) outputStream10);
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter14.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue17 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray18 = intModelValue17.asBytes();
        int int20 = intModelValue17.asInt(0);
        java.math.BigInteger bigInteger21 = intModelValue17.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelWriter15.writeBigInteger(bigInteger21);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter15.writeListStart();
        longModelValue1.write(modelWriter23);
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelWriter23.writeString("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BAACNTJ4\n");
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter26.writeLong((long) 's');
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertNotNull(modelReader8);
        org.junit.Assert.assertNotNull(modelWriter14);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertNotNull(modelWriter28);
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        int int13 = listModelValue5.asInt();
        java.lang.String str14 = listModelValue5.asString();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        boolean boolean17 = listModelValue5.equals((java.lang.Object) modelType15);
        boolean boolean19 = listModelValue5.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode21 = listModelValue5.requireChild((int) (short) 0);
        org.jboss.dmr.BooleanModelValue booleanModelValue23 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray24 = booleanModelValue23.asBytes();
        java.lang.String str25 = booleanModelValue23.asString();
        java.lang.String str26 = booleanModelValue23.asString();
        java.lang.String str27 = booleanModelValue23.asString();
        byte[] byteArray28 = booleanModelValue23.asBytes();
        java.math.BigInteger bigInteger29 = booleanModelValue23.asBigInteger();
        org.jboss.dmr.ValueExpression valueExpression30 = booleanModelValue23.asExpression();
        org.jboss.dmr.ModelNode modelNode31 = modelNode21.set(valueExpression30);
        java.lang.String str32 = modelNode31.toString();
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.setExpression("hi!", "hi!");
        java.lang.String str37 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode33);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = modelNode33.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode40 = modelNode33.set((double) 0);
        java.lang.String str42 = modelNode33.toJSONString(true);
        java.math.BigDecimal bigDecimal43 = modelNode33.asBigDecimalOrNull();
        org.jboss.dmr.ModelNode modelNode44 = modelNode31.set(bigDecimal43);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType15.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(booleanModelValue23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "true" + "'", str25, "true");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "true" + "'", str26, "true");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "true" + "'", str27, "true");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "expression \"true\"" + "'", str32, "expression \"true\"");
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str37, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0.0" + "'", str42, "0.0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(modelNode44);
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj1 = org.jboss.dmr.Base64.decodeToObject("{\n    \"(\\\"hi!\\\" => expression \\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\")\" : -1\n}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Bad Base64 input character at 0: 123(decimal)");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("(\"hi!\" => [\n    (\"hi!\" => 0.0),\n    undefined\n])");
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined}", (double) 35L);
        java.io.PrintWriter printWriter5 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode4.writeJSONString(printWriter5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        boolean boolean4 = booleanModelValue1.asBoolean();
        double double5 = booleanModelValue1.asDouble();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        boolean boolean2 = org.jboss.dmr.Base64.decodeToFile("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQACkVYUFJFU1NJT04=", "H4sIAAAAAAAAAPv/HwIAHN9EIQgAAAA=");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression9 = bigDecimalModelValue7.asExpression();
        int int10 = bigDecimalModelValue7.asInt();
        long long11 = bigDecimalModelValue7.asLong();
        double double12 = bigDecimalModelValue7.asDouble();
        double double13 = bigDecimalModelValue7.asDouble();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long16 = modelNode15.asLong();
        org.jboss.dmr.ValueExpression valueExpression17 = modelNode15.asExpression();
        java.math.BigDecimal bigDecimal18 = valueExpression17.resolveBigDecimal();
        java.lang.String str19 = valueExpression17.getExpressionString();
        java.math.BigDecimal bigDecimal20 = valueExpression17.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue21 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal20);
        int int23 = bigDecimalModelValue21.asInt(0);
        java.math.BigInteger bigInteger24 = bigDecimalModelValue21.asBigInteger();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long27 = modelNode26.asLong();
        org.jboss.dmr.ValueExpression valueExpression28 = modelNode26.asExpression();
        java.math.BigDecimal bigDecimal29 = valueExpression28.resolveBigDecimal();
        java.lang.String str30 = valueExpression28.getExpressionString();
        java.math.BigDecimal bigDecimal31 = valueExpression28.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue32 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal31);
        boolean boolean33 = bigDecimalModelValue32.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression34 = bigDecimalModelValue32.asExpression();
        int int35 = bigDecimalModelValue32.asInt();
        long long36 = bigDecimalModelValue32.asLong();
        long long38 = bigDecimalModelValue32.asLong(32L);
        boolean boolean39 = bigDecimalModelValue21.equals(bigDecimalModelValue32);
        java.lang.String str40 = bigDecimalModelValue21.asString();
        org.jboss.dmr.ValueExpression valueExpression41 = bigDecimalModelValue21.asExpression();
        int int42 = bigDecimalModelValue21.asInt();
        double double44 = bigDecimalModelValue21.asDouble(0.0d);
        boolean boolean45 = bigDecimalModelValue7.equals(bigDecimalModelValue21);
        java.io.PrintWriter printWriter46 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue21.format(printWriter46, (int) 'l', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0" + "'", str19, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1.0" + "'", str30, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(valueExpression34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1.0" + "'", str40, "1.0");
        org.junit.Assert.assertNotNull(valueExpression41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression9 = bigDecimalModelValue7.asExpression();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asList();
        org.jboss.dmr.ListModelValue listModelValue15 = new org.jboss.dmr.ListModelValue(modelNodeList14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue15);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue15.resolve();
        int int19 = listModelValue15.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList20 = listModelValue15.asPropertyList();
        java.lang.String str21 = listModelValue15.asString();
        int int23 = listModelValue15.asInt(2);
        boolean boolean25 = listModelValue15.has("{ \"expression \\\"hi!\\\"\" : { \"BYTES_VALUE\" : \"AQ==\" } }");
        org.jboss.dmr.ModelValue modelValue26 = listModelValue15.copy();
        boolean boolean27 = bigDecimalModelValue7.equals((java.lang.Object) listModelValue15);
        java.lang.String str28 = bigDecimalModelValue7.asString();
        java.math.BigDecimal bigDecimal29 = bigDecimalModelValue7.asBigDecimal();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str21, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(modelValue26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0" + "'", str28, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal29);
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(0);
        java.lang.Throwable throwable4 = null;
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable4);
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException5);
        java.lang.Throwable throwable8 = null;
        org.jboss.dmr.stream.ModelException modelException9 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable8);
        org.jboss.dmr.stream.ModelException modelException10 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException9);
        modelException5.addSuppressed((java.lang.Throwable) modelException9);
        java.lang.Throwable[] throwableArray12 = modelException9.getSuppressed();
        org.jboss.dmr.stream.ModelException modelException13 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException9);
        org.jboss.dmr.stream.ModelException modelException14 = new org.jboss.dmr.stream.ModelException("32", (java.lang.Throwable) modelException9);
        boolean boolean15 = intModelValue1.equals((java.lang.Object) modelException14);
        java.math.BigDecimal bigDecimal16 = intModelValue1.asBigDecimal();
        org.jboss.dmr.IntModelValue intModelValue18 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.IntModelValue intModelValue20 = new org.jboss.dmr.IntModelValue(10);
        boolean boolean22 = intModelValue20.asBoolean(false);
        boolean boolean23 = intModelValue18.equals(intModelValue20);
        boolean boolean24 = intModelValue1.equals(intModelValue20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.String> strSet25 = intModelValue1.getKeys();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long6 = longModelValue1.asLong();
        int int8 = longModelValue1.asInt(32);
        java.math.BigDecimal bigDecimal9 = longModelValue1.asBigDecimal();
        boolean boolean10 = longModelValue1.asBoolean();
        int int11 = longModelValue1.asInt();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        org.jboss.dmr.ObjectModelValue objectModelValue6 = null;
        boolean boolean7 = objectModelValue4.equals(objectModelValue6);
        boolean boolean8 = objectModelValue0.equals(objectModelValue6);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue13 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger14 = booleanModelValue13.asBigInteger();
        byte[] byteArray15 = booleanModelValue13.asBytes();
        org.jboss.dmr.ModelNode modelNode16 = modelNode10.set("expression \"hi!\"", byteArray15);
        org.jboss.dmr.ModelNode modelNode17 = modelNode16.clear();
        int int19 = modelNode16.asInt((int) 'p');
        java.lang.Boolean boolean20 = modelNode16.asBooleanOrNull();
        boolean boolean21 = objectModelValue0.equals((java.lang.Object) modelNode16);
        org.jboss.dmr.ModelType modelType22 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode(modelType22);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode23.set(property29);
        org.jboss.dmr.ModelNode modelNode31 = property29.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue32 = new org.jboss.dmr.PropertyModelValue(property29);
        org.jboss.dmr.ModelValue modelValue33 = propertyModelValue32.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList34 = propertyModelValue32.asList();
        org.jboss.dmr.ListModelValue listModelValue35 = new org.jboss.dmr.ListModelValue(modelNodeList34);
        boolean boolean36 = modelNode16.equals((java.lang.Object) listModelValue35);
        boolean boolean38 = listModelValue35.asBoolean(false);
        java.io.DataOutput dataOutput39 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue35.writeExternal(dataOutput39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanModelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 112 + "'", int19 == 112);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + modelType22 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType22.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelValue33);
        org.junit.Assert.assertNotNull(modelNodeList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        boolean boolean4 = stringModelValue1.equals((java.lang.Object) (-1.0d));
        java.lang.String str5 = stringModelValue1.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent6 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) modelEvent6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory11 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream12 = null;
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream12, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream15 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream14);
        org.jboss.dmr.stream.ModelReader modelReader16 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream15);
        java.io.OutputStream outputStream17 = null;
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream(outputStream17);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream18.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory11.newModelWriter((java.io.OutputStream) outputStream18);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter22.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter25 = modelWriter23.writeInt((int) (byte) 10);
        stringModelValue9.write(modelWriter25);
        boolean boolean27 = stringModelValue1.equals(stringModelValue9);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = stringModelValue9.asLong((long) 'J');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str5, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent6 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent6.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory11);
        org.junit.Assert.assertNotNull(modelReader16);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        boolean boolean12 = modelNode9.equals((java.lang.Object) 100L);
        boolean boolean13 = modelNode1.equals(modelNode9);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("", modelNode18);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.get(strArray20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int23 = modelNode22.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.setExpression("hi!", "hi!");
        java.lang.String str28 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode24);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList29 = modelNode24.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode30 = modelNode22.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode32 = modelNode9.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode34 = modelNode9.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.PropertyModelValue propertyModelValue36 = new org.jboss.dmr.PropertyModelValue("1.0", modelNode9, false);
        org.jboss.dmr.ModelValue modelValue37 = propertyModelValue36.protect();
        boolean boolean39 = propertyModelValue36.has("AAAAZA==");
        java.util.List<org.jboss.dmr.Property> propertyList40 = propertyModelValue36.asPropertyList();
        boolean boolean42 = propertyModelValue36.has("(\"[1]\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str28, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelValue37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = propertyModelValue10.asList();
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue10.resolve();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) propertyModelValue10);
        java.util.List<org.jboss.dmr.Property> propertyList14 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelValue modelValue15 = propertyModelValue10.resolve();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertNotNull(modelValue15);
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isBytes();
        boolean boolean24 = modelReader15.isDouble();
        boolean boolean25 = modelReader15.isBigInteger();
        boolean boolean26 = modelReader15.hasNext();
        boolean boolean27 = modelReader15.isBigDecimal();
        boolean boolean28 = modelReader15.isObjectEnd();
        boolean boolean29 = modelReader15.isUndefined();
        boolean boolean30 = modelReader15.isInt();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.InputStream inputStream7 = null;
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream11 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) (byte) 100);
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream(inputStream7);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream7, 0);
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        // The following exception was thrown during execution in test generation
        try {
            inputStream14.mark((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelReader15);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        outputStream4.flushBase64();
        outputStream4.resumeEncoding();
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        long long9 = longModelValue8.asLong();
        byte[] byteArray10 = longModelValue8.asBytes();
        outputStream4.write(byteArray10, 0, (-1));
        outputStream4.write(52);
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream4, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue(10.0d);
        boolean boolean3 = doubleModelValue1.asBoolean(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode16 = modelNode0.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.lang.String str23 = modelNode19.toString();
        org.jboss.dmr.ModelNode modelNode24 = modelNode19.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode26 = modelNode19.set(100);
        org.jboss.dmr.ModelNode modelNode27 = modelNode18.add(modelNode19);
        int int29 = modelNode19.asInt(2);
        org.jboss.dmr.ModelType modelType31 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode32 = modelNode19.set("[(\"hi!\" => 0.0)]", modelType31);
        org.jboss.dmr.ModelNode modelNode33 = modelNode16.set("\"BYTES_VALUE\"", modelType31);
        org.jboss.dmr.ObjectModelValue objectModelValue34 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode35 = objectModelValue34.asObject();
        java.util.Set<java.lang.String> strSet36 = objectModelValue34.getKeys();
        org.jboss.dmr.ModelNode modelNode38 = objectModelValue34.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList39 = objectModelValue34.asList();
        org.jboss.dmr.ModelNode modelNode41 = objectModelValue34.getChild("\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\"");
        java.util.Set<java.lang.String> strSet42 = objectModelValue34.getKeys();
        int int43 = objectModelValue34.asInt();
        org.jboss.dmr.ModelValue modelValue45 = objectModelValue34.copy(false);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList46 = objectModelValue34.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode16.asList(modelNodeList46);
        org.jboss.dmr.ListModelValue listModelValue48 = new org.jboss.dmr.ListModelValue(modelNodeList47);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(\"hi!\" => 0.0)" + "'", str23, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + modelType31 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType31.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNodeList39);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(modelValue45);
        org.junit.Assert.assertNotNull(modelNodeList46);
        org.junit.Assert.assertNotNull(modelNodeList47);
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        org.jboss.dmr.Property property6 = property5.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue(property5);
        org.jboss.dmr.ModelNode modelNode8 = property5.getValue();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(modelNode8);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isBytes();
        boolean boolean24 = modelReader15.isDouble();
        boolean boolean25 = modelReader15.isBigInteger();
        boolean boolean26 = modelReader15.isDouble();
        boolean boolean27 = modelReader15.isListEnd();
        boolean boolean28 = modelReader15.isBoolean();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = modelReader15.getExpression();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't expression");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        java.lang.Throwable throwable3 = null;
        org.jboss.dmr.stream.ModelException modelException4 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable3);
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException4);
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException("AAAAZA==", (java.lang.Throwable) modelException4);
        java.lang.Throwable[] throwableArray7 = modelException4.getSuppressed();
        org.jboss.dmr.stream.ModelException modelException8 = new org.jboss.dmr.stream.ModelException("{\n    \"hi!\" : {\n        \"EXPRESSION_VALUE\" : \"hi!\"\n    }\n}", (java.lang.Throwable) modelException4);
        org.jboss.dmr.stream.ModelException modelException9 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException4);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        org.jboss.dmr.ModelType modelType1 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(modelType1);
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.set("hi!", 0.0d);
        org.jboss.dmr.Property property8 = new org.jboss.dmr.Property("", modelNode7);
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set(property8);
        org.jboss.dmr.ModelNode modelNode10 = property8.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property8);
        java.util.List<org.jboss.dmr.Property> propertyList12 = propertyModelValue11.asPropertyList();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue11.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = modelNode14.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue18 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long19 = booleanModelValue18.asLong();
        org.jboss.dmr.ValueExpression valueExpression20 = booleanModelValue18.asExpression();
        java.lang.String str21 = valueExpression20.toString();
        org.jboss.dmr.ExpressionValue expressionValue23 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression24 = expressionValue23.asExpression();
        boolean boolean25 = valueExpression20.equals(valueExpression24);
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal28 = longModelValue27.asBigDecimal();
        int int29 = longModelValue27.asInt();
        org.jboss.dmr.ValueExpression valueExpression30 = longModelValue27.asExpression();
        boolean boolean31 = valueExpression24.equals(valueExpression30);
        int int32 = valueExpression30.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue34 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression35 = expressionValue34.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver36 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str37 = valueExpression35.resolveString(valueExpressionResolver36);
        java.math.BigInteger bigInteger38 = valueExpression30.resolveBigInteger(valueExpressionResolver36);
        org.jboss.dmr.ModelNode modelNode39 = modelNode14.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression30);
        org.jboss.dmr.ModelNode modelNode42 = modelNode39.add("AQ==", false);
        org.jboss.dmr.PropertyModelValue propertyModelValue43 = new org.jboss.dmr.PropertyModelValue("[]", modelNode42);
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str48 = modelNode46.asString("true");
        org.jboss.dmr.Property property49 = new org.jboss.dmr.Property("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", modelNode46);
        org.jboss.dmr.ModelNode modelNode50 = property49.getValue();
        java.lang.String str51 = property49.getName();
        org.jboss.dmr.ModelNode modelNode52 = modelNode42.add(property49);
        org.junit.Assert.assertTrue("'" + modelType1 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType1.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(booleanModelValue18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Expression \"true\"" + "'", str21, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(valueExpression35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "10" + "'", str48, "10");
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "H4sIAAAAAAAAAAMAAAAAAAAAAAA=" + "'", str51, "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        org.junit.Assert.assertNotNull(modelNode52);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        java.lang.String str9 = listModelValue5.asString();
        byte[] byteArray11 = org.jboss.dmr.Base64.decode("true");
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode(byteArray11);
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean17 = expressionValue14.equals(expressionValue16);
        org.jboss.dmr.ExpressionValue expressionValue19 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue21 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean22 = expressionValue19.equals(expressionValue21);
        boolean boolean23 = expressionValue14.equals(expressionValue21);
        org.jboss.dmr.ModelValue modelValue24 = expressionValue14.resolve();
        java.lang.String str25 = expressionValue14.asString();
        org.jboss.dmr.ModelValue modelValue26 = expressionValue14.resolve();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory28 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream29 = null;
        org.jboss.dmr.Base64.InputStream inputStream31 = new org.jboss.dmr.Base64.InputStream(inputStream29, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream31);
        org.jboss.dmr.stream.ModelReader modelReader33 = modelStreamFactory28.newModelReader((java.io.InputStream) inputStream32);
        java.io.OutputStream outputStream34 = null;
        org.jboss.dmr.Base64.OutputStream outputStream35 = new org.jboss.dmr.Base64.OutputStream(outputStream34);
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream35);
        outputStream35.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter39 = modelStreamFactory28.newModelWriter((java.io.OutputStream) outputStream35);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelWriter39.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter42 = modelWriter40.writeInt((int) (byte) 10);
        expressionValue14.write(modelWriter40);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode48 = modelNode45.set("hi!", 0.0d);
        org.jboss.dmr.Property property49 = new org.jboss.dmr.Property("", modelNode48);
        java.lang.String[] strArray50 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.get(strArray50);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int53 = modelNode52.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode57 = modelNode54.setExpression("hi!", "hi!");
        java.lang.String str58 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode54);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList59 = modelNode54.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode60 = modelNode52.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList59);
        org.jboss.dmr.ModelNode modelNode61 = modelNode51.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList59);
        org.jboss.dmr.LongModelValue longModelValue63 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str64 = longModelValue63.asString();
        double double66 = longModelValue63.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression67 = longModelValue63.asExpression();
        byte[] byteArray68 = longModelValue63.asBytes();
        org.jboss.dmr.ModelNode modelNode69 = modelNode61.add(byteArray68);
        org.jboss.dmr.stream.ModelWriter modelWriter70 = modelWriter40.writeBytes(byteArray68);
        org.jboss.dmr.stream.ModelWriter modelWriter72 = modelWriter70.writeExpression("[]");
        modelNode12.write(modelWriter72);
        listModelValue5.write(modelWriter72);
        // The following exception was thrown during execution in test generation
        try {
            modelWriter72.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been written");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str9, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(modelValue26);
        org.junit.Assert.assertNotNull(modelStreamFactory28);
        org.junit.Assert.assertNotNull(modelReader33);
        org.junit.Assert.assertNotNull(modelWriter39);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter42);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str58, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList59);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelWriter70);
        org.junit.Assert.assertNotNull(modelWriter72);
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = modelNode20.asList();
        org.jboss.dmr.ListModelValue listModelValue22 = new org.jboss.dmr.ListModelValue(modelNodeList21);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue22);
        org.jboss.dmr.ModelValue modelValue24 = listModelValue22.resolve();
        int int26 = listModelValue22.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList27 = listModelValue22.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList28 = listModelValue22.asPropertyList();
        org.jboss.dmr.ModelValue modelValue29 = listModelValue22.copy();
        boolean boolean30 = listModelValue13.equals(listModelValue22);
        org.jboss.dmr.ModelValue modelValue31 = listModelValue22.protect();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode33 = listModelValue22.insertChild((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(propertyList27);
        org.junit.Assert.assertNotNull(propertyList28);
        org.junit.Assert.assertNotNull(modelValue29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(modelValue31);
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        byte[] byteArray7 = bytesModelValue4.asBytes();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        java.lang.String str13 = bytesModelValue12.asString();
        int int14 = bytesModelValue12.asInt();
        int int15 = bytesModelValue12.asInt();
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        double double21 = bytesModelValue20.asDouble();
        boolean boolean22 = bytesModelValue12.equals(bytesModelValue20);
        byte[] byteArray23 = bytesModelValue20.asBytes();
        java.math.BigInteger bigInteger24 = bytesModelValue20.asBigInteger();
        boolean boolean25 = bytesModelValue4.equals(bytesModelValue20);
        long long26 = bytesModelValue4.asLong();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str13, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ValueExpression valueExpression4 = modelNode2.asExpression();
        java.math.BigDecimal bigDecimal5 = valueExpression4.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long8 = booleanModelValue7.asLong();
        org.jboss.dmr.ValueExpression valueExpression9 = booleanModelValue7.asExpression();
        boolean boolean11 = valueExpression9.equals((java.lang.Object) 'p');
        boolean boolean12 = valueExpression4.equals(valueExpression9);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode(valueExpression4);
        org.jboss.dmr.Property property15 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode13, false);
        org.jboss.dmr.PropertyModelValue propertyModelValue16 = new org.jboss.dmr.PropertyModelValue(property15);
        org.jboss.dmr.ModelNode modelNode18 = propertyModelValue16.getChild(0);
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("(\"hi!\" => expression \"hi!\")", (double) 'e');
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        java.lang.String str29 = modelNode26.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue32 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long33 = booleanModelValue32.asLong();
        org.jboss.dmr.ValueExpression valueExpression34 = booleanModelValue32.asExpression();
        java.lang.String str35 = valueExpression34.toString();
        org.jboss.dmr.ExpressionValue expressionValue37 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression38 = expressionValue37.asExpression();
        boolean boolean39 = valueExpression34.equals(valueExpression38);
        java.lang.String str40 = valueExpression38.resolveString();
        org.jboss.dmr.ModelNode modelNode41 = modelNode26.set("Expression \"1\"", valueExpression38);
        org.jboss.dmr.ModelNode modelNode42 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode45 = modelNode42.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList46 = modelNode45.asList();
        org.jboss.dmr.ModelNode modelNode49 = modelNode45.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType50 = modelNode45.getType();
        org.jboss.dmr.ModelNode modelNode51 = modelNode41.set(modelType50);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode56 = modelNode53.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList57 = modelNode56.asList();
        org.jboss.dmr.ListModelValue listModelValue58 = new org.jboss.dmr.ListModelValue(modelNodeList57);
        org.jboss.dmr.ModelNode modelNode59 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue58);
        org.jboss.dmr.ModelValue modelValue60 = listModelValue58.resolve();
        int int62 = listModelValue58.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList63 = listModelValue58.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList64 = listModelValue58.asPropertyList();
        java.lang.String str65 = listModelValue58.asString();
        int int66 = listModelValue58.asInt();
        java.lang.String str67 = listModelValue58.asString();
        org.jboss.dmr.ModelType modelType68 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode69 = new org.jboss.dmr.ModelNode(modelType68);
        boolean boolean70 = listModelValue58.equals((java.lang.Object) modelType68);
        org.jboss.dmr.TypeModelValue typeModelValue71 = org.jboss.dmr.TypeModelValue.of(modelType68);
        org.jboss.dmr.ModelNode modelNode72 = modelNode51.set("(\"Expression \\\"true\\\"\" => BIG_DECIMAL)", modelType68);
        char char73 = modelType68.getTypeChar();
        org.jboss.dmr.ModelNode modelNode74 = modelNode21.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3LWwAAAACcAAAcAAD\naGkhRAAAAAAAAAAAcAAOKCJoaSEiID0+IDAuMClkAAIzMng=", modelType68);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(\"hi!\" => 0.0)" + "'", str29, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(valueExpression34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Expression \"true\"" + "'", str35, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNodeList46);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertTrue("'" + modelType50 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType50.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(modelNodeList57);
        org.junit.Assert.assertNotNull(modelValue60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(propertyList63);
        org.junit.Assert.assertNotNull(propertyList64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str65, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str67, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + modelType68 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType68.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(typeModelValue71);
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertTrue("'" + char73 + "' != '" + 'D' + "'", char73 == 'D');
        org.junit.Assert.assertNotNull(modelNode74);
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        long long5 = intModelValue1.asLong();
        long long6 = intModelValue1.asLong();
        java.math.BigInteger bigInteger7 = intModelValue1.asBigInteger();
        byte[] byteArray8 = intModelValue1.asBytes();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.lang.String str14 = modelNode10.toString();
        org.jboss.dmr.ModelNode modelNode15 = modelNode10.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode17 = modelNode10.set(100);
        org.jboss.dmr.ModelNode modelNode18 = modelNode9.add(modelNode10);
        org.jboss.dmr.ModelNode modelNode19 = modelNode9.resolve();
        org.jboss.dmr.LongModelValue longModelValue22 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str23 = longModelValue22.asString();
        byte[] byteArray24 = longModelValue22.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue25 = new org.jboss.dmr.BytesModelValue(byteArray24);
        java.lang.String str26 = bytesModelValue25.asString();
        int int27 = bytesModelValue25.asInt();
        byte[] byteArray28 = bytesModelValue25.asBytes();
        org.jboss.dmr.ModelNode modelNode29 = modelNode9.add("{ \"BYTES_VALUE\" : \"v/AAAAAAAAA=\" }", byteArray28);
        boolean boolean30 = intModelValue1.equals((java.lang.Object) "{ \"BYTES_VALUE\" : \"v/AAAAAAAAA=\" }");
        java.math.BigDecimal bigDecimal31 = intModelValue1.asBigDecimal();
        org.jboss.dmr.IntModelValue intModelValue33 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str34 = intModelValue33.asString();
        org.jboss.dmr.LongModelValue longModelValue36 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str37 = longModelValue36.asString();
        double double39 = longModelValue36.asDouble((double) 32L);
        int int41 = longModelValue36.asInt((int) (short) 10);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory43 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream44 = null;
        org.jboss.dmr.Base64.InputStream inputStream46 = new org.jboss.dmr.Base64.InputStream(inputStream44, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream47 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream46);
        org.jboss.dmr.stream.ModelReader modelReader48 = modelStreamFactory43.newModelReader((java.io.InputStream) inputStream47);
        java.io.OutputStream outputStream49 = null;
        org.jboss.dmr.Base64.OutputStream outputStream50 = new org.jboss.dmr.Base64.OutputStream(outputStream49);
        org.jboss.dmr.Base64.OutputStream outputStream51 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream50);
        outputStream50.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter54 = modelStreamFactory43.newModelWriter((java.io.OutputStream) outputStream50);
        org.jboss.dmr.stream.ModelWriter modelWriter55 = modelWriter54.writeListStart();
        longModelValue36.write(modelWriter54);
        org.jboss.dmr.stream.ModelWriter modelWriter58 = modelWriter54.writeBoolean(false);
        intModelValue33.write(modelWriter58);
        org.jboss.dmr.ModelValue modelValue60 = intModelValue33.copy();
        boolean boolean61 = intModelValue1.equals(intModelValue33);
        java.lang.String str62 = intModelValue33.asString();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(\"hi!\" => 0.0)" + "'", str14, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str26, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "32" + "'", str34, "32");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory43);
        org.junit.Assert.assertNotNull(modelReader48);
        org.junit.Assert.assertNotNull(modelWriter54);
        org.junit.Assert.assertNotNull(modelWriter55);
        org.junit.Assert.assertNotNull(modelWriter58);
        org.junit.Assert.assertNotNull(modelValue60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "32" + "'", str62, "32");
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        boolean boolean20 = bytesModelValue12.equals(bytesModelValue19);
        java.math.BigInteger bigInteger21 = bytesModelValue19.asBigInteger();
        double double23 = bytesModelValue19.asDouble((double) 32);
        org.jboss.dmr.LongModelValue longModelValue25 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str26 = longModelValue25.asString();
        byte[] byteArray27 = longModelValue25.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue28 = new org.jboss.dmr.BytesModelValue(byteArray27);
        java.lang.String str29 = bytesModelValue28.asString();
        int int30 = bytesModelValue28.asInt();
        int int31 = bytesModelValue28.asInt();
        org.jboss.dmr.LongModelValue longModelValue33 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str34 = longModelValue33.asString();
        byte[] byteArray35 = longModelValue33.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue36 = new org.jboss.dmr.BytesModelValue(byteArray35);
        double double37 = bytesModelValue36.asDouble();
        boolean boolean38 = bytesModelValue28.equals(bytesModelValue36);
        org.jboss.dmr.LongModelValue longModelValue40 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str41 = longModelValue40.asString();
        byte[] byteArray42 = longModelValue40.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue43 = new org.jboss.dmr.BytesModelValue(byteArray42);
        boolean boolean44 = bytesModelValue36.equals(bytesModelValue43);
        boolean boolean45 = bytesModelValue19.equals(bytesModelValue43);
        java.lang.String str46 = bytesModelValue43.asString();
        java.math.BigDecimal bigDecimal47 = bytesModelValue43.asBigDecimal();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4.9E-324d + "'", double23 == 4.9E-324d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str29, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4.9E-324d + "'", double37 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str46, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertNotNull(bigDecimal47);
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        int int3 = longModelValue1.asInt();
        java.math.BigDecimal bigDecimal4 = longModelValue1.asBigDecimal();
        org.jboss.dmr.StringModelValue stringModelValue6 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray7 = stringModelValue6.asBytes();
        byte[] byteArray8 = stringModelValue6.asBytes();
        boolean boolean9 = longModelValue1.equals((java.lang.Object) stringModelValue6);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = stringModelValue6.asDouble((double) 2L);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        boolean boolean22 = modelReader21.isLong();
        boolean boolean23 = modelReader21.isListEnd();
        boolean boolean24 = modelReader21.isPropertyEnd();
        boolean boolean25 = modelReader21.isObjectEnd();
        boolean boolean26 = modelReader21.isListEnd();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        org.jboss.dmr.ModelNode modelNode6 = modelNodeFactory0.readFrom("0.0", true);
        org.jboss.dmr.ModelNode modelNode9 = modelNodeFactory0.readFrom("(\"hi!\" => expression \"hi!\")", false);
        org.jboss.dmr.ModelNode modelNode12 = modelNodeFactory0.readFrom("\"{\n    \\\"hi!\\\" : {\n        \\\"EXPRESSION_VALUE\\\" : \\\"hi!\\\"\n    }\n}\"", true);
        org.jboss.dmr.ModelNode modelNode15 = modelNodeFactory0.readFrom("1.1975582E7", true);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        byte[] byteArray21 = org.jboss.dmr.Base64.decode("true");
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int26 = inputStream18.read(byteArray21, (int) 'l', 0);
        org.jboss.dmr.Base64.InputStream inputStream27 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode29 = modelNodeFactory0.readFrom((java.io.InputStream) inputStream18, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = listModelValue5.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode27, false);
        org.jboss.dmr.Property property30 = propertyModelValue29.asProperty();
        boolean boolean31 = listModelValue5.equals((java.lang.Object) propertyModelValue29);
        org.jboss.dmr.ModelValue modelValue32 = listModelValue5.copy();
        int int34 = listModelValue5.asInt((int) (short) 100);
        java.util.List<org.jboss.dmr.Property> propertyList35 = listModelValue5.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(modelValue32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(propertyList35);
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        java.lang.String str9 = property7.getName();
        org.jboss.dmr.Property property10 = property7.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.Property property12 = propertyModelValue11.asProperty();
        java.lang.String str13 = propertyModelValue11.asString();
        boolean boolean15 = propertyModelValue11.has("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode17 = propertyModelValue11.requireChild("[(\"\" => (\"hi!\" => 0.0)),(\"(\\\"hi!\\\" => 0.0)\" => big decimal 32),false]");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '[(\"\" => (\"hi!\" => 0.0)),(\"(\\\"hi!\\\" => 0.0)\" => big decimal 32),false]' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str13, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        java.lang.String str9 = listModelValue5.toJSONString(false);
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.resolve();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[{\n    \"hi!\" : 0.0\n}]" + "'", str9, "[{\n    \"hi!\" : 0.0\n}]");
        org.junit.Assert.assertNotNull(modelValue10);
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromBase64String("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Bad Base64 input character at 0: 34(decimal)");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        int int9 = bytesModelValue4.asInt(112);
        java.math.BigInteger bigInteger10 = bytesModelValue4.asBigInteger();
        java.io.DataOutput dataOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue4.writeExternal(dataOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.clear();
        int int10 = modelNode8.asInt(112);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ModelNode modelNode18 = modelNode14.setExpression("hi!", "(\"hi!\" => 0.0)");
        java.util.Set<java.lang.String> strSet19 = modelNode18.keys();
        boolean boolean20 = modelNode8.equals(modelNode18);
        org.jboss.dmr.ModelNode modelNode23 = modelNode8.add("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => bytes {\n    0xb6, 0xbb, 0x9e\n})", "AAAAZA==");
        boolean boolean25 = modelNode8.hasDefined((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode27 = modelNode8.add(8);
        java.lang.String str29 = modelNode27.asString("[{\n    \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\\nIXg=\" : {\n        \"hi!\" : {\n            \"EXPRESSION_VALUE\" : \"hi!\"\n        }\n    }\n}]");
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 112 + "'", int10 == 112);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[(\"(\\\"\\\\\\\"(\\\\\\\\\\\\\\\"hi!\\\\\\\\\\\\\\\" => 0.0)\\\\\\\"\\\" => bytes {\n    0xb6, 0xbb, 0x9e\n})\" => \"AAAAZA==\"),8]" + "'", str29, "[(\"(\\\"\\\\\\\"(\\\\\\\\\\\\\\\"hi!\\\\\\\\\\\\\\\" => 0.0)\\\\\\\"\\\" => bytes {\n    0xb6, 0xbb, 0x9e\n})\" => \"AAAAZA==\"),8]");
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        boolean boolean11 = modelNode8.equals((java.lang.Object) 100L);
        boolean boolean12 = modelNode0.equals(modelNode8);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int22 = modelNode21.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.setExpression("hi!", "hi!");
        java.lang.String str27 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode23.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode29 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode8.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode33 = modelNode8.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.BooleanModelValue booleanModelValue35 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double36 = booleanModelValue35.asDouble();
        org.jboss.dmr.ModelValue modelValue37 = booleanModelValue35.copy();
        java.math.BigInteger bigInteger38 = booleanModelValue35.asBigInteger();
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode(bigInteger38);
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode(bigInteger38);
        org.jboss.dmr.ModelNode modelNode41 = modelNode33.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==", bigInteger38);
        java.lang.String str43 = modelNode41.toJSONString(false);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str27, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(booleanModelValue35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[\n    {\n        \"hi!\" : {\n            \"EXPRESSION_VALUE\" : \"hi!\"\n        }\n    },\n    \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\",\n    {\n        \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\\nAAAAeA==\" : 1\n    }\n]" + "'", str43, "[\n    {\n        \"hi!\" : {\n            \"EXPRESSION_VALUE\" : \"hi!\"\n        }\n    },\n    \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\",\n    {\n        \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\\nAAAAeA==\" : 1\n    }\n]");
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("1");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ObjectModelValue objectModelValue6 = new org.jboss.dmr.ObjectModelValue();
        long long8 = objectModelValue6.asLong((long) (-1));
        boolean boolean9 = objectModelValue0.equals(objectModelValue6);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        boolean boolean14 = objectModelValue6.equals((java.lang.Object) modelNode10);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode16 = modelNode10.add(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        long long3 = longModelValue1.asLong((long) (byte) -1);
        byte[] byteArray4 = longModelValue1.asBytes();
        long long5 = longModelValue1.asLong();
        java.math.BigInteger bigInteger6 = longModelValue1.asBigInteger();
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue((-1L));
        long long10 = longModelValue8.asLong((long) (byte) -1);
        double double11 = longModelValue8.asDouble();
        double double12 = longModelValue8.asDouble();
        double double14 = longModelValue8.asDouble((double) 97);
        boolean boolean15 = longModelValue1.equals(longModelValue8);
        long long17 = longModelValue1.asLong((long) 112);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        boolean boolean4 = modelNode1.has((int) '#');
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode9 = modelNode1.set("1");
        org.jboss.dmr.ModelNode modelNode10 = modelNode9.clone();
        org.jboss.dmr.LongModelValue longModelValue13 = new org.jboss.dmr.LongModelValue(1L);
        int int15 = longModelValue13.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue((-1L));
        long long19 = longModelValue17.asLong((long) (byte) -1);
        double double21 = longModelValue17.asDouble((double) 10.0f);
        boolean boolean22 = longModelValue13.equals(longModelValue17);
        byte[] byteArray23 = longModelValue17.asBytes();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) longModelValue17);
        byte[] byteArray25 = longModelValue17.asBytes();
        org.jboss.dmr.ValueExpression valueExpression26 = longModelValue17.asExpression();
        int int27 = valueExpression26.resolveInt();
        org.jboss.dmr.DoubleModelValue doubleModelValue29 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long30 = doubleModelValue29.asLong();
        long long32 = doubleModelValue29.asLong((long) 32);
        org.jboss.dmr.ModelValue modelValue33 = doubleModelValue29.protect();
        int int34 = doubleModelValue29.asInt();
        boolean boolean35 = valueExpression26.equals((java.lang.Object) doubleModelValue29);
        java.math.BigInteger bigInteger36 = doubleModelValue29.asBigInteger();
        org.jboss.dmr.ModelNode modelNode37 = modelNode10.set("{\"hi!\" : 0.0}", bigInteger36);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = modelNode37.asDouble((double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(modelValue33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(modelNode37);
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((int) ' ');
        long long7 = doubleModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = doubleModelValue1.asExpression();
        java.math.BigInteger bigInteger9 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asList();
        org.jboss.dmr.ListModelValue listModelValue15 = new org.jboss.dmr.ListModelValue(modelNodeList14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue15);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue15.resolve();
        int int19 = listModelValue15.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList20 = listModelValue15.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = listModelValue15.asList();
        long long22 = listModelValue15.asLong();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        org.jboss.dmr.ListModelValue listModelValue28 = new org.jboss.dmr.ListModelValue(modelNodeList27);
        java.lang.String str29 = listModelValue28.asString();
        long long30 = listModelValue28.asLong();
        int int32 = listModelValue28.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue33 = listModelValue28.protect();
        boolean boolean35 = listModelValue28.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue28.resolve();
        boolean boolean37 = listModelValue28.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = listModelValue28.asList();
        boolean boolean39 = listModelValue15.equals(listModelValue28);
        java.util.List<org.jboss.dmr.Property> propertyList40 = listModelValue15.asPropertyList();
        boolean boolean41 = doubleModelValue1.equals((java.lang.Object) propertyList40);
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str44 = longModelValue43.asString();
        byte[] byteArray45 = longModelValue43.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue46 = new org.jboss.dmr.BytesModelValue(byteArray45);
        java.lang.String str47 = bytesModelValue46.asString();
        int int48 = bytesModelValue46.asInt();
        int int49 = bytesModelValue46.asInt();
        int int51 = bytesModelValue46.asInt(112);
        boolean boolean52 = doubleModelValue1.equals((java.lang.Object) int51);
        java.io.InputStream inputStream53 = null;
        org.jboss.dmr.Base64.InputStream inputStream55 = new org.jboss.dmr.Base64.InputStream(inputStream53, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue57 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str58 = longModelValue57.asString();
        byte[] byteArray59 = longModelValue57.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue60 = new org.jboss.dmr.BytesModelValue(byteArray59);
        int int63 = inputStream55.read(byteArray59, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream65 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream55, (-1));
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream65);
        boolean boolean67 = doubleModelValue1.equals((java.lang.Object) inputStream66);
        org.jboss.dmr.Base64.InputStream inputStream69 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream66, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode70 = org.jboss.dmr.ModelNode.fromJSONStream((java.io.InputStream) inputStream69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str29, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(modelValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str47, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode4 = modelNode3.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue5 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue5.asObject();
        java.util.Set<java.lang.String> strSet7 = objectModelValue5.getKeys();
        boolean boolean9 = objectModelValue5.has((int) 'a');
        boolean boolean11 = objectModelValue5.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue12 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue12.asObject();
        java.util.Set<java.lang.String> strSet14 = objectModelValue12.getKeys();
        boolean boolean16 = objectModelValue12.has((int) 'a');
        boolean boolean17 = objectModelValue5.equals(objectModelValue12);
        org.jboss.dmr.ModelNode modelNode18 = objectModelValue12.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = objectModelValue12.asList();
        org.jboss.dmr.ModelNode modelNode20 = modelNode3.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList19);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode3, true);
        org.jboss.dmr.Property property23 = property22.clone();
        org.jboss.dmr.ModelNode modelNode24 = property22.getValue();
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4", modelNode24);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(modelNode24);
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter12.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter15.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelWriter15.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter21 = modelWriter15.writeLong((long) 52);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter21.writeDouble(2.737053247814936E-153d);
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelWriter23.writeListEnd();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(modelWriter21);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter24);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        java.io.DataOutput dataOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            booleanModelValue0.writeExternal(dataOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.protect();
        java.util.List<org.jboss.dmr.Property> propertyList3 = objectModelValue0.asPropertyList();
        org.jboss.dmr.ModelValue modelValue4 = objectModelValue0.copy();
        long long5 = objectModelValue0.asLong();
        long long6 = objectModelValue0.asLong();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(propertyList3);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBoolean();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.hasNext();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.ModelNode modelNode15 = modelNode14.resolve();
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(modelType16);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        org.jboss.dmr.ModelNode modelNode24 = modelNode17.set(property23);
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue(property23);
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue(property23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = propertyModelValue26.asList();
        org.jboss.dmr.ModelNode modelNode28 = modelNode15.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList27);
        org.jboss.dmr.IntModelValue intModelValue31 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str32 = intModelValue31.asString();
        double double34 = intModelValue31.asDouble((double) 2);
        java.math.BigDecimal bigDecimal35 = intModelValue31.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode36 = modelNode28.add("(\"hi!\" => 0.0)", bigDecimal35);
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.set("hi!", 0.0d);
        java.lang.String str41 = modelNode37.toString();
        org.jboss.dmr.ModelNode modelNode42 = modelNode37.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode44 = modelNode37.set(100);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode49 = modelNode47.set((int) '#');
        org.jboss.dmr.ModelNode modelNode50 = modelNode37.setNoCopy("EXPRESSION_VALUE", modelNode49);
        org.jboss.dmr.ModelNode modelNode53 = modelNode37.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode56 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode59 = modelNode56.set("hi!", 0.0d);
        java.lang.String str60 = modelNode56.toString();
        org.jboss.dmr.ModelNode modelNode61 = modelNode56.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode63 = modelNode56.set(100);
        org.jboss.dmr.ModelNode modelNode64 = modelNode55.add(modelNode56);
        int int66 = modelNode56.asInt(2);
        org.jboss.dmr.ModelType modelType68 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode69 = modelNode56.set("[(\"hi!\" => 0.0)]", modelType68);
        org.jboss.dmr.ModelNode modelNode70 = modelNode53.set("\"BYTES_VALUE\"", modelType68);
        org.jboss.dmr.ModelNode modelNode71 = modelNode28.add(modelNode70);
        org.jboss.dmr.Property property72 = new org.jboss.dmr.Property("\"35\"", modelNode71);
        org.jboss.dmr.PropertyModelValue propertyModelValue73 = new org.jboss.dmr.PropertyModelValue(property72);
        org.jboss.dmr.Property property74 = property72.clone();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType16.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "32" + "'", str32, "32");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 32.0d + "'", double34 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(\"hi!\" => 0.0)" + "'", str41, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(\"hi!\" => 0.0)" + "'", str60, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + modelType68 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType68.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        double double5 = bytesModelValue4.asDouble();
        int int7 = bytesModelValue4.asInt((int) '#');
        double double9 = bytesModelValue4.asDouble((double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType10 = bytesModelValue4.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.9E-324d + "'", double5 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 4.9E-324d + "'", double9 == 4.9E-324d);
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        double double4 = intModelValue1.asDouble();
        boolean boolean5 = intModelValue1.asBoolean();
        double double6 = intModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 32.0d + "'", double6 == 32.0d);
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("(\"hi!\" => 0.0)");
        java.io.OutputStream outputStream2 = null;
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream(outputStream2);
        outputStream3.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream5 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        org.jboss.dmr.Base64.OutputStream outputStream6 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream5);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger12 = booleanModelValue11.asBigInteger();
        byte[] byteArray13 = booleanModelValue11.asBytes();
        org.jboss.dmr.ModelNode modelNode14 = modelNode8.set("expression \"hi!\"", byteArray13);
        outputStream5.write(byteArray13);
        org.jboss.dmr.ModelNode modelNode16 = modelNode1.set(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode18 = modelNode16.addExpression("LONG");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode16);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        org.jboss.dmr.BooleanModelValue booleanModelValue19 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger20 = booleanModelValue19.asBigInteger();
        byte[] byteArray21 = booleanModelValue19.asBytes();
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "1L");
        boolean boolean25 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "[(\"hi!\" => 0.0)]");
        outputStream17.write(byteArray21);
        outputStream17.write((int) (short) 0);
        outputStream17.resumeEncoding();
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream17);
        java.io.InputStream inputStream31 = null;
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream(inputStream31, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream34 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream33);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream34, 0);
        org.jboss.dmr.stream.ModelReader modelReader37 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream34);
        java.io.OutputStream outputStream38 = null;
        org.jboss.dmr.Base64.OutputStream outputStream39 = new org.jboss.dmr.Base64.OutputStream(outputStream38);
        org.jboss.dmr.Base64.OutputStream outputStream40 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream39);
        org.jboss.dmr.Base64.OutputStream outputStream41 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40);
        outputStream41.suspendEncoding();
        outputStream41.resumeEncoding();
        outputStream41.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter45 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream41);
        outputStream41.resumeEncoding();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(booleanModelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelReader37);
        org.junit.Assert.assertNotNull(modelWriter45);
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        int int34 = inputStream26.read(byteArray30, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (-1));
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader41 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream38);
        java.io.OutputStream outputStream42 = null;
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream(outputStream42);
        outputStream43.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream47 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream45, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream47);
        outputStream48.resumeEncoding();
        outputStream48.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream48);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory53 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream54 = null;
        org.jboss.dmr.Base64.InputStream inputStream56 = new org.jboss.dmr.Base64.InputStream(inputStream54, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue58 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str59 = longModelValue58.asString();
        byte[] byteArray60 = longModelValue58.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue61 = new org.jboss.dmr.BytesModelValue(byteArray60);
        int int64 = inputStream56.read(byteArray60, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream56, (-1));
        org.jboss.dmr.stream.ModelReader modelReader67 = modelStreamFactory53.newModelReader((java.io.InputStream) inputStream66);
        java.io.InputStream inputStream68 = null;
        org.jboss.dmr.Base64.InputStream inputStream70 = new org.jboss.dmr.Base64.InputStream(inputStream68, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue72 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str73 = longModelValue72.asString();
        byte[] byteArray74 = longModelValue72.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue75 = new org.jboss.dmr.BytesModelValue(byteArray74);
        int int78 = inputStream70.read(byteArray74, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.stream.ModelReader modelReader79 = modelStreamFactory53.newModelReader((java.io.InputStream) inputStream70);
        org.jboss.dmr.Base64.InputStream inputStream81 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream70, (int) (byte) -1);
        org.jboss.dmr.stream.ModelReader modelReader82 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream70);
        org.jboss.dmr.Base64.InputStream inputStream83 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream70);
        // The following exception was thrown during execution in test generation
        try {
            long long85 = inputStream70.skip((long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelReader41);
        org.junit.Assert.assertNotNull(modelWriter51);
        org.junit.Assert.assertNotNull(modelStreamFactory53);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(modelReader67);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(modelReader79);
        org.junit.Assert.assertNotNull(modelReader82);
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.Validation.validate(modelNode1, "10.0");
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal7 = longModelValue6.asBigDecimal();
        int int8 = longModelValue6.asInt();
        org.jboss.dmr.ValueExpression valueExpression9 = longModelValue6.asExpression();
        long long11 = longModelValue6.asLong((long) 1);
        java.math.BigInteger bigInteger12 = longModelValue6.asBigInteger();
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set("[2L]", bigInteger12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer int14 = modelNode13.asIntOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(modelNode13);
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isListStart();
        boolean boolean23 = modelReader15.isUndefined();
        boolean boolean24 = modelReader15.isBigInteger();
        boolean boolean25 = modelReader15.isObjectStart();
        boolean boolean26 = modelReader15.isBigInteger();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = modelReader15.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't double");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(0);
        boolean boolean2 = intModelValue1.asBoolean();
        org.jboss.dmr.ModelType modelType3 = intModelValue1.getType();
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        java.math.BigDecimal bigDecimal9 = intModelValue5.asBigDecimal();
        java.math.BigInteger bigInteger10 = intModelValue5.asBigInteger();
        boolean boolean11 = intModelValue1.equals(intModelValue5);
        int int13 = intModelValue5.asInt((int) (byte) 1);
        byte[] byteArray14 = intModelValue5.asBytes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType3.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 32]");
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int8 = bytesModelValue4.asInt((int) 'a');
        double double10 = bytesModelValue4.asDouble((double) '#');
        long long12 = bytesModelValue4.asLong((long) 'p');
        int int13 = bytesModelValue4.asInt();
        org.jboss.dmr.IntModelValue intModelValue15 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList20 = modelNode19.asList();
        org.jboss.dmr.ListModelValue listModelValue21 = new org.jboss.dmr.ListModelValue(modelNodeList20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue21);
        org.jboss.dmr.ModelValue modelValue23 = listModelValue21.resolve();
        int int25 = listModelValue21.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList26 = listModelValue21.asPropertyList();
        boolean boolean27 = intModelValue15.equals((java.lang.Object) listModelValue21);
        double double28 = intModelValue15.asDouble();
        java.lang.String str29 = intModelValue15.asString();
        boolean boolean30 = bytesModelValue4.equals((java.lang.Object) intModelValue15);
        org.jboss.dmr.IntModelValue intModelValue32 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long34 = intModelValue32.asLong((long) 'b');
        java.lang.String str35 = intModelValue32.asString();
        java.math.BigDecimal bigDecimal36 = intModelValue32.asBigDecimal();
        long long37 = intModelValue32.asLong();
        org.jboss.dmr.IntModelValue intModelValue39 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray40 = intModelValue39.asBytes();
        int int42 = intModelValue39.asInt(0);
        org.jboss.dmr.ModelType modelType43 = intModelValue39.getType();
        int int44 = intModelValue39.asInt();
        boolean boolean45 = intModelValue32.equals(intModelValue39);
        int int46 = intModelValue39.asInt();
        boolean boolean47 = intModelValue15.equals(intModelValue39);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode49 = intModelValue15.requireChild("AAAAAAAAAAE=");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'AAAAAAAAAAE=' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.9E-324d + "'", double10 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNodeList20);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(propertyList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 32.0d + "'", double28 == 32.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32L + "'", long34 == 32L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "32" + "'", str35, "32");
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 32L + "'", long37 == 32L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + modelType43 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType43.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.List<org.jboss.dmr.Property> propertyList16 = modelNode13.asPropertyListOrEmpty();
        java.util.Set<java.lang.String> strSet17 = modelNode13.keys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean18 = modelNode13.asBooleanOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList16);
        org.junit.Assert.assertNotNull(strSet17);
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = modelNode16.set(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue24 = new org.jboss.dmr.PropertyModelValue(property22);
        org.jboss.dmr.PropertyModelValue propertyModelValue25 = new org.jboss.dmr.PropertyModelValue(property22);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = propertyModelValue25.asList();
        org.jboss.dmr.ModelNode modelNode27 = modelNode14.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList26);
        org.jboss.dmr.IntModelValue intModelValue30 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str31 = intModelValue30.asString();
        double double33 = intModelValue30.asDouble((double) 2);
        java.math.BigDecimal bigDecimal34 = intModelValue30.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode35 = modelNode27.add("(\"hi!\" => 0.0)", bigDecimal34);
        int int37 = modelNode27.asInt(0);
        long long39 = modelNode27.asLong((long) 'p');
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType15.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 32.0d + "'", double33 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        java.lang.String str10 = bigDecimalModelValue7.asString();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        java.lang.String str16 = valueExpression14.getExpressionString();
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue18 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal17);
        boolean boolean19 = bigDecimalModelValue18.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression20 = bigDecimalModelValue18.asExpression();
        int int21 = bigDecimalModelValue18.asInt();
        long long22 = bigDecimalModelValue18.asLong();
        boolean boolean23 = bigDecimalModelValue7.equals(bigDecimalModelValue18);
        org.jboss.dmr.ValueExpression valueExpression24 = bigDecimalModelValue7.asExpression();
        boolean boolean25 = bigDecimalModelValue7.asBoolean();
        java.lang.String str26 = bigDecimalModelValue7.asString();
        double double28 = bigDecimalModelValue7.asDouble(52.0d);
        double double29 = bigDecimalModelValue7.asDouble();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0" + "'", str10, "1.0");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0" + "'", str16, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1.0" + "'", str26, "1.0");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long6 = modelNode5.asLong();
        org.jboss.dmr.ValueExpression valueExpression7 = modelNode5.asExpression();
        java.math.BigDecimal bigDecimal8 = valueExpression7.resolveBigDecimal();
        java.lang.String str9 = valueExpression7.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue11.asLong((long) (short) 0);
        java.lang.String str14 = longModelValue11.asString();
        org.jboss.dmr.ValueExpression valueExpression15 = longModelValue11.asExpression();
        int int16 = valueExpression15.resolveInt();
        boolean boolean17 = valueExpression7.equals(valueExpression15);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver18 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long21 = booleanModelValue20.asLong();
        org.jboss.dmr.ValueExpression valueExpression22 = booleanModelValue20.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue23 = new org.jboss.dmr.ExpressionValue(valueExpression22);
        java.lang.String str24 = valueExpression22.getExpressionString();
        java.lang.String str25 = valueExpressionResolver18.resolve(valueExpression22);
        long long26 = valueExpression15.resolveLong(valueExpressionResolver18);
        org.jboss.dmr.ExpressionValue expressionValue28 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue30 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean31 = expressionValue28.equals(expressionValue30);
        org.jboss.dmr.ExpressionValue expressionValue33 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue35 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean36 = expressionValue33.equals(expressionValue35);
        boolean boolean37 = expressionValue28.equals(expressionValue35);
        org.jboss.dmr.ValueExpression valueExpression38 = expressionValue35.asExpression();
        java.lang.String str39 = valueExpressionResolver18.resolve(valueExpression38);
        java.lang.String str40 = valueExpression3.resolveString(valueExpressionResolver18);
        java.lang.String str42 = valueExpressionResolver18.resolvePart("101");
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1.0" + "'", str9, "1.0");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver18);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "true" + "'", str24, "true");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "true" + "'", str25, "true");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(valueExpression38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "true" + "'", str40, "true");
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double12 = booleanModelValue11.asDouble();
        org.jboss.dmr.ModelValue modelValue13 = booleanModelValue11.copy();
        java.math.BigInteger bigInteger14 = booleanModelValue11.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue15 = new org.jboss.dmr.BigIntegerModelValue(bigInteger14);
        java.lang.String str16 = bigIntegerModelValue15.asString();
        long long18 = bigIntegerModelValue15.asLong(32L);
        double double19 = bigIntegerModelValue15.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double21 = booleanModelValue20.asDouble();
        org.jboss.dmr.ModelValue modelValue22 = booleanModelValue20.copy();
        java.math.BigInteger bigInteger23 = booleanModelValue20.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = new org.jboss.dmr.BigIntegerModelValue(bigInteger23);
        double double26 = bigIntegerModelValue24.asDouble((double) 'b');
        boolean boolean27 = bigIntegerModelValue15.equals(bigIntegerModelValue24);
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double29 = booleanModelValue28.asDouble();
        org.jboss.dmr.ModelValue modelValue30 = booleanModelValue28.copy();
        java.math.BigInteger bigInteger31 = booleanModelValue28.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue32 = new org.jboss.dmr.BigIntegerModelValue(bigInteger31);
        long long34 = bigIntegerModelValue32.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue35 = null;
        boolean boolean36 = bigIntegerModelValue32.equals(bigIntegerModelValue35);
        boolean boolean37 = bigIntegerModelValue15.equals(bigIntegerModelValue32);
        java.math.BigDecimal bigDecimal38 = bigIntegerModelValue15.asBigDecimal();
        boolean boolean39 = bigIntegerModelValue4.equals(bigIntegerModelValue15);
        int int41 = bigIntegerModelValue15.asInt((int) (byte) -1);
        java.io.OutputStream outputStream42 = null;
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream(outputStream42);
        org.jboss.dmr.Base64.OutputStream outputStream44 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream44);
        outputStream45.suspendEncoding();
        boolean boolean47 = bigIntegerModelValue15.equals((java.lang.Object) outputStream45);
        // The following exception was thrown during execution in test generation
        try {
            outputStream45.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        outputStream4.flushBase64();
        outputStream4.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream7 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream4);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream7, 0);
        outputStream7.suspendEncoding();
        // The following exception was thrown during execution in test generation
        try {
// flaky:             outputStream7.close();
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Self-suppression not permitted");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        long long3 = longModelValue1.asLong((long) (byte) -1);
        int int5 = longModelValue1.asInt(0);
        byte[] byteArray6 = longModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal9 = longModelValue8.asBigDecimal();
        int int10 = longModelValue8.asInt();
        org.jboss.dmr.ValueExpression valueExpression11 = longModelValue8.asExpression();
        double double12 = longModelValue8.asDouble();
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        long long16 = longModelValue14.asLong((long) (short) 0);
        java.lang.String str17 = longModelValue14.asString();
        byte[] byteArray18 = longModelValue14.asBytes();
        org.jboss.dmr.ModelType modelType19 = longModelValue14.getType();
        long long21 = longModelValue14.asLong(1L);
        boolean boolean22 = longModelValue8.equals(longModelValue14);
        org.jboss.dmr.ValueExpression valueExpression23 = longModelValue8.asExpression();
        int int24 = longModelValue8.asInt();
        boolean boolean25 = longModelValue1.equals(longModelValue8);
        java.math.BigDecimal bigDecimal26 = longModelValue1.asBigDecimal();
        byte[] byteArray27 = longModelValue1.asBytes();
        boolean boolean29 = org.jboss.dmr.Base64.encodeToFile(byteArray27, "{\n    \"BYTES_VALUE\" : \"AAAAAAAAAAE=\"\n}");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType19 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType19.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = modelReader15.getBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't boolean");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set("\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\"", "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        org.jboss.dmr.IntModelValue intModelValue8 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long10 = intModelValue8.asLong((long) 'b');
        java.lang.String str11 = intModelValue8.asString();
        long long12 = intModelValue8.asLong();
        long long13 = intModelValue8.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = intModelValue8.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver15 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal16 = valueExpression14.resolveBigDecimal(valueExpressionResolver15);
        org.jboss.dmr.ModelNode modelNode17 = modelNode1.set("", bigDecimal16);
        java.util.List<org.jboss.dmr.Property> propertyList18 = modelNode17.asPropertyListOrEmpty();
        java.io.DataInput dataInput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode17.readExternal(dataInput19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(propertyList18);
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode10 = modelNode0.resolve();
        org.jboss.dmr.LongModelValue longModelValue13 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str14 = longModelValue13.asString();
        byte[] byteArray15 = longModelValue13.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue16 = new org.jboss.dmr.BytesModelValue(byteArray15);
        java.lang.String str17 = bytesModelValue16.asString();
        int int18 = bytesModelValue16.asInt();
        byte[] byteArray19 = bytesModelValue16.asBytes();
        org.jboss.dmr.ModelNode modelNode20 = modelNode0.add("{ \"BYTES_VALUE\" : \"v/AAAAAAAAA=\" }", byteArray19);
        org.jboss.dmr.LongModelValue longModelValue22 = new org.jboss.dmr.LongModelValue(1L);
        long long24 = longModelValue22.asLong((long) (short) 0);
        java.lang.String str25 = longModelValue22.asString();
        org.jboss.dmr.ValueExpression valueExpression26 = longModelValue22.asExpression();
        org.jboss.dmr.ModelNode modelNode27 = modelNode20.set(valueExpression26);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode28 = modelNode27.addEmptyObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str17, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertNotNull(modelNode27);
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        boolean boolean17 = listModelValue5.asBoolean();
        int int19 = listModelValue5.asInt(8);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue5.resolve();
        long long21 = listModelValue5.asLong();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode22 = listModelValue5.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("{\n    \"TYPE_MODEL_VALUE\" => undefined,\n    \"[(\\\"hi!\\\" => 0.0)]\" => undefined,\n    \"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => undefined\n}");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("{}");
        java.lang.String str4 = stringModelValue3.asString();
        byte[] byteArray5 = stringModelValue3.asBytes();
        boolean boolean6 = stringModelValue1.equals(stringModelValue3);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType7 = stringModelValue3.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.jboss.dmr.ModelType.{}");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[123, 125]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue8 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue8.asObject();
        java.util.Set<java.lang.String> strSet10 = objectModelValue8.getKeys();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue8.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean13 = objectModelValue8.asBoolean();
        int int15 = objectModelValue8.asInt((int) 'b');
        int int17 = objectModelValue8.asInt((int) '#');
        boolean boolean18 = objectModelValue0.equals(objectModelValue8);
        int int19 = objectModelValue8.asInt();
        java.util.Set<java.lang.String> strSet20 = objectModelValue8.getKeys();
        long long22 = objectModelValue8.asLong((long) 0);
        org.jboss.dmr.ModelType modelType23 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode(modelType23);
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        java.lang.String str31 = bytesModelValue30.asString();
        int int32 = bytesModelValue30.asInt();
        long long34 = bytesModelValue30.asLong((long) (short) 1);
        long long35 = bytesModelValue30.asLong();
        java.math.BigDecimal bigDecimal36 = bytesModelValue30.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode37 = modelNode24.set("32", bigDecimal36);
        boolean boolean38 = objectModelValue8.equals((java.lang.Object) bigDecimal36);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) objectModelValue8);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory41 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream42 = null;
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream(inputStream42, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream44);
        org.jboss.dmr.stream.ModelReader modelReader46 = modelStreamFactory41.newModelReader((java.io.InputStream) inputStream45);
        java.io.OutputStream outputStream47 = null;
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream(outputStream47);
        org.jboss.dmr.Base64.OutputStream outputStream49 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream48);
        outputStream48.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelStreamFactory41.newModelWriter((java.io.OutputStream) outputStream48);
        org.jboss.dmr.stream.ModelWriter modelWriter53 = modelWriter52.writeListStart();
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode56 = modelNode55.resolve();
        java.lang.String str57 = modelNode55.asString();
        org.jboss.dmr.ModelNode modelNode59 = modelNode55.set((long) 52);
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.setExpression("hi!", "hi!");
        java.lang.String str65 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode61);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList66 = modelNode61.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode68 = modelNode61.set((double) 0);
        org.jboss.dmr.ModelType modelType70 = org.jboss.dmr.ModelType.PROPERTY;
        char char71 = modelType70.getTypeChar();
        org.jboss.dmr.ModelNode modelNode72 = modelNode61.set("[(\"hi!\" => 0.0)]", modelType70);
        org.jboss.dmr.Property property73 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode72);
        org.jboss.dmr.ModelNode modelNode74 = modelNode59.set(property73);
        org.jboss.dmr.ModelNode modelNode76 = modelNode59.set(false);
        boolean boolean77 = modelNode76.isProtected();
        org.jboss.dmr.ModelType modelType79 = org.jboss.dmr.ModelType.PROPERTY;
        char char80 = modelType79.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue81 = org.jboss.dmr.TypeModelValue.of(modelType79);
        char char82 = modelType79.getTypeChar();
        org.jboss.dmr.ModelNode modelNode83 = modelNode76.set("rO0ABXQAByJbOTdMXSI=", modelType79);
        org.jboss.dmr.stream.ModelWriter modelWriter84 = modelWriter53.writeType(modelType79);
        org.jboss.dmr.stream.ModelWriter modelWriter86 = modelWriter84.writeBoolean(true);
        objectModelValue8.write(modelWriter86);
        java.lang.String str88 = objectModelValue8.asString();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + modelType23 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType23.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str31, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory41);
        org.junit.Assert.assertNotNull(modelReader46);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(modelWriter53);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "true" + "'", str57, "true");
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str65, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList66);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertTrue("'" + modelType70 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType70.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char71 + "' != '" + 'p' + "'", char71 == 'p');
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + modelType79 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType79.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + 'p' + "'", char80 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + 'p' + "'", char82 == 'p');
        org.junit.Assert.assertNotNull(modelNode83);
        org.junit.Assert.assertNotNull(modelWriter84);
        org.junit.Assert.assertNotNull(modelWriter86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "{}" + "'", str88, "{}");
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression14 = expressionValue13.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str17 = expressionValue16.toString();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        boolean boolean24 = expressionValue16.equals((java.lang.Object) property23);
        boolean boolean25 = expressionValue13.equals(expressionValue16);
        boolean boolean26 = expressionValue8.equals((java.lang.Object) boolean25);
        org.jboss.dmr.ValueExpression valueExpression27 = expressionValue8.asExpression();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode(valueExpression27);
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4", "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode35 = modelNode34.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue36 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode37 = objectModelValue36.asObject();
        java.util.Set<java.lang.String> strSet38 = objectModelValue36.getKeys();
        boolean boolean40 = objectModelValue36.has((int) 'a');
        boolean boolean42 = objectModelValue36.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue43 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode44 = objectModelValue43.asObject();
        java.util.Set<java.lang.String> strSet45 = objectModelValue43.getKeys();
        boolean boolean47 = objectModelValue43.has((int) 'a');
        boolean boolean48 = objectModelValue36.equals(objectModelValue43);
        org.jboss.dmr.ModelNode modelNode49 = objectModelValue43.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList50 = objectModelValue43.asList();
        org.jboss.dmr.ModelNode modelNode51 = modelNode34.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList50);
        org.jboss.dmr.Property property53 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode34, true);
        org.jboss.dmr.Property property54 = property53.clone();
        org.jboss.dmr.ModelNode modelNode55 = modelNode31.set(property54);
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.set("hi!", 0.0d);
        java.lang.String str61 = modelNode57.toString();
        org.jboss.dmr.ModelNode modelNode62 = modelNode57.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode64 = modelNode57.set(100);
        org.jboss.dmr.ModelNode modelNode67 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode69 = modelNode67.set((int) '#');
        org.jboss.dmr.ModelNode modelNode70 = modelNode57.setNoCopy("EXPRESSION_VALUE", modelNode69);
        org.jboss.dmr.ModelNode modelNode71 = modelNode70.resolve();
        org.jboss.dmr.ModelType modelType72 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode73 = new org.jboss.dmr.ModelNode(modelType72);
        org.jboss.dmr.ModelNode modelNode75 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode78 = modelNode75.set("hi!", 0.0d);
        org.jboss.dmr.Property property79 = new org.jboss.dmr.Property("", modelNode78);
        org.jboss.dmr.ModelNode modelNode80 = modelNode73.set(property79);
        org.jboss.dmr.PropertyModelValue propertyModelValue81 = new org.jboss.dmr.PropertyModelValue(property79);
        org.jboss.dmr.PropertyModelValue propertyModelValue82 = new org.jboss.dmr.PropertyModelValue(property79);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList83 = propertyModelValue82.asList();
        org.jboss.dmr.ModelNode modelNode84 = modelNode71.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList83);
        org.jboss.dmr.IntModelValue intModelValue87 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str88 = intModelValue87.asString();
        double double90 = intModelValue87.asDouble((double) 2);
        java.math.BigDecimal bigDecimal91 = intModelValue87.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode92 = modelNode84.add("(\"hi!\" => 0.0)", bigDecimal91);
        org.jboss.dmr.ModelNode modelNode93 = modelNode31.set("\"{\n    \\\"EXPRESSION_VALUE\\\" : 35\n}\"", bigDecimal91);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "expression \"hi!\"" + "'", str17, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNodeList50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(\"hi!\" => 0.0)" + "'", str61, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertTrue("'" + modelType72 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType72.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertNotNull(modelNodeList83);
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "32" + "'", str88, "32");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 32.0d + "'", double90 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal91);
        org.junit.Assert.assertNotNull(modelNode92);
        org.junit.Assert.assertNotNull(modelNode93);
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        byte[] byteArray21 = org.jboss.dmr.Base64.decode("true");
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int26 = inputStream18.read(byteArray21, (int) 'l', 0);
        org.jboss.dmr.stream.ModelReader modelReader27 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        org.jboss.dmr.LongModelValue longModelValue29 = new org.jboss.dmr.LongModelValue((-1L));
        long long31 = longModelValue29.asLong((long) (byte) -1);
        boolean boolean33 = longModelValue29.asBoolean(false);
        java.io.OutputStream outputStream34 = null;
        org.jboss.dmr.Base64.OutputStream outputStream35 = new org.jboss.dmr.Base64.OutputStream(outputStream34);
        outputStream35.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream39 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream37, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream40 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream39);
        outputStream40.resumeEncoding();
        boolean boolean42 = longModelValue29.equals((java.lang.Object) outputStream40);
        org.jboss.dmr.Base64.OutputStream outputStream44 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40, (int) (short) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter45 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream40);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory47 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory49 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream50 = null;
        org.jboss.dmr.Base64.InputStream inputStream52 = new org.jboss.dmr.Base64.InputStream(inputStream50, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue54 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str55 = longModelValue54.asString();
        byte[] byteArray56 = longModelValue54.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue57 = new org.jboss.dmr.BytesModelValue(byteArray56);
        int int60 = inputStream52.read(byteArray56, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream62 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream52, (-1));
        org.jboss.dmr.stream.ModelReader modelReader63 = modelStreamFactory49.newModelReader((java.io.InputStream) inputStream62);
        java.io.InputStream inputStream64 = null;
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream(inputStream64, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream67 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream66);
        org.jboss.dmr.Base64.InputStream inputStream68 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream66);
        org.jboss.dmr.stream.ModelReader modelReader69 = modelStreamFactory49.newModelReader((java.io.InputStream) inputStream66);
        java.io.InputStream inputStream70 = null;
        org.jboss.dmr.Base64.InputStream inputStream72 = new org.jboss.dmr.Base64.InputStream(inputStream70, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue74 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str75 = longModelValue74.asString();
        byte[] byteArray76 = longModelValue74.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue77 = new org.jboss.dmr.BytesModelValue(byteArray76);
        int int80 = inputStream72.read(byteArray76, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream82 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream72, (-1));
        org.jboss.dmr.Base64.InputStream inputStream84 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream72, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream85 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream84);
        org.jboss.dmr.stream.ModelReader modelReader86 = modelStreamFactory49.newModelReader((java.io.InputStream) inputStream84);
        org.jboss.dmr.stream.ModelReader modelReader87 = modelStreamFactory47.newModelReader((java.io.InputStream) inputStream84);
        java.io.OutputStream outputStream88 = null;
        org.jboss.dmr.Base64.OutputStream outputStream89 = new org.jboss.dmr.Base64.OutputStream(outputStream88);
        outputStream89.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream91 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream89);
        org.jboss.dmr.Base64.OutputStream outputStream92 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream91);
        outputStream92.flushBase64();
        outputStream92.flushBase64();
        outputStream92.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter96 = modelStreamFactory47.newModelWriter((java.io.OutputStream) outputStream92);
        org.jboss.dmr.stream.ModelWriter modelWriter97 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream92);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter98 = modelWriter97.writePropertyEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting OBJECT_START or LIST_START or PROPERTY_START or STRING or EXPRESSION or BYTES or NUMBER or BOOLEAN or TYPE or UNDEFINED");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(modelReader27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(modelWriter45);
        org.junit.Assert.assertNotNull(modelStreamFactory47);
        org.junit.Assert.assertNotNull(modelStreamFactory49);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(modelReader63);
        org.junit.Assert.assertNotNull(modelReader69);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(modelReader86);
        org.junit.Assert.assertNotNull(modelReader87);
        org.junit.Assert.assertNotNull(modelWriter96);
        org.junit.Assert.assertNotNull(modelWriter97);
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList9 = modelNode8.asList();
        org.jboss.dmr.ListModelValue listModelValue10 = new org.jboss.dmr.ListModelValue(modelNodeList9);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue10);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set("true");
        byte[] byteArray14 = modelNode11.asBytesOrNull();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = inputStream2.read(byteArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNodeList9);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[116, 114, 117, 101]");
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long3 = modelNode2.asLong();
        org.jboss.dmr.ValueExpression valueExpression4 = modelNode2.asExpression();
        java.math.BigDecimal bigDecimal5 = valueExpression4.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long8 = booleanModelValue7.asLong();
        org.jboss.dmr.ValueExpression valueExpression9 = booleanModelValue7.asExpression();
        boolean boolean11 = valueExpression9.equals((java.lang.Object) 'p');
        boolean boolean12 = valueExpression4.equals(valueExpression9);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode(valueExpression4);
        org.jboss.dmr.Property property15 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode13, false);
        org.jboss.dmr.ModelNode modelNode18 = modelNode13.set("rO0ABXQAUXJPMEFCWE55QUJkdmNtY3VhbUp2YzNNdVpHMXlMazF2WkdWc1RtOWtaUnd0b1VTZG80\nNC9EQUFBZUhCM0RIQUFBMmhwSVdVQUEyaHAKSVhnPQ==", 0L);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.setExpression("hi!", "hi!");
        java.lang.String str24 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode20);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode20.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode27 = modelNode20.set((double) 0);
        boolean boolean28 = modelNode20.isProtected();
        boolean boolean30 = modelNode20.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode33 = modelNode20.set("hi!", (long) (short) 100);
        org.jboss.dmr.ModelNode modelNode34 = modelNode13.set("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")", modelNode20);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray35 = modelNode13.asBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str24, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode34);
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("35");
        boolean boolean3 = stringModelValue1.has(52);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        java.lang.String str19 = listModelValue18.asString();
        long long20 = listModelValue18.asLong();
        int int22 = listModelValue18.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue23 = listModelValue18.protect();
        boolean boolean25 = listModelValue18.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue26 = listModelValue18.resolve();
        boolean boolean27 = listModelValue18.asBoolean();
        java.util.List<org.jboss.dmr.Property> propertyList28 = listModelValue18.asPropertyList();
        boolean boolean29 = listModelValue5.equals((java.lang.Object) listModelValue18);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode31 = listModelValue18.getChild((int) 'l');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str19, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(modelValue26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(propertyList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("{\n    \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : {\n        \"EXPRESSION_VALUE\" : \"true\"\n    }\n}");
        // The following exception was thrown during execution in test generation
        try {
            double double3 = stringModelValue1.asDouble((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"{?    \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : {?        \"EXPRESSION_VALUE\" : \"true\"?    }?}\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        org.jboss.dmr.BooleanModelValue booleanModelValue19 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger20 = booleanModelValue19.asBigInteger();
        byte[] byteArray21 = booleanModelValue19.asBytes();
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "1L");
        boolean boolean25 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "[(\"hi!\" => 0.0)]");
        outputStream17.write(byteArray21);
        outputStream17.write((int) (short) 0);
        outputStream17.resumeEncoding();
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream17);
        java.io.InputStream inputStream31 = null;
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream(inputStream31, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream34 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream33);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream34, 0);
        org.jboss.dmr.stream.ModelReader modelReader37 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream34);
        java.io.InputStream inputStream38 = null;
        org.jboss.dmr.Base64.InputStream inputStream40 = new org.jboss.dmr.Base64.InputStream(inputStream38, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream41 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream40);
        org.jboss.dmr.Base64.InputStream inputStream43 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream41, 0);
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream43, (int) (byte) 100);
        org.jboss.dmr.Base64.InputStream inputStream46 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream43);
        java.nio.charset.Charset charset47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelReader modelReader48 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream46, charset47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(booleanModelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelReader37);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str5 = longModelValue4.asString();
        byte[] byteArray6 = longModelValue4.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue7 = new org.jboss.dmr.BytesModelValue(byteArray6);
        int int10 = inputStream2.read(byteArray6, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2, (-1));
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream12, 1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream12, (int) 'u');
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        int int6 = objectModelValue0.asInt(10);
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue0.copy();
        boolean boolean9 = objectModelValue0.has((int) '4');
        long long10 = objectModelValue0.asLong();
        boolean boolean11 = objectModelValue0.asBoolean();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = listModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        boolean boolean16 = listModelValue5.equals(listModelValue13);
        boolean boolean17 = listModelValue5.asBoolean();
        int int19 = listModelValue5.asInt(8);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue5.resolve();
        long long21 = listModelValue5.asLong();
        org.jboss.dmr.ModelValue modelValue22 = listModelValue5.copy();
        long long24 = listModelValue5.asLong(10L);
        java.io.DataOutput dataOutput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.writeExternal(dataOutput25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long10 = booleanModelValue9.asLong();
        org.jboss.dmr.ValueExpression valueExpression11 = booleanModelValue9.asExpression();
        java.lang.String str12 = valueExpression11.toString();
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression15 = expressionValue14.asExpression();
        boolean boolean16 = valueExpression11.equals(valueExpression15);
        java.lang.String str17 = valueExpression15.resolveString();
        org.jboss.dmr.ModelNode modelNode18 = modelNode3.set("Expression \"1\"", valueExpression15);
        java.lang.String str19 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode("(\"hi!\" => 0.0)");
        java.io.OutputStream outputStream22 = null;
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream(outputStream22);
        outputStream23.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream25 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream23);
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream25);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue31 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger32 = booleanModelValue31.asBigInteger();
        byte[] byteArray33 = booleanModelValue31.asBytes();
        org.jboss.dmr.ModelNode modelNode34 = modelNode28.set("expression \"hi!\"", byteArray33);
        outputStream25.write(byteArray33);
        org.jboss.dmr.ModelNode modelNode36 = modelNode21.set(byteArray33);
        java.math.BigInteger bigInteger37 = modelNode36.asBigIntegerOrNull();
        org.jboss.dmr.ModelNode modelNode38 = modelNode18.set(bigInteger37);
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList44 = modelNode43.asList();
        org.jboss.dmr.ModelNode modelNode47 = modelNode43.setExpression("hi!", "(\"hi!\" => 0.0)");
        org.jboss.dmr.Property property48 = modelNode43.asProperty();
        org.jboss.dmr.ModelNode modelNode51 = modelNode43.set("rO0ABXNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRM\nZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFn\nbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7/\n///+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAABAXg=", (double) 112L);
        org.jboss.dmr.ModelNode modelNode52 = modelNode18.setNoCopy("[]", modelNode43);
        org.jboss.dmr.ModelNode modelNode53 = modelNode18.clone();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Expression \"true\"" + "'", str12, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==" + "'", str19, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==");
        org.junit.Assert.assertNotNull(booleanModelValue31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNodeList44);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertNotNull(modelNode53);
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList10 = modelNode9.asList();
        org.jboss.dmr.ListModelValue listModelValue11 = new org.jboss.dmr.ListModelValue(modelNodeList10);
        java.lang.String str12 = listModelValue11.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = listModelValue11.asList();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = modelNode17.asList();
        org.jboss.dmr.ListModelValue listModelValue19 = new org.jboss.dmr.ListModelValue(modelNodeList18);
        java.lang.String str20 = listModelValue19.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = listModelValue19.asList();
        boolean boolean22 = listModelValue11.equals(listModelValue19);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        org.jboss.dmr.ListModelValue listModelValue28 = new org.jboss.dmr.ListModelValue(modelNodeList27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue28);
        org.jboss.dmr.ModelValue modelValue30 = listModelValue28.resolve();
        int int32 = listModelValue28.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList33 = listModelValue28.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList34 = listModelValue28.asPropertyList();
        org.jboss.dmr.ModelValue modelValue35 = listModelValue28.copy();
        boolean boolean36 = listModelValue19.equals(listModelValue28);
        java.lang.String str37 = listModelValue19.asString();
        boolean boolean38 = listModelValue5.equals(listModelValue19);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode40 = listModelValue19.removeChild((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [-1]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNodeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str20, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(propertyList33);
        org.junit.Assert.assertNotNull(propertyList34);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str37, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isBytes();
        boolean boolean24 = modelReader15.isDouble();
        boolean boolean25 = modelReader15.isBigInteger();
        boolean boolean26 = modelReader15.hasNext();
        boolean boolean27 = modelReader15.isBigDecimal();
        boolean boolean28 = modelReader15.isObjectEnd();
        boolean boolean29 = modelReader15.isUndefined();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger30 = modelReader15.getBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't big integer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        // The following exception was thrown during execution in test generation
        try {
            outputStream1.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        org.jboss.dmr.ObjectModelValue objectModelValue6 = null;
        boolean boolean7 = objectModelValue4.equals(objectModelValue6);
        boolean boolean8 = objectModelValue0.equals(objectModelValue6);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue13 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger14 = booleanModelValue13.asBigInteger();
        byte[] byteArray15 = booleanModelValue13.asBytes();
        org.jboss.dmr.ModelNode modelNode16 = modelNode10.set("expression \"hi!\"", byteArray15);
        org.jboss.dmr.ModelNode modelNode17 = modelNode16.clear();
        int int19 = modelNode16.asInt((int) 'p');
        java.lang.Boolean boolean20 = modelNode16.asBooleanOrNull();
        boolean boolean21 = objectModelValue0.equals((java.lang.Object) modelNode16);
        org.jboss.dmr.ModelNode modelNode23 = objectModelValue0.getChild("\"\\\"AAAAIw==\\\"\"");
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanModelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 112 + "'", int19 == 112);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("1");
        java.util.Set<java.lang.String> strSet5 = objectModelValue0.getKeys();
        java.lang.String str6 = objectModelValue0.toString();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        org.jboss.dmr.ModelType modelType5 = org.jboss.dmr.ModelType.STRING;
        boolean boolean6 = booleanModelValue1.equals((java.lang.Object) modelType5);
        long long8 = booleanModelValue1.asLong((long) (short) 10);
        int int10 = booleanModelValue1.asInt((int) (byte) 10);
        int int12 = booleanModelValue1.asInt((int) (byte) -1);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType5.equals(org.jboss.dmr.ModelType.STRING));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("PROPERTY", false);
        org.jboss.dmr.ModelNode modelNode5 = modelNode3.set((double) (byte) 10);
        org.jboss.dmr.BooleanModelValue booleanModelValue8 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray9 = booleanModelValue8.asBytes();
        java.lang.String str10 = booleanModelValue8.asString();
        int int11 = booleanModelValue8.asInt();
        long long12 = booleanModelValue8.asLong();
        boolean boolean14 = booleanModelValue8.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger15 = booleanModelValue8.asBigInteger();
        org.jboss.dmr.ModelNode modelNode16 = modelNode3.set("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", bigInteger15);
        org.jboss.dmr.LongModelValue longModelValue19 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str20 = longModelValue19.asString();
        double double22 = longModelValue19.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression23 = longModelValue19.asExpression();
        byte[] byteArray24 = longModelValue19.asBytes();
        java.lang.String str25 = org.jboss.dmr.Base64.encodeBytes(byteArray24);
        org.jboss.dmr.BytesModelValue bytesModelValue26 = new org.jboss.dmr.BytesModelValue(byteArray24);
        java.math.BigInteger bigInteger27 = bytesModelValue26.asBigInteger();
        org.jboss.dmr.ModelNode modelNode28 = modelNode3.set("Expression \"0.0\"", bigInteger27);
        org.jboss.dmr.Validation.validate(modelNode3, "(\"TYPE_MODEL_VALUE\" => bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n})");
        org.jboss.dmr.BooleanModelValue booleanModelValue32 = org.jboss.dmr.BooleanModelValue.TRUE;
        java.math.BigInteger bigInteger33 = booleanModelValue32.asBigInteger();
        org.jboss.dmr.ModelType modelType34 = booleanModelValue32.getType();
        org.jboss.dmr.ModelNode modelNode35 = modelNode3.set("{ \"rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BgAEMTAu\\nMHg=\" : 32 }", modelType34);
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(booleanModelValue8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "true" + "'", str10, "true");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AAAAAAAAAAE=" + "'", str25, "AAAAAAAAAAE=");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(booleanModelValue32);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertTrue("'" + modelType34 + "' != '" + org.jboss.dmr.ModelType.BOOLEAN + "'", modelType34.equals(org.jboss.dmr.ModelType.BOOLEAN));
        org.junit.Assert.assertNotNull(modelNode35);
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        java.lang.String str10 = bigDecimalModelValue7.asString();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue7.asExpression();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode(valueExpression11);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str16 = modelNode14.asString("true");
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.set("expression \"hi!\"", (int) (short) -1);
        java.util.Set<java.lang.String> strSet20 = modelNode19.keys();
        boolean boolean21 = valueExpression11.equals((java.lang.Object) strSet20);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0" + "'", str10, "1.0");
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "10" + "'", str16, "10");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asList();
        org.jboss.dmr.ListModelValue listModelValue6 = new org.jboss.dmr.ListModelValue(modelNodeList5);
        java.lang.String str7 = listModelValue6.asString();
        long long8 = listModelValue6.asLong();
        int int10 = listModelValue6.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue11 = listModelValue6.protect();
        org.jboss.dmr.ModelValue modelValue12 = listModelValue6.protect();
        long long14 = listModelValue6.asLong((long) 'Z');
        org.jboss.dmr.ModelNode modelNode15 = listModelValue6.asObject();
        org.jboss.dmr.Property property16 = new org.jboss.dmr.Property("bytes { 0x28, 0x22, 0x22, 0x20, 0x3d, 0x3e, 0x20, 0x28, 0x22, 0x68, 0x69, 0x21, 0x22, 0x20, 0x3d, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29 }", modelNode15);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str7, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(modelNode15);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode22 = modelNode7.setExpression("\"(\\\"hi!\\\" => 0.0)\"", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelNode modelNode25 = modelNode7.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", (double) 0.0f);
        org.jboss.dmr.DoubleModelValue doubleModelValue28 = new org.jboss.dmr.DoubleModelValue((double) 100);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.setExpression("hi!", "hi!");
        java.lang.String str33 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode29);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList34 = modelNode29.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode36 = modelNode29.set((double) 0);
        boolean boolean37 = modelNode29.isProtected();
        java.math.BigInteger bigInteger38 = modelNode29.asBigIntegerOrNull();
        boolean boolean39 = doubleModelValue28.equals((java.lang.Object) modelNode29);
        java.lang.String str40 = doubleModelValue28.toString();
        org.jboss.dmr.ModelType modelType41 = doubleModelValue28.getType();
        org.jboss.dmr.ModelNode modelNode42 = modelNode25.set("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))", modelType41);
        java.io.DataInput dataInput43 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode42.readExternal(dataInput43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str33, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList34);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100.0" + "'", str40, "100.0");
        org.junit.Assert.assertTrue("'" + modelType41 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType41.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertNotNull(modelNode42);
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.String> strSet11 = longModelValue1.getKeys();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.Set<java.lang.String> strSet16 = propertyModelValue15.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList17 = propertyModelValue15.asPropertyList();
        java.util.Set<java.lang.String> strSet18 = propertyModelValue15.getKeys();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        boolean boolean31 = modelNode28.equals((java.lang.Object) 100L);
        boolean boolean32 = modelNode20.equals(modelNode28);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        org.jboss.dmr.Property property38 = new org.jboss.dmr.Property("", modelNode37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.get(strArray39);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int42 = modelNode41.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.setExpression("hi!", "hi!");
        java.lang.String str47 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode43);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList48 = modelNode43.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode49 = modelNode41.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode40.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode51 = modelNode28.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode53 = modelNode28.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelType modelType54 = modelNode53.getType();
        byte[] byteArray57 = org.jboss.dmr.Base64.decode("true");
        org.jboss.dmr.ModelNode modelNode58 = modelNode53.set("\"(\\\"hi!\\\" => 0.0)\"", byteArray57);
        org.jboss.dmr.PropertyModelValue propertyModelValue59 = new org.jboss.dmr.PropertyModelValue("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode58);
        boolean boolean60 = propertyModelValue15.equals(propertyModelValue59);
        boolean boolean62 = propertyModelValue59.has("32");
        java.util.Set<java.lang.String> strSet63 = propertyModelValue59.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList64 = propertyModelValue59.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str47, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertTrue("'" + modelType54 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType54.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-74, -69, -98]");
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(propertyList64);
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        java.lang.String str2 = stringModelValue1.asString();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = stringModelValue1.asLong((long) 'e');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str2, "(\"\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        int int15 = bigIntegerModelValue11.asInt();
        java.lang.String str16 = bigIntegerModelValue11.asString();
        long long18 = bigIntegerModelValue11.asLong(0L);
        org.jboss.dmr.ValueExpression valueExpression19 = bigIntegerModelValue11.asExpression();
        long long20 = valueExpression19.resolveLong();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        java.lang.String str9 = org.jboss.dmr.Base64.encodeBytes(byteArray6, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = org.jboss.dmr.Base64.encodeBytes(byteArray6, (int) (byte) 0, (int) 'b', 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AQ==" + "'", str9, "AQ==");
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.clear();
        double double10 = modelNode7.asDouble((double) ' ');
        org.jboss.dmr.ModelNode modelNode11 = modelNode7.addEmptyList();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asListOrEmpty();
        org.jboss.dmr.ListModelValue listModelValue17 = new org.jboss.dmr.ListModelValue(modelNodeList16);
        org.jboss.dmr.ModelNode modelNode18 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList16);
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 32.0d + "'", double10 == 32.0d);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelNode18);
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ExpressionValue expressionValue12 = new org.jboss.dmr.ExpressionValue("{}");
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("false");
        org.jboss.dmr.IntModelValue intModelValue16 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long18 = intModelValue16.asLong((long) 'b');
        java.lang.String str19 = intModelValue16.asString();
        java.math.BigInteger bigInteger20 = intModelValue16.asBigInteger();
        long long22 = intModelValue16.asLong((long) ' ');
        boolean boolean23 = expressionValue14.equals((java.lang.Object) long22);
        java.lang.String str24 = expressionValue14.asString();
        boolean boolean25 = expressionValue12.equals(expressionValue14);
        java.lang.String str26 = expressionValue14.toString();
        boolean boolean27 = expressionValue8.equals(expressionValue14);
        org.jboss.dmr.ModelValue modelValue28 = expressionValue8.resolve();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        java.lang.String str35 = modelNode32.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue38 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long39 = booleanModelValue38.asLong();
        org.jboss.dmr.ValueExpression valueExpression40 = booleanModelValue38.asExpression();
        java.lang.String str41 = valueExpression40.toString();
        org.jboss.dmr.ExpressionValue expressionValue43 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression44 = expressionValue43.asExpression();
        boolean boolean45 = valueExpression40.equals(valueExpression44);
        java.lang.String str46 = valueExpression44.resolveString();
        org.jboss.dmr.ModelNode modelNode47 = modelNode32.set("Expression \"1\"", valueExpression44);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList52 = modelNode51.asList();
        org.jboss.dmr.ModelNode modelNode55 = modelNode51.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType56 = modelNode51.getType();
        org.jboss.dmr.ModelNode modelNode57 = modelNode47.set(modelType56);
        java.lang.String str58 = modelNode57.asString();
        boolean boolean60 = modelNode57.hasDefined(52);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory62 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream63 = null;
        org.jboss.dmr.Base64.InputStream inputStream65 = new org.jboss.dmr.Base64.InputStream(inputStream63, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream65);
        org.jboss.dmr.stream.ModelReader modelReader67 = modelStreamFactory62.newModelReader((java.io.InputStream) inputStream66);
        java.io.OutputStream outputStream68 = null;
        org.jboss.dmr.Base64.OutputStream outputStream69 = new org.jboss.dmr.Base64.OutputStream(outputStream68);
        org.jboss.dmr.Base64.OutputStream outputStream70 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream69);
        outputStream69.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter73 = modelStreamFactory62.newModelWriter((java.io.OutputStream) outputStream69);
        org.jboss.dmr.stream.ModelWriter modelWriter74 = modelWriter73.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue76 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray77 = intModelValue76.asBytes();
        int int79 = intModelValue76.asInt(0);
        java.math.BigInteger bigInteger80 = intModelValue76.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter81 = modelWriter74.writeBigInteger(bigInteger80);
        byte[] byteArray82 = new byte[] {};
        java.lang.String str84 = org.jboss.dmr.Base64.encodeBytes(byteArray82, (int) '#');
        org.jboss.dmr.stream.ModelWriter modelWriter85 = modelWriter74.writeBytes(byteArray82);
        modelNode57.write(modelWriter74);
        expressionValue8.write(modelWriter74);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter88 = modelWriter74.writePropertyEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting ',' or LIST_END");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32" + "'", str19, "32");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "false" + "'", str24, "false");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "expression \"false\"" + "'", str26, "expression \"false\"");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(modelValue28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(\"hi!\" => 0.0)" + "'", str35, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(valueExpression40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Expression \"true\"" + "'", str41, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNodeList52);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertTrue("'" + modelType56 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType56.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PROPERTY" + "'", str58, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory62);
        org.junit.Assert.assertNotNull(modelReader67);
        org.junit.Assert.assertNotNull(modelWriter73);
        org.junit.Assert.assertNotNull(modelWriter74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertNotNull(modelWriter81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "H4sIAAAAAAAAAAMAAAAAAAAAAAA=" + "'", str84, "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        org.junit.Assert.assertNotNull(modelWriter85);
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        java.lang.String str16 = valueExpression14.getExpressionString();
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue18 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal17);
        boolean boolean19 = bigDecimalModelValue18.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression20 = bigDecimalModelValue18.asExpression();
        int int21 = bigDecimalModelValue18.asInt();
        long long22 = bigDecimalModelValue18.asLong();
        long long24 = bigDecimalModelValue18.asLong(32L);
        boolean boolean25 = bigDecimalModelValue7.equals(bigDecimalModelValue18);
        double double27 = bigDecimalModelValue7.asDouble((double) (short) -1);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long30 = modelNode29.asLong();
        org.jboss.dmr.ValueExpression valueExpression31 = modelNode29.asExpression();
        java.math.BigDecimal bigDecimal32 = valueExpression31.resolveBigDecimal();
        java.lang.String str33 = valueExpression31.getExpressionString();
        java.math.BigDecimal bigDecimal34 = valueExpression31.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue35 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal34);
        boolean boolean36 = bigDecimalModelValue35.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression37 = bigDecimalModelValue35.asExpression();
        int int38 = bigDecimalModelValue35.asInt();
        long long39 = bigDecimalModelValue35.asLong();
        long long41 = bigDecimalModelValue35.asLong(32L);
        boolean boolean42 = bigDecimalModelValue7.equals(bigDecimalModelValue35);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory44 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream45 = null;
        org.jboss.dmr.Base64.InputStream inputStream47 = new org.jboss.dmr.Base64.InputStream(inputStream45, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue49 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str50 = longModelValue49.asString();
        byte[] byteArray51 = longModelValue49.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue52 = new org.jboss.dmr.BytesModelValue(byteArray51);
        int int55 = inputStream47.read(byteArray51, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream57 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream47, (-1));
        org.jboss.dmr.stream.ModelReader modelReader58 = modelStreamFactory44.newModelReader((java.io.InputStream) inputStream57);
        java.io.InputStream inputStream59 = null;
        org.jboss.dmr.Base64.InputStream inputStream61 = new org.jboss.dmr.Base64.InputStream(inputStream59, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream62 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream61);
        org.jboss.dmr.Base64.InputStream inputStream63 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream61);
        org.jboss.dmr.stream.ModelReader modelReader64 = modelStreamFactory44.newModelReader((java.io.InputStream) inputStream61);
        java.io.InputStream inputStream65 = null;
        org.jboss.dmr.Base64.InputStream inputStream67 = new org.jboss.dmr.Base64.InputStream(inputStream65, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream68 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream67);
        org.jboss.dmr.stream.ModelReader modelReader69 = modelStreamFactory44.newModelReader((java.io.InputStream) inputStream67);
        java.io.OutputStream outputStream70 = null;
        org.jboss.dmr.Base64.OutputStream outputStream71 = new org.jboss.dmr.Base64.OutputStream(outputStream70);
        outputStream71.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream73 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream71);
        org.jboss.dmr.Base64.OutputStream outputStream74 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream73);
        outputStream73.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream76 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream73);
        org.jboss.dmr.Base64.OutputStream outputStream77 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream73);
        org.jboss.dmr.stream.ModelWriter modelWriter78 = modelStreamFactory44.newModelWriter((java.io.OutputStream) outputStream77);
        bigDecimalModelValue35.write(modelWriter78);
        org.jboss.dmr.ModelNode modelNode81 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long82 = modelNode81.asLong();
        org.jboss.dmr.ValueExpression valueExpression83 = modelNode81.asExpression();
        java.math.BigDecimal bigDecimal84 = valueExpression83.resolveBigDecimal();
        java.lang.String str85 = valueExpression83.getExpressionString();
        java.math.BigDecimal bigDecimal86 = valueExpression83.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue87 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal86);
        int int89 = bigDecimalModelValue87.asInt(0);
        boolean boolean90 = bigDecimalModelValue87.asBoolean();
        boolean boolean91 = bigDecimalModelValue35.equals(bigDecimalModelValue87);
        java.math.BigInteger bigInteger92 = bigDecimalModelValue87.asBigInteger();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0" + "'", str16, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1.0" + "'", str33, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(valueExpression37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory44);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(modelReader58);
        org.junit.Assert.assertNotNull(modelReader64);
        org.junit.Assert.assertNotNull(modelReader69);
        org.junit.Assert.assertNotNull(modelWriter78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(valueExpression83);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1.0" + "'", str85, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(bigInteger92);
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        byte[] byteArray3 = booleanModelValue1.asBytes();
        boolean boolean4 = booleanModelValue1.asBoolean();
        byte[] byteArray5 = booleanModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue6 = new org.jboss.dmr.BytesModelValue(byteArray5);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long9 = modelNode8.asLong();
        org.jboss.dmr.ValueExpression valueExpression10 = modelNode8.asExpression();
        java.math.BigDecimal bigDecimal11 = valueExpression10.resolveBigDecimal();
        java.lang.String str12 = valueExpression10.getExpressionString();
        java.math.BigDecimal bigDecimal13 = valueExpression10.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue14 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal13);
        boolean boolean15 = bigDecimalModelValue14.asBoolean();
        long long16 = bigDecimalModelValue14.asLong();
        java.lang.String str17 = bigDecimalModelValue14.asString();
        org.jboss.dmr.ValueExpression valueExpression18 = bigDecimalModelValue14.asExpression();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode(valueExpression18);
        boolean boolean20 = bytesModelValue6.equals((java.lang.Object) modelNode19);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0" + "'", str12, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0" + "'", str17, "1.0");
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        boolean boolean4 = objectModelValue0.equals((java.lang.Object) "-1");
        java.lang.Object obj5 = null;
        boolean boolean6 = objectModelValue0.equals(obj5);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelValue modelValue11 = listModelValue5.clone();
        int int12 = listModelValue5.asInt();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = listModelValue5.getChild(8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ExpressionValue expressionValue12 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str13 = expressionValue12.asString();
        boolean boolean14 = expressionValue1.equals(expressionValue12);
        java.lang.String str15 = expressionValue12.asString();
        org.jboss.dmr.ExpressionValue expressionValue17 = new org.jboss.dmr.ExpressionValue("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelValue modelValue18 = expressionValue17.resolve();
        boolean boolean19 = expressionValue12.equals(expressionValue17);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long3 = booleanModelValue1.asLong((long) (byte) 1);
        boolean boolean5 = booleanModelValue1.has("H4sIAAAAAAAAANv/gQEMALshig4IAAAA");
        boolean boolean6 = booleanModelValue1.asBoolean();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        int int6 = objectModelValue0.asInt(10);
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue0.protect();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(modelValue7);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        java.lang.String str1 = org.jboss.dmr.ValueExpression.quote("[10L]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[10L]" + "'", str1, "[10L]");
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51\nbWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAg==");
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        boolean boolean14 = typeModelValue10.equals(typeModelValue13);
        java.lang.String str15 = typeModelValue13.asString();
        boolean boolean17 = typeModelValue13.asBoolean(true);
        boolean boolean18 = typeModelValue5.equals(typeModelValue13);
        org.jboss.dmr.ValueExpression valueExpression19 = typeModelValue13.asExpression();
        org.jboss.dmr.ModelType modelType20 = org.jboss.dmr.ModelType.PROPERTY;
        char char21 = modelType20.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue22 = org.jboss.dmr.TypeModelValue.of(modelType20);
        org.jboss.dmr.ModelType modelType23 = org.jboss.dmr.ModelType.PROPERTY;
        char char24 = modelType23.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue25 = org.jboss.dmr.TypeModelValue.of(modelType23);
        boolean boolean26 = typeModelValue22.equals(typeModelValue25);
        boolean boolean27 = typeModelValue13.equals(typeModelValue22);
        org.jboss.dmr.ValueExpression valueExpression28 = typeModelValue22.asExpression();
        org.jboss.dmr.BooleanModelValue booleanModelValue30 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger31 = booleanModelValue30.asBigInteger();
        byte[] byteArray32 = booleanModelValue30.asBytes();
        boolean boolean33 = booleanModelValue30.asBoolean();
        byte[] byteArray34 = booleanModelValue30.asBytes();
        org.jboss.dmr.DoubleModelValue doubleModelValue36 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long37 = doubleModelValue36.asLong();
        boolean boolean38 = doubleModelValue36.asBoolean();
        byte[] byteArray39 = doubleModelValue36.asBytes();
        java.math.BigInteger bigInteger40 = doubleModelValue36.asBigInteger();
        boolean boolean41 = booleanModelValue30.equals((java.lang.Object) bigInteger40);
        double double43 = booleanModelValue30.asDouble((double) 100L);
        org.jboss.dmr.ModelType modelType44 = org.jboss.dmr.ModelType.PROPERTY;
        char char45 = modelType44.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue46 = org.jboss.dmr.TypeModelValue.of(modelType44);
        org.jboss.dmr.ModelType modelType47 = org.jboss.dmr.ModelType.PROPERTY;
        char char48 = modelType47.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue49 = org.jboss.dmr.TypeModelValue.of(modelType47);
        boolean boolean50 = typeModelValue46.equals(typeModelValue49);
        java.lang.String str51 = typeModelValue49.asString();
        org.jboss.dmr.ModelType modelType52 = org.jboss.dmr.ModelType.PROPERTY;
        char char53 = modelType52.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue54 = org.jboss.dmr.TypeModelValue.of(modelType52);
        org.jboss.dmr.ModelType modelType55 = org.jboss.dmr.ModelType.PROPERTY;
        char char56 = modelType55.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue57 = org.jboss.dmr.TypeModelValue.of(modelType55);
        boolean boolean58 = typeModelValue54.equals(typeModelValue57);
        java.lang.String str59 = typeModelValue57.asString();
        boolean boolean61 = typeModelValue57.asBoolean(true);
        boolean boolean62 = typeModelValue49.equals(typeModelValue57);
        org.jboss.dmr.ValueExpression valueExpression63 = typeModelValue57.asExpression();
        org.jboss.dmr.ValueExpression valueExpression64 = typeModelValue57.asExpression();
        boolean boolean65 = booleanModelValue30.equals((java.lang.Object) typeModelValue57);
        java.lang.String str66 = typeModelValue57.asString();
        boolean boolean68 = typeModelValue57.asBoolean(false);
        boolean boolean69 = typeModelValue22.equals(typeModelValue57);
        org.jboss.dmr.ModelType modelType70 = typeModelValue57.asType();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PROPERTY" + "'", str15, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + modelType20 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType20.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + 'p' + "'", char21 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue22);
        org.junit.Assert.assertTrue("'" + modelType23 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType23.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char24 + "' != '" + 'p' + "'", char24 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertNotNull(booleanModelValue30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + modelType44 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType44.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + 'p' + "'", char45 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue46);
        org.junit.Assert.assertTrue("'" + modelType47 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType47.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char48 + "' != '" + 'p' + "'", char48 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PROPERTY" + "'", str51, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType52 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType52.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + 'p' + "'", char53 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue54);
        org.junit.Assert.assertTrue("'" + modelType55 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType55.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char56 + "' != '" + 'p' + "'", char56 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PROPERTY" + "'", str59, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(valueExpression63);
        org.junit.Assert.assertNotNull(valueExpression64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PROPERTY" + "'", str66, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + modelType70 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType70.equals(org.jboss.dmr.ModelType.PROPERTY));
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isUndefined();
        boolean boolean19 = modelReader15.isBytes();
        boolean boolean20 = modelReader15.isObjectEnd();
        boolean boolean21 = modelReader15.isBigDecimal();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        byte[] byteArray7 = bytesModelValue4.asBytes();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        java.lang.String str13 = bytesModelValue12.asString();
        int int14 = bytesModelValue12.asInt();
        int int15 = bytesModelValue12.asInt();
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        double double21 = bytesModelValue20.asDouble();
        boolean boolean22 = bytesModelValue12.equals(bytesModelValue20);
        byte[] byteArray23 = bytesModelValue20.asBytes();
        java.math.BigInteger bigInteger24 = bytesModelValue20.asBigInteger();
        boolean boolean25 = bytesModelValue4.equals(bytesModelValue20);
        byte[] byteArray26 = bytesModelValue20.asBytes();
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        java.lang.String str32 = bytesModelValue31.asString();
        int int33 = bytesModelValue31.asInt();
        long long35 = bytesModelValue31.asLong((long) (short) 1);
        int int36 = bytesModelValue31.asInt();
        int int37 = bytesModelValue31.asInt();
        byte[] byteArray38 = bytesModelValue31.asBytes();
        org.jboss.dmr.LongModelValue longModelValue40 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str41 = longModelValue40.asString();
        byte[] byteArray42 = longModelValue40.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue43 = new org.jboss.dmr.BytesModelValue(byteArray42);
        java.lang.String str44 = bytesModelValue43.asString();
        int int45 = bytesModelValue43.asInt();
        long long47 = bytesModelValue43.asLong((long) (short) 1);
        int int48 = bytesModelValue43.asInt();
        double double49 = bytesModelValue43.asDouble();
        boolean boolean50 = bytesModelValue31.equals(bytesModelValue43);
        boolean boolean51 = bytesModelValue20.equals(bytesModelValue31);
        int int52 = bytesModelValue20.asInt();
        org.jboss.dmr.LongModelValue longModelValue54 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str55 = longModelValue54.asString();
        byte[] byteArray56 = longModelValue54.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue57 = new org.jboss.dmr.BytesModelValue(byteArray56);
        java.lang.String str58 = bytesModelValue57.asString();
        int int59 = bytesModelValue57.asInt();
        int int61 = bytesModelValue57.asInt((int) 'a');
        java.lang.String str62 = bytesModelValue57.asString();
        long long63 = bytesModelValue57.asLong();
        java.lang.String str64 = bytesModelValue57.asString();
        boolean boolean65 = bytesModelValue20.equals(bytesModelValue57);
        int int67 = bytesModelValue20.asInt(35);
        java.io.PrintWriter printWriter68 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue20.formatAsJSON(printWriter68, (int) ' ', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str13, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str32, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str44, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4.9E-324d + "'", double49 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str58, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str62, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str64, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("TYPE_MODEL_VALUE");
        java.lang.String str2 = expressionValue1.asString();
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str5 = expressionValue4.toString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        boolean boolean12 = expressionValue4.equals((java.lang.Object) property11);
        org.jboss.dmr.ModelValue modelValue13 = expressionValue4.copy();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long16 = modelNode15.asLong();
        org.jboss.dmr.ValueExpression valueExpression17 = modelNode15.asExpression();
        java.math.BigDecimal bigDecimal18 = valueExpression17.resolveBigDecimal();
        java.lang.String str19 = valueExpression17.getExpressionString();
        java.math.BigDecimal bigDecimal20 = valueExpression17.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue21 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal20);
        int int23 = bigDecimalModelValue21.asInt(0);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode27.asList();
        org.jboss.dmr.ListModelValue listModelValue29 = new org.jboss.dmr.ListModelValue(modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue29);
        org.jboss.dmr.ModelValue modelValue31 = listModelValue29.resolve();
        int int33 = listModelValue29.asInt((int) (byte) 100);
        boolean boolean34 = bigDecimalModelValue21.equals((java.lang.Object) listModelValue29);
        java.util.List<org.jboss.dmr.Property> propertyList35 = listModelValue29.asPropertyList();
        boolean boolean36 = expressionValue4.equals((java.lang.Object) propertyList35);
        boolean boolean37 = expressionValue1.equals((java.lang.Object) boolean36);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "TYPE_MODEL_VALUE" + "'", str2, "TYPE_MODEL_VALUE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "expression \"hi!\"" + "'", str5, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0" + "'", str19, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelValue31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(propertyList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        byte[] byteArray7 = bytesModelValue4.asBytes();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        java.lang.String str13 = bytesModelValue12.asString();
        int int14 = bytesModelValue12.asInt();
        int int15 = bytesModelValue12.asInt();
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        double double21 = bytesModelValue20.asDouble();
        boolean boolean22 = bytesModelValue12.equals(bytesModelValue20);
        byte[] byteArray23 = bytesModelValue20.asBytes();
        java.math.BigInteger bigInteger24 = bytesModelValue20.asBigInteger();
        boolean boolean25 = bytesModelValue4.equals(bytesModelValue20);
        int int27 = bytesModelValue20.asInt((int) 'J');
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory29 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream30 = null;
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream(inputStream30, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream32);
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory29.newModelReader((java.io.InputStream) inputStream33);
        java.io.OutputStream outputStream35 = null;
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream(outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream36);
        outputStream36.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelStreamFactory29.newModelWriter((java.io.OutputStream) outputStream36);
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelWriter40.writeListStart();
        bytesModelValue20.write(modelWriter41);
        org.jboss.dmr.BooleanModelValue booleanModelValue44 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray45 = booleanModelValue44.asBytes();
        java.lang.String str46 = booleanModelValue44.asString();
        int int47 = booleanModelValue44.asInt();
        long long48 = booleanModelValue44.asLong();
        boolean boolean50 = booleanModelValue44.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger51 = booleanModelValue44.asBigInteger();
        java.lang.String str52 = booleanModelValue44.asString();
        byte[] byteArray53 = booleanModelValue44.asBytes();
        java.lang.String str55 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) byteArray53, 10);
        org.jboss.dmr.stream.ModelWriter modelWriter56 = modelWriter41.writeBytes(byteArray53);
        org.jboss.dmr.StringModelValue stringModelValue58 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue60 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue62 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean63 = stringModelValue60.equals(stringModelValue62);
        byte[] byteArray64 = stringModelValue62.asBytes();
        java.lang.Object obj65 = null;
        boolean boolean66 = stringModelValue62.equals(obj65);
        boolean boolean68 = stringModelValue62.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean69 = stringModelValue58.equals(stringModelValue62);
        org.jboss.dmr.ValueExpression valueExpression70 = stringModelValue58.asExpression();
        byte[] byteArray71 = stringModelValue58.asBytes();
        org.jboss.dmr.stream.ModelWriter modelWriter72 = modelWriter41.writeBytes(byteArray71);
        org.jboss.dmr.stream.ModelWriter modelWriter73 = modelWriter72.writePropertyStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter75 = modelWriter72.writeLong((long) '#');
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str13, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory29);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter41);
        org.junit.Assert.assertNotNull(booleanModelValue44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "true" + "'", str46, "true");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "true" + "'", str52, "true");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA" + "'", str55, "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.junit.Assert.assertNotNull(modelWriter56);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(valueExpression70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(modelWriter72);
        org.junit.Assert.assertNotNull(modelWriter73);
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        boolean boolean3 = typeModelValue2.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression4 = typeModelValue2.asExpression();
        org.jboss.dmr.ObjectModelValue objectModelValue5 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue5.asObject();
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue5.copy();
        java.lang.String str8 = objectModelValue5.toString();
        org.jboss.dmr.ModelValue modelValue9 = objectModelValue5.resolve();
        int int10 = objectModelValue5.asInt();
        boolean boolean12 = objectModelValue5.asBoolean(false);
        boolean boolean14 = objectModelValue5.asBoolean(true);
        boolean boolean15 = typeModelValue2.equals((java.lang.Object) objectModelValue5);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode17 = typeModelValue2.removeChild((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        java.lang.String str12 = listModelValue5.asString();
        boolean boolean13 = listModelValue5.asBoolean();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode15 = listModelValue5.removeChild(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asList();
        java.lang.String str7 = modelNode4.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue10 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long11 = booleanModelValue10.asLong();
        org.jboss.dmr.ValueExpression valueExpression12 = booleanModelValue10.asExpression();
        java.lang.String str13 = valueExpression12.toString();
        org.jboss.dmr.ExpressionValue expressionValue15 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression16 = expressionValue15.asExpression();
        boolean boolean17 = valueExpression12.equals(valueExpression16);
        java.lang.String str18 = valueExpression16.resolveString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode4.set("Expression \"1\"", valueExpression16);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList24 = modelNode23.asList();
        org.jboss.dmr.ModelNode modelNode27 = modelNode23.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType28 = modelNode23.getType();
        org.jboss.dmr.ModelNode modelNode29 = modelNode19.set(modelType28);
        org.jboss.dmr.Property property31 = new org.jboss.dmr.Property("expression \"hi!\"", modelNode19, true);
        org.jboss.dmr.ModelNode modelNode33 = modelNode19.set(0.0d);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(\"hi!\" => 0.0)" + "'", str7, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Expression \"true\"" + "'", str13, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList24);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + modelType28 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType28.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode33);
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.setEmptyList();
        org.jboss.dmr.ModelNode modelNode15 = modelNode14.add();
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList20 = modelNode19.asList();
        java.lang.String str22 = modelNode19.asString("true");
        org.jboss.dmr.ModelNode modelNode24 = modelNode19.set((double) 'a');
        org.jboss.dmr.IntModelValue intModelValue26 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str27 = intModelValue26.asString();
        double double29 = intModelValue26.asDouble((double) 2);
        java.math.BigDecimal bigDecimal30 = intModelValue26.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue31 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal30);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue32 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal30);
        org.jboss.dmr.ModelNode modelNode33 = modelNode24.set(bigDecimal30);
        org.jboss.dmr.ModelNode modelNode34 = modelNode14.set(bigDecimal30);
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.set("hi!", 0.0d);
        org.jboss.dmr.Property property41 = new org.jboss.dmr.Property("", modelNode40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.get(strArray42);
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList48 = modelNode47.asList();
        org.jboss.dmr.ListModelValue listModelValue49 = new org.jboss.dmr.ListModelValue(modelNodeList48);
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue49);
        org.jboss.dmr.ModelValue modelValue51 = listModelValue49.resolve();
        int int53 = listModelValue49.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList54 = listModelValue49.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList55 = modelNode43.asPropertyList(propertyList54);
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.set("hi!", 0.0d);
        org.jboss.dmr.Property property61 = new org.jboss.dmr.Property("", modelNode60);
        java.lang.String[] strArray62 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode63 = modelNode60.get(strArray62);
        org.jboss.dmr.ModelNode modelNode64 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode67 = modelNode64.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList68 = modelNode67.asList();
        org.jboss.dmr.ListModelValue listModelValue69 = new org.jboss.dmr.ListModelValue(modelNodeList68);
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue69);
        org.jboss.dmr.ModelValue modelValue71 = listModelValue69.resolve();
        int int73 = listModelValue69.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList74 = listModelValue69.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList75 = modelNode63.asPropertyList(propertyList74);
        modelNode43.setNoCopy(modelNode63);
        boolean boolean77 = modelNode63.isProtected();
        org.jboss.dmr.ModelNode modelNode80 = modelNode63.set("", (double) 8);
        org.jboss.dmr.ModelNode modelNode83 = new org.jboss.dmr.ModelNode(1L);
        org.jboss.dmr.ValueExpression valueExpression84 = modelNode83.asExpression();
        org.jboss.dmr.ModelNode modelNode85 = modelNode80.set("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwACM=", valueExpression84);
        org.jboss.dmr.ModelNode modelNode86 = modelNode34.set("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwAGI=", valueExpression84);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode88 = modelNode86.require((int) 'b');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [98]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNodeList20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(\"hi!\" => 0.0)" + "'", str22, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "32" + "'", str27, "32");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 32.0d + "'", double29 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNodeList48);
        org.junit.Assert.assertNotNull(modelValue51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(propertyList54);
        org.junit.Assert.assertNotNull(propertyList55);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertNotNull(modelNodeList68);
        org.junit.Assert.assertNotNull(modelValue71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(propertyList74);
        org.junit.Assert.assertNotNull(propertyList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertNotNull(valueExpression84);
        org.junit.Assert.assertNotNull(modelNode85);
        org.junit.Assert.assertNotNull(modelNode86);
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("[big integer 1,big integer 1]");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4");
        org.jboss.dmr.StringModelValue stringModelValue5 = new org.jboss.dmr.StringModelValue("AA==");
        boolean boolean6 = stringModelValue3.equals(stringModelValue5);
        boolean boolean7 = stringModelValue1.equals(stringModelValue5);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        org.jboss.dmr.StringModelValue stringModelValue14 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        boolean boolean15 = stringModelValue11.equals(stringModelValue14);
        org.jboss.dmr.ValueExpression valueExpression16 = stringModelValue14.asExpression();
        org.jboss.dmr.StringModelValue stringModelValue18 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression19 = stringModelValue18.asExpression();
        boolean boolean21 = stringModelValue18.equals((java.lang.Object) (-1.0d));
        java.lang.String str22 = stringModelValue18.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent23 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean24 = stringModelValue18.equals((java.lang.Object) modelEvent23);
        org.jboss.dmr.StringModelValue stringModelValue26 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue28 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue30 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean31 = stringModelValue28.equals(stringModelValue30);
        byte[] byteArray32 = stringModelValue30.asBytes();
        java.lang.Object obj33 = null;
        boolean boolean34 = stringModelValue30.equals(obj33);
        boolean boolean36 = stringModelValue30.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean37 = stringModelValue26.equals(stringModelValue30);
        boolean boolean38 = stringModelValue18.equals(stringModelValue30);
        boolean boolean39 = stringModelValue14.equals(stringModelValue18);
        boolean boolean40 = stringModelValue1.equals(stringModelValue14);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str22, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent23 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent23.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        double double5 = doubleModelValue1.asDouble();
        org.jboss.dmr.ValueExpression valueExpression6 = doubleModelValue1.asExpression();
        java.lang.String str7 = doubleModelValue1.asString();
        org.jboss.dmr.DoubleModelValue doubleModelValue9 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long10 = doubleModelValue9.asLong();
        boolean boolean11 = doubleModelValue9.asBoolean();
        java.math.BigInteger bigInteger12 = doubleModelValue9.asBigInteger();
        byte[] byteArray13 = doubleModelValue9.asBytes();
        boolean boolean14 = doubleModelValue1.equals(doubleModelValue9);
        org.jboss.dmr.ModelValue modelValue15 = doubleModelValue9.protect();
        java.io.DataOutput dataOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue9.writeExternal(dataOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10.0" + "'", str7, "10.0");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelValue15);
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        int int34 = inputStream26.read(byteArray30, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (-1));
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader41 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream38);
        java.io.OutputStream outputStream42 = null;
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream(outputStream42);
        outputStream43.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream47 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream45, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream47);
        outputStream48.resumeEncoding();
        outputStream48.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream48);
        java.io.Reader reader52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelReader modelReader53 = modelStreamFactory1.newModelReader(reader52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelReader41);
        org.junit.Assert.assertNotNull(modelWriter51);
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("");
        org.jboss.dmr.IntModelValue intModelValue3 = new org.jboss.dmr.IntModelValue((int) ' ');
        double double4 = intModelValue3.asDouble();
        int int5 = intModelValue3.asInt();
        org.jboss.dmr.ValueExpression valueExpression6 = intModelValue3.asExpression();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.set("hi!", 0.0d);
        org.jboss.dmr.Property property16 = new org.jboss.dmr.Property("", modelNode15);
        boolean boolean18 = modelNode15.equals((java.lang.Object) 100L);
        boolean boolean19 = modelNode7.equals(modelNode15);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int29 = modelNode28.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.setExpression("hi!", "hi!");
        java.lang.String str34 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode30);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList35 = modelNode30.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode36 = modelNode28.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList35);
        org.jboss.dmr.ModelNode modelNode37 = modelNode27.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList35);
        org.jboss.dmr.ModelNode modelNode38 = modelNode15.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList35);
        org.jboss.dmr.ModelNode modelNode40 = modelNode15.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode42 = modelNode15.add(false);
        org.jboss.dmr.ModelType modelType43 = org.jboss.dmr.ModelType.PROPERTY;
        char char44 = modelType43.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue45 = org.jboss.dmr.TypeModelValue.of(modelType43);
        org.jboss.dmr.ModelType modelType46 = org.jboss.dmr.ModelType.PROPERTY;
        char char47 = modelType46.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue48 = org.jboss.dmr.TypeModelValue.of(modelType46);
        boolean boolean49 = typeModelValue45.equals(typeModelValue48);
        java.lang.String str50 = typeModelValue48.asString();
        org.jboss.dmr.ValueExpression valueExpression51 = typeModelValue48.asExpression();
        org.jboss.dmr.ModelType modelType52 = typeModelValue48.asType();
        boolean boolean54 = typeModelValue48.asBoolean(false);
        boolean boolean55 = modelNode42.equals((java.lang.Object) typeModelValue48);
        org.jboss.dmr.ExpressionValue expressionValue57 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue59 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean60 = expressionValue57.equals(expressionValue59);
        org.jboss.dmr.ExpressionValue expressionValue62 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression63 = expressionValue62.asExpression();
        boolean boolean64 = expressionValue57.equals(expressionValue62);
        java.lang.String str65 = expressionValue57.asString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory67 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream68 = null;
        org.jboss.dmr.Base64.InputStream inputStream70 = new org.jboss.dmr.Base64.InputStream(inputStream68, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream71 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream70);
        org.jboss.dmr.stream.ModelReader modelReader72 = modelStreamFactory67.newModelReader((java.io.InputStream) inputStream71);
        java.io.OutputStream outputStream73 = null;
        org.jboss.dmr.Base64.OutputStream outputStream74 = new org.jboss.dmr.Base64.OutputStream(outputStream73);
        org.jboss.dmr.Base64.OutputStream outputStream75 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream74);
        outputStream74.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter78 = modelStreamFactory67.newModelWriter((java.io.OutputStream) outputStream74);
        org.jboss.dmr.stream.ModelWriter modelWriter79 = modelWriter78.writeListStart();
        expressionValue57.write(modelWriter79);
        typeModelValue48.write(modelWriter79);
        intModelValue3.write(modelWriter79);
        expressionValue1.write(modelWriter79);
        byte[] byteArray85 = org.jboss.dmr.Base64.decode("true");
        boolean boolean87 = org.jboss.dmr.Base64.encodeToFile(byteArray85, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.BytesModelValue bytesModelValue88 = new org.jboss.dmr.BytesModelValue(byteArray85);
        org.jboss.dmr.stream.ModelWriter modelWriter89 = modelWriter79.writeBytes(byteArray85);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str34, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList35);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + modelType43 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType43.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char44 + "' != '" + 'p' + "'", char44 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue45);
        org.junit.Assert.assertTrue("'" + modelType46 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType46.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + 'p' + "'", char47 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PROPERTY" + "'", str50, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression51);
        org.junit.Assert.assertTrue("'" + modelType52 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType52.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(valueExpression63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(modelStreamFactory67);
        org.junit.Assert.assertNotNull(modelReader72);
        org.junit.Assert.assertNotNull(modelWriter78);
        org.junit.Assert.assertNotNull(modelWriter79);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(modelWriter89);
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        org.jboss.dmr.Property property14 = propertyModelValue10.asProperty();
        java.lang.String str15 = propertyModelValue10.asString();
        boolean boolean17 = propertyModelValue10.has("\"PROPERTY_VALUE\"");
        java.io.PrintWriter printWriter18 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue10.formatAsJSON(printWriter18, 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str15, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        byte[] byteArray4 = intModelValue1.asBytes();
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(bigDecimal5);
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(73L);
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean5 = stringModelValue1.equals(stringModelValue3);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = stringModelValue3.asBoolean(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int3 = doubleModelValue1.asInt((int) 'l');
        java.math.BigDecimal bigDecimal4 = doubleModelValue1.asBigDecimal();
        byte[] byteArray5 = doubleModelValue1.asBytes();
        double double7 = doubleModelValue1.asDouble(1.0d);
        java.lang.String str8 = doubleModelValue1.asString();
        boolean boolean9 = doubleModelValue1.asBoolean();
        double double10 = doubleModelValue1.asDouble();
        org.jboss.dmr.DoubleModelValue doubleModelValue12 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long13 = doubleModelValue12.asLong();
        boolean boolean15 = doubleModelValue12.asBoolean(true);
        int int17 = doubleModelValue12.asInt(2);
        double double19 = doubleModelValue12.asDouble(0.0d);
        org.jboss.dmr.DoubleModelValue doubleModelValue21 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long22 = doubleModelValue21.asLong();
        boolean boolean23 = doubleModelValue21.asBoolean();
        byte[] byteArray24 = doubleModelValue21.asBytes();
        int int26 = doubleModelValue21.asInt((int) ' ');
        long long27 = doubleModelValue21.asLong();
        org.jboss.dmr.ValueExpression valueExpression28 = doubleModelValue21.asExpression();
        java.math.BigInteger bigInteger29 = doubleModelValue21.asBigInteger();
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList34 = modelNode33.asList();
        org.jboss.dmr.ListModelValue listModelValue35 = new org.jboss.dmr.ListModelValue(modelNodeList34);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue35);
        org.jboss.dmr.ModelValue modelValue37 = listModelValue35.resolve();
        int int39 = listModelValue35.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList40 = listModelValue35.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList41 = listModelValue35.asList();
        long long42 = listModelValue35.asLong();
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode46.asList();
        org.jboss.dmr.ListModelValue listModelValue48 = new org.jboss.dmr.ListModelValue(modelNodeList47);
        java.lang.String str49 = listModelValue48.asString();
        long long50 = listModelValue48.asLong();
        int int52 = listModelValue48.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue53 = listModelValue48.protect();
        boolean boolean55 = listModelValue48.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue56 = listModelValue48.resolve();
        boolean boolean57 = listModelValue48.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList58 = listModelValue48.asList();
        boolean boolean59 = listModelValue35.equals(listModelValue48);
        java.util.List<org.jboss.dmr.Property> propertyList60 = listModelValue35.asPropertyList();
        boolean boolean61 = doubleModelValue21.equals((java.lang.Object) propertyList60);
        double double63 = doubleModelValue21.asDouble((double) '4');
        boolean boolean64 = doubleModelValue12.equals(doubleModelValue21);
        org.jboss.dmr.ExpressionValue expressionValue66 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue68 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean69 = expressionValue66.equals(expressionValue68);
        org.jboss.dmr.ExpressionValue expressionValue71 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression72 = expressionValue71.asExpression();
        boolean boolean73 = expressionValue66.equals(expressionValue71);
        java.lang.String str74 = expressionValue66.asString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory76 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream77 = null;
        org.jboss.dmr.Base64.InputStream inputStream79 = new org.jboss.dmr.Base64.InputStream(inputStream77, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream80 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream79);
        org.jboss.dmr.stream.ModelReader modelReader81 = modelStreamFactory76.newModelReader((java.io.InputStream) inputStream80);
        java.io.OutputStream outputStream82 = null;
        org.jboss.dmr.Base64.OutputStream outputStream83 = new org.jboss.dmr.Base64.OutputStream(outputStream82);
        org.jboss.dmr.Base64.OutputStream outputStream84 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream83);
        outputStream83.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter87 = modelStreamFactory76.newModelWriter((java.io.OutputStream) outputStream83);
        org.jboss.dmr.stream.ModelWriter modelWriter88 = modelWriter87.writeListStart();
        expressionValue66.write(modelWriter88);
        doubleModelValue12.write(modelWriter88);
        org.jboss.dmr.stream.ModelWriter modelWriter91 = modelWriter88.writeObjectStart();
        org.jboss.dmr.stream.ModelWriter modelWriter93 = modelWriter91.writeString("AAAAAAAAAAE=");
        doubleModelValue1.write(modelWriter91);
        // The following exception was thrown during execution in test generation
        try {
            modelWriter91.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10.0" + "'", str8, "10.0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNodeList34);
        org.junit.Assert.assertNotNull(modelValue37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNodeList41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str49, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(modelValue53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(modelValue56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(modelNodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(propertyList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(valueExpression72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(modelStreamFactory76);
        org.junit.Assert.assertNotNull(modelReader81);
        org.junit.Assert.assertNotNull(modelWriter87);
        org.junit.Assert.assertNotNull(modelWriter88);
        org.junit.Assert.assertNotNull(modelWriter91);
        org.junit.Assert.assertNotNull(modelWriter93);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        long long4 = doubleModelValue1.asLong((long) 32);
        org.jboss.dmr.ValueExpression valueExpression5 = doubleModelValue1.asExpression();
        double double6 = doubleModelValue1.asDouble();
        double double7 = doubleModelValue1.asDouble();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        int int11 = longModelValue9.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue13 = new org.jboss.dmr.LongModelValue((-1L));
        long long15 = longModelValue13.asLong((long) (byte) -1);
        double double17 = longModelValue13.asDouble((double) 10.0f);
        boolean boolean18 = longModelValue9.equals(longModelValue13);
        java.lang.String str19 = longModelValue13.asString();
        int int21 = longModelValue13.asInt(8);
        boolean boolean22 = doubleModelValue1.equals((java.lang.Object) longModelValue13);
        java.math.BigDecimal bigDecimal23 = longModelValue13.asBigDecimal();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1" + "'", str19, "-1");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(bigDecimal23);
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        byte[] byteArray6 = intModelValue1.asBytes();
        boolean boolean8 = intModelValue1.has("[1]");
        long long10 = intModelValue1.asLong((long) (byte) 10);
        boolean boolean11 = intModelValue1.asBoolean();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long14 = modelNode13.asLong();
        org.jboss.dmr.ValueExpression valueExpression15 = modelNode13.asExpression();
        java.math.BigDecimal bigDecimal16 = valueExpression15.resolveBigDecimal();
        java.lang.String str17 = valueExpression15.getExpressionString();
        java.math.BigDecimal bigDecimal18 = valueExpression15.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue19 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal18);
        boolean boolean20 = bigDecimalModelValue19.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression21 = bigDecimalModelValue19.asExpression();
        org.jboss.dmr.IntModelValue intModelValue23 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long25 = intModelValue23.asLong((long) 'b');
        java.lang.String str26 = intModelValue23.asString();
        long long27 = intModelValue23.asLong();
        long long28 = intModelValue23.asLong();
        org.jboss.dmr.ValueExpression valueExpression29 = intModelValue23.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver30 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal31 = valueExpression29.resolveBigDecimal(valueExpressionResolver30);
        boolean boolean32 = valueExpression21.equals(valueExpression29);
        boolean boolean33 = intModelValue1.equals((java.lang.Object) boolean32);
        org.jboss.dmr.stream.ModelWriter modelWriter34 = null;
        // The following exception was thrown during execution in test generation
        try {
            intModelValue1.write(modelWriter34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0" + "'", str17, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue8 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue8.asObject();
        java.util.Set<java.lang.String> strSet10 = objectModelValue8.getKeys();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue8.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean13 = objectModelValue8.asBoolean();
        int int15 = objectModelValue8.asInt((int) 'b');
        int int17 = objectModelValue8.asInt((int) '#');
        boolean boolean18 = objectModelValue0.equals(objectModelValue8);
        org.jboss.dmr.ModelValue modelValue19 = objectModelValue8.resolve();
        org.jboss.dmr.ModelNode modelNode21 = objectModelValue8.removeChild("\"bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}\"");
        org.jboss.dmr.ModelNode modelNode23 = objectModelValue8.getChild("");
        org.jboss.dmr.ObjectModelValue objectModelValue24 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode25 = objectModelValue24.asObject();
        java.util.Set<java.lang.String> strSet26 = objectModelValue24.getKeys();
        boolean boolean28 = objectModelValue24.has((int) 'a');
        boolean boolean30 = objectModelValue24.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue31 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode32 = objectModelValue31.asObject();
        java.util.Set<java.lang.String> strSet33 = objectModelValue31.getKeys();
        boolean boolean35 = objectModelValue31.has((int) 'a');
        boolean boolean36 = objectModelValue24.equals(objectModelValue31);
        org.jboss.dmr.ModelNode modelNode37 = objectModelValue31.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = objectModelValue31.asList();
        org.jboss.dmr.ObjectModelValue objectModelValue39 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode40 = objectModelValue39.asObject();
        org.jboss.dmr.ModelValue modelValue41 = objectModelValue39.protect();
        long long42 = objectModelValue39.asLong();
        boolean boolean44 = objectModelValue39.has("(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")");
        boolean boolean45 = objectModelValue39.asBoolean();
        boolean boolean46 = objectModelValue31.equals(objectModelValue39);
        boolean boolean47 = objectModelValue8.equals(objectModelValue31);
        boolean boolean49 = objectModelValue31.asBoolean(true);
        java.util.Set<java.lang.String> strSet50 = objectModelValue31.getKeys();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelValue41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("[\n    {\n        \"hi!\" : {\n            \"EXPRESSION_VALUE\" : \"hi!\"\n        }\n    },\n    \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\",\n    {\n        \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\\nAAAAeA==\" : 1\n    }\n]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unexpected character ':' while reading DMR stream");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        org.jboss.dmr.ObjectModelValue objectModelValue3 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue3.asObject();
        java.util.Set<java.lang.String> strSet5 = objectModelValue3.getKeys();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue3.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean8 = objectModelValue3.asBoolean();
        int int10 = objectModelValue3.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode11 = objectModelValue3.asObject();
        boolean boolean12 = objectModelValue0.equals(objectModelValue3);
        org.jboss.dmr.ObjectModelValue objectModelValue13 = null;
        boolean boolean14 = objectModelValue0.equals(objectModelValue13);
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        java.util.Set<java.lang.String> strSet17 = objectModelValue15.getKeys();
        boolean boolean19 = objectModelValue15.has((int) 'a');
        boolean boolean21 = objectModelValue15.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue22 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode23 = objectModelValue22.asObject();
        java.util.Set<java.lang.String> strSet24 = objectModelValue22.getKeys();
        boolean boolean26 = objectModelValue22.has((int) 'a');
        boolean boolean27 = objectModelValue15.equals(objectModelValue22);
        org.jboss.dmr.ModelNode modelNode28 = objectModelValue22.asObject();
        org.jboss.dmr.ModelNode modelNode30 = objectModelValue22.getChild("(\"EXPRESSION_VALUE\" => (\"\" => (\"hi!\" => 0.0)))");
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.set("\"org.jboss.dmr.stream.ModelException: (\\\"Expression \\\\\\\"1\\\\\\\"\\\" => (\\\"org.jboss.dmr.stream.ModelException: [(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => BYTES))\"", "");
        boolean boolean34 = objectModelValue0.equals((java.lang.Object) modelNode33);
        org.jboss.dmr.IntModelValue intModelValue36 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long38 = intModelValue36.asLong((long) 'b');
        org.jboss.dmr.ValueExpression valueExpression39 = intModelValue36.asExpression();
        byte[] byteArray40 = intModelValue36.asBytes();
        org.jboss.dmr.ModelNode modelNode41 = modelNode33.set(byteArray40);
        boolean boolean43 = org.jboss.dmr.Base64.encodeToFile(byteArray40, "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4\" => \"\\\"(\\\\\\\"\\\\\\\" => (\\\\\\\"hi!\\\\\\\" => 0.0))\\\"\")");
        boolean boolean45 = org.jboss.dmr.Base64.encodeToFile(byteArray40, "rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQAC0JJR19ERUNJTUFM");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = org.jboss.dmr.Base64.encodeBytes(byteArray40, (int) 'e', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 32L + "'", long38 == 32L);
        org.junit.Assert.assertNotNull(valueExpression39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue((-1L));
        long long13 = longModelValue11.asLong((long) (byte) -1);
        java.math.BigDecimal bigDecimal14 = longModelValue11.asBigDecimal();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory16 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream17 = null;
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream(inputStream17, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream19);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory16.newModelReader((java.io.InputStream) inputStream20);
        java.io.OutputStream outputStream22 = null;
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream(outputStream22);
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream23);
        outputStream23.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelStreamFactory16.newModelWriter((java.io.OutputStream) outputStream23);
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter27.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter28.writeInt((int) (byte) 10);
        longModelValue11.write(modelWriter28);
        org.jboss.dmr.stream.ModelWriter modelWriter33 = modelWriter28.writeExpression("112.0");
        bigDecimalModelValue7.write(modelWriter28);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(modelStreamFactory16);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter28);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelWriter33);
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        long long4 = doubleModelValue1.asLong((long) 32);
        org.jboss.dmr.ModelValue modelValue5 = doubleModelValue1.protect();
        int int6 = doubleModelValue1.asInt();
        double double7 = doubleModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", (long) 32);
        org.jboss.dmr.DoubleModelValue doubleModelValue6 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long7 = doubleModelValue6.asLong();
        double double8 = doubleModelValue6.asDouble();
        java.math.BigDecimal bigDecimal9 = doubleModelValue6.asBigDecimal();
        java.math.BigInteger bigInteger10 = doubleModelValue6.asBigInteger();
        org.jboss.dmr.ModelNode modelNode11 = modelNode1.set(bigInteger10);
        java.math.BigDecimal bigDecimal12 = modelNode1.asBigDecimal();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(bigDecimal12);
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        boolean boolean8 = objectModelValue4.has((int) 'a');
        boolean boolean10 = objectModelValue4.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue11 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue11.asObject();
        java.util.Set<java.lang.String> strSet13 = objectModelValue11.getKeys();
        boolean boolean15 = objectModelValue11.has((int) 'a');
        boolean boolean16 = objectModelValue4.equals(objectModelValue11);
        org.jboss.dmr.ModelNode modelNode17 = objectModelValue11.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = objectModelValue11.asList();
        org.jboss.dmr.ModelNode modelNode19 = modelNode2.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList18);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode2, true);
        org.jboss.dmr.PropertyModelValue propertyModelValue22 = new org.jboss.dmr.PropertyModelValue(property21);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        boolean boolean27 = modelNode25.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.PropertyModelValue propertyModelValue28 = new org.jboss.dmr.PropertyModelValue("TYPE_MODEL_VALUE", modelNode25);
        org.jboss.dmr.ModelNode modelNode30 = propertyModelValue28.getChild(0);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver31 = new org.jboss.dmr.ValueExpressionResolver();
        boolean boolean32 = propertyModelValue28.equals((java.lang.Object) valueExpressionResolver31);
        boolean boolean34 = propertyModelValue28.has("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3HXAAEUV4cHJlc3Np\nb24gInRydWUiSv//////////eA==");
        boolean boolean35 = propertyModelValue22.equals(propertyModelValue28);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue7);
        org.jboss.dmr.ModelValue modelValue9 = listModelValue7.resolve();
        int int11 = listModelValue7.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList12 = listModelValue7.asPropertyList();
        boolean boolean13 = intModelValue1.equals((java.lang.Object) listModelValue7);
        double double14 = intModelValue1.asDouble();
        double double15 = intModelValue1.asDouble();
        org.jboss.dmr.IntModelValue intModelValue16 = null;
        boolean boolean17 = intModelValue1.equals(intModelValue16);
        org.jboss.dmr.IntModelValue intModelValue19 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str20 = intModelValue19.asString();
        double double22 = intModelValue19.asDouble((double) 100);
        java.math.BigInteger bigInteger23 = intModelValue19.asBigInteger();
        long long24 = intModelValue19.asLong();
        int int25 = intModelValue19.asInt();
        java.lang.String str26 = intModelValue19.asString();
        boolean boolean27 = intModelValue1.equals(intModelValue19);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 32.0d + "'", double15 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32" + "'", str20, "32");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((int) ' ');
        long long7 = doubleModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = doubleModelValue1.asExpression();
        java.math.BigInteger bigInteger9 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asList();
        org.jboss.dmr.ListModelValue listModelValue15 = new org.jboss.dmr.ListModelValue(modelNodeList14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue15);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue15.resolve();
        int int19 = listModelValue15.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList20 = listModelValue15.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = listModelValue15.asList();
        long long22 = listModelValue15.asLong();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        org.jboss.dmr.ListModelValue listModelValue28 = new org.jboss.dmr.ListModelValue(modelNodeList27);
        java.lang.String str29 = listModelValue28.asString();
        long long30 = listModelValue28.asLong();
        int int32 = listModelValue28.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue33 = listModelValue28.protect();
        boolean boolean35 = listModelValue28.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue28.resolve();
        boolean boolean37 = listModelValue28.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = listModelValue28.asList();
        boolean boolean39 = listModelValue15.equals(listModelValue28);
        java.util.List<org.jboss.dmr.Property> propertyList40 = listModelValue15.asPropertyList();
        boolean boolean41 = doubleModelValue1.equals((java.lang.Object) propertyList40);
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str44 = longModelValue43.asString();
        byte[] byteArray45 = longModelValue43.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue46 = new org.jboss.dmr.BytesModelValue(byteArray45);
        java.lang.String str47 = bytesModelValue46.asString();
        int int48 = bytesModelValue46.asInt();
        int int49 = bytesModelValue46.asInt();
        int int51 = bytesModelValue46.asInt(112);
        boolean boolean52 = doubleModelValue1.equals((java.lang.Object) int51);
        java.io.InputStream inputStream53 = null;
        org.jboss.dmr.Base64.InputStream inputStream55 = new org.jboss.dmr.Base64.InputStream(inputStream53, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue57 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str58 = longModelValue57.asString();
        byte[] byteArray59 = longModelValue57.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue60 = new org.jboss.dmr.BytesModelValue(byteArray59);
        int int63 = inputStream55.read(byteArray59, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream65 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream55, (-1));
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream65);
        boolean boolean67 = doubleModelValue1.equals((java.lang.Object) inputStream66);
        org.jboss.dmr.Base64.InputStream inputStream69 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream66, (int) (short) 1);
        org.jboss.dmr.Base64.InputStream inputStream70 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream69);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = inputStream70.markSupported();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str29, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(modelValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str47, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.setExpression("hi!", "hi!");
        java.lang.String str7 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode3);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList8 = modelNode3.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode10 = modelNode3.set((double) 0);
        org.jboss.dmr.ModelNode modelNode11 = modelNode3.clear();
        org.jboss.dmr.IntModelValue intModelValue14 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long16 = intModelValue14.asLong((long) 'b');
        java.lang.String str17 = intModelValue14.asString();
        java.math.BigInteger bigInteger18 = intModelValue14.asBigInteger();
        org.jboss.dmr.ModelNode modelNode19 = modelNode11.add("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", bigInteger18);
        org.jboss.dmr.ModelNode modelNode20 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", bigInteger18);
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.asObject();
        org.jboss.dmr.ModelNode modelNode22 = modelNode21.asObject();
        org.jboss.dmr.ModelNode modelNode24 = modelNode22.set(false);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long28 = modelNode27.asLong();
        org.jboss.dmr.ValueExpression valueExpression29 = modelNode27.asExpression();
        java.math.BigDecimal bigDecimal30 = valueExpression29.resolveBigDecimal();
        java.lang.String str31 = valueExpression29.getExpressionString();
        java.math.BigDecimal bigDecimal32 = valueExpression29.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue33 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal32);
        boolean boolean34 = bigDecimalModelValue33.asBoolean();
        long long35 = bigDecimalModelValue33.asLong();
        java.lang.String str36 = bigDecimalModelValue33.asString();
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long39 = modelNode38.asLong();
        org.jboss.dmr.ValueExpression valueExpression40 = modelNode38.asExpression();
        java.math.BigDecimal bigDecimal41 = valueExpression40.resolveBigDecimal();
        java.lang.String str42 = valueExpression40.getExpressionString();
        java.math.BigDecimal bigDecimal43 = valueExpression40.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue44 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal43);
        boolean boolean45 = bigDecimalModelValue44.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression46 = bigDecimalModelValue44.asExpression();
        int int47 = bigDecimalModelValue44.asInt();
        long long48 = bigDecimalModelValue44.asLong();
        boolean boolean49 = bigDecimalModelValue33.equals(bigDecimalModelValue44);
        java.math.BigDecimal bigDecimal50 = bigDecimalModelValue44.asBigDecimal();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode51 = modelNode24.add("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", bigDecimal50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str7, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32L + "'", long16 == 32L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32" + "'", str17, "32");
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1.0" + "'", str31, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1.0" + "'", str36, "1.0");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(valueExpression40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1.0" + "'", str42, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(valueExpression46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(bigDecimal50);
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter13.writeInt((int) (byte) 10);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue20 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str21 = longModelValue20.asString();
        byte[] byteArray22 = longModelValue20.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue23 = new org.jboss.dmr.BytesModelValue(byteArray22);
        int int26 = inputStream18.read(byteArray22, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelWriter15.writeBytes(byteArray22);
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter15.writeUndefined();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter28);
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression2 = expressionValue1.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str5 = expressionValue4.toString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        boolean boolean12 = expressionValue4.equals((java.lang.Object) property11);
        boolean boolean13 = expressionValue1.equals(expressionValue4);
        java.lang.String str14 = expressionValue4.asString();
        org.jboss.dmr.ModelValue modelValue15 = expressionValue4.resolve();
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "expression \"hi!\"" + "'", str5, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(modelValue15);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        long long4 = doubleModelValue1.asLong((long) (short) -1);
        double double6 = doubleModelValue1.asDouble(0.0d);
        java.math.BigInteger bigInteger7 = doubleModelValue1.asBigInteger();
        double double8 = doubleModelValue1.asDouble();
        java.math.BigDecimal bigDecimal9 = doubleModelValue1.asBigDecimal();
        boolean boolean11 = doubleModelValue1.asBoolean(true);
        java.math.BigDecimal bigDecimal12 = doubleModelValue1.asBigDecimal();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(bigDecimal12);
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode16 = modelNode0.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.LongModelValue longModelValue18 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str19 = longModelValue18.asString();
        byte[] byteArray20 = longModelValue18.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue21 = new org.jboss.dmr.BytesModelValue(byteArray20);
        java.lang.String str22 = bytesModelValue21.asString();
        int int23 = bytesModelValue21.asInt();
        byte[] byteArray24 = bytesModelValue21.asBytes();
        org.jboss.dmr.LongModelValue longModelValue26 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str27 = longModelValue26.asString();
        byte[] byteArray28 = longModelValue26.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue29 = new org.jboss.dmr.BytesModelValue(byteArray28);
        java.lang.String str30 = bytesModelValue29.asString();
        int int31 = bytesModelValue29.asInt();
        int int32 = bytesModelValue29.asInt();
        org.jboss.dmr.LongModelValue longModelValue34 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str35 = longModelValue34.asString();
        byte[] byteArray36 = longModelValue34.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue37 = new org.jboss.dmr.BytesModelValue(byteArray36);
        double double38 = bytesModelValue37.asDouble();
        boolean boolean39 = bytesModelValue29.equals(bytesModelValue37);
        byte[] byteArray40 = bytesModelValue37.asBytes();
        java.math.BigInteger bigInteger41 = bytesModelValue37.asBigInteger();
        boolean boolean42 = bytesModelValue21.equals(bytesModelValue37);
        int int44 = bytesModelValue37.asInt((int) 'J');
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory46 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream47 = null;
        org.jboss.dmr.Base64.InputStream inputStream49 = new org.jboss.dmr.Base64.InputStream(inputStream47, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream50 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream49);
        org.jboss.dmr.stream.ModelReader modelReader51 = modelStreamFactory46.newModelReader((java.io.InputStream) inputStream50);
        java.io.OutputStream outputStream52 = null;
        org.jboss.dmr.Base64.OutputStream outputStream53 = new org.jboss.dmr.Base64.OutputStream(outputStream52);
        org.jboss.dmr.Base64.OutputStream outputStream54 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream53);
        outputStream53.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter57 = modelStreamFactory46.newModelWriter((java.io.OutputStream) outputStream53);
        org.jboss.dmr.stream.ModelWriter modelWriter58 = modelWriter57.writeListStart();
        bytesModelValue37.write(modelWriter58);
        modelNode0.write(modelWriter58);
        org.jboss.dmr.stream.ModelWriter modelWriter61 = modelWriter58.writeObjectStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter62 = modelWriter61.writePropertyStart();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting OBJECT_END or STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str22, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str30, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4.9E-324d + "'", double38 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory46);
        org.junit.Assert.assertNotNull(modelReader51);
        org.junit.Assert.assertNotNull(modelWriter57);
        org.junit.Assert.assertNotNull(modelWriter58);
        org.junit.Assert.assertNotNull(modelWriter61);
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        int int11 = listModelValue5.asInt((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode12 = listModelValue5.asObject();
        boolean boolean14 = listModelValue5.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue20);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue20.resolve();
        int int24 = listModelValue20.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList25 = listModelValue20.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = listModelValue20.asList();
        long long27 = listModelValue20.asLong();
        boolean boolean28 = listModelValue5.equals(listModelValue20);
        long long29 = listModelValue5.asLong();
        org.jboss.dmr.ModelNode modelNode30 = listModelValue5.asObject();
        boolean boolean32 = listModelValue5.has(8);
        java.util.List<org.jboss.dmr.Property> propertyList33 = listModelValue5.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(propertyList33);
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        int int10 = intModelValue5.asInt();
        int int12 = intModelValue5.asInt(32);
        org.jboss.dmr.DoubleModelValue doubleModelValue14 = new org.jboss.dmr.DoubleModelValue((double) (byte) -1);
        org.jboss.dmr.DoubleModelValue doubleModelValue16 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int18 = doubleModelValue16.asInt((int) 'l');
        java.math.BigDecimal bigDecimal19 = doubleModelValue16.asBigDecimal();
        boolean boolean20 = doubleModelValue14.equals(doubleModelValue16);
        boolean boolean21 = intModelValue5.equals((java.lang.Object) doubleModelValue14);
        byte[] byteArray22 = doubleModelValue14.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType23 = doubleModelValue14.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-65, -16, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray2 = intModelValue1.asBytes();
        long long3 = intModelValue1.asLong();
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str6 = intModelValue5.asString();
        java.lang.String str7 = intModelValue5.asString();
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue(10);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asList();
        org.jboss.dmr.ListModelValue listModelValue15 = new org.jboss.dmr.ListModelValue(modelNodeList14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue15.resolve();
        boolean boolean17 = intModelValue9.equals((java.lang.Object) modelValue16);
        long long19 = intModelValue9.asLong(10L);
        boolean boolean20 = intModelValue5.equals(intModelValue9);
        boolean boolean21 = intModelValue1.equals(intModelValue5);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "32" + "'", str6, "32");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "32" + "'", str7, "32");
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue6 = new org.jboss.dmr.BigIntegerModelValue(bigInteger5);
        int int7 = bigIntegerModelValue6.asInt();
        java.lang.String str9 = bigIntegerModelValue6.toJSONString(false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "32" + "'", str9, "32");
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        int int10 = intModelValue5.asInt();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) intModelValue5);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str16 = modelNode14.asString("true");
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long20 = modelNode19.asLong();
        org.jboss.dmr.ValueExpression valueExpression21 = modelNode19.asExpression();
        java.math.BigDecimal bigDecimal22 = valueExpression21.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode(bigDecimal22);
        org.jboss.dmr.ModelNode modelNode25 = modelNode23.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode26 = modelNode14.setNoCopy("35", modelNode25);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        org.jboss.dmr.Property property33 = new org.jboss.dmr.Property("", modelNode32);
        boolean boolean35 = modelNode32.hasDefined((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode36 = modelNode26.setNoCopy("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4", modelNode32);
        org.jboss.dmr.ModelNode modelNode37 = modelNode11.setNoCopy("false", modelNode26);
        org.jboss.dmr.ModelNode modelNode40 = modelNode26.set("", "{}");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = modelNode40.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "10" + "'", str16, "10");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode40);
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        java.lang.String str3 = longModelValue1.asString();
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "52" + "'", str3, "52");
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode16 = modelNode0.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.lang.String str23 = modelNode19.toString();
        org.jboss.dmr.ModelNode modelNode24 = modelNode19.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode26 = modelNode19.set(100);
        org.jboss.dmr.ModelNode modelNode27 = modelNode18.add(modelNode19);
        int int29 = modelNode19.asInt(2);
        org.jboss.dmr.ModelType modelType31 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode32 = modelNode19.set("[(\"hi!\" => 0.0)]", modelType31);
        org.jboss.dmr.ModelNode modelNode33 = modelNode16.set("\"BYTES_VALUE\"", modelType31);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.Property property45 = new org.jboss.dmr.Property("", modelNode44);
        boolean boolean47 = modelNode44.equals((java.lang.Object) 100L);
        boolean boolean48 = modelNode36.equals(modelNode44);
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode53 = modelNode50.set("hi!", 0.0d);
        org.jboss.dmr.Property property54 = new org.jboss.dmr.Property("", modelNode53);
        java.lang.String[] strArray55 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode56 = modelNode53.get(strArray55);
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int58 = modelNode57.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode59 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode62 = modelNode59.setExpression("hi!", "hi!");
        java.lang.String str63 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode59);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList64 = modelNode59.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode65 = modelNode57.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList64);
        org.jboss.dmr.ModelNode modelNode66 = modelNode56.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList64);
        org.jboss.dmr.ModelNode modelNode67 = modelNode44.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList64);
        org.jboss.dmr.ModelNode modelNode69 = modelNode44.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.PropertyModelValue propertyModelValue71 = new org.jboss.dmr.PropertyModelValue("1.0", modelNode44, false);
        java.io.InputStream inputStream72 = null;
        org.jboss.dmr.Base64.InputStream inputStream74 = new org.jboss.dmr.Base64.InputStream(inputStream72, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue76 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str77 = longModelValue76.asString();
        byte[] byteArray78 = longModelValue76.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue79 = new org.jboss.dmr.BytesModelValue(byteArray78);
        int int82 = inputStream74.read(byteArray78, (int) (short) 1, (int) (byte) -1);
        java.lang.String str83 = org.jboss.dmr.Base64.encodeBytes(byteArray78);
        org.jboss.dmr.ModelNode modelNode84 = modelNode44.set(byteArray78);
        org.jboss.dmr.ModelNode modelNode86 = modelNode44.set(true);
        org.jboss.dmr.ModelNode modelNode89 = modelNode44.set("[(\"hi!\" => expression \"hi!\"),bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }]", (int) 'b');
        org.jboss.dmr.ModelNode modelNode90 = modelNode16.setNoCopy("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQACFBST1BFUlRZ", modelNode89);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = modelNode16.asDouble(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(\"hi!\" => 0.0)" + "'", str23, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + modelType31 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType31.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str63, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList64);
        org.junit.Assert.assertNotNull(modelNode65);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "AAAAAAAAAAE=" + "'", str83, "AAAAAAAAAAE=");
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertNotNull(modelNode86);
        org.junit.Assert.assertNotNull(modelNode89);
        org.junit.Assert.assertNotNull(modelNode90);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression14 = expressionValue13.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str17 = expressionValue16.toString();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        boolean boolean24 = expressionValue16.equals((java.lang.Object) property23);
        boolean boolean25 = expressionValue13.equals(expressionValue16);
        boolean boolean26 = expressionValue8.equals((java.lang.Object) boolean25);
        org.jboss.dmr.ValueExpression valueExpression27 = expressionValue8.asExpression();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode(valueExpression27);
        org.jboss.dmr.ModelNode modelNode29 = modelNode28.setEmptyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList30 = modelNode29.asList();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "expression \"hi!\"" + "'", str17, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNodeList30);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        long long4 = doubleModelValue1.asLong((long) 32);
        org.jboss.dmr.ModelValue modelValue5 = doubleModelValue1.protect();
        byte[] byteArray6 = doubleModelValue1.asBytes();
        long long7 = doubleModelValue1.asLong();
        long long9 = doubleModelValue1.asLong((long) (short) -1);
        org.jboss.dmr.ModelValue modelValue10 = doubleModelValue1.resolve();
        java.lang.String str11 = doubleModelValue1.asString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10.0" + "'", str11, "10.0");
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelValue modelValue12 = listModelValue5.copy();
        java.lang.String str13 = listModelValue5.toString();
        boolean boolean15 = listModelValue5.has(1);
        long long16 = listModelValue5.asLong();
        boolean boolean18 = listModelValue5.has((int) (byte) 0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str13, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        long long4 = doubleModelValue1.asLong((long) 32);
        org.jboss.dmr.ModelValue modelValue5 = doubleModelValue1.protect();
        boolean boolean7 = doubleModelValue1.asBoolean(false);
        double double9 = doubleModelValue1.asDouble((double) (-1.0f));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.ModelNode modelNode17 = modelNode1.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.PropertyModelValue propertyModelValue18 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==", modelNode17);
        org.jboss.dmr.ModelValue modelValue19 = propertyModelValue18.resolve();
        java.util.Set<java.lang.String> strSet20 = propertyModelValue18.getKeys();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.jboss.dmr.Base64.encodeBytes(byteArray0, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelNode modelNode10 = propertyModelValue9.asObject();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) propertyModelValue9);
        boolean boolean13 = modelNode11.has((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode15 = modelNode11.addExpression("H4sIAAAAAAAAAGNgYFAGAG6uI4MEAAAA");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        double double15 = bigIntegerModelValue13.asDouble((double) 'b');
        boolean boolean16 = bigIntegerModelValue4.equals(bigIntegerModelValue13);
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double18 = booleanModelValue17.asDouble();
        org.jboss.dmr.ModelValue modelValue19 = booleanModelValue17.copy();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue21 = new org.jboss.dmr.BigIntegerModelValue(bigInteger20);
        long long23 = bigIntegerModelValue21.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = null;
        boolean boolean25 = bigIntegerModelValue21.equals(bigIntegerModelValue24);
        boolean boolean26 = bigIntegerModelValue4.equals(bigIntegerModelValue21);
        org.jboss.dmr.ModelValue modelValue27 = bigIntegerModelValue21.resolve();
        boolean boolean29 = bigIntegerModelValue21.asBoolean(false);
        long long31 = bigIntegerModelValue21.asLong((long) 'l');
        org.jboss.dmr.ModelValue modelValue32 = bigIntegerModelValue21.clone();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(modelValue32);
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) 'p');
        java.math.BigDecimal bigDecimal2 = intModelValue1.asBigDecimal();
        boolean boolean3 = intModelValue1.asBoolean();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory5 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream6 = null;
        org.jboss.dmr.Base64.InputStream inputStream8 = new org.jboss.dmr.Base64.InputStream(inputStream6, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str11 = longModelValue10.asString();
        byte[] byteArray12 = longModelValue10.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue13 = new org.jboss.dmr.BytesModelValue(byteArray12);
        int int16 = inputStream8.read(byteArray12, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream8, (-1));
        org.jboss.dmr.stream.ModelReader modelReader19 = modelStreamFactory5.newModelReader((java.io.InputStream) inputStream18);
        boolean boolean20 = modelReader19.isLong();
        boolean boolean21 = modelReader19.isBigDecimal();
        boolean boolean22 = modelReader19.isUndefined();
        boolean boolean23 = modelReader19.isObjectStart();
        boolean boolean24 = intModelValue1.equals((java.lang.Object) modelReader19);
        boolean boolean25 = modelReader19.isString();
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(modelReader19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.setExpression("hi!", "hi!");
        java.lang.String str6 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode2);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode2.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList7);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.resolve();
        java.util.List<org.jboss.dmr.Property> propertyList10 = modelNode0.asPropertyList();
        org.jboss.dmr.ModelNode modelNode11 = modelNode0.clear();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str6, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(modelNode11);
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream19.resumeEncoding();
        outputStream19.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream19);
        java.io.InputStream inputStream23 = null;
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream(inputStream23, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        int int33 = inputStream25.read(byteArray29, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (-1));
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25, (int) 'p');
        org.jboss.dmr.stream.ModelReader modelReader38 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream25);
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25);
        org.jboss.dmr.Base64.InputStream inputStream40 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream25);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = inputStream40.skip(52L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(modelReader38);
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        org.jboss.dmr.ValueExpression valueExpression18 = stringModelValue11.asExpression();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory20 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream21 = null;
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream(inputStream21, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream23);
        org.jboss.dmr.stream.ModelReader modelReader25 = modelStreamFactory20.newModelReader((java.io.InputStream) inputStream24);
        java.io.OutputStream outputStream26 = null;
        org.jboss.dmr.Base64.OutputStream outputStream27 = new org.jboss.dmr.Base64.OutputStream(outputStream26);
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream27);
        outputStream27.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelStreamFactory20.newModelWriter((java.io.OutputStream) outputStream27);
        org.jboss.dmr.stream.ModelWriter modelWriter32 = modelWriter31.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter34 = modelWriter32.writeInt((int) (byte) 10);
        stringModelValue11.write(modelWriter32);
        org.jboss.dmr.stream.ModelWriter modelWriter36 = modelWriter32.writeListEnd();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertNotNull(modelStreamFactory20);
        org.junit.Assert.assertNotNull(modelReader25);
        org.junit.Assert.assertNotNull(modelWriter31);
        org.junit.Assert.assertNotNull(modelWriter32);
        org.junit.Assert.assertNotNull(modelWriter34);
        org.junit.Assert.assertNotNull(modelWriter36);
    }
}
