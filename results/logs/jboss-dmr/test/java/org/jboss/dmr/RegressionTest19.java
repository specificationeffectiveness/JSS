package org.jboss.dmr;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        java.lang.String str16 = valueExpression14.getExpressionString();
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue18 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal17);
        boolean boolean19 = bigDecimalModelValue18.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression20 = bigDecimalModelValue18.asExpression();
        int int21 = bigDecimalModelValue18.asInt();
        long long22 = bigDecimalModelValue18.asLong();
        long long24 = bigDecimalModelValue18.asLong(32L);
        boolean boolean25 = bigDecimalModelValue7.equals(bigDecimalModelValue18);
        double double27 = bigDecimalModelValue7.asDouble((double) (short) -1);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long30 = modelNode29.asLong();
        org.jboss.dmr.ValueExpression valueExpression31 = modelNode29.asExpression();
        java.math.BigDecimal bigDecimal32 = valueExpression31.resolveBigDecimal();
        java.lang.String str33 = valueExpression31.getExpressionString();
        java.math.BigDecimal bigDecimal34 = valueExpression31.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue35 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal34);
        boolean boolean36 = bigDecimalModelValue35.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression37 = bigDecimalModelValue35.asExpression();
        int int38 = bigDecimalModelValue35.asInt();
        long long39 = bigDecimalModelValue35.asLong();
        long long41 = bigDecimalModelValue35.asLong(32L);
        boolean boolean42 = bigDecimalModelValue7.equals(bigDecimalModelValue35);
        double double44 = bigDecimalModelValue7.asDouble((double) '#');
        java.lang.String str45 = bigDecimalModelValue7.asString();
        java.io.PrintWriter printWriter46 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue7.format(printWriter46, 100, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0" + "'", str16, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1.0" + "'", str33, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(valueExpression37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1.0" + "'", str45, "1.0");
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        long long6 = intModelValue1.asLong();
        boolean boolean7 = intModelValue1.asBoolean();
        java.lang.String str8 = intModelValue1.asString();
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ListModelValue listModelValue16 = new org.jboss.dmr.ListModelValue(modelNodeList15);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue16);
        org.jboss.dmr.ModelValue modelValue18 = listModelValue16.resolve();
        int int20 = listModelValue16.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList21 = listModelValue16.asPropertyList();
        boolean boolean22 = intModelValue10.equals((java.lang.Object) listModelValue16);
        double double23 = intModelValue10.asDouble();
        long long25 = intModelValue10.asLong(1L);
        byte[] byteArray26 = intModelValue10.asBytes();
        boolean boolean27 = intModelValue1.equals(intModelValue10);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory29 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream30 = null;
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream(inputStream30, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream32);
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory29.newModelReader((java.io.InputStream) inputStream33);
        java.io.OutputStream outputStream35 = null;
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream(outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream36);
        outputStream36.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelStreamFactory29.newModelWriter((java.io.OutputStream) outputStream36);
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelWriter40.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue43 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray44 = intModelValue43.asBytes();
        int int46 = intModelValue43.asInt(0);
        java.math.BigInteger bigInteger47 = intModelValue43.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter48 = modelWriter41.writeBigInteger(bigInteger47);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str51 = org.jboss.dmr.Base64.encodeBytes(byteArray49, (int) '#');
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelWriter41.writeBytes(byteArray49);
        intModelValue10.write(modelWriter52);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(propertyList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 32.0d + "'", double23 == 32.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory29);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(modelWriter48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "H4sIAAAAAAAAAAMAAAAAAAAAAAA=" + "'", str51, "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        org.junit.Assert.assertNotNull(modelWriter52);
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int8 = bytesModelValue4.asInt((int) 'a');
        double double10 = bytesModelValue4.asDouble((double) '#');
        long long12 = bytesModelValue4.asLong((long) 'p');
        int int13 = bytesModelValue4.asInt();
        org.jboss.dmr.IntModelValue intModelValue15 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList20 = modelNode19.asList();
        org.jboss.dmr.ListModelValue listModelValue21 = new org.jboss.dmr.ListModelValue(modelNodeList20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue21);
        org.jboss.dmr.ModelValue modelValue23 = listModelValue21.resolve();
        int int25 = listModelValue21.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList26 = listModelValue21.asPropertyList();
        boolean boolean27 = intModelValue15.equals((java.lang.Object) listModelValue21);
        double double28 = intModelValue15.asDouble();
        java.lang.String str29 = intModelValue15.asString();
        boolean boolean30 = bytesModelValue4.equals((java.lang.Object) intModelValue15);
        int int32 = intModelValue15.asInt((int) '#');
        java.math.BigInteger bigInteger33 = intModelValue15.asBigInteger();
        boolean boolean35 = intModelValue15.asBoolean(true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.9E-324d + "'", double10 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNodeList20);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(propertyList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 32.0d + "'", double28 == 32.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        int int11 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQACkVYUFJFU1NJT04=");
        org.jboss.dmr.ModelNode modelNode16 = modelNode1.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==", true);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode16);
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        java.lang.String str9 = property7.getName();
        org.jboss.dmr.Property property10 = property7.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property10);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue11.asList();
        java.io.PrintWriter printWriter13 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue11.formatAsJSON(printWriter13, (int) (short) 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(modelNodeList12);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        boolean boolean20 = bytesModelValue12.equals(bytesModelValue19);
        long long21 = bytesModelValue12.asLong();
        int int23 = bytesModelValue12.asInt(8);
        java.math.BigDecimal bigDecimal24 = bytesModelValue12.asBigDecimal();
        int int25 = bytesModelValue12.asInt();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode26 = bytesModelValue12.addChild();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ModelValue modelValue4 = objectModelValue0.resolve();
        int int5 = objectModelValue0.asInt();
        boolean boolean7 = objectModelValue0.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue0.getChild("H4sIAAAAAAAAANNQUlKwtVPQUMrIVASzDPQMNDUBLH2F1RYAAAA=");
        org.jboss.dmr.ModelValue modelValue10 = objectModelValue0.resolve();
        long long12 = objectModelValue0.asLong((long) 'b');
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.protect();
        long long3 = objectModelValue0.asLong();
        org.jboss.dmr.ModelType modelType4 = org.jboss.dmr.ModelType.PROPERTY;
        char char5 = modelType4.getTypeChar();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(modelType4);
        boolean boolean7 = objectModelValue0.equals((java.lang.Object) modelNode6);
        java.lang.String str8 = objectModelValue0.toString();
        int int10 = objectModelValue0.asInt(32);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + modelType4 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType4.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'p' + "'", char5 == 'p');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isListStart();
        boolean boolean23 = modelReader15.isUndefined();
        boolean boolean24 = modelReader15.isBigInteger();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray25 = modelReader15.getBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't bytes");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str5 = longModelValue4.asString();
        byte[] byteArray6 = longModelValue4.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue7 = new org.jboss.dmr.BytesModelValue(byteArray6);
        int int10 = inputStream2.read(byteArray6, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2, (-1));
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream12, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode15 = org.jboss.dmr.ModelNode.fromBase64((java.io.InputStream) inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        boolean boolean14 = typeModelValue10.equals(typeModelValue13);
        java.lang.String str15 = typeModelValue13.asString();
        boolean boolean17 = typeModelValue13.asBoolean(true);
        boolean boolean18 = typeModelValue5.equals(typeModelValue13);
        org.jboss.dmr.ValueExpression valueExpression19 = typeModelValue13.asExpression();
        org.jboss.dmr.ModelType modelType20 = org.jboss.dmr.ModelType.PROPERTY;
        char char21 = modelType20.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue22 = org.jboss.dmr.TypeModelValue.of(modelType20);
        org.jboss.dmr.ModelType modelType23 = org.jboss.dmr.ModelType.PROPERTY;
        char char24 = modelType23.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue25 = org.jboss.dmr.TypeModelValue.of(modelType23);
        boolean boolean26 = typeModelValue22.equals(typeModelValue25);
        boolean boolean27 = typeModelValue13.equals(typeModelValue22);
        org.jboss.dmr.ModelType modelType28 = org.jboss.dmr.ModelType.PROPERTY;
        char char29 = modelType28.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue30 = org.jboss.dmr.TypeModelValue.of(modelType28);
        boolean boolean31 = typeModelValue30.asBoolean();
        boolean boolean32 = typeModelValue13.equals(typeModelValue30);
        org.jboss.dmr.ValueExpression valueExpression33 = typeModelValue30.asExpression();
        org.jboss.dmr.ModelType modelType34 = org.jboss.dmr.ModelType.TYPE;
        org.jboss.dmr.TypeModelValue typeModelValue35 = org.jboss.dmr.TypeModelValue.of(modelType34);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.set("hi!", 0.0d);
        java.lang.String str41 = modelNode37.toString();
        org.jboss.dmr.ModelNode modelNode42 = modelNode37.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode44 = modelNode37.set(100);
        org.jboss.dmr.ModelNode modelNode45 = modelNode36.add(modelNode37);
        org.jboss.dmr.ModelType modelType47 = org.jboss.dmr.ModelType.BYTES;
        char char48 = modelType47.getTypeChar();
        org.jboss.dmr.ModelNode modelNode49 = modelNode36.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType47);
        org.jboss.dmr.TypeModelValue typeModelValue50 = org.jboss.dmr.TypeModelValue.of(modelType47);
        boolean boolean51 = typeModelValue50.asBoolean();
        boolean boolean52 = typeModelValue35.equals(typeModelValue50);
        boolean boolean53 = typeModelValue30.equals(typeModelValue35);
        java.lang.String str54 = typeModelValue35.asString();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PROPERTY" + "'", str15, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + modelType20 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType20.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + 'p' + "'", char21 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue22);
        org.junit.Assert.assertTrue("'" + modelType23 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType23.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char24 + "' != '" + 'p' + "'", char24 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + modelType28 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType28.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + 'p' + "'", char29 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(valueExpression33);
        org.junit.Assert.assertTrue("'" + modelType34 + "' != '" + org.jboss.dmr.ModelType.TYPE + "'", modelType34.equals(org.jboss.dmr.ModelType.TYPE));
        org.junit.Assert.assertNotNull(typeModelValue35);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(\"hi!\" => 0.0)" + "'", str41, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertTrue("'" + modelType47 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType47.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char48 + "' != '" + 'b' + "'", char48 == 'b');
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(typeModelValue50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "TYPE" + "'", str54, "TYPE");
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.ValueExpression valueExpression5 = stringModelValue1.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal6 = stringModelValue1.asBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(valueExpression5);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        byte[] byteArray14 = intModelValue9.asBytes();
        org.jboss.dmr.IntModelValue intModelValue16 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str17 = intModelValue16.asString();
        double double19 = intModelValue16.asDouble((double) 2);
        int int20 = intModelValue16.asInt();
        byte[] byteArray21 = intModelValue16.asBytes();
        long long22 = intModelValue16.asLong();
        boolean boolean23 = intModelValue9.equals(intModelValue16);
        java.lang.String str24 = intModelValue9.asString();
        boolean boolean25 = intModelValue9.asBoolean();
        org.jboss.dmr.StringModelValue stringModelValue27 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory29 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream30 = null;
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream(inputStream30, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream32);
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory29.newModelReader((java.io.InputStream) inputStream33);
        java.io.OutputStream outputStream35 = null;
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream(outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream36);
        outputStream36.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelStreamFactory29.newModelWriter((java.io.OutputStream) outputStream36);
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelWriter40.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter43 = modelWriter41.writeInt((int) (byte) 10);
        stringModelValue27.write(modelWriter43);
        org.jboss.dmr.stream.ModelWriter modelWriter46 = modelWriter43.writeBoolean(false);
        intModelValue9.write(modelWriter46);
        org.jboss.dmr.stream.ModelWriter modelWriter48 = modelWriter46.writeObjectStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter49 = modelWriter48.writeListEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting OBJECT_END or STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 32]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32" + "'", str17, "32");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 32.0d + "'", double19 == 32.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "32" + "'", str24, "32");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory29);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter41);
        org.junit.Assert.assertNotNull(modelWriter43);
        org.junit.Assert.assertNotNull(modelWriter46);
        org.junit.Assert.assertNotNull(modelWriter48);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        boolean boolean16 = objectModelValue15.asBoolean();
        int int18 = objectModelValue15.asInt(0);
        org.jboss.dmr.ModelValue modelValue20 = objectModelValue15.copy(false);
        boolean boolean21 = objectModelValue7.equals(objectModelValue15);
        org.jboss.dmr.ModelValue modelValue22 = objectModelValue15.resolve();
        org.jboss.dmr.ModelValue modelValue23 = objectModelValue15.resolve();
        org.jboss.dmr.ModelType modelType24 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode(modelType24);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set("hi!", 0.0d);
        org.jboss.dmr.Property property31 = new org.jboss.dmr.Property("", modelNode30);
        org.jboss.dmr.ModelNode modelNode32 = modelNode25.set(property31);
        boolean boolean33 = objectModelValue15.equals((java.lang.Object) modelNode25);
        org.jboss.dmr.ObjectModelValue objectModelValue34 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode35 = objectModelValue34.asObject();
        java.util.Set<java.lang.String> strSet36 = objectModelValue34.getKeys();
        org.jboss.dmr.ModelNode modelNode38 = objectModelValue34.removeChild("hi!");
        java.lang.String str39 = objectModelValue34.asString();
        boolean boolean41 = objectModelValue34.has("H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str44 = longModelValue43.asString();
        double double46 = longModelValue43.asDouble((double) 32L);
        int int48 = longModelValue43.asInt((int) (short) 10);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory50 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream51 = null;
        org.jboss.dmr.Base64.InputStream inputStream53 = new org.jboss.dmr.Base64.InputStream(inputStream51, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream54 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream53);
        org.jboss.dmr.stream.ModelReader modelReader55 = modelStreamFactory50.newModelReader((java.io.InputStream) inputStream54);
        java.io.OutputStream outputStream56 = null;
        org.jboss.dmr.Base64.OutputStream outputStream57 = new org.jboss.dmr.Base64.OutputStream(outputStream56);
        org.jboss.dmr.Base64.OutputStream outputStream58 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream57);
        outputStream57.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter61 = modelStreamFactory50.newModelWriter((java.io.OutputStream) outputStream57);
        org.jboss.dmr.stream.ModelWriter modelWriter62 = modelWriter61.writeListStart();
        longModelValue43.write(modelWriter61);
        objectModelValue34.write(modelWriter61);
        long long66 = objectModelValue34.asLong(2L);
        long long67 = objectModelValue34.asLong();
        boolean boolean68 = objectModelValue15.equals(objectModelValue34);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(modelValue23);
        org.junit.Assert.assertTrue("'" + modelType24 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType24.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(modelNode38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory50);
        org.junit.Assert.assertNotNull(modelReader55);
        org.junit.Assert.assertNotNull(modelWriter61);
        org.junit.Assert.assertNotNull(modelWriter62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression9 = bigDecimalModelValue7.asExpression();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asList();
        org.jboss.dmr.ListModelValue listModelValue15 = new org.jboss.dmr.ListModelValue(modelNodeList14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue15);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue15.resolve();
        int int19 = listModelValue15.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList20 = listModelValue15.asPropertyList();
        java.lang.String str21 = listModelValue15.asString();
        int int23 = listModelValue15.asInt(2);
        boolean boolean25 = listModelValue15.has("{ \"expression \\\"hi!\\\"\" : { \"BYTES_VALUE\" : \"AQ==\" } }");
        org.jboss.dmr.ModelValue modelValue26 = listModelValue15.copy();
        boolean boolean27 = bigDecimalModelValue7.equals((java.lang.Object) listModelValue15);
        int int28 = bigDecimalModelValue7.asInt();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str21, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(modelValue26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isExpression();
        boolean boolean18 = modelReader15.isObjectStart();
        boolean boolean19 = modelReader15.isLong();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = modelReader15.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't string");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelValue modelValue6 = listModelValue5.resolve();
        long long8 = listModelValue5.asLong((long) (short) 10);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        java.lang.Long long10 = modelNode9.asLongOrNull();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ListModelValue listModelValue16 = new org.jboss.dmr.ListModelValue(modelNodeList15);
        java.lang.String str17 = listModelValue16.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = listModelValue16.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode9.asList(modelNodeList18);
        boolean boolean20 = listModelValue5.equals((java.lang.Object) modelNodeList19);
        org.jboss.dmr.ModelNode modelNode22 = listModelValue5.getChild(0);
        org.jboss.dmr.ExpressionValue expressionValue25 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression26 = expressionValue25.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver27 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str28 = valueExpression26.resolveString(valueExpressionResolver27);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver29 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigInteger bigInteger30 = valueExpression26.resolveBigInteger(valueExpressionResolver29);
        java.lang.String str31 = valueExpression26.getExpressionString();
        org.jboss.dmr.ModelNode modelNode32 = modelNode22.set("{ \"expression \\\"hi!\\\"\" : { \"BYTES_VALUE\" : \"AQ==\" } }", valueExpression26);
        org.jboss.dmr.ExpressionValue expressionValue35 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue37 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean38 = expressionValue35.equals(expressionValue37);
        org.jboss.dmr.ExpressionValue expressionValue40 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue42 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean43 = expressionValue40.equals(expressionValue42);
        boolean boolean44 = expressionValue35.equals(expressionValue42);
        org.jboss.dmr.ValueExpression valueExpression45 = expressionValue42.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue47 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression48 = expressionValue47.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue50 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str51 = expressionValue50.toString();
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode56 = modelNode53.set("hi!", 0.0d);
        org.jboss.dmr.Property property57 = new org.jboss.dmr.Property("", modelNode56);
        boolean boolean58 = expressionValue50.equals((java.lang.Object) property57);
        boolean boolean59 = expressionValue47.equals(expressionValue50);
        boolean boolean60 = expressionValue42.equals((java.lang.Object) boolean59);
        org.jboss.dmr.ValueExpression valueExpression61 = expressionValue42.asExpression();
        org.jboss.dmr.ModelNode modelNode62 = new org.jboss.dmr.ModelNode(valueExpression61);
        org.jboss.dmr.ModelNode modelNode65 = modelNode62.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4", "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode66 = modelNode22.add("{\n    \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : {\n        \"hi!\" : 0.0\n    }\n}", modelNode65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNull(long10);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str17, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(valueExpression26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(valueExpression45);
        org.junit.Assert.assertNotNull(valueExpression48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "expression \"hi!\"" + "'", str51, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(valueExpression61);
        org.junit.Assert.assertNotNull(modelNode65);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isBytes();
        boolean boolean24 = modelReader15.isDouble();
        boolean boolean25 = modelReader15.isListStart();
        boolean boolean26 = modelReader15.isString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray27 = modelReader15.getBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't bytes");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        byte[] byteArray5 = doubleModelValue1.asBytes();
        java.math.BigDecimal bigDecimal6 = doubleModelValue1.asBigDecimal();
        org.jboss.dmr.DoubleModelValue doubleModelValue8 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long9 = doubleModelValue8.asLong();
        boolean boolean11 = doubleModelValue8.asBoolean(true);
        int int12 = doubleModelValue8.asInt();
        boolean boolean13 = doubleModelValue1.equals(doubleModelValue8);
        boolean boolean14 = doubleModelValue8.asBoolean();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((int) ' ');
        boolean boolean7 = doubleModelValue1.asBoolean();
        java.math.BigInteger bigInteger8 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.DoubleModelValue doubleModelValue10 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long11 = doubleModelValue10.asLong();
        boolean boolean12 = doubleModelValue1.equals(doubleModelValue10);
        boolean boolean13 = doubleModelValue1.asBoolean();
        double double14 = doubleModelValue1.asDouble();
        long long16 = doubleModelValue1.asLong((long) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        boolean boolean8 = modelNode3.has("1L");
        org.jboss.dmr.DoubleModelValue doubleModelValue11 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long12 = doubleModelValue11.asLong();
        long long14 = doubleModelValue11.asLong((long) 32);
        java.math.BigInteger bigInteger15 = doubleModelValue11.asBigInteger();
        org.jboss.dmr.ModelNode modelNode16 = modelNode3.set("PROPERTY_VALUE", bigInteger15);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode18 = modelNode3.add(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(modelNode16);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((-1.0d));
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.clone();
        org.jboss.dmr.Validation.validate(modelNode3, "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4\" => \"\\\"(\\\\\\\"\\\\\\\" => (\\\\\\\"hi!\\\\\\\" => 0.0))\\\"\")");
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.addEmptyObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode8 = modelNode3.remove("(\"rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==\" => (\"hi!\" => 0.0))");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode6);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        java.math.BigInteger bigInteger6 = bigIntegerModelValue4.asBigInteger();
        int int7 = bigIntegerModelValue4.asInt();
        java.io.DataOutput dataOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigIntegerModelValue4.writeExternal(dataOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode42 = modelNode27.set((long) 100);
        org.jboss.dmr.ModelType modelType43 = modelNode42.getType();
        int int44 = modelNode42.asInt();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + modelType43 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType43.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str3 = modelNode1.asString("true");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(bigDecimal9);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.setNoCopy("35", modelNode12);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("hi!", 0.0d);
        org.jboss.dmr.Property property20 = new org.jboss.dmr.Property("", modelNode19);
        boolean boolean22 = modelNode19.hasDefined((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode23 = modelNode13.setNoCopy("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4", modelNode19);
        modelNode19.protect();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        byte[] byteArray3 = booleanModelValue1.asBytes();
        int int5 = booleanModelValue1.asInt((int) (short) 1);
        int int6 = booleanModelValue1.asInt();
        org.jboss.dmr.ValueExpression valueExpression7 = booleanModelValue1.asExpression();
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str10 = intModelValue9.asString();
        double double12 = intModelValue9.asDouble((double) 2);
        java.math.BigInteger bigInteger13 = intModelValue9.asBigInteger();
        java.math.BigInteger bigInteger14 = intModelValue9.asBigInteger();
        byte[] byteArray15 = intModelValue9.asBytes();
        int int16 = intModelValue9.asInt();
        boolean boolean17 = booleanModelValue1.equals((java.lang.Object) intModelValue9);
        java.math.BigInteger bigInteger18 = intModelValue9.asBigInteger();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "32" + "'", str10, "32");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigInteger18);
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) 'a');
        int int9 = longModelValue1.asInt((int) '4');
        java.lang.String str10 = longModelValue1.asString();
        long long11 = longModelValue1.asLong();
        double double13 = longModelValue1.asDouble((double) 52);
        long long15 = longModelValue1.asLong((long) 10);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) longModelValue1);
        org.jboss.dmr.ModelNode modelNode17 = modelNode16.clear();
        boolean boolean19 = modelNode16.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode20 = modelNode16.clone();
        org.jboss.dmr.ModelNode modelNode23 = modelNode16.add("LONG", true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        long long3 = longModelValue1.asLong((long) (byte) -1);
        double double4 = longModelValue1.asDouble();
        double double5 = longModelValue1.asDouble();
        long long6 = longModelValue1.asLong();
        long long8 = longModelValue1.asLong(0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ModelType modelType9 = typeModelValue5.asType();
        boolean boolean10 = typeModelValue5.asBoolean();
        java.lang.String str11 = typeModelValue5.asString();
        org.jboss.dmr.ObjectModelValue objectModelValue12 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue12.asObject();
        org.jboss.dmr.ModelValue modelValue14 = objectModelValue12.protect();
        java.util.List<org.jboss.dmr.Property> propertyList15 = objectModelValue12.asPropertyList();
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(97L);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory19 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream20 = null;
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream(inputStream20, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream22);
        org.jboss.dmr.stream.ModelReader modelReader24 = modelStreamFactory19.newModelReader((java.io.InputStream) inputStream23);
        java.io.OutputStream outputStream25 = null;
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream(outputStream25);
        org.jboss.dmr.Base64.OutputStream outputStream27 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream26);
        outputStream26.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelStreamFactory19.newModelWriter((java.io.OutputStream) outputStream26);
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelWriter30.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue33 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray34 = intModelValue33.asBytes();
        int int36 = intModelValue33.asInt(0);
        java.math.BigInteger bigInteger37 = intModelValue33.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter38 = modelWriter31.writeBigInteger(bigInteger37);
        org.jboss.dmr.stream.ModelWriter modelWriter39 = modelWriter31.writeListStart();
        longModelValue17.write(modelWriter39);
        objectModelValue12.write(modelWriter39);
        org.jboss.dmr.DoubleModelValue doubleModelValue43 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long44 = doubleModelValue43.asLong();
        boolean boolean45 = doubleModelValue43.asBoolean();
        java.math.BigInteger bigInteger46 = doubleModelValue43.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter47 = modelWriter39.writeBigInteger(bigInteger46);
        typeModelValue5.write(modelWriter47);
        org.jboss.dmr.StringModelValue stringModelValue50 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory52 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream53 = null;
        org.jboss.dmr.Base64.InputStream inputStream55 = new org.jboss.dmr.Base64.InputStream(inputStream53, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream56 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream55);
        org.jboss.dmr.stream.ModelReader modelReader57 = modelStreamFactory52.newModelReader((java.io.InputStream) inputStream56);
        java.io.OutputStream outputStream58 = null;
        org.jboss.dmr.Base64.OutputStream outputStream59 = new org.jboss.dmr.Base64.OutputStream(outputStream58);
        org.jboss.dmr.Base64.OutputStream outputStream60 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream59);
        outputStream59.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter63 = modelStreamFactory52.newModelWriter((java.io.OutputStream) outputStream59);
        org.jboss.dmr.stream.ModelWriter modelWriter64 = modelWriter63.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter66 = modelWriter64.writeInt((int) (byte) 10);
        stringModelValue50.write(modelWriter66);
        org.jboss.dmr.stream.ModelWriter modelWriter68 = modelWriter66.writePropertyStart();
        boolean boolean69 = typeModelValue5.equals((java.lang.Object) modelWriter66);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter71 = modelWriter66.writeInt((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PROPERTY" + "'", str11, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertNotNull(propertyList15);
        org.junit.Assert.assertNotNull(modelStreamFactory19);
        org.junit.Assert.assertNotNull(modelReader24);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelWriter31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(modelWriter38);
        org.junit.Assert.assertNotNull(modelWriter39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(modelWriter47);
        org.junit.Assert.assertNotNull(modelStreamFactory52);
        org.junit.Assert.assertNotNull(modelReader57);
        org.junit.Assert.assertNotNull(modelWriter63);
        org.junit.Assert.assertNotNull(modelWriter64);
        org.junit.Assert.assertNotNull(modelWriter66);
        org.junit.Assert.assertNotNull(modelWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        long long10 = bigIntegerModelValue4.asLong((long) '4');
        int int12 = bigIntegerModelValue4.asInt(1);
        boolean boolean13 = bigIntegerModelValue4.asBoolean();
        java.math.BigDecimal bigDecimal14 = bigIntegerModelValue4.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression15 = bigIntegerModelValue4.asExpression();
        org.jboss.dmr.ValueExpression valueExpression16 = bigIntegerModelValue4.asExpression();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertNotNull(valueExpression16);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        int int13 = objectModelValue7.asInt();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        java.util.Set<java.lang.String> strSet17 = objectModelValue15.getKeys();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue15.removeChild("1");
        boolean boolean20 = objectModelValue15.asBoolean();
        boolean boolean21 = objectModelValue7.equals(objectModelValue15);
        boolean boolean22 = objectModelValue7.asBoolean();
        int int24 = objectModelValue7.asInt((int) (short) 0);
        org.jboss.dmr.ModelValue modelValue26 = objectModelValue7.copy(true);
        java.util.List<org.jboss.dmr.Property> propertyList27 = objectModelValue7.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(modelNode19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(modelValue26);
        org.junit.Assert.assertNotNull(propertyList27);
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((int) ' ');
        boolean boolean7 = doubleModelValue1.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression8 = doubleModelValue1.asExpression();
        org.jboss.dmr.BooleanModelValue booleanModelValue10 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long11 = booleanModelValue10.asLong();
        org.jboss.dmr.ValueExpression valueExpression12 = booleanModelValue10.asExpression();
        java.lang.String str13 = valueExpression12.toString();
        org.jboss.dmr.ExpressionValue expressionValue15 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression16 = expressionValue15.asExpression();
        boolean boolean17 = valueExpression12.equals(valueExpression16);
        org.jboss.dmr.LongModelValue longModelValue19 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal20 = longModelValue19.asBigDecimal();
        int int21 = longModelValue19.asInt();
        org.jboss.dmr.ValueExpression valueExpression22 = longModelValue19.asExpression();
        boolean boolean23 = valueExpression16.equals(valueExpression22);
        int int24 = valueExpression22.resolveInt();
        org.jboss.dmr.BooleanModelValue booleanModelValue26 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long27 = booleanModelValue26.asLong();
        org.jboss.dmr.ValueExpression valueExpression28 = booleanModelValue26.asExpression();
        java.lang.String str29 = valueExpression28.toString();
        org.jboss.dmr.ExpressionValue expressionValue31 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression32 = expressionValue31.asExpression();
        boolean boolean33 = valueExpression28.equals(valueExpression32);
        java.lang.String str34 = valueExpression32.resolveString();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver35 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str36 = valueExpression32.resolveString(valueExpressionResolver35);
        java.lang.String str37 = valueExpression22.resolveString(valueExpressionResolver35);
        java.lang.String str38 = valueExpression8.resolveString(valueExpressionResolver35);
        org.jboss.dmr.ValueExpression valueExpression40 = new org.jboss.dmr.ValueExpression("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQAC0JJR19ERUNJTUFM");
        boolean boolean41 = valueExpression8.equals(valueExpression40);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(booleanModelValue10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Expression \"true\"" + "'", str13, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(booleanModelValue26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Expression \"true\"" + "'", str29, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "52" + "'", str37, "52");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10.0" + "'", str38, "10.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.TYPE;
        org.jboss.dmr.TypeModelValue typeModelValue1 = org.jboss.dmr.TypeModelValue.of(modelType0);
        boolean boolean3 = typeModelValue1.asBoolean(true);
        org.jboss.dmr.ModelType modelType4 = typeModelValue1.asType();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType4);
        org.jboss.dmr.LongModelValue longModelValue7 = new org.jboss.dmr.LongModelValue(1L);
        long long9 = longModelValue7.asLong((long) (short) 0);
        java.lang.String str10 = longModelValue7.asString();
        byte[] byteArray11 = longModelValue7.asBytes();
        org.jboss.dmr.ModelType modelType12 = longModelValue7.getType();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType12);
        boolean boolean15 = typeModelValue13.has("\"{\n    \\\"EXPRESSION_VALUE\\\" : 35\n}\"");
        org.jboss.dmr.ValueExpression valueExpression16 = typeModelValue13.asExpression();
        boolean boolean17 = typeModelValue5.equals(typeModelValue13);
        org.jboss.dmr.BooleanModelValue booleanModelValue18 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double19 = booleanModelValue18.asDouble();
        org.jboss.dmr.ModelValue modelValue20 = booleanModelValue18.copy();
        java.math.BigInteger bigInteger21 = booleanModelValue18.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue22 = new org.jboss.dmr.BigIntegerModelValue(bigInteger21);
        double double24 = bigIntegerModelValue22.asDouble((double) 'b');
        double double25 = bigIntegerModelValue22.asDouble();
        double double27 = bigIntegerModelValue22.asDouble(8.0d);
        org.jboss.dmr.ModelType modelType28 = org.jboss.dmr.ModelType.PROPERTY;
        char char29 = modelType28.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue30 = org.jboss.dmr.TypeModelValue.of(modelType28);
        boolean boolean31 = typeModelValue30.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression32 = typeModelValue30.asExpression();
        boolean boolean33 = bigIntegerModelValue22.equals((java.lang.Object) typeModelValue30);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = modelNode37.asList();
        org.jboss.dmr.ModelType modelType39 = modelNode37.getType();
        org.jboss.dmr.TypeModelValue typeModelValue40 = org.jboss.dmr.TypeModelValue.of(modelType39);
        boolean boolean42 = typeModelValue40.asBoolean(false);
        boolean boolean43 = typeModelValue30.equals(typeModelValue40);
        org.jboss.dmr.ModelType modelType44 = org.jboss.dmr.ModelType.PROPERTY;
        char char45 = modelType44.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue46 = org.jboss.dmr.TypeModelValue.of(modelType44);
        boolean boolean47 = typeModelValue46.asBoolean();
        java.lang.String str48 = typeModelValue46.asString();
        boolean boolean49 = typeModelValue30.equals(typeModelValue46);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory51 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream52 = null;
        org.jboss.dmr.Base64.InputStream inputStream54 = new org.jboss.dmr.Base64.InputStream(inputStream52, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream55 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream54);
        org.jboss.dmr.stream.ModelReader modelReader56 = modelStreamFactory51.newModelReader((java.io.InputStream) inputStream55);
        java.io.OutputStream outputStream57 = null;
        org.jboss.dmr.Base64.OutputStream outputStream58 = new org.jboss.dmr.Base64.OutputStream(outputStream57);
        org.jboss.dmr.Base64.OutputStream outputStream59 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream58);
        outputStream58.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter62 = modelStreamFactory51.newModelWriter((java.io.OutputStream) outputStream58);
        org.jboss.dmr.stream.ModelWriter modelWriter63 = modelWriter62.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter65 = modelWriter62.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter67 = modelWriter65.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter69 = modelWriter65.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter71 = modelWriter69.writeLong(100L);
        typeModelValue46.write(modelWriter71);
        org.jboss.dmr.stream.ModelWriter modelWriter74 = modelWriter71.writeDouble((double) 3L);
        typeModelValue5.write(modelWriter71);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.TYPE + "'", modelType0.equals(org.jboss.dmr.ModelType.TYPE));
        org.junit.Assert.assertNotNull(typeModelValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + modelType4 + "' != '" + org.jboss.dmr.ModelType.TYPE + "'", modelType4.equals(org.jboss.dmr.ModelType.TYPE));
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType12 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType12.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(booleanModelValue18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + modelType28 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType28.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + 'p' + "'", char29 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertTrue("'" + modelType39 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType39.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + modelType44 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType44.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + 'p' + "'", char45 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PROPERTY" + "'", str48, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory51);
        org.junit.Assert.assertNotNull(modelReader56);
        org.junit.Assert.assertNotNull(modelWriter62);
        org.junit.Assert.assertNotNull(modelWriter63);
        org.junit.Assert.assertNotNull(modelWriter65);
        org.junit.Assert.assertNotNull(modelWriter67);
        org.junit.Assert.assertNotNull(modelWriter69);
        org.junit.Assert.assertNotNull(modelWriter71);
        org.junit.Assert.assertNotNull(modelWriter74);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.hasNext();
        boolean boolean22 = modelReader15.isExpression();
        boolean boolean23 = modelReader15.isBytes();
        boolean boolean24 = modelReader15.isBoolean();
        boolean boolean25 = modelReader15.isUndefined();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.math.BigInteger bigInteger16 = bytesModelValue12.asBigInteger();
        java.lang.String str17 = bytesModelValue12.asString();
        long long19 = bytesModelValue12.asLong((long) (short) 0);
        long long21 = bytesModelValue12.asLong((long) (short) 10);
        org.jboss.dmr.LongModelValue longModelValue23 = new org.jboss.dmr.LongModelValue(1L);
        long long25 = longModelValue23.asLong((long) (short) 0);
        java.lang.String str26 = longModelValue23.asString();
        byte[] byteArray27 = longModelValue23.asBytes();
        org.jboss.dmr.ModelType modelType28 = longModelValue23.getType();
        org.jboss.dmr.TypeModelValue typeModelValue29 = org.jboss.dmr.TypeModelValue.of(modelType28);
        boolean boolean31 = typeModelValue29.has("\"{\n    \\\"EXPRESSION_VALUE\\\" : 35\n}\"");
        java.lang.String str32 = typeModelValue29.asString();
        boolean boolean33 = bytesModelValue12.equals((java.lang.Object) str32);
        org.jboss.dmr.LongModelValue longModelValue35 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str36 = longModelValue35.asString();
        byte[] byteArray37 = longModelValue35.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue38 = new org.jboss.dmr.BytesModelValue(byteArray37);
        java.lang.String str39 = bytesModelValue38.asString();
        int int40 = bytesModelValue38.asInt();
        byte[] byteArray41 = bytesModelValue38.asBytes();
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str44 = longModelValue43.asString();
        byte[] byteArray45 = longModelValue43.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue46 = new org.jboss.dmr.BytesModelValue(byteArray45);
        java.lang.String str47 = bytesModelValue46.asString();
        int int48 = bytesModelValue46.asInt();
        int int49 = bytesModelValue46.asInt();
        org.jboss.dmr.LongModelValue longModelValue51 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str52 = longModelValue51.asString();
        byte[] byteArray53 = longModelValue51.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue54 = new org.jboss.dmr.BytesModelValue(byteArray53);
        double double55 = bytesModelValue54.asDouble();
        boolean boolean56 = bytesModelValue46.equals(bytesModelValue54);
        byte[] byteArray57 = bytesModelValue54.asBytes();
        java.math.BigInteger bigInteger58 = bytesModelValue54.asBigInteger();
        boolean boolean59 = bytesModelValue38.equals(bytesModelValue54);
        byte[] byteArray60 = bytesModelValue54.asBytes();
        org.jboss.dmr.LongModelValue longModelValue62 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str63 = longModelValue62.asString();
        byte[] byteArray64 = longModelValue62.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue65 = new org.jboss.dmr.BytesModelValue(byteArray64);
        java.lang.String str66 = bytesModelValue65.asString();
        int int67 = bytesModelValue65.asInt();
        long long69 = bytesModelValue65.asLong((long) (short) 1);
        int int70 = bytesModelValue65.asInt();
        int int71 = bytesModelValue65.asInt();
        byte[] byteArray72 = bytesModelValue65.asBytes();
        org.jboss.dmr.LongModelValue longModelValue74 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str75 = longModelValue74.asString();
        byte[] byteArray76 = longModelValue74.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue77 = new org.jboss.dmr.BytesModelValue(byteArray76);
        java.lang.String str78 = bytesModelValue77.asString();
        int int79 = bytesModelValue77.asInt();
        long long81 = bytesModelValue77.asLong((long) (short) 1);
        int int82 = bytesModelValue77.asInt();
        double double83 = bytesModelValue77.asDouble();
        boolean boolean84 = bytesModelValue65.equals(bytesModelValue77);
        boolean boolean85 = bytesModelValue54.equals(bytesModelValue65);
        double double87 = bytesModelValue65.asDouble((double) 112L);
        double double89 = bytesModelValue65.asDouble((double) (byte) -1);
        boolean boolean90 = bytesModelValue12.equals(bytesModelValue65);
        double double91 = bytesModelValue12.asDouble();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str17, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType28 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType28.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertNotNull(typeModelValue29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "LONG" + "'", str32, "LONG");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str39, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str47, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 4.9E-324d + "'", double55 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str66, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str78, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4.9E-324d + "'", double83 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 4.9E-324d + "'", double87 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 4.9E-324d + "'", double89 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4.9E-324d + "'", double91 == 4.9E-324d);
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        java.lang.String str10 = bigDecimalModelValue7.asString();
        java.math.BigInteger bigInteger11 = bigDecimalModelValue7.asBigInteger();
        int int12 = bigDecimalModelValue7.asInt();
        java.math.BigDecimal bigDecimal13 = bigDecimalModelValue7.asBigDecimal();
        java.lang.String str14 = bigDecimalModelValue7.toString();
        int int16 = bigDecimalModelValue7.asInt(112);
        org.jboss.dmr.ValueExpression valueExpression17 = bigDecimalModelValue7.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue19 = new org.jboss.dmr.ExpressionValue("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelType modelType20 = expressionValue19.getType();
        org.jboss.dmr.ValueExpression valueExpression21 = expressionValue19.asExpression();
        boolean boolean22 = valueExpression17.equals(valueExpression21);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode(valueExpression17);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0" + "'", str10, "1.0");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "big decimal 1.0" + "'", str14, "big decimal 1.0");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertTrue("'" + modelType20 + "' != '" + org.jboss.dmr.ModelType.EXPRESSION + "'", modelType20.equals(org.jboss.dmr.ModelType.EXPRESSION));
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.Property> propertyList11 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = propertyModelValue10.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.setEmptyList();
        boolean boolean16 = modelNode14.asBoolean(false);
        org.jboss.dmr.ObjectModelValue objectModelValue18 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue18.asObject();
        org.jboss.dmr.ModelNode modelNode21 = objectModelValue18.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode23 = objectModelValue18.getChild("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.Property property24 = new org.jboss.dmr.Property("PROPERTY_VALUE", modelNode23);
        modelNode14.setNoCopy(modelNode23);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.lang.String str32 = modelNode28.toString();
        org.jboss.dmr.ModelNode modelNode33 = modelNode28.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode35 = modelNode28.set(100);
        org.jboss.dmr.ModelNode modelNode36 = modelNode27.add(modelNode28);
        org.jboss.dmr.ModelNode modelNode38 = modelNode36.set((double) (-1.0f));
        byte[] byteArray39 = modelNode38.asBytesOrNull();
        org.jboss.dmr.ModelNode modelNode40 = modelNode14.setNoCopy("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==", modelNode38);
        org.jboss.dmr.ModelNode modelNode42 = modelNode38.set((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(\"hi!\" => 0.0)" + "'", str32, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-65, -16, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode42);
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode(valueExpression8);
        java.lang.String str10 = valueExpression8.getExpressionString();
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double12 = booleanModelValue11.asDouble();
        org.jboss.dmr.ModelValue modelValue13 = booleanModelValue11.copy();
        java.math.BigInteger bigInteger14 = booleanModelValue11.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue15 = new org.jboss.dmr.BigIntegerModelValue(bigInteger14);
        java.lang.String str16 = bigIntegerModelValue15.asString();
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double18 = booleanModelValue17.asDouble();
        org.jboss.dmr.ModelValue modelValue19 = booleanModelValue17.copy();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue21 = new org.jboss.dmr.BigIntegerModelValue(bigInteger20);
        int int23 = bigIntegerModelValue21.asInt((int) (short) 1);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        java.lang.String str28 = modelNode24.toString();
        org.jboss.dmr.ModelNode modelNode29 = modelNode24.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode31 = modelNode24.set(100);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.lang.String str36 = modelNode32.toString();
        org.jboss.dmr.ModelNode modelNode37 = modelNode32.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode42 = modelNode39.set("hi!", 0.0d);
        org.jboss.dmr.Property property43 = new org.jboss.dmr.Property("", modelNode42);
        org.jboss.dmr.ModelNode modelNode44 = modelNode32.set(property43);
        java.lang.String str45 = modelNode44.asString();
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode49 = modelNode46.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList50 = modelNode49.asList();
        org.jboss.dmr.ListModelValue listModelValue51 = new org.jboss.dmr.ListModelValue(modelNodeList50);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue51);
        org.jboss.dmr.ModelValue modelValue53 = listModelValue51.resolve();
        int int55 = listModelValue51.asInt((int) (byte) 100);
        boolean boolean56 = listModelValue51.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList57 = listModelValue51.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList58 = modelNode44.asList(modelNodeList57);
        org.jboss.dmr.ModelNode modelNode59 = modelNode31.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList57);
        boolean boolean60 = bigIntegerModelValue21.equals((java.lang.Object) modelNode31);
        boolean boolean61 = bigIntegerModelValue15.equals(bigIntegerModelValue21);
        boolean boolean63 = bigIntegerModelValue21.equals((java.lang.Object) "{}");
        org.jboss.dmr.ValueExpression valueExpression64 = bigIntegerModelValue21.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver65 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal66 = valueExpression64.resolveBigDecimal(valueExpressionResolver65);
        java.lang.String str67 = valueExpression8.resolveString(valueExpressionResolver65);
        java.lang.String str68 = valueExpression8.getExpressionString();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY" + "'", str10, "PROPERTY");
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"hi!\" => 0.0)" + "'", str28, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(\"hi!\" => 0.0)" + "'", str36, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str45, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNodeList50);
        org.junit.Assert.assertNotNull(modelValue53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(modelNodeList57);
        org.junit.Assert.assertNotNull(modelNodeList58);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(valueExpression64);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PROPERTY" + "'", str67, "PROPERTY");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PROPERTY" + "'", str68, "PROPERTY");
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        int int13 = bigIntegerModelValue11.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue14 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double15 = booleanModelValue14.asDouble();
        org.jboss.dmr.ModelValue modelValue16 = booleanModelValue14.copy();
        java.math.BigInteger bigInteger17 = booleanModelValue14.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue18 = new org.jboss.dmr.BigIntegerModelValue(bigInteger17);
        java.lang.String str19 = bigIntegerModelValue18.asString();
        java.math.BigInteger bigInteger20 = bigIntegerModelValue18.asBigInteger();
        boolean boolean21 = bigIntegerModelValue11.equals(bigIntegerModelValue18);
        int int22 = bigIntegerModelValue18.asInt();
        boolean boolean23 = bigIntegerModelValue4.equals(bigIntegerModelValue18);
        org.jboss.dmr.BooleanModelValue booleanModelValue24 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double25 = booleanModelValue24.asDouble();
        org.jboss.dmr.ModelValue modelValue26 = booleanModelValue24.copy();
        java.math.BigInteger bigInteger27 = booleanModelValue24.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue28 = new org.jboss.dmr.BigIntegerModelValue(bigInteger27);
        java.lang.String str29 = bigIntegerModelValue28.asString();
        long long31 = bigIntegerModelValue28.asLong(32L);
        double double32 = bigIntegerModelValue28.asDouble();
        long long34 = bigIntegerModelValue28.asLong((long) '4');
        int int36 = bigIntegerModelValue28.asInt(1);
        boolean boolean37 = bigIntegerModelValue28.asBoolean();
        boolean boolean38 = bigIntegerModelValue18.equals(bigIntegerModelValue28);
        boolean boolean40 = bigIntegerModelValue18.asBoolean(false);
        java.math.BigDecimal bigDecimal41 = bigIntegerModelValue18.asBigDecimal();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanModelValue24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue26);
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(bigDecimal41);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        int int15 = intModelValue9.asInt(112);
        double double16 = intModelValue9.asDouble();
        int int18 = intModelValue9.asInt(1);
        boolean boolean19 = intModelValue9.asBoolean();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 32.0d + "'", double16 == 32.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        long long10 = bigIntegerModelValue4.asLong((long) '4');
        int int12 = bigIntegerModelValue4.asInt(1);
        long long13 = bigIntegerModelValue4.asLong();
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long17 = modelNode16.asLong();
        org.jboss.dmr.ValueExpression valueExpression18 = modelNode16.asExpression();
        java.math.BigDecimal bigDecimal19 = valueExpression18.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue21 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long22 = booleanModelValue21.asLong();
        org.jboss.dmr.ValueExpression valueExpression23 = booleanModelValue21.asExpression();
        boolean boolean25 = valueExpression23.equals((java.lang.Object) 'p');
        boolean boolean26 = valueExpression18.equals(valueExpression23);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode(valueExpression18);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode27, false);
        org.jboss.dmr.PropertyModelValue propertyModelValue30 = new org.jboss.dmr.PropertyModelValue(property29);
        boolean boolean31 = bigIntegerModelValue4.equals((java.lang.Object) propertyModelValue30);
        org.jboss.dmr.Property property32 = propertyModelValue30.asProperty();
        org.jboss.dmr.Property property33 = propertyModelValue30.asProperty();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(booleanModelValue21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        int int6 = doubleModelValue1.asInt(2);
        double double8 = doubleModelValue1.asDouble(0.0d);
        java.lang.String str9 = doubleModelValue1.asString();
        boolean boolean11 = doubleModelValue1.has(0);
        double double13 = doubleModelValue1.asDouble((double) 3);
        boolean boolean14 = doubleModelValue1.asBoolean();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        java.lang.Long long16 = modelNode15.asLongOrNull();
        java.lang.String str17 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode15);
        org.jboss.dmr.ModelNode modelNode19 = modelNode15.add(10L);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory21 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream22 = null;
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24);
        org.jboss.dmr.stream.ModelReader modelReader26 = modelStreamFactory21.newModelReader((java.io.InputStream) inputStream25);
        java.io.OutputStream outputStream27 = null;
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream(outputStream27);
        org.jboss.dmr.Base64.OutputStream outputStream29 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream28);
        outputStream28.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter32 = modelStreamFactory21.newModelWriter((java.io.OutputStream) outputStream28);
        org.jboss.dmr.stream.ModelWriter modelWriter33 = modelWriter32.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue35 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray36 = intModelValue35.asBytes();
        int int38 = intModelValue35.asInt(0);
        java.math.BigInteger bigInteger39 = intModelValue35.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelWriter33.writeBigInteger(bigInteger39);
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelWriter33.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter43 = modelWriter41.writeLong((long) (short) -1);
        modelNode19.write(modelWriter41);
        org.jboss.dmr.stream.ModelWriter modelWriter46 = modelWriter41.writeDouble((double) 10);
        doubleModelValue1.write(modelWriter41);
        long long49 = doubleModelValue1.asLong((long) 'I');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10.0" + "'", str9, "10.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(long16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4" + "'", str17, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelStreamFactory21);
        org.junit.Assert.assertNotNull(modelReader26);
        org.junit.Assert.assertNotNull(modelWriter32);
        org.junit.Assert.assertNotNull(modelWriter33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter41);
        org.junit.Assert.assertNotNull(modelWriter43);
        org.junit.Assert.assertNotNull(modelWriter46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        java.math.BigInteger bigInteger6 = bigIntegerModelValue4.asBigInteger();
        long long7 = bigIntegerModelValue4.asLong();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        boolean boolean18 = bigIntegerModelValue4.equals((java.lang.Object) (byte) 100);
        org.jboss.dmr.ValueExpression valueExpression19 = bigIntegerModelValue4.asExpression();
        org.jboss.dmr.LongModelValue longModelValue21 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal22 = longModelValue21.asBigDecimal();
        int int23 = longModelValue21.asInt();
        org.jboss.dmr.ValueExpression valueExpression24 = longModelValue21.asExpression();
        double double25 = longModelValue21.asDouble();
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        long long29 = longModelValue27.asLong((long) (short) 0);
        java.lang.String str30 = longModelValue27.asString();
        byte[] byteArray31 = longModelValue27.asBytes();
        org.jboss.dmr.ModelType modelType32 = longModelValue27.getType();
        long long34 = longModelValue27.asLong(1L);
        boolean boolean35 = longModelValue21.equals(longModelValue27);
        java.math.BigInteger bigInteger36 = longModelValue21.asBigInteger();
        org.jboss.dmr.BooleanModelValue booleanModelValue37 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double38 = booleanModelValue37.asDouble();
        org.jboss.dmr.ModelValue modelValue39 = booleanModelValue37.copy();
        java.math.BigInteger bigInteger40 = booleanModelValue37.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue41 = new org.jboss.dmr.BigIntegerModelValue(bigInteger40);
        double double43 = bigIntegerModelValue41.asDouble((double) 'b');
        java.lang.String str44 = bigIntegerModelValue41.asString();
        org.jboss.dmr.ValueExpression valueExpression45 = bigIntegerModelValue41.asExpression();
        boolean boolean47 = bigIntegerModelValue41.asBoolean(true);
        boolean boolean48 = bigIntegerModelValue41.asBoolean();
        boolean boolean50 = bigIntegerModelValue41.asBoolean(false);
        boolean boolean51 = longModelValue21.equals((java.lang.Object) boolean50);
        boolean boolean52 = valueExpression19.equals((java.lang.Object) boolean51);
        org.jboss.dmr.ExpressionValue expressionValue53 = new org.jboss.dmr.ExpressionValue(valueExpression19);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + modelType32 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType32.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(booleanModelValue37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(valueExpression45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        boolean boolean11 = bigDecimalModelValue7.asBoolean(true);
        double double12 = bigDecimalModelValue7.asDouble();
        java.math.BigInteger bigInteger13 = bigDecimalModelValue7.asBigInteger();
        long long15 = bigDecimalModelValue7.asLong(100L);
        java.math.BigInteger bigInteger16 = bigDecimalModelValue7.asBigInteger();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(bigInteger16);
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        int int8 = modelNode6.asInt(8);
        long long10 = modelNode6.asLong((long) ' ');
        org.jboss.dmr.ModelNode modelNode12 = modelNode6.set((int) 'i');
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long15 = modelNode14.asLong();
        org.jboss.dmr.ValueExpression valueExpression16 = modelNode14.asExpression();
        java.math.BigDecimal bigDecimal17 = valueExpression16.resolveBigDecimal();
        java.lang.String str18 = valueExpression16.getExpressionString();
        java.math.BigDecimal bigDecimal19 = valueExpression16.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue20 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal19);
        boolean boolean21 = bigDecimalModelValue20.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression22 = bigDecimalModelValue20.asExpression();
        int int23 = bigDecimalModelValue20.asInt();
        long long24 = bigDecimalModelValue20.asLong();
        double double25 = bigDecimalModelValue20.asDouble();
        java.math.BigInteger bigInteger26 = bigDecimalModelValue20.asBigInteger();
        java.math.BigDecimal bigDecimal27 = bigDecimalModelValue20.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode28 = modelNode12.set(bigDecimal27);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1.0" + "'", str18, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(modelNode28);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode16 = modelNode15.resolve();
        java.lang.String str17 = modelNode15.asString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode15.set((long) 52);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.setExpression("hi!", "hi!");
        java.lang.String str25 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode21);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = modelNode21.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode28 = modelNode21.set((double) 0);
        org.jboss.dmr.ModelType modelType30 = org.jboss.dmr.ModelType.PROPERTY;
        char char31 = modelType30.getTypeChar();
        org.jboss.dmr.ModelNode modelNode32 = modelNode21.set("[(\"hi!\" => 0.0)]", modelType30);
        org.jboss.dmr.Property property33 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode32);
        org.jboss.dmr.ModelNode modelNode34 = modelNode19.set(property33);
        org.jboss.dmr.ModelNode modelNode36 = modelNode19.set(false);
        boolean boolean37 = modelNode36.isProtected();
        org.jboss.dmr.ModelType modelType39 = org.jboss.dmr.ModelType.PROPERTY;
        char char40 = modelType39.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue41 = org.jboss.dmr.TypeModelValue.of(modelType39);
        char char42 = modelType39.getTypeChar();
        org.jboss.dmr.ModelNode modelNode43 = modelNode36.set("rO0ABXQAByJbOTdMXSI=", modelType39);
        org.jboss.dmr.stream.ModelWriter modelWriter44 = modelWriter13.writeType(modelType39);
        org.jboss.dmr.stream.ModelWriter modelWriter46 = modelWriter44.writeDouble(112.0d);
        org.jboss.dmr.stream.ModelWriter modelWriter48 = modelWriter44.writeLong((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter49 = modelWriter44.writeObjectEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting ',' or LIST_END");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "true" + "'", str17, "true");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str25, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertTrue("'" + modelType30 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType30.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + 'p' + "'", char31 == 'p');
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + modelType39 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType39.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char40 + "' != '" + 'p' + "'", char40 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + 'p' + "'", char42 == 'p');
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelWriter44);
        org.junit.Assert.assertNotNull(modelWriter46);
        org.junit.Assert.assertNotNull(modelWriter48);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 100);
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(bigInteger5);
        boolean boolean8 = modelNode6.hasDefined((int) '4');
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.setExpression("hi!", "hi!");
        java.lang.String str13 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode9);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode9.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode16 = modelNode9.set((double) 0);
        org.jboss.dmr.ModelNode modelNode17 = modelNode9.clear();
        org.jboss.dmr.ObjectModelValue objectModelValue18 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue18.asObject();
        java.util.Set<java.lang.String> strSet20 = objectModelValue18.getKeys();
        org.jboss.dmr.ModelNode modelNode22 = objectModelValue18.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean23 = objectModelValue18.asBoolean();
        int int25 = objectModelValue18.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode26 = objectModelValue18.asObject();
        java.util.Set<java.lang.String> strSet27 = modelNode26.keys();
        org.jboss.dmr.ModelNode modelNode28 = modelNode9.add(modelNode26);
        org.jboss.dmr.ModelNode modelNode29 = modelNode9.resolve();
        org.jboss.dmr.ModelNode modelNode30 = modelNode29.setEmptyList();
        org.jboss.dmr.ModelNode modelNode31 = modelNode6.set(modelNode29);
        org.jboss.dmr.ModelType modelType33 = org.jboss.dmr.ModelType.BIG_INTEGER;
        org.jboss.dmr.ModelNode modelNode34 = modelNode29.set("bytes { 0x40, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }", modelType33);
        org.jboss.dmr.BooleanModelValue booleanModelValue36 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray37 = booleanModelValue36.asBytes();
        java.lang.String str38 = booleanModelValue36.asString();
        int int39 = booleanModelValue36.asInt();
        org.jboss.dmr.ModelType modelType40 = org.jboss.dmr.ModelType.STRING;
        boolean boolean41 = booleanModelValue36.equals((java.lang.Object) modelType40);
        org.jboss.dmr.TypeModelValue typeModelValue42 = org.jboss.dmr.TypeModelValue.of(modelType40);
        org.jboss.dmr.ValueExpression valueExpression43 = typeModelValue42.asExpression();
        java.lang.String str44 = valueExpression43.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode45 = modelNode34.add(valueExpression43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str13, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertTrue("'" + modelType33 + "' != '" + org.jboss.dmr.ModelType.BIG_INTEGER + "'", modelType33.equals(org.jboss.dmr.ModelType.BIG_INTEGER));
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(booleanModelValue36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "true" + "'", str38, "true");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + modelType40 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType40.equals(org.jboss.dmr.ModelType.STRING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(typeModelValue42);
        org.junit.Assert.assertNotNull(valueExpression43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Expression \"STRING\"" + "'", str44, "Expression \"STRING\"");
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isPropertyStart();
        boolean boolean23 = modelReader15.isInt();
        boolean boolean24 = modelReader15.isListStart();
        boolean boolean25 = modelReader15.isLong();
        boolean boolean26 = modelReader15.isListStart();
        boolean boolean27 = modelReader15.isInt();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        java.io.InputStream inputStream5 = null;
        org.jboss.dmr.Base64.InputStream inputStream7 = new org.jboss.dmr.Base64.InputStream(inputStream5, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream8 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream7);
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream8);
        boolean boolean10 = stringModelValue1.equals((java.lang.Object) inputStream9);
        org.jboss.dmr.ValueExpression valueExpression11 = stringModelValue1.asExpression();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long14 = modelNode13.asLong();
        org.jboss.dmr.ValueExpression valueExpression15 = modelNode13.asExpression();
        java.math.BigDecimal bigDecimal16 = valueExpression15.resolveBigDecimal();
        java.lang.String str17 = valueExpression15.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue19 = new org.jboss.dmr.LongModelValue(1L);
        long long21 = longModelValue19.asLong((long) (short) 0);
        java.lang.String str22 = longModelValue19.asString();
        org.jboss.dmr.ValueExpression valueExpression23 = longModelValue19.asExpression();
        int int24 = valueExpression23.resolveInt();
        boolean boolean25 = valueExpression15.equals(valueExpression23);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver26 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long29 = booleanModelValue28.asLong();
        org.jboss.dmr.ValueExpression valueExpression30 = booleanModelValue28.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue31 = new org.jboss.dmr.ExpressionValue(valueExpression30);
        java.lang.String str32 = valueExpression30.getExpressionString();
        java.lang.String str33 = valueExpressionResolver26.resolve(valueExpression30);
        long long34 = valueExpression23.resolveLong(valueExpressionResolver26);
        org.jboss.dmr.BooleanModelValue booleanModelValue36 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long37 = booleanModelValue36.asLong();
        org.jboss.dmr.ValueExpression valueExpression38 = booleanModelValue36.asExpression();
        java.lang.String str39 = valueExpression38.toString();
        org.jboss.dmr.ExpressionValue expressionValue41 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression42 = expressionValue41.asExpression();
        boolean boolean43 = valueExpression38.equals(valueExpression42);
        org.jboss.dmr.LongModelValue longModelValue45 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal46 = longModelValue45.asBigDecimal();
        int int47 = longModelValue45.asInt();
        org.jboss.dmr.ValueExpression valueExpression48 = longModelValue45.asExpression();
        boolean boolean49 = valueExpression42.equals(valueExpression48);
        java.lang.String str50 = valueExpressionResolver26.resolve(valueExpression42);
        java.lang.String str51 = valueExpression11.resolveString(valueExpressionResolver26);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0" + "'", str17, "1.0");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver26);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "true" + "'", str32, "true");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "true" + "'", str33, "true");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(booleanModelValue36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(valueExpression38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Expression \"true\"" + "'", str39, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(valueExpression48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Expression \"true\"" + "'", str51, "Expression \"true\"");
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.resolve();
        java.lang.String str4 = modelNode3.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set(32.0d);
        org.jboss.dmr.PropertyModelValue propertyModelValue8 = new org.jboss.dmr.PropertyModelValue("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode3, true);
        org.jboss.dmr.ModelNode modelNode10 = modelNode3.set((double) (byte) 0);
        java.lang.String str12 = modelNode10.asString("\"true\"");
        java.lang.Boolean boolean13 = modelNode10.asBooleanOrNull();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0.0" + "'", str12, "0.0");
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + false + "'", boolean13, false);
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(false);
        int int12 = modelNode10.asInt(2);
        org.jboss.dmr.ModelNode modelNode14 = modelNode10.set(52);
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        java.lang.String str21 = bytesModelValue20.asString();
        int int22 = bytesModelValue20.asInt();
        int int23 = bytesModelValue20.asInt();
        org.jboss.dmr.LongModelValue longModelValue25 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str26 = longModelValue25.asString();
        byte[] byteArray27 = longModelValue25.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue28 = new org.jboss.dmr.BytesModelValue(byteArray27);
        double double29 = bytesModelValue28.asDouble();
        boolean boolean30 = bytesModelValue20.equals(bytesModelValue28);
        org.jboss.dmr.LongModelValue longModelValue32 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str33 = longModelValue32.asString();
        byte[] byteArray34 = longModelValue32.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue35 = new org.jboss.dmr.BytesModelValue(byteArray34);
        boolean boolean36 = bytesModelValue28.equals(bytesModelValue35);
        java.math.BigInteger bigInteger37 = bytesModelValue35.asBigInteger();
        org.jboss.dmr.ModelNode modelNode38 = modelNode14.set("1.0", bigInteger37);
        org.jboss.dmr.ModelNode modelNode39 = modelNode7.set("expression \"hi!\"", bigInteger37);
        org.jboss.dmr.ModelNode modelNode41 = modelNode39.set((double) 2);
        java.io.OutputStream outputStream42 = null;
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream(outputStream42);
        outputStream43.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream46 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream45);
        outputStream45.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream45);
        outputStream45.suspendEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream50 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream45);
        // The following exception was thrown during execution in test generation
        try {
            modelNode39.writeBase64((java.io.OutputStream) outputStream50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str21, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 4.9E-324d + "'", double29 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode41);
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set("\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\"", "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        java.lang.Long long7 = modelNode6.asLongOrNull();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.lang.String str14 = listModelValue13.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = listModelValue13.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode6.asList(modelNodeList15);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = modelNode20.asList();
        org.jboss.dmr.ListModelValue listModelValue22 = new org.jboss.dmr.ListModelValue(modelNodeList21);
        java.lang.String str23 = listModelValue22.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList24 = listModelValue22.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode6.asList(modelNodeList24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode1.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList24);
        org.jboss.dmr.ModelNode modelNode28 = modelNode26.add((double) 32);
        java.io.DataInput dataInput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode28.readExternal(dataInput29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNull(long7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str14, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str23, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode28);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        outputStream1.suspendEncoding();
        org.jboss.dmr.ObjectModelValue objectModelValue5 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue5.asObject();
        java.util.Set<java.lang.String> strSet7 = objectModelValue5.getKeys();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue5.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelValue modelValue11 = objectModelValue5.copy(false);
        int int12 = objectModelValue5.asInt();
        java.lang.String str13 = objectModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = objectModelValue5.asList();
        org.jboss.dmr.ModelNode modelNode15 = objectModelValue5.asObject();
        org.jboss.dmr.ModelNode modelNode16 = modelNode15.setEmptyObject();
        byte[] byteArray19 = null; // flaky: org.jboss.dmr.Base64.decodeFromFile("PROPERTY_VALUE");
        java.lang.String str21 = null; // flaky: org.jboss.dmr.Base64.encodeBytes(byteArray19, (int) (short) 100);
        org.jboss.dmr.ModelNode modelNode22 = null; // flaky: modelNode15.set("(\"hi!\" => expression \"hi!\")", byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            outputStream1.write(byteArray19, (int) 'i', (int) 's');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode16);
// flaky:         org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AAAAAAAAAAE=" + "'", str21, "AAAAAAAAAAE=");
// flaky:         org.junit.Assert.assertNotNull(modelNode22);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        byte[] byteArray4 = booleanModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression5 = booleanModelValue1.asExpression();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertNotNull(valueExpression5);
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double3 = longModelValue1.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        byte[] byteArray8 = longModelValue5.asBytes();
        boolean boolean9 = longModelValue1.equals(longModelValue5);
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue11.asLong((long) (short) 0);
        java.math.BigInteger bigInteger14 = longModelValue11.asBigInteger();
        boolean boolean15 = longModelValue5.equals(longModelValue11);
        java.lang.String str16 = longModelValue11.asString();
        org.jboss.dmr.ModelValue modelValue17 = longModelValue11.copy();
        byte[] byteArray18 = longModelValue11.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray21 = org.jboss.dmr.Base64.decode(byteArray18, 32, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        int int11 = listModelValue5.asInt((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode12 = listModelValue5.asObject();
        boolean boolean14 = listModelValue5.asBoolean(true);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList19 = modelNode18.asList();
        org.jboss.dmr.ListModelValue listModelValue20 = new org.jboss.dmr.ListModelValue(modelNodeList19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue20);
        org.jboss.dmr.ModelValue modelValue22 = listModelValue20.resolve();
        int int24 = listModelValue20.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList25 = listModelValue20.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = listModelValue20.asList();
        long long27 = listModelValue20.asLong();
        boolean boolean28 = listModelValue5.equals(listModelValue20);
        java.lang.String str29 = listModelValue5.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList30 = listModelValue5.asList();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNodeList19);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str29, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList30);
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        byte[] byteArray3 = longModelValue1.asBytes();
        long long5 = longModelValue1.asLong(10L);
        long long6 = longModelValue1.asLong();
        java.math.BigDecimal bigDecimal7 = longModelValue1.asBigDecimal();
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertNotNull(bigDecimal7);
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set("\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\"", "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        java.io.OutputStream outputStream6 = null;
        org.jboss.dmr.Base64.OutputStream outputStream7 = new org.jboss.dmr.Base64.OutputStream(outputStream6);
        outputStream7.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream10 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream9);
        org.jboss.dmr.BooleanModelValue booleanModelValue12 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger13 = booleanModelValue12.asBigInteger();
        byte[] byteArray14 = booleanModelValue12.asBytes();
        outputStream9.write(byteArray14, (int) (short) -1, (int) (byte) 0);
        org.jboss.dmr.ModelNode modelNode18 = modelNode1.set(byteArray14);
        java.lang.String str19 = modelNode1.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(booleanModelValue12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bytes {\n    0x01\n}" + "'", str19, "bytes {\n    0x01\n}");
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.Set<java.lang.String> strSet16 = propertyModelValue15.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList17 = propertyModelValue15.asPropertyList();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.lang.String str23 = modelNode19.toString();
        org.jboss.dmr.ModelNode modelNode24 = modelNode19.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode19.set(property30);
        org.jboss.dmr.PropertyModelValue propertyModelValue33 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode31, false);
        java.util.Set<java.lang.String> strSet34 = propertyModelValue33.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList35 = propertyModelValue33.asPropertyList();
        java.util.Set<java.lang.String> strSet36 = propertyModelValue33.getKeys();
        boolean boolean37 = propertyModelValue15.equals(propertyModelValue33);
        org.jboss.dmr.Property property38 = propertyModelValue15.asProperty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = propertyModelValue15.asBoolean(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(\"hi!\" => 0.0)" + "'", str23, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(propertyList35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        int int34 = inputStream26.read(byteArray30, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (-1));
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26, (int) 'p');
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream38);
        org.jboss.dmr.stream.ModelReader modelReader41 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream38);
        java.io.OutputStream outputStream42 = null;
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream(outputStream42);
        outputStream43.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream46 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream45);
        outputStream46.flushBase64();
        outputStream46.flushBase64();
        outputStream46.flushBase64();
        org.jboss.dmr.stream.ModelWriter modelWriter50 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream46);
        java.io.InputStream inputStream51 = null;
        org.jboss.dmr.Base64.InputStream inputStream53 = new org.jboss.dmr.Base64.InputStream(inputStream51, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream54 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream53);
        org.jboss.dmr.Base64.InputStream inputStream56 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream54, 0);
        org.jboss.dmr.Base64.InputStream inputStream58 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream56, (int) (byte) 10);
        org.jboss.dmr.Base64.InputStream inputStream59 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream58);
        java.nio.charset.Charset charset60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelReader modelReader61 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream58, charset60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelReader41);
        org.junit.Assert.assertNotNull(modelWriter50);
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream4 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        outputStream4.flushBase64();
        outputStream4.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream7 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream4);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream7, 0);
        org.jboss.dmr.Base64.OutputStream outputStream10 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream9);
        org.jboss.dmr.LongModelValue longModelValue12 = new org.jboss.dmr.LongModelValue((-1L));
        long long14 = longModelValue12.asLong((long) (byte) -1);
        int int16 = longModelValue12.asInt(0);
        byte[] byteArray17 = longModelValue12.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            outputStream9.write(byteArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 127");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, -1, -1, -1, -1, -1, -1, -1]");
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.resolve();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ValueExpression valueExpression9 = modelNode7.asExpression();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        long long16 = objectModelValue7.asLong((long) (byte) 100);
        org.jboss.dmr.ModelValue modelValue17 = objectModelValue7.resolve();
        org.jboss.dmr.ModelValue modelValue18 = objectModelValue7.copy();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertNotNull(modelValue18);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        org.jboss.dmr.IntModelValue intModelValue2 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str3 = intModelValue2.asString();
        double double5 = intModelValue2.asDouble((double) 2);
        java.math.BigDecimal bigDecimal6 = intModelValue2.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(bigDecimal6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.clear();
        org.jboss.dmr.ModelNode modelNode9 = modelNode8.clone();
        int int11 = modelNode8.asInt((int) (byte) 1);
        org.jboss.dmr.ModelNode modelNode14 = modelNode8.add("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==", (double) (short) 1);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("{\n    \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : {\n        \"hi!\" : 0.0\n    }\n}", modelNode14);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode17 = modelNode14.remove("rO0ABXNyAA9qYXZhLmxhbmcuU2hvcnRoTTcTNGDaUgIAAVMABXZhbHVleHIAEGphdmEubGFuZy5O\ndW1iZXKGrJUdC5TgiwIAAHhwAAA=");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "32" + "'", str3, "32");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 32.0d + "'", double5 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(modelNode14);
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelValue modelValue6 = listModelValue5.resolve();
        boolean boolean8 = listModelValue5.has((int) (byte) -1);
        boolean boolean10 = listModelValue5.has((int) 'p');
        org.jboss.dmr.LongModelValue longModelValue12 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str13 = longModelValue12.asString();
        byte[] byteArray14 = longModelValue12.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue15 = new org.jboss.dmr.BytesModelValue(byteArray14);
        java.lang.String str16 = bytesModelValue15.asString();
        int int17 = bytesModelValue15.asInt();
        int int18 = bytesModelValue15.asInt();
        org.jboss.dmr.LongModelValue longModelValue20 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str21 = longModelValue20.asString();
        byte[] byteArray22 = longModelValue20.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue23 = new org.jboss.dmr.BytesModelValue(byteArray22);
        double double24 = bytesModelValue23.asDouble();
        boolean boolean25 = bytesModelValue15.equals(bytesModelValue23);
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        java.lang.String str31 = bytesModelValue30.asString();
        int int32 = bytesModelValue30.asInt();
        int int33 = bytesModelValue30.asInt();
        int int35 = bytesModelValue30.asInt(112);
        boolean boolean36 = bytesModelValue23.equals(bytesModelValue30);
        java.math.BigDecimal bigDecimal37 = bytesModelValue30.asBigDecimal();
        boolean boolean38 = listModelValue5.equals((java.lang.Object) bigDecimal37);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str16, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4.9E-324d + "'", double24 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str31, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        int int5 = objectModelValue0.asInt();
        boolean boolean7 = objectModelValue0.has("{ \"BYTES_VALUE\" : { \"EXPRESSION_VALUE\" : \"1.0\" } }");
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        boolean boolean11 = modelNode8.equals((java.lang.Object) 100L);
        boolean boolean12 = modelNode0.equals(modelNode8);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int22 = modelNode21.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.setExpression("hi!", "hi!");
        java.lang.String str27 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode23.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode29 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode8.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode33 = modelNode8.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        java.lang.Boolean boolean34 = modelNode8.asBooleanOrNull();
        org.jboss.dmr.BooleanModelValue booleanModelValue36 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray37 = booleanModelValue36.asBytes();
        java.lang.String str38 = booleanModelValue36.asString();
        int int39 = booleanModelValue36.asInt();
        long long40 = booleanModelValue36.asLong();
        boolean boolean42 = booleanModelValue36.equals((java.lang.Object) '4');
        long long43 = booleanModelValue36.asLong();
        java.math.BigInteger bigInteger44 = booleanModelValue36.asBigInteger();
        org.jboss.dmr.ModelNode modelNode45 = modelNode8.set(bigInteger44);
        long long46 = modelNode8.asLong();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str27, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertEquals("'" + boolean34 + "' != '" + true + "'", boolean34, true);
        org.junit.Assert.assertNotNull(booleanModelValue36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "true" + "'", str38, "true");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        org.jboss.dmr.ValueExpression valueExpression1 = new org.jboss.dmr.ValueExpression("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        java.lang.Class<?> wildcardClass2 = valueExpression1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode22 = modelNode7.setExpression("\"(\\\"hi!\\\" => 0.0)\"", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelNode modelNode25 = modelNode7.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==", (double) 0.0f);
        boolean boolean27 = modelNode7.hasDefined((int) 'b');
        org.jboss.dmr.ModelNode modelNode30 = modelNode7.set("Expression \"hi!\"", false);
        boolean boolean31 = modelNode7.isProtected();
        org.jboss.dmr.ModelNode modelNode34 = modelNode7.setExpression("[{ \"hi!\" : { \"EXPRESSION_VALUE\" : \"hi!\" } },\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\"]", "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=\" => (\"hi!\" => expression \"hi!\"))");
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("org.jboss.dmr.stream.ModelException: rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", true);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType38 = modelNode34.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNode37);
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter12.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter15.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelWriter15.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter21 = modelWriter19.writeLong((long) 0);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter21.writeString("(\"\\\"bytes {\\\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\\\n}\\\"\" => INT)");
        org.jboss.dmr.stream.ModelWriter modelWriter25 = modelWriter23.writeExpression("H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgnLG0\nAgDPxTfOMAAAAA==");
        org.jboss.dmr.StringModelValue stringModelValue27 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue29 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue31 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean32 = stringModelValue29.equals(stringModelValue31);
        byte[] byteArray33 = stringModelValue31.asBytes();
        java.lang.Object obj34 = null;
        boolean boolean35 = stringModelValue31.equals(obj34);
        boolean boolean37 = stringModelValue31.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean38 = stringModelValue27.equals(stringModelValue31);
        org.jboss.dmr.ValueExpression valueExpression39 = stringModelValue27.asExpression();
        byte[] byteArray40 = stringModelValue27.asBytes();
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelWriter25.writeBytes(byteArray40);
        org.jboss.dmr.stream.ModelWriter modelWriter42 = modelWriter41.writeListStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter43 = modelWriter42.writePropertyEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting LIST_END or OBJECT_START or LIST_START or PROPERTY_START or STRING or EXPRESSION or BYTES or NUMBER or BOOLEAN or TYPE or UNDEFINED");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(modelWriter21);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(valueExpression39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(modelWriter41);
        org.junit.Assert.assertNotNull(modelWriter42);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double3 = longModelValue1.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        byte[] byteArray8 = longModelValue5.asBytes();
        boolean boolean9 = longModelValue1.equals(longModelValue5);
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue11.asLong((long) (short) 0);
        java.math.BigInteger bigInteger14 = longModelValue11.asBigInteger();
        boolean boolean15 = longModelValue5.equals(longModelValue11);
        int int17 = longModelValue11.asInt((int) (byte) 100);
        boolean boolean19 = longModelValue11.asBoolean(true);
        int int21 = longModelValue11.asInt(0);
        org.jboss.dmr.LongModelValue longModelValue23 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double25 = longModelValue23.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue((-1L));
        long long29 = longModelValue27.asLong((long) (byte) -1);
        byte[] byteArray30 = longModelValue27.asBytes();
        boolean boolean31 = longModelValue23.equals(longModelValue27);
        boolean boolean32 = longModelValue11.equals(longModelValue27);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        java.math.BigInteger bigInteger8 = bigDecimalModelValue7.asBigInteger();
        double double9 = bigDecimalModelValue7.asDouble();
        int int11 = bigDecimalModelValue7.asInt(100);
        java.math.BigDecimal bigDecimal12 = bigDecimalModelValue7.asBigDecimal();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(bigDecimal12);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(bigInteger3);
        org.jboss.dmr.ModelType modelType7 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode(modelType7);
        org.jboss.dmr.ModelNode modelNode9 = modelNode5.set("true", modelType7);
        org.jboss.dmr.ModelNode modelNode12 = modelNode5.set("", (double) 0.0f);
        org.jboss.dmr.ModelNode modelNode13 = modelNode12.setEmptyList();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = modelNode13.asDouble((double) 'p');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + modelType7 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType7.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue7.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = propertyModelValue7.asObject();
        boolean boolean17 = propertyModelValue7.has("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]");
        org.jboss.dmr.ExpressionValue expressionValue20 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue22 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean23 = expressionValue20.equals(expressionValue22);
        org.jboss.dmr.ExpressionValue expressionValue25 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue27 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean28 = expressionValue25.equals(expressionValue27);
        boolean boolean29 = expressionValue20.equals(expressionValue27);
        org.jboss.dmr.ValueExpression valueExpression30 = expressionValue27.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue32 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression33 = expressionValue32.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue35 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str36 = expressionValue35.toString();
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode41 = modelNode38.set("hi!", 0.0d);
        org.jboss.dmr.Property property42 = new org.jboss.dmr.Property("", modelNode41);
        boolean boolean43 = expressionValue35.equals((java.lang.Object) property42);
        boolean boolean44 = expressionValue32.equals(expressionValue35);
        boolean boolean45 = expressionValue27.equals((java.lang.Object) boolean44);
        org.jboss.dmr.ValueExpression valueExpression46 = expressionValue27.asExpression();
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode(valueExpression46);
        org.jboss.dmr.ModelNode modelNode48 = modelNode47.setEmptyList();
        org.jboss.dmr.IntModelValue intModelValue50 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str51 = intModelValue50.asString();
        double double53 = intModelValue50.asDouble((double) 2);
        java.math.BigInteger bigInteger54 = intModelValue50.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue55 = new org.jboss.dmr.BigIntegerModelValue(bigInteger54);
        org.jboss.dmr.ModelNode modelNode56 = modelNode48.set(bigInteger54);
        org.jboss.dmr.PropertyModelValue propertyModelValue57 = new org.jboss.dmr.PropertyModelValue("{ \"35\" : 0.0 }", modelNode48);
        org.jboss.dmr.ModelValue modelValue58 = propertyModelValue57.copy();
        boolean boolean60 = propertyModelValue57.has("AAAAAAAAAAE=");
        boolean boolean61 = propertyModelValue7.equals(propertyModelValue57);
        org.jboss.dmr.ModelValue modelValue62 = propertyModelValue7.copy();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertNotNull(valueExpression33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "expression \"hi!\"" + "'", str36, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(valueExpression46);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "32" + "'", str51, "32");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 32.0d + "'", double53 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(modelValue58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(modelValue62);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        java.io.InputStream inputStream22 = null;
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream(inputStream22, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream25 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream24);
        org.jboss.dmr.stream.ModelReader modelReader26 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream24);
        java.io.OutputStream outputStream27 = null;
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream(outputStream27);
        outputStream28.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream28);
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        outputStream30.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream34);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelWriter35.writeExpression("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.DoubleModelValue doubleModelValue39 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int41 = doubleModelValue39.asInt((int) 'l');
        java.math.BigDecimal bigDecimal42 = doubleModelValue39.asBigDecimal();
        byte[] byteArray43 = doubleModelValue39.asBytes();
        double double45 = doubleModelValue39.asDouble(1.0d);
        java.lang.String str46 = doubleModelValue39.asString();
        byte[] byteArray47 = doubleModelValue39.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter48 = modelWriter37.writeBytes(byteArray47);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelReader26);
        org.junit.Assert.assertNotNull(modelWriter35);
        org.junit.Assert.assertNotNull(modelWriter37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "10.0" + "'", str46, "10.0");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[64, 36, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue(10.0d);
        org.jboss.dmr.ModelValue modelValue2 = doubleModelValue1.protect();
        double double3 = doubleModelValue1.asDouble();
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unexpected character 'r' while reading DMR stream");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        int int4 = objectModelValue0.asInt((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue5 = objectModelValue0.protect();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        java.lang.String str10 = modelNode6.toString();
        org.jboss.dmr.ModelNode modelNode11 = modelNode6.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode13 = modelNode6.set(100);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode18 = modelNode16.set((int) '#');
        org.jboss.dmr.ModelNode modelNode19 = modelNode6.setNoCopy("EXPRESSION_VALUE", modelNode18);
        org.jboss.dmr.ModelNode modelNode20 = modelNode19.setEmptyList();
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.add();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = modelNode25.asList();
        java.lang.String str28 = modelNode25.asString("true");
        org.jboss.dmr.ModelNode modelNode30 = modelNode25.set((double) 'a');
        org.jboss.dmr.IntModelValue intModelValue32 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str33 = intModelValue32.asString();
        double double35 = intModelValue32.asDouble((double) 2);
        java.math.BigDecimal bigDecimal36 = intModelValue32.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue37 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal36);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue38 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal36);
        org.jboss.dmr.ModelNode modelNode39 = modelNode30.set(bigDecimal36);
        org.jboss.dmr.ModelNode modelNode40 = modelNode20.set(bigDecimal36);
        boolean boolean41 = objectModelValue0.equals((java.lang.Object) modelNode20);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode43 = modelNode20.require("");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(\"hi!\" => 0.0)" + "'", str10, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"hi!\" => 0.0)" + "'", str28, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "32" + "'", str33, "32");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 32.0d + "'", double35 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        long long6 = listModelValue5.asLong();
        org.jboss.dmr.ModelNode modelNode7 = listModelValue5.asObject();
        java.io.DataInput dataInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode7.readExternal(dataInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(modelNode7);
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long4 = modelNode3.asLong();
        org.jboss.dmr.ValueExpression valueExpression5 = modelNode3.asExpression();
        java.math.BigDecimal bigDecimal6 = valueExpression5.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(valueExpression5);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode10 = modelNode9.clear();
        boolean boolean11 = valueExpression5.equals((java.lang.Object) modelNode10);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver12 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.ValueExpression valueExpression14 = new org.jboss.dmr.ValueExpression("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        java.lang.String str15 = valueExpressionResolver12.resolve(valueExpression14);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        org.jboss.dmr.Property property22 = new org.jboss.dmr.Property("", modelNode21);
        boolean boolean24 = modelNode21.equals((java.lang.Object) 100L);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("[(\"hi!\" => 0.0)]", modelNode21, false);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver28 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue30 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long31 = booleanModelValue30.asLong();
        org.jboss.dmr.ValueExpression valueExpression32 = booleanModelValue30.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue33 = new org.jboss.dmr.ExpressionValue(valueExpression32);
        java.lang.String str34 = valueExpression32.getExpressionString();
        java.lang.String str35 = valueExpressionResolver28.resolve(valueExpression32);
        org.jboss.dmr.ModelNode modelNode36 = modelNode21.set("1L", valueExpression32);
        java.lang.String str37 = valueExpressionResolver12.resolve(valueExpression32);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = valueExpression5.resolveBoolean(valueExpressionResolver12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))" + "'", str15, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver28);
        org.junit.Assert.assertNotNull(booleanModelValue30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "true" + "'", str34, "true");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "true" + "'", str35, "true");
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "true" + "'", str37, "true");
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        boolean boolean3 = typeModelValue2.asBoolean();
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray6 = booleanModelValue5.asBytes();
        java.lang.String str7 = booleanModelValue5.asString();
        int int8 = booleanModelValue5.asInt();
        boolean boolean9 = typeModelValue2.equals((java.lang.Object) booleanModelValue5);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.PROPERTY;
        char char11 = modelType10.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue12 = org.jboss.dmr.TypeModelValue.of(modelType10);
        org.jboss.dmr.ModelType modelType13 = org.jboss.dmr.ModelType.PROPERTY;
        char char14 = modelType13.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue15 = org.jboss.dmr.TypeModelValue.of(modelType13);
        boolean boolean16 = typeModelValue12.equals(typeModelValue15);
        java.lang.String str17 = typeModelValue15.asString();
        org.jboss.dmr.ModelType modelType18 = org.jboss.dmr.ModelType.PROPERTY;
        char char19 = modelType18.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue20 = org.jboss.dmr.TypeModelValue.of(modelType18);
        org.jboss.dmr.ModelType modelType21 = org.jboss.dmr.ModelType.PROPERTY;
        char char22 = modelType21.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue23 = org.jboss.dmr.TypeModelValue.of(modelType21);
        boolean boolean24 = typeModelValue20.equals(typeModelValue23);
        java.lang.String str25 = typeModelValue23.asString();
        boolean boolean27 = typeModelValue23.asBoolean(true);
        boolean boolean28 = typeModelValue15.equals(typeModelValue23);
        org.jboss.dmr.ValueExpression valueExpression29 = typeModelValue23.asExpression();
        org.jboss.dmr.ModelType modelType30 = org.jboss.dmr.ModelType.PROPERTY;
        char char31 = modelType30.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue32 = org.jboss.dmr.TypeModelValue.of(modelType30);
        boolean boolean33 = typeModelValue32.asBoolean();
        boolean boolean34 = typeModelValue23.equals(typeModelValue32);
        boolean boolean35 = typeModelValue2.equals(typeModelValue23);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode37 = typeModelValue2.insertChild((int) 'Z');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'p' + "'", char11 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue12);
        org.junit.Assert.assertTrue("'" + modelType13 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType13.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + 'p' + "'", char14 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PROPERTY" + "'", str17, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType18 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType18.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + 'p' + "'", char19 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue20);
        org.junit.Assert.assertTrue("'" + modelType21 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType21.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char22 + "' != '" + 'p' + "'", char22 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PROPERTY" + "'", str25, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertTrue("'" + modelType30 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType30.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + 'p' + "'", char31 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isPropertyStart();
        boolean boolean23 = modelReader15.isObjectEnd();
        boolean boolean24 = modelReader15.isListEnd();
        boolean boolean25 = modelReader15.isObjectStart();
        // The following exception was thrown during execution in test generation
        try {
            modelReader15.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been read");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        boolean boolean4 = modelNode1.has((int) '#');
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode9 = modelNode1.set("1");
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.set("\"(\\\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        boolean boolean22 = modelReader21.isLong();
        boolean boolean23 = modelReader21.isExpression();
        boolean boolean24 = modelReader21.isObjectEnd();
        boolean boolean25 = modelReader21.isPropertyStart();
        boolean boolean26 = modelReader21.isBoolean();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream27 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26);
        org.jboss.dmr.stream.ModelReader modelReader28 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream26);
        java.io.OutputStream outputStream29 = null;
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream(outputStream29);
        outputStream30.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream32 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        outputStream32.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream35 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelStreamFactory3.newModelWriter((java.io.OutputStream) outputStream36);
        stringModelValue1.write(modelWriter37);
        byte[] byteArray39 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue41 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray42 = stringModelValue41.asBytes();
        org.jboss.dmr.LongModelValue longModelValue44 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal45 = longModelValue44.asBigDecimal();
        byte[] byteArray46 = longModelValue44.asBytes();
        boolean boolean47 = stringModelValue41.equals((java.lang.Object) byteArray46);
        org.jboss.dmr.StringModelValue stringModelValue49 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue51 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean52 = stringModelValue49.equals(stringModelValue51);
        byte[] byteArray53 = stringModelValue51.asBytes();
        java.lang.Object obj54 = null;
        boolean boolean55 = stringModelValue51.equals(obj54);
        byte[] byteArray56 = stringModelValue51.asBytes();
        boolean boolean57 = stringModelValue41.equals(stringModelValue51);
        org.jboss.dmr.ValueExpression valueExpression58 = stringModelValue51.asExpression();
        boolean boolean59 = stringModelValue1.equals(stringModelValue51);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = stringModelValue1.asBoolean(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertNotNull(modelReader28);
        org.junit.Assert.assertNotNull(modelWriter37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[114, 79, 48, 65, 66, 88, 78, 121, 65, 66, 100, 118, 99, 109, 99, 117, 97, 109, 74, 118, 99, 51, 77, 117, 90, 71, 49, 121, 76, 107, 49, 118, 90, 71, 86, 115, 84, 109, 57, 107, 90, 82, 119, 116, 111, 85, 83, 100, 111, 52, 52, 47, 68, 65, 65, 65, 101, 72, 66, 51, 82, 51, 65, 65, 78, 87, 57, 121, 90, 121, 53, 113, 89, 109, 57, 122, 10, 99, 121, 53, 107, 98, 88, 73, 117, 99, 51, 82, 121, 90, 87, 70, 116, 76, 107, 49, 118, 90, 71, 86, 115, 82, 88, 104, 106, 90, 88, 66, 48, 97, 87, 57, 117, 79, 105, 66, 98, 75, 67, 74, 111, 97, 83, 69, 105, 73, 68, 48, 43, 73, 68, 65, 117, 77, 67, 108, 100, 99, 65, 65, 68, 97, 71, 107, 104, 82, 65, 65, 65, 65, 65, 65, 65, 10, 65, 65, 65, 65, 101, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(valueExpression58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.protect();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue18 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger19 = booleanModelValue18.asBigInteger();
        byte[] byteArray20 = booleanModelValue18.asBytes();
        org.jboss.dmr.ModelNode modelNode21 = modelNode15.set("expression \"hi!\"", byteArray20);
        org.jboss.dmr.PropertyModelValue propertyModelValue23 = new org.jboss.dmr.PropertyModelValue("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => (\"[(\\\"hi!\\\" => 0.0)]\" => PROPERTY))", modelNode21, true);
        boolean boolean24 = propertyModelValue7.equals(propertyModelValue23);
        java.util.Set<java.lang.String> strSet25 = propertyModelValue23.getKeys();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(booleanModelValue18);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.clear();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(8);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ModelNode modelNode15 = modelNode11.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType16 = modelNode11.getType();
        org.jboss.dmr.ModelNode modelNode17 = modelNode7.set(modelNode11);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = modelNode17.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode19 = modelNode0.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList18);
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode19.asPropertyListOrEmpty();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType16.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(propertyList20);
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        long long4 = doubleModelValue1.asLong((long) (short) -1);
        double double6 = doubleModelValue1.asDouble(0.0d);
        org.jboss.dmr.ValueExpression valueExpression7 = doubleModelValue1.asExpression();
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory11 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream12 = null;
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream12, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        int int22 = inputStream14.read(byteArray18, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream24 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream14, (-1));
        org.jboss.dmr.stream.ModelReader modelReader25 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream24);
        java.io.InputStream inputStream26 = null;
        org.jboss.dmr.Base64.InputStream inputStream28 = new org.jboss.dmr.Base64.InputStream(inputStream26, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream29 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream28);
        org.jboss.dmr.Base64.InputStream inputStream30 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream28);
        org.jboss.dmr.stream.ModelReader modelReader31 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream28);
        java.io.InputStream inputStream32 = null;
        org.jboss.dmr.Base64.InputStream inputStream34 = new org.jboss.dmr.Base64.InputStream(inputStream32, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream34);
        org.jboss.dmr.stream.ModelReader modelReader36 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream34);
        java.io.OutputStream outputStream37 = null;
        org.jboss.dmr.Base64.OutputStream outputStream38 = new org.jboss.dmr.Base64.OutputStream(outputStream37);
        outputStream38.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream40 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream38);
        org.jboss.dmr.Base64.OutputStream outputStream41 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40);
        outputStream40.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream43 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40);
        org.jboss.dmr.Base64.OutputStream outputStream44 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream40);
        org.jboss.dmr.stream.ModelWriter modelWriter45 = modelStreamFactory11.newModelWriter((java.io.OutputStream) outputStream44);
        stringModelValue9.write(modelWriter45);
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue1.write(modelWriter45);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertNotNull(modelStreamFactory11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(modelReader25);
        org.junit.Assert.assertNotNull(modelReader31);
        org.junit.Assert.assertNotNull(modelReader36);
        org.junit.Assert.assertNotNull(modelWriter45);
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        org.jboss.dmr.IntModelValue intModelValue11 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str12 = intModelValue11.asString();
        double double14 = intModelValue11.asDouble((double) 2);
        java.math.BigDecimal bigDecimal15 = intModelValue11.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue16 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal15);
        boolean boolean17 = bigDecimalModelValue7.equals(bigDecimalModelValue16);
        double double19 = bigDecimalModelValue16.asDouble(0.0d);
        double double21 = bigDecimalModelValue16.asDouble(32.0d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 32.0d + "'", double19 == 32.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 32.0d + "'", double21 == 32.0d);
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean17 = expressionValue14.equals(expressionValue16);
        org.jboss.dmr.ExpressionValue expressionValue19 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue21 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean22 = expressionValue19.equals(expressionValue21);
        boolean boolean23 = expressionValue14.equals(expressionValue21);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long26 = modelNode25.asLong();
        org.jboss.dmr.ValueExpression valueExpression27 = modelNode25.asExpression();
        boolean boolean28 = expressionValue21.equals((java.lang.Object) modelNode25);
        org.jboss.dmr.PropertyModelValue propertyModelValue30 = new org.jboss.dmr.PropertyModelValue("H4sIAAAAAAAAAGMEABvfBaUBAAAA", modelNode25, true);
        boolean boolean31 = expressionValue8.equals((java.lang.Object) "H4sIAAAAAAAAAGMEABvfBaUBAAAA");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        java.math.BigInteger bigInteger6 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(bigInteger6);
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.set(1.0d);
        java.lang.String str11 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode9, (int) 'i');
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode13 = modelNode9.remove("[1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3CUQ/8AAAAAAAAHg=" + "'", str11, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3CUQ/8AAAAAAAAHg=");
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        org.jboss.dmr.ModelNode modelNode11 = propertyModelValue7.getChild(0);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        org.jboss.dmr.ModelNode modelNode14 = propertyModelValue7.getChild((int) (short) 0);
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue18 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean19 = expressionValue16.equals(expressionValue18);
        org.jboss.dmr.ExpressionValue expressionValue21 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression22 = expressionValue21.asExpression();
        boolean boolean23 = expressionValue16.equals(expressionValue21);
        java.lang.String str24 = expressionValue16.asString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory26 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream27 = null;
        org.jboss.dmr.Base64.InputStream inputStream29 = new org.jboss.dmr.Base64.InputStream(inputStream27, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream30 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream29);
        org.jboss.dmr.stream.ModelReader modelReader31 = modelStreamFactory26.newModelReader((java.io.InputStream) inputStream30);
        java.io.OutputStream outputStream32 = null;
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream(outputStream32);
        org.jboss.dmr.Base64.OutputStream outputStream34 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream33);
        outputStream33.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelStreamFactory26.newModelWriter((java.io.OutputStream) outputStream33);
        org.jboss.dmr.stream.ModelWriter modelWriter38 = modelWriter37.writeListStart();
        expressionValue16.write(modelWriter38);
        propertyModelValue7.write(modelWriter38);
        java.lang.Object obj41 = null;
        boolean boolean42 = propertyModelValue7.equals(obj41);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = propertyModelValue7.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(modelStreamFactory26);
        org.junit.Assert.assertNotNull(modelReader31);
        org.junit.Assert.assertNotNull(modelWriter37);
        org.junit.Assert.assertNotNull(modelWriter38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long2 = longModelValue1.asLong();
        java.math.BigDecimal bigDecimal3 = longModelValue1.asBigDecimal();
        int int4 = longModelValue1.asInt();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory6 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream7 = null;
        org.jboss.dmr.Base64.InputStream inputStream9 = new org.jboss.dmr.Base64.InputStream(inputStream7, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream10 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream9);
        org.jboss.dmr.stream.ModelReader modelReader11 = modelStreamFactory6.newModelReader((java.io.InputStream) inputStream10);
        java.io.OutputStream outputStream12 = null;
        org.jboss.dmr.Base64.OutputStream outputStream13 = new org.jboss.dmr.Base64.OutputStream(outputStream12);
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream13);
        outputStream13.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelStreamFactory6.newModelWriter((java.io.OutputStream) outputStream13);
        org.jboss.dmr.stream.ModelWriter modelWriter18 = modelWriter17.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter20 = modelWriter17.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelWriter20.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelWriter20.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter26 = modelWriter24.writeLong((long) 0);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelWriter24.writeUndefined();
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter24.writeListStart();
        longModelValue1.write(modelWriter28);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory6);
        org.junit.Assert.assertNotNull(modelReader11);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter18);
        org.junit.Assert.assertNotNull(modelWriter20);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertNotNull(modelWriter24);
        org.junit.Assert.assertNotNull(modelWriter26);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter28);
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        byte[] byteArray3 = doubleModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression4 = doubleModelValue1.asExpression();
        java.lang.String str5 = valueExpression4.getExpressionString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long8 = modelNode7.asLong();
        org.jboss.dmr.ValueExpression valueExpression9 = modelNode7.asExpression();
        java.math.BigDecimal bigDecimal10 = valueExpression9.resolveBigDecimal();
        java.lang.String str11 = valueExpression9.getExpressionString();
        java.math.BigDecimal bigDecimal12 = valueExpression9.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue13 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal12);
        boolean boolean14 = bigDecimalModelValue13.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression15 = bigDecimalModelValue13.asExpression();
        int int16 = bigDecimalModelValue13.asInt();
        java.math.BigDecimal bigDecimal17 = bigDecimalModelValue13.asBigDecimal();
        long long19 = bigDecimalModelValue13.asLong((long) 'p');
        boolean boolean20 = valueExpression4.equals((java.lang.Object) bigDecimalModelValue13);
        java.lang.String str21 = valueExpression4.getExpressionString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "10.0" + "'", str5, "10.0");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0" + "'", str11, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10.0" + "'", str21, "10.0");
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) (short) -1);
        java.lang.Class<?> wildcardClass2 = modelNode1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str3 = modelNode1.asString("true");
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.set("expression \"hi!\"", (int) (short) -1);
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.clear();
        java.lang.Integer int8 = modelNode6.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.lang.String str14 = modelNode10.toString();
        org.jboss.dmr.ModelNode modelNode15 = modelNode10.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("", modelNode20);
        org.jboss.dmr.ModelNode modelNode22 = modelNode10.set(property21);
        org.jboss.dmr.PropertyModelValue propertyModelValue24 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode22, false);
        boolean boolean26 = modelNode22.has(2);
        org.jboss.dmr.BooleanModelValue booleanModelValue29 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long30 = booleanModelValue29.asLong();
        org.jboss.dmr.ValueExpression valueExpression31 = booleanModelValue29.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue32 = new org.jboss.dmr.ExpressionValue(valueExpression31);
        java.lang.String str33 = valueExpression31.getExpressionString();
        org.jboss.dmr.ModelNode modelNode34 = modelNode22.set("true", valueExpression31);
        org.jboss.dmr.Property property35 = modelNode34.asProperty();
        org.jboss.dmr.ModelNode modelNode36 = modelNode6.set(property35);
        org.jboss.dmr.IntModelValue intModelValue40 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str41 = intModelValue40.asString();
        double double43 = intModelValue40.asDouble((double) 100);
        java.math.BigInteger bigInteger44 = intModelValue40.asBigInteger();
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode(bigInteger44);
        boolean boolean47 = modelNode45.hasDefined((int) '4');
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.setExpression("hi!", "hi!");
        java.lang.String str52 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode48);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList53 = modelNode48.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode55 = modelNode48.set((double) 0);
        org.jboss.dmr.ModelNode modelNode56 = modelNode48.clear();
        org.jboss.dmr.ObjectModelValue objectModelValue57 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode58 = objectModelValue57.asObject();
        java.util.Set<java.lang.String> strSet59 = objectModelValue57.getKeys();
        org.jboss.dmr.ModelNode modelNode61 = objectModelValue57.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean62 = objectModelValue57.asBoolean();
        int int64 = objectModelValue57.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode65 = objectModelValue57.asObject();
        java.util.Set<java.lang.String> strSet66 = modelNode65.keys();
        org.jboss.dmr.ModelNode modelNode67 = modelNode48.add(modelNode65);
        org.jboss.dmr.ModelNode modelNode68 = modelNode48.resolve();
        org.jboss.dmr.ModelNode modelNode69 = modelNode68.setEmptyList();
        org.jboss.dmr.ModelNode modelNode70 = modelNode45.set(modelNode68);
        org.jboss.dmr.Property property72 = new org.jboss.dmr.Property("\"true\"", modelNode45, true);
        org.jboss.dmr.ModelNode modelNode73 = modelNode6.set("(\"rO0ABXNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5n\nLk51bWJlcoaslR0LlOCLAgAAeHAAAABk\" => LONG)", modelNode45);
        org.jboss.dmr.ModelNode modelNode75 = modelNode45.add(false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(\"hi!\" => 0.0)" + "'", str14, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanModelValue29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "true" + "'", str33, "true");
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "32" + "'", str41, "32");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 32.0d + "'", double43 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str52, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList53);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNull(modelNode61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(modelNode65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertNotNull(modelNode75);
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        java.util.Set<java.lang.String> strSet6 = objectModelValue4.getKeys();
        boolean boolean8 = objectModelValue4.has((int) 'a');
        boolean boolean10 = objectModelValue4.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue11 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue11.asObject();
        java.util.Set<java.lang.String> strSet13 = objectModelValue11.getKeys();
        boolean boolean15 = objectModelValue11.has((int) 'a');
        boolean boolean16 = objectModelValue4.equals(objectModelValue11);
        org.jboss.dmr.ModelNode modelNode17 = objectModelValue11.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = objectModelValue11.asList();
        org.jboss.dmr.ModelNode modelNode19 = modelNode2.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList18);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode2, true);
        org.jboss.dmr.ModelNode modelNode24 = modelNode2.add("H4sIAAAAAAAAANv/gQEMALshig4IAAAA", (double) 10);
        org.jboss.dmr.ModelNode modelNode27 = modelNode2.set("hi!", false);
        org.jboss.dmr.ModelNode modelNode29 = modelNode27.set((double) 'd');
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode29);
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.Set<java.lang.String> strSet16 = propertyModelValue15.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList17 = propertyModelValue15.asPropertyList();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.lang.String str23 = modelNode19.toString();
        org.jboss.dmr.ModelNode modelNode24 = modelNode19.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode19.set(property30);
        org.jboss.dmr.PropertyModelValue propertyModelValue33 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode31, false);
        java.util.Set<java.lang.String> strSet34 = propertyModelValue33.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList35 = propertyModelValue33.asPropertyList();
        java.util.Set<java.lang.String> strSet36 = propertyModelValue33.getKeys();
        boolean boolean37 = propertyModelValue15.equals(propertyModelValue33);
        org.jboss.dmr.Property property38 = propertyModelValue15.asProperty();
        java.lang.String str39 = property38.getName();
        org.jboss.dmr.ModelNode modelNode40 = property38.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue41 = new org.jboss.dmr.PropertyModelValue(property38);
        org.jboss.dmr.ModelValue modelValue42 = propertyModelValue41.resolve();
        java.util.List<org.jboss.dmr.Property> propertyList43 = propertyModelValue41.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(\"hi!\" => 0.0)" + "'", str23, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(propertyList35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "EXPRESSION_VALUE" + "'", str39, "EXPRESSION_VALUE");
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelValue42);
        org.junit.Assert.assertNotNull(propertyList43);
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        boolean boolean3 = typeModelValue2.asBoolean();
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray6 = booleanModelValue5.asBytes();
        java.lang.String str7 = booleanModelValue5.asString();
        int int8 = booleanModelValue5.asInt();
        boolean boolean9 = typeModelValue2.equals((java.lang.Object) booleanModelValue5);
        org.jboss.dmr.ValueExpression valueExpression10 = typeModelValue2.asExpression();
        org.jboss.dmr.ValueExpression valueExpression11 = typeModelValue2.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = valueExpression11.resolveBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertNotNull(valueExpression11);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        boolean boolean5 = doubleModelValue1.asBoolean(true);
        org.jboss.dmr.ValueExpression valueExpression6 = doubleModelValue1.asExpression();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(valueExpression6);
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        long long7 = bigDecimalModelValue6.asLong();
        long long8 = bigDecimalModelValue6.asLong();
        int int10 = bigDecimalModelValue6.asInt((-1));
        boolean boolean11 = bigDecimalModelValue6.asBoolean();
        java.lang.String str12 = bigDecimalModelValue6.asString();
        boolean boolean13 = bigDecimalModelValue6.asBoolean();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        boolean boolean6 = doubleModelValue1.asBoolean(false);
        int int7 = doubleModelValue1.asInt();
        org.jboss.dmr.ValueExpression valueExpression8 = doubleModelValue1.asExpression();
        java.lang.String str10 = doubleModelValue1.toJSONString(false);
        int int12 = doubleModelValue1.asInt((int) (short) 10);
        long long13 = doubleModelValue1.asLong();
        int int14 = doubleModelValue1.asInt();
        double double15 = doubleModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10.0" + "'", str10, "10.0");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        double double6 = booleanModelValue1.asDouble((double) 1.0f);
        boolean boolean8 = booleanModelValue1.asBoolean(false);
        int int10 = booleanModelValue1.asInt(1);
        int int12 = booleanModelValue1.asInt(10);
        double double13 = booleanModelValue1.asDouble();
        java.math.BigDecimal bigDecimal14 = booleanModelValue1.asBigDecimal();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(bigDecimal14);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelValue modelValue2 = expressionValue1.copy();
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str5 = expressionValue4.toString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        boolean boolean12 = expressionValue4.equals((java.lang.Object) property11);
        org.jboss.dmr.ModelValue modelValue13 = expressionValue4.copy();
        org.jboss.dmr.ModelValue modelValue14 = expressionValue4.resolve();
        boolean boolean15 = expressionValue1.equals(expressionValue4);
        boolean boolean17 = expressionValue4.has("Expression \"(\"\" => (\"hi!\" => 0.0))\"");
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "expression \"hi!\"" + "'", str5, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("");
        org.jboss.dmr.ObjectModelValue objectModelValue2 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode3 = objectModelValue2.asObject();
        org.jboss.dmr.ModelValue modelValue4 = objectModelValue2.protect();
        java.util.List<org.jboss.dmr.Property> propertyList5 = objectModelValue2.asPropertyList();
        org.jboss.dmr.LongModelValue longModelValue7 = new org.jboss.dmr.LongModelValue(97L);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory9 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream10 = null;
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream(inputStream10, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream13 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream12);
        org.jboss.dmr.stream.ModelReader modelReader14 = modelStreamFactory9.newModelReader((java.io.InputStream) inputStream13);
        java.io.OutputStream outputStream15 = null;
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream(outputStream15);
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        outputStream16.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter20 = modelStreamFactory9.newModelWriter((java.io.OutputStream) outputStream16);
        org.jboss.dmr.stream.ModelWriter modelWriter21 = modelWriter20.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue23 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray24 = intModelValue23.asBytes();
        int int26 = intModelValue23.asInt(0);
        java.math.BigInteger bigInteger27 = intModelValue23.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter21.writeBigInteger(bigInteger27);
        org.jboss.dmr.stream.ModelWriter modelWriter29 = modelWriter21.writeListStart();
        longModelValue7.write(modelWriter29);
        objectModelValue2.write(modelWriter29);
        expressionValue1.write(modelWriter29);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertNotNull(propertyList5);
        org.junit.Assert.assertNotNull(modelStreamFactory9);
        org.junit.Assert.assertNotNull(modelReader14);
        org.junit.Assert.assertNotNull(modelWriter20);
        org.junit.Assert.assertNotNull(modelWriter21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(modelWriter28);
        org.junit.Assert.assertNotNull(modelWriter29);
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        java.lang.String str2 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(10L);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.get(strArray12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = modelNode17.asList();
        org.jboss.dmr.ListModelValue listModelValue19 = new org.jboss.dmr.ListModelValue(modelNodeList18);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue19);
        org.jboss.dmr.ModelValue modelValue21 = listModelValue19.resolve();
        int int23 = listModelValue19.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList24 = listModelValue19.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList25 = modelNode13.asPropertyList(propertyList24);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set("hi!", 0.0d);
        org.jboss.dmr.Property property31 = new org.jboss.dmr.Property("", modelNode30);
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.get(strArray32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = modelNode37.asList();
        org.jboss.dmr.ListModelValue listModelValue39 = new org.jboss.dmr.ListModelValue(modelNodeList38);
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue39);
        org.jboss.dmr.ModelValue modelValue41 = listModelValue39.resolve();
        int int43 = listModelValue39.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList44 = listModelValue39.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList45 = modelNode33.asPropertyList(propertyList44);
        modelNode13.setNoCopy(modelNode33);
        org.jboss.dmr.ModelNode modelNode48 = modelNode33.set((long) 100);
        org.jboss.dmr.ModelType modelType49 = modelNode48.getType();
        long long51 = modelNode48.asLong((long) (short) 100);
        boolean boolean52 = modelNode48.isProtected();
        org.jboss.dmr.Property property54 = new org.jboss.dmr.Property("10", modelNode48, true);
        org.jboss.dmr.ModelNode modelNode55 = modelNode0.add(property54);
        org.jboss.dmr.IntModelValue intModelValue57 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str58 = intModelValue57.asString();
        double double60 = intModelValue57.asDouble((double) 2);
        java.math.BigDecimal bigDecimal61 = intModelValue57.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode62 = new org.jboss.dmr.ModelNode(bigDecimal61);
        org.jboss.dmr.ModelNode modelNode63 = modelNode62.clear();
        org.jboss.dmr.ModelNode modelNode64 = modelNode63.clone();
        org.jboss.dmr.IntModelValue intModelValue66 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long68 = intModelValue66.asLong((long) 'b');
        java.lang.String str69 = intModelValue66.asString();
        java.math.BigDecimal bigDecimal70 = intModelValue66.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode71 = modelNode63.add(bigDecimal70);
        org.jboss.dmr.BooleanModelValue booleanModelValue73 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double74 = booleanModelValue73.asDouble();
        org.jboss.dmr.ModelValue modelValue75 = booleanModelValue73.copy();
        java.math.BigInteger bigInteger76 = booleanModelValue73.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue77 = new org.jboss.dmr.BigIntegerModelValue(bigInteger76);
        java.lang.String str78 = bigIntegerModelValue77.asString();
        java.math.BigInteger bigInteger79 = bigIntegerModelValue77.asBigInteger();
        org.jboss.dmr.ModelNode modelNode80 = new org.jboss.dmr.ModelNode(bigInteger79);
        org.jboss.dmr.LongModelValue longModelValue82 = new org.jboss.dmr.LongModelValue((-1L));
        long long84 = longModelValue82.asLong((long) (byte) -1);
        int int86 = longModelValue82.asInt(0);
        org.jboss.dmr.ValueExpression valueExpression87 = longModelValue82.asExpression();
        org.jboss.dmr.ModelNode modelNode88 = modelNode80.set(valueExpression87);
        java.lang.String str90 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) valueExpression87, (int) (byte) 10);
        org.jboss.dmr.ModelNode modelNode91 = modelNode63.set("Expression \"10.0\"", valueExpression87);
        org.jboss.dmr.ModelNode modelNode92 = modelNode0.addNoCopy(modelNode91);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal93 = modelNode92.asBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4" + "'", str2, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertNotNull(modelValue21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertNotNull(modelValue41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(propertyList44);
        org.junit.Assert.assertNotNull(propertyList45);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertTrue("'" + modelType49 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType49.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "32" + "'", str58, "32");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 32.0d + "'", double60 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 32L + "'", long68 == 32L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "32" + "'", str69, "32");
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(booleanModelValue73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue75);
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1" + "'", str78, "1");
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(valueExpression87);
        org.junit.Assert.assertNotNull(modelNode88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "H4sIAAAAAAAAAFvzloG1uIhBNr8oXS8rKb+4WC8lt0gvLDGnNNW1oqAotbg4Mz/vj9r8R3l9E2J4GBgqCspZGJh0DSsAkLuCFDkAAAA=" + "'", str90, "H4sIAAAAAAAAAFvzloG1uIhBNr8oXS8rKb+4WC8lt0gvLDGnNNW1oqAotbg4Mz/vj9r8R3l9E2J4GBgqCspZGJh0DSsAkLuCFDkAAAA=");
        org.junit.Assert.assertNotNull(modelNode91);
        org.junit.Assert.assertNotNull(modelNode92);
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        boolean boolean14 = typeModelValue10.equals(typeModelValue13);
        java.lang.String str15 = typeModelValue13.asString();
        boolean boolean17 = typeModelValue13.asBoolean(true);
        boolean boolean18 = typeModelValue5.equals(typeModelValue13);
        org.jboss.dmr.ValueExpression valueExpression19 = typeModelValue13.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue20 = new org.jboss.dmr.ExpressionValue(valueExpression19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        java.lang.String str26 = modelNode22.toString();
        org.jboss.dmr.ModelNode modelNode27 = modelNode22.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        org.jboss.dmr.Property property33 = new org.jboss.dmr.Property("", modelNode32);
        org.jboss.dmr.ModelNode modelNode34 = modelNode22.set(property33);
        org.jboss.dmr.PropertyModelValue propertyModelValue36 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode34, false);
        java.util.Set<java.lang.String> strSet37 = propertyModelValue36.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList38 = propertyModelValue36.asPropertyList();
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.set("hi!", 0.0d);
        java.lang.String str44 = modelNode40.toString();
        org.jboss.dmr.ModelNode modelNode45 = modelNode40.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode50 = modelNode47.set("hi!", 0.0d);
        org.jboss.dmr.Property property51 = new org.jboss.dmr.Property("", modelNode50);
        org.jboss.dmr.ModelNode modelNode52 = modelNode40.set(property51);
        org.jboss.dmr.PropertyModelValue propertyModelValue54 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode52, false);
        java.util.Set<java.lang.String> strSet55 = propertyModelValue54.getKeys();
        java.util.List<org.jboss.dmr.Property> propertyList56 = propertyModelValue54.asPropertyList();
        java.util.Set<java.lang.String> strSet57 = propertyModelValue54.getKeys();
        boolean boolean58 = propertyModelValue36.equals(propertyModelValue54);
        org.jboss.dmr.Property property59 = propertyModelValue36.asProperty();
        java.lang.String str60 = property59.getName();
        org.jboss.dmr.ModelNode modelNode61 = property59.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue62 = new org.jboss.dmr.PropertyModelValue(property59);
        org.jboss.dmr.ModelValue modelValue63 = propertyModelValue62.resolve();
        boolean boolean64 = expressionValue20.equals((java.lang.Object) modelValue63);
        org.jboss.dmr.ModelValue modelValue65 = modelValue63.copy();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PROPERTY" + "'", str15, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(\"hi!\" => 0.0)" + "'", str26, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(\"hi!\" => 0.0)" + "'", str44, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(propertyList56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "EXPRESSION_VALUE" + "'", str60, "EXPRESSION_VALUE");
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(modelValue65);
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.protect();
        java.util.List<org.jboss.dmr.Property> propertyList3 = objectModelValue0.asPropertyList();
        org.jboss.dmr.ModelValue modelValue4 = objectModelValue0.copy();
        boolean boolean5 = objectModelValue0.asBoolean();
        boolean boolean7 = objectModelValue0.has("rO0ABXQAUXJPMEFCWE55QUJkdmNtY3VhbUp2YzNNdVpHMXlMazF2WkdWc1RtOWtaUnd0b1VTZG80\nNC9EQUFBZUhCM0RIQUFBMmhwSVdVQUEyaHAKSVhnPQ==");
        java.io.PrintWriter printWriter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.formatAsJSON(printWriter8, (int) 'e', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(propertyList3);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int1 = modelNode0.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.setExpression("hi!", "hi!");
        java.lang.String str6 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode2);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode2.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList7);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.resolve();
        org.jboss.dmr.ModelNode modelNode10 = modelNode9.setEmptyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asListOrEmpty();
        org.jboss.dmr.BooleanModelValue booleanModelValue13 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long14 = booleanModelValue13.asLong();
        int int15 = booleanModelValue13.asInt();
        org.jboss.dmr.DoubleModelValue doubleModelValue17 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long18 = doubleModelValue17.asLong();
        boolean boolean19 = doubleModelValue17.asBoolean();
        boolean boolean20 = booleanModelValue13.equals((java.lang.Object) doubleModelValue17);
        java.lang.String str21 = doubleModelValue17.asString();
        org.jboss.dmr.ValueExpression valueExpression22 = doubleModelValue17.asExpression();
        org.jboss.dmr.ModelNode modelNode23 = modelNode10.add(valueExpression22);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str6, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(booleanModelValue13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10.0" + "'", str21, "10.0");
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        java.lang.Long long46 = modelNode45.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray47 = new org.jboss.dmr.ModelNode[] { modelNode41, modelNode45 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList48 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48, modelNodeArray47);
        org.jboss.dmr.ModelNode modelNode50 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long54 = modelNode53.asLong();
        org.jboss.dmr.ValueExpression valueExpression55 = modelNode53.asExpression();
        java.math.BigDecimal bigDecimal56 = valueExpression55.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode57 = modelNode7.set("true", bigDecimal56);
        java.lang.String str58 = modelNode7.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode60 = new org.jboss.dmr.ModelNode(8);
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode64.asList();
        org.jboss.dmr.ModelNode modelNode68 = modelNode64.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType69 = modelNode64.getType();
        org.jboss.dmr.ModelNode modelNode70 = modelNode60.set(modelNode64);
        org.jboss.dmr.ModelNode modelNode71 = modelNode64.clone();
        modelNode7.setNoCopy(modelNode64);
        org.jboss.dmr.DoubleModelValue doubleModelValue75 = new org.jboss.dmr.DoubleModelValue((double) (short) 0);
        byte[] byteArray76 = doubleModelValue75.asBytes();
        org.jboss.dmr.ModelNode modelNode77 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) doubleModelValue75);
        org.jboss.dmr.ModelNode modelNode78 = modelNode7.setNoCopy("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"", modelNode77);
        boolean boolean80 = modelNode78.has("");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNull(long46);
        org.junit.Assert.assertNotNull(modelNodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(valueExpression55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(\"true\" => big decimal 1.0)" + "'", str58, "(\"true\" => big decimal 1.0)");
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertTrue("'" + modelType69 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType69.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        java.lang.String str15 = listModelValue14.asString();
        long long16 = listModelValue14.asLong();
        int int18 = listModelValue14.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue19 = listModelValue14.protect();
        boolean boolean21 = listModelValue14.has((int) (short) 100);
        boolean boolean22 = listModelValue5.equals(listModelValue14);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        org.jboss.dmr.ListModelValue listModelValue28 = new org.jboss.dmr.ListModelValue(modelNodeList27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue28);
        org.jboss.dmr.ModelValue modelValue30 = listModelValue28.resolve();
        int int32 = listModelValue28.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList33 = listModelValue28.asPropertyList();
        boolean boolean34 = listModelValue5.equals(listModelValue28);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property35 = listModelValue5.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str15, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(propertyList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory3 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream4 = null;
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream(inputStream4, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        byte[] byteArray10 = longModelValue8.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray10);
        int int14 = inputStream6.read(byteArray10, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream6, (-1));
        org.jboss.dmr.stream.ModelReader modelReader17 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream16);
        java.io.InputStream inputStream18 = null;
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream(inputStream18, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream20);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream20);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream27 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26);
        org.jboss.dmr.stream.ModelReader modelReader28 = modelStreamFactory3.newModelReader((java.io.InputStream) inputStream26);
        java.io.OutputStream outputStream29 = null;
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream(outputStream29);
        outputStream30.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream32 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.Base64.OutputStream outputStream33 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        outputStream32.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream35 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream32);
        org.jboss.dmr.stream.ModelWriter modelWriter37 = modelStreamFactory3.newModelWriter((java.io.OutputStream) outputStream36);
        stringModelValue1.write(modelWriter37);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = stringModelValue1.asLong((long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z?cy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA?AAAAeA==\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(modelReader17);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertNotNull(modelReader28);
        org.junit.Assert.assertNotNull(modelWriter37);
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        java.lang.Long long46 = modelNode45.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray47 = new org.jboss.dmr.ModelNode[] { modelNode41, modelNode45 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList48 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48, modelNodeArray47);
        org.jboss.dmr.ModelNode modelNode50 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long54 = modelNode53.asLong();
        org.jboss.dmr.ValueExpression valueExpression55 = modelNode53.asExpression();
        java.math.BigDecimal bigDecimal56 = valueExpression55.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode57 = modelNode7.set("true", bigDecimal56);
        java.lang.String str58 = modelNode7.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode60 = new org.jboss.dmr.ModelNode(8);
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode64.asList();
        org.jboss.dmr.ModelNode modelNode68 = modelNode64.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType69 = modelNode64.getType();
        org.jboss.dmr.ModelNode modelNode70 = modelNode60.set(modelNode64);
        org.jboss.dmr.ModelNode modelNode71 = modelNode64.clone();
        modelNode7.setNoCopy(modelNode64);
        org.jboss.dmr.ModelNode modelNode73 = modelNode64.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode74 = modelNode64.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode75 = modelNode64.clone();
        java.lang.String str77 = modelNode64.asString("(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNull(long46);
        org.junit.Assert.assertNotNull(modelNodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(valueExpression55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(\"true\" => big decimal 1.0)" + "'", str58, "(\"true\" => big decimal 1.0)");
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertTrue("'" + modelType69 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType69.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{}" + "'", str77, "{}");
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        org.jboss.dmr.ModelNode modelNode43 = modelNode28.set((long) 100);
        org.jboss.dmr.ModelNode modelNode46 = modelNode28.set("(\"hi!\" => 0.0)", (int) (short) -1);
        org.jboss.dmr.PropertyModelValue propertyModelValue47 = new org.jboss.dmr.PropertyModelValue("\"35\"", modelNode46);
        org.jboss.dmr.ModelType modelType48 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode49 = new org.jboss.dmr.ModelNode(modelType48);
        org.jboss.dmr.ModelNode modelNode51 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode54 = modelNode51.set("hi!", 0.0d);
        org.jboss.dmr.Property property55 = new org.jboss.dmr.Property("", modelNode54);
        org.jboss.dmr.ModelNode modelNode56 = modelNode49.set(property55);
        org.jboss.dmr.PropertyModelValue propertyModelValue57 = new org.jboss.dmr.PropertyModelValue(property55);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList58 = propertyModelValue57.asList();
        org.jboss.dmr.ModelValue modelValue59 = propertyModelValue57.protect();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList60 = propertyModelValue57.asList();
        boolean boolean61 = propertyModelValue47.equals(propertyModelValue57);
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode66 = modelNode63.set("hi!", 0.0d);
        java.lang.String str67 = modelNode63.toString();
        org.jboss.dmr.ModelNode modelNode68 = modelNode63.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode73 = modelNode70.set("hi!", 0.0d);
        org.jboss.dmr.Property property74 = new org.jboss.dmr.Property("", modelNode73);
        org.jboss.dmr.ModelNode modelNode75 = modelNode63.set(property74);
        org.jboss.dmr.PropertyModelValue propertyModelValue77 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode75, false);
        org.jboss.dmr.Property property78 = propertyModelValue77.asProperty();
        org.jboss.dmr.LongModelValue longModelValue80 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double82 = longModelValue80.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue84 = new org.jboss.dmr.LongModelValue((-1L));
        long long86 = longModelValue84.asLong((long) (byte) -1);
        byte[] byteArray87 = longModelValue84.asBytes();
        boolean boolean88 = longModelValue80.equals(longModelValue84);
        org.jboss.dmr.LongModelValue longModelValue90 = new org.jboss.dmr.LongModelValue(1L);
        long long92 = longModelValue90.asLong((long) (short) 0);
        java.math.BigInteger bigInteger93 = longModelValue90.asBigInteger();
        boolean boolean94 = longModelValue84.equals(longModelValue90);
        boolean boolean95 = propertyModelValue77.equals((java.lang.Object) longModelValue90);
        boolean boolean96 = propertyModelValue57.equals(propertyModelValue77);
        org.jboss.dmr.ModelNode modelNode97 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) propertyModelValue77);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + modelType48 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType48.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(modelNodeList58);
        org.junit.Assert.assertNotNull(modelValue59);
        org.junit.Assert.assertNotNull(modelNodeList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(\"hi!\" => 0.0)" + "'", str67, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-1.0d) + "'", double82 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
        org.junit.Assert.assertNotNull(bigInteger93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isBigInteger();
        boolean boolean21 = modelReader15.isListEnd();
        boolean boolean22 = modelReader15.isExpression();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType23 = modelReader15.getType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        org.jboss.dmr.ObjectModelValue objectModelValue6 = null;
        boolean boolean7 = objectModelValue4.equals(objectModelValue6);
        boolean boolean8 = objectModelValue0.equals(objectModelValue6);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asList();
        boolean boolean17 = objectModelValue0.equals((java.lang.Object) modelNode15);
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setExpression("H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA", "QCQAAAAAAAA=");
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long23 = modelNode22.asLong();
        org.jboss.dmr.ValueExpression valueExpression24 = modelNode22.asExpression();
        java.math.BigDecimal bigDecimal25 = valueExpression24.resolveBigDecimal();
        java.lang.String str26 = valueExpression24.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        long long30 = longModelValue28.asLong((long) (short) 0);
        java.lang.String str31 = longModelValue28.asString();
        org.jboss.dmr.ValueExpression valueExpression32 = longModelValue28.asExpression();
        int int33 = valueExpression32.resolveInt();
        boolean boolean34 = valueExpression24.equals(valueExpression32);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver35 = org.jboss.dmr.ValueExpressionResolver.DEFAULT_RESOLVER;
        org.jboss.dmr.BooleanModelValue booleanModelValue37 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long38 = booleanModelValue37.asLong();
        org.jboss.dmr.ValueExpression valueExpression39 = booleanModelValue37.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue40 = new org.jboss.dmr.ExpressionValue(valueExpression39);
        java.lang.String str41 = valueExpression39.getExpressionString();
        java.lang.String str42 = valueExpressionResolver35.resolve(valueExpression39);
        long long43 = valueExpression32.resolveLong(valueExpressionResolver35);
        org.jboss.dmr.ExpressionValue expressionValue45 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue47 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean48 = expressionValue45.equals(expressionValue47);
        org.jboss.dmr.ExpressionValue expressionValue50 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue52 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean53 = expressionValue50.equals(expressionValue52);
        boolean boolean54 = expressionValue45.equals(expressionValue52);
        org.jboss.dmr.ValueExpression valueExpression55 = expressionValue52.asExpression();
        java.lang.String str56 = valueExpressionResolver35.resolve(valueExpression55);
        org.jboss.dmr.ModelNode modelNode57 = modelNode20.set(valueExpression55);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1.0" + "'", str26, "1.0");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(valueExpressionResolver35);
        org.junit.Assert.assertNotNull(booleanModelValue37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(valueExpression39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "true" + "'", str41, "true");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "true" + "'", str42, "true");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(valueExpression55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(modelNode57);
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        java.math.BigInteger bigInteger1 = booleanModelValue0.asBigInteger();
        boolean boolean2 = booleanModelValue0.asBoolean();
        long long4 = booleanModelValue0.asLong((long) 10);
        java.math.BigInteger bigInteger5 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.ValueExpression valueExpression6 = booleanModelValue0.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = valueExpression6.resolveInt();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"true\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertNotNull(bigInteger1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(valueExpression6);
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        boolean boolean7 = booleanModelValue1.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger8 = booleanModelValue1.asBigInteger();
        byte[] byteArray9 = booleanModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue10 = new org.jboss.dmr.BytesModelValue(byteArray9);
        byte[] byteArray11 = bytesModelValue10.asBytes();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode(byteArray11);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("1");
        java.util.Set<java.lang.String> strSet5 = objectModelValue0.getKeys();
        long long7 = objectModelValue0.asLong((long) 100);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue3 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue3.asObject();
        java.util.Set<java.lang.String> strSet5 = objectModelValue3.getKeys();
        boolean boolean7 = objectModelValue3.has((int) 'a');
        boolean boolean9 = objectModelValue3.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue10 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode11 = objectModelValue10.asObject();
        java.util.Set<java.lang.String> strSet12 = objectModelValue10.getKeys();
        boolean boolean14 = objectModelValue10.has((int) 'a');
        boolean boolean15 = objectModelValue3.equals(objectModelValue10);
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue10.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = objectModelValue10.asList();
        org.jboss.dmr.ModelNode modelNode18 = modelNode1.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = modelNode1.addEmptyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList20 = modelNode1.asList();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ValueExpression valueExpression21 = modelNode1.asExpression();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNodeList20);
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        int int6 = longModelValue1.asInt();
        int int7 = longModelValue1.asInt();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.lang.String str13 = modelNode9.toString();
        org.jboss.dmr.ModelNode modelNode14 = modelNode9.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode16 = modelNode9.set(100);
        org.jboss.dmr.ModelNode modelNode17 = modelNode8.add(modelNode9);
        org.jboss.dmr.ModelNode modelNode19 = modelNode17.set((double) (-1.0f));
        java.math.BigInteger bigInteger20 = modelNode17.asBigIntegerOrNull();
        boolean boolean21 = longModelValue1.equals((java.lang.Object) modelNode17);
        byte[] byteArray22 = longModelValue1.asBytes();
        byte[] byteArray23 = longModelValue1.asBytes();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"hi!\" => 0.0)" + "'", str13, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        long long5 = intModelValue1.asLong();
        long long6 = intModelValue1.asLong();
        int int8 = intModelValue1.asInt((int) 'p');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression7 = expressionValue6.asExpression();
        boolean boolean8 = expressionValue1.equals(expressionValue6);
        org.jboss.dmr.ObjectModelValue objectModelValue9 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode10 = objectModelValue9.asObject();
        java.util.Set<java.lang.String> strSet11 = objectModelValue9.getKeys();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue9.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        int int15 = objectModelValue9.asInt(10);
        boolean boolean16 = expressionValue6.equals((java.lang.Object) objectModelValue9);
        int int17 = objectModelValue9.asInt();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue9.removeChild("{ \"EXPRESSION_VALUE\" : \"1.0\" }");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(modelNode13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(modelNode19);
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        double double16 = bigIntegerModelValue4.asDouble(0.0d);
        double double18 = bigIntegerModelValue4.asDouble((double) 100.0f);
        java.math.BigInteger bigInteger19 = bigIntegerModelValue4.asBigInteger();
        java.math.BigInteger bigInteger20 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.BooleanModelValue booleanModelValue22 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray23 = booleanModelValue22.asBytes();
        java.lang.String str24 = booleanModelValue22.asString();
        int int25 = booleanModelValue22.asInt();
        long long26 = booleanModelValue22.asLong();
        boolean boolean28 = booleanModelValue22.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger29 = booleanModelValue22.asBigInteger();
        java.math.BigInteger bigInteger30 = booleanModelValue22.asBigInteger();
        java.math.BigDecimal bigDecimal31 = booleanModelValue22.asBigDecimal();
        boolean boolean32 = bigIntegerModelValue4.equals((java.lang.Object) bigDecimal31);
        long long33 = bigIntegerModelValue4.asLong();
        org.jboss.dmr.BooleanModelValue booleanModelValue34 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double35 = booleanModelValue34.asDouble();
        org.jboss.dmr.ModelValue modelValue36 = booleanModelValue34.copy();
        java.math.BigInteger bigInteger37 = booleanModelValue34.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue38 = new org.jboss.dmr.BigIntegerModelValue(bigInteger37);
        double double40 = bigIntegerModelValue38.asDouble((double) 'b');
        double double41 = bigIntegerModelValue38.asDouble();
        boolean boolean42 = bigIntegerModelValue4.equals(bigIntegerModelValue38);
        long long44 = bigIntegerModelValue38.asLong((long) (short) 0);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(booleanModelValue22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "true" + "'", str24, "true");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(booleanModelValue34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode6 = modelNode0.add((double) 100);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode11 = modelNode10.setEmptyList();
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.asObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.get("Expression \"true\"");
        boolean boolean15 = modelNode6.equals(modelNode12);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(modelType16);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        org.jboss.dmr.ModelNode modelNode24 = modelNode17.set(property23);
        org.jboss.dmr.ModelNode modelNode25 = property23.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue(property23);
        org.jboss.dmr.ModelValue modelValue27 = propertyModelValue26.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = propertyModelValue26.asList();
        org.jboss.dmr.ModelNode modelNode29 = modelNode6.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.Validation.validate(modelNode6, "bytes {\n    0x01\n}");
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType16.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ModelType modelType9 = typeModelValue5.asType();
        boolean boolean11 = typeModelValue5.asBoolean(true);
        java.lang.String str12 = typeModelValue5.asString();
        java.lang.String str13 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression14 = typeModelValue5.asExpression();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory16 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream17 = null;
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream(inputStream17, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream19);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory16.newModelReader((java.io.InputStream) inputStream20);
        java.io.OutputStream outputStream22 = null;
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream(outputStream22);
        org.jboss.dmr.Base64.OutputStream outputStream24 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream23);
        outputStream23.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter27 = modelStreamFactory16.newModelWriter((java.io.OutputStream) outputStream23);
        org.jboss.dmr.stream.ModelWriter modelWriter28 = modelWriter27.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter28.writeInt((int) (byte) 10);
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelWriter30.writeListEnd();
        // The following exception was thrown during execution in test generation
        try {
            typeModelValue5.write(modelWriter30);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PROPERTY" + "'", str12, "PROPERTY");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PROPERTY" + "'", str13, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(modelStreamFactory16);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertNotNull(modelWriter27);
        org.junit.Assert.assertNotNull(modelWriter28);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelWriter31);
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        java.lang.String str15 = listModelValue14.asString();
        long long16 = listModelValue14.asLong();
        int int18 = listModelValue14.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue19 = listModelValue14.protect();
        boolean boolean21 = listModelValue14.has((int) (short) 100);
        boolean boolean22 = listModelValue5.equals(listModelValue14);
        boolean boolean24 = listModelValue5.has((int) (short) -1);
        long long25 = listModelValue5.asLong();
        java.lang.String str26 = listModelValue5.asString();
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = modelNode30.asList();
        org.jboss.dmr.ListModelValue listModelValue32 = new org.jboss.dmr.ListModelValue(modelNodeList31);
        java.lang.String str33 = listModelValue32.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList34 = listModelValue32.asList();
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList39 = modelNode38.asList();
        org.jboss.dmr.ListModelValue listModelValue40 = new org.jboss.dmr.ListModelValue(modelNodeList39);
        java.lang.String str41 = listModelValue40.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList42 = listModelValue40.asList();
        boolean boolean43 = listModelValue32.equals(listModelValue40);
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList48 = modelNode47.asList();
        org.jboss.dmr.ListModelValue listModelValue49 = new org.jboss.dmr.ListModelValue(modelNodeList48);
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue49);
        org.jboss.dmr.ModelValue modelValue51 = listModelValue49.resolve();
        int int53 = listModelValue49.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList54 = listModelValue49.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList55 = listModelValue49.asPropertyList();
        org.jboss.dmr.ModelValue modelValue56 = listModelValue49.copy();
        boolean boolean57 = listModelValue40.equals(listModelValue49);
        boolean boolean58 = listModelValue5.equals(listModelValue40);
        long long59 = listModelValue5.asLong();
        int int61 = listModelValue5.asInt((int) (byte) 1);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str15, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str26, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str33, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList34);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNodeList39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str41, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNodeList48);
        org.junit.Assert.assertNotNull(modelValue51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(propertyList54);
        org.junit.Assert.assertNotNull(propertyList55);
        org.junit.Assert.assertNotNull(modelValue56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        boolean boolean4 = stringModelValue1.equals((java.lang.Object) (-1.0d));
        java.lang.String str5 = stringModelValue1.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent6 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) modelEvent6);
        java.lang.String str8 = stringModelValue1.asString();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = stringModelValue1.asDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str5, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent6 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent6.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str8, "(\"\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelValue modelValue11 = propertyModelValue10.protect();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = propertyModelValue10.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue11);
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter14 = modelWriter12.writeLong(100L);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter12.writeObjectEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter14);
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.clear();
        int int10 = modelNode8.asInt(112);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ModelNode modelNode18 = modelNode14.setExpression("hi!", "(\"hi!\" => 0.0)");
        java.util.Set<java.lang.String> strSet19 = modelNode18.keys();
        boolean boolean20 = modelNode8.equals(modelNode18);
        org.jboss.dmr.ModelNode modelNode22 = modelNode8.add((long) (short) -1);
        org.jboss.dmr.ObjectModelValue objectModelValue23 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode24 = objectModelValue23.asObject();
        java.util.Set<java.lang.String> strSet25 = objectModelValue23.getKeys();
        org.jboss.dmr.ModelNode modelNode27 = objectModelValue23.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean28 = objectModelValue23.asBoolean();
        org.jboss.dmr.ModelNode modelNode30 = objectModelValue23.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue31 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode32 = objectModelValue31.asObject();
        java.util.Set<java.lang.String> strSet33 = objectModelValue31.getKeys();
        org.jboss.dmr.ModelNode modelNode35 = objectModelValue31.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean36 = objectModelValue31.asBoolean();
        int int38 = objectModelValue31.asInt((int) 'b');
        int int40 = objectModelValue31.asInt((int) '#');
        boolean boolean41 = objectModelValue23.equals(objectModelValue31);
        int int42 = objectModelValue31.asInt();
        java.util.Set<java.lang.String> strSet43 = objectModelValue31.getKeys();
        long long45 = objectModelValue31.asLong((long) 0);
        org.jboss.dmr.ModelType modelType46 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode(modelType46);
        org.jboss.dmr.LongModelValue longModelValue50 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str51 = longModelValue50.asString();
        byte[] byteArray52 = longModelValue50.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue53 = new org.jboss.dmr.BytesModelValue(byteArray52);
        java.lang.String str54 = bytesModelValue53.asString();
        int int55 = bytesModelValue53.asInt();
        long long57 = bytesModelValue53.asLong((long) (short) 1);
        long long58 = bytesModelValue53.asLong();
        java.math.BigDecimal bigDecimal59 = bytesModelValue53.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode60 = modelNode47.set("32", bigDecimal59);
        boolean boolean61 = objectModelValue31.equals((java.lang.Object) bigDecimal59);
        org.jboss.dmr.ModelNode modelNode62 = modelNode22.set(bigDecimal59);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode63 = modelNode62.asObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 112 + "'", int10 == 112);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(modelNode27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(modelNode35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + modelType46 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType46.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str54, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(modelNode62);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        double double3 = booleanModelValue1.asDouble();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelValue modelValue11 = listModelValue5.clone();
        org.jboss.dmr.ModelValue modelValue12 = modelValue11.clone();
        boolean boolean13 = modelValue12.asBoolean();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode(modelValue12);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode16 = modelNode14.remove("\"(\\\"expression \\\\\\\"hi!\\\\\\\"\\\" => bytes {\\n    0x01\\n})\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        boolean boolean3 = objectModelValue0.asBoolean();
        java.lang.String str4 = objectModelValue0.asString();
        org.jboss.dmr.ObjectModelValue objectModelValue5 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue5.asObject();
        java.util.Set<java.lang.String> strSet7 = objectModelValue5.getKeys();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue5.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelValue modelValue11 = objectModelValue5.copy(false);
        int int12 = objectModelValue5.asInt();
        int int13 = objectModelValue5.asInt();
        boolean boolean14 = objectModelValue0.equals(objectModelValue5);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelType modelType5 = modelNode3.getType();
        org.jboss.dmr.TypeModelValue typeModelValue6 = org.jboss.dmr.TypeModelValue.of(modelType5);
        org.jboss.dmr.ModelType modelType7 = org.jboss.dmr.ModelType.PROPERTY;
        char char8 = modelType7.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue9 = org.jboss.dmr.TypeModelValue.of(modelType7);
        java.lang.String str10 = typeModelValue9.asString();
        boolean boolean11 = typeModelValue6.equals(typeModelValue9);
        org.jboss.dmr.ValueExpression valueExpression12 = typeModelValue9.asExpression();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType5.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue6);
        org.junit.Assert.assertTrue("'" + modelType7 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType7.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + 'p' + "'", char8 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY" + "'", str10, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(valueExpression12);
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        int int6 = doubleModelValue1.asInt(2);
        double double8 = doubleModelValue1.asDouble(0.0d);
        org.jboss.dmr.DoubleModelValue doubleModelValue10 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long11 = doubleModelValue10.asLong();
        boolean boolean12 = doubleModelValue10.asBoolean();
        byte[] byteArray13 = doubleModelValue10.asBytes();
        int int15 = doubleModelValue10.asInt((int) ' ');
        long long16 = doubleModelValue10.asLong();
        org.jboss.dmr.ValueExpression valueExpression17 = doubleModelValue10.asExpression();
        java.math.BigInteger bigInteger18 = doubleModelValue10.asBigInteger();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode22.asList();
        org.jboss.dmr.ListModelValue listModelValue24 = new org.jboss.dmr.ListModelValue(modelNodeList23);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue24);
        org.jboss.dmr.ModelValue modelValue26 = listModelValue24.resolve();
        int int28 = listModelValue24.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList29 = listModelValue24.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList30 = listModelValue24.asList();
        long long31 = listModelValue24.asLong();
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        java.lang.String str38 = listModelValue37.asString();
        long long39 = listModelValue37.asLong();
        int int41 = listModelValue37.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue42 = listModelValue37.protect();
        boolean boolean44 = listModelValue37.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue45 = listModelValue37.resolve();
        boolean boolean46 = listModelValue37.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = listModelValue37.asList();
        boolean boolean48 = listModelValue24.equals(listModelValue37);
        java.util.List<org.jboss.dmr.Property> propertyList49 = listModelValue24.asPropertyList();
        boolean boolean50 = doubleModelValue10.equals((java.lang.Object) propertyList49);
        double double52 = doubleModelValue10.asDouble((double) '4');
        boolean boolean53 = doubleModelValue1.equals(doubleModelValue10);
        org.jboss.dmr.ExpressionValue expressionValue55 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue57 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean58 = expressionValue55.equals(expressionValue57);
        org.jboss.dmr.ExpressionValue expressionValue60 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression61 = expressionValue60.asExpression();
        boolean boolean62 = expressionValue55.equals(expressionValue60);
        java.lang.String str63 = expressionValue55.asString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory65 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream66 = null;
        org.jboss.dmr.Base64.InputStream inputStream68 = new org.jboss.dmr.Base64.InputStream(inputStream66, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream69 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream68);
        org.jboss.dmr.stream.ModelReader modelReader70 = modelStreamFactory65.newModelReader((java.io.InputStream) inputStream69);
        java.io.OutputStream outputStream71 = null;
        org.jboss.dmr.Base64.OutputStream outputStream72 = new org.jboss.dmr.Base64.OutputStream(outputStream71);
        org.jboss.dmr.Base64.OutputStream outputStream73 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream72);
        outputStream72.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter76 = modelStreamFactory65.newModelWriter((java.io.OutputStream) outputStream72);
        org.jboss.dmr.stream.ModelWriter modelWriter77 = modelWriter76.writeListStart();
        expressionValue55.write(modelWriter77);
        doubleModelValue1.write(modelWriter77);
        org.jboss.dmr.stream.ModelWriter modelWriter80 = modelWriter77.writeObjectStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter81 = modelWriter77.writePropertyStart();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting OBJECT_END or STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertNotNull(modelValue26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(propertyList29);
        org.junit.Assert.assertNotNull(modelNodeList30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str38, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(modelValue42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(modelValue45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(propertyList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(valueExpression61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(modelStreamFactory65);
        org.junit.Assert.assertNotNull(modelReader70);
        org.junit.Assert.assertNotNull(modelWriter76);
        org.junit.Assert.assertNotNull(modelWriter77);
        org.junit.Assert.assertNotNull(modelWriter80);
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        java.lang.Throwable throwable1 = null;
        org.jboss.dmr.stream.ModelException modelException2 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable1);
        org.jboss.dmr.stream.ModelException modelException3 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException2);
        java.lang.Throwable throwable5 = null;
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable5);
        org.jboss.dmr.stream.ModelException modelException7 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException6);
        modelException2.addSuppressed((java.lang.Throwable) modelException6);
        java.lang.Throwable[] throwableArray9 = modelException6.getSuppressed();
        org.jboss.dmr.stream.ModelException modelException10 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException6);
        org.jboss.dmr.stream.ModelException modelException13 = new org.jboss.dmr.stream.ModelException("\"35\"");
        org.jboss.dmr.stream.ModelException modelException14 = new org.jboss.dmr.stream.ModelException("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}", (java.lang.Throwable) modelException13);
        modelException10.addSuppressed((java.lang.Throwable) modelException14);
        org.jboss.dmr.stream.ModelException modelException17 = new org.jboss.dmr.stream.ModelException("{\n    \"\\\"\\\\\\\"1L\\\\\\\"\\\"\" : 0\n}");
        modelException14.addSuppressed((java.lang.Throwable) modelException17);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str5 = longModelValue4.asString();
        byte[] byteArray6 = longModelValue4.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue7 = new org.jboss.dmr.BytesModelValue(byteArray6);
        java.lang.String str8 = bytesModelValue7.asString();
        int int9 = bytesModelValue7.asInt();
        long long11 = bytesModelValue7.asLong((long) (short) 1);
        long long12 = bytesModelValue7.asLong();
        java.math.BigDecimal bigDecimal13 = bytesModelValue7.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.set("32", bigDecimal13);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue15 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal13);
        java.io.DataOutput dataOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue15.writeExternal(dataOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType0.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str8, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(modelNode14);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.clear();
        int int10 = modelNode8.asInt(112);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ModelNode modelNode18 = modelNode14.setExpression("hi!", "(\"hi!\" => 0.0)");
        java.util.Set<java.lang.String> strSet19 = modelNode18.keys();
        boolean boolean20 = modelNode8.equals(modelNode18);
        org.jboss.dmr.ModelNode modelNode23 = modelNode8.add("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => bytes {\n    0xb6, 0xbb, 0x9e\n})", "AAAAZA==");
        org.jboss.dmr.Validation.validate(modelNode8, "52");
        java.lang.String str27 = modelNode8.asString("(\"(\\\"Expression \\\\\\\"true\\\\\\\"\\\" => (\\\"org.jboss.dmr.stream.ModelException: [(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => (\\\"hi!\\\" => 0.0)))\" => big integer 1)");
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 112 + "'", int10 == 112);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[(\"(\\\"\\\\\\\"(\\\\\\\\\\\\\\\"hi!\\\\\\\\\\\\\\\" => 0.0)\\\\\\\"\\\" => bytes {\n    0xb6, 0xbb, 0x9e\n})\" => \"AAAAZA==\")]" + "'", str27, "[(\"(\\\"\\\\\\\"(\\\\\\\\\\\\\\\"hi!\\\\\\\\\\\\\\\" => 0.0)\\\\\\\"\\\" => bytes {\n    0xb6, 0xbb, 0x9e\n})\" => \"AAAAZA==\")]");
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        org.jboss.dmr.Validation.validate(modelNode0, "[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelType modelType6 = modelNode0.getType();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode0.asListOrEmpty();
        boolean boolean9 = modelNode0.hasDefined((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set("rO0ABXQAByJbOTdMXSI=", 97);
        org.jboss.dmr.ObjectModelValue objectModelValue13 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode14 = objectModelValue13.asObject();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue13.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", (double) 'p');
        org.jboss.dmr.IntModelValue intModelValue22 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str23 = intModelValue22.asString();
        byte[] byteArray24 = intModelValue22.asBytes();
        org.jboss.dmr.IntModelValue intModelValue26 = new org.jboss.dmr.IntModelValue(10);
        boolean boolean27 = intModelValue22.equals(intModelValue26);
        java.math.BigInteger bigInteger28 = intModelValue22.asBigInteger();
        org.jboss.dmr.ModelNode modelNode29 = modelNode19.set("", bigInteger28);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory31 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream32 = null;
        org.jboss.dmr.Base64.InputStream inputStream34 = new org.jboss.dmr.Base64.InputStream(inputStream32, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue36 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str37 = longModelValue36.asString();
        byte[] byteArray38 = longModelValue36.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue39 = new org.jboss.dmr.BytesModelValue(byteArray38);
        int int42 = inputStream34.read(byteArray38, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream34, (-1));
        org.jboss.dmr.stream.ModelReader modelReader45 = modelStreamFactory31.newModelReader((java.io.InputStream) inputStream44);
        java.io.InputStream inputStream46 = null;
        org.jboss.dmr.Base64.InputStream inputStream48 = new org.jboss.dmr.Base64.InputStream(inputStream46, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream49 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream48);
        org.jboss.dmr.Base64.InputStream inputStream50 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream48);
        org.jboss.dmr.stream.ModelReader modelReader51 = modelStreamFactory31.newModelReader((java.io.InputStream) inputStream48);
        java.io.InputStream inputStream52 = null;
        org.jboss.dmr.Base64.InputStream inputStream54 = new org.jboss.dmr.Base64.InputStream(inputStream52, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream55 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream54);
        org.jboss.dmr.stream.ModelReader modelReader56 = modelStreamFactory31.newModelReader((java.io.InputStream) inputStream54);
        org.jboss.dmr.Base64.InputStream inputStream57 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream54);
        boolean boolean58 = modelNode29.equals((java.lang.Object) inputStream57);
        // The following exception was thrown during execution in test generation
        try {
            modelNode12.readExternal((java.io.InputStream) inputStream57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType6.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32" + "'", str23, "32");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelStreamFactory31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(modelReader45);
        org.junit.Assert.assertNotNull(modelReader51);
        org.junit.Assert.assertNotNull(modelReader56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        long long3 = modelNode1.asLong((long) '4');
        org.jboss.dmr.ModelType modelType4 = modelNode1.getType();
        char char5 = modelType4.getTypeChar();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + modelType4 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType4.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'b' + "'", char5 == 'b');
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        java.lang.String str10 = bigDecimalModelValue7.asString();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        java.lang.String str16 = valueExpression14.getExpressionString();
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue18 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal17);
        boolean boolean19 = bigDecimalModelValue18.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression20 = bigDecimalModelValue18.asExpression();
        int int21 = bigDecimalModelValue18.asInt();
        long long22 = bigDecimalModelValue18.asLong();
        boolean boolean23 = bigDecimalModelValue7.equals(bigDecimalModelValue18);
        java.io.DataOutput dataOutput24 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue7.writeExternal(dataOutput24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0" + "'", str10, "1.0");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0" + "'", str16, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int8 = bytesModelValue4.asInt((int) 'a');
        java.lang.String str9 = bytesModelValue4.asString();
        double double11 = bytesModelValue4.asDouble((double) (-1));
        double double12 = bytesModelValue4.asDouble();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = modelNode15.set(100);
        org.jboss.dmr.ModelNode modelNode23 = modelNode14.add(modelNode15);
        org.jboss.dmr.ModelType modelType25 = org.jboss.dmr.ModelType.BYTES;
        char char26 = modelType25.getTypeChar();
        org.jboss.dmr.ModelNode modelNode27 = modelNode14.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType25);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue("Expression \"1\"", modelNode14, false);
        org.jboss.dmr.ModelNode modelNode30 = propertyModelValue29.asObject();
        org.jboss.dmr.ExpressionValue expressionValue32 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue34 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean35 = expressionValue32.equals(expressionValue34);
        org.jboss.dmr.ExpressionValue expressionValue37 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue39 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean40 = expressionValue37.equals(expressionValue39);
        boolean boolean41 = expressionValue32.equals(expressionValue39);
        org.jboss.dmr.ExpressionValue expressionValue43 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str44 = expressionValue43.asString();
        boolean boolean45 = expressionValue32.equals(expressionValue43);
        org.jboss.dmr.ModelValue modelValue46 = expressionValue32.resolve();
        org.jboss.dmr.ExpressionValue expressionValue48 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression49 = expressionValue48.asExpression();
        boolean boolean50 = expressionValue32.equals(expressionValue48);
        org.jboss.dmr.ModelValue modelValue51 = expressionValue48.resolve();
        org.jboss.dmr.ValueExpression valueExpression52 = expressionValue48.asExpression();
        org.jboss.dmr.ModelNode modelNode53 = modelNode30.set(valueExpression52);
        org.jboss.dmr.ModelNode modelNode55 = org.jboss.dmr.ModelNode.fromString("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        org.jboss.dmr.ModelNode modelNode58 = modelNode55.set("hi!", (long) 32);
        org.jboss.dmr.ModelNode modelNode59 = modelNode53.set(modelNode55);
        boolean boolean60 = bytesModelValue4.equals((java.lang.Object) modelNode55);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str9, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 4.9E-324d + "'", double11 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 4.9E-324d + "'", double12 == 4.9E-324d);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertTrue("'" + modelType25 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType25.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + 'b' + "'", char26 == 'b');
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(modelValue46);
        org.junit.Assert.assertNotNull(valueExpression49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(modelValue51);
        org.junit.Assert.assertNotNull(valueExpression52);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        double double15 = bigIntegerModelValue13.asDouble((double) 'b');
        boolean boolean16 = bigIntegerModelValue4.equals(bigIntegerModelValue13);
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double18 = booleanModelValue17.asDouble();
        org.jboss.dmr.ModelValue modelValue19 = booleanModelValue17.copy();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue21 = new org.jboss.dmr.BigIntegerModelValue(bigInteger20);
        long long23 = bigIntegerModelValue21.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = null;
        boolean boolean25 = bigIntegerModelValue21.equals(bigIntegerModelValue24);
        boolean boolean26 = bigIntegerModelValue4.equals(bigIntegerModelValue21);
        org.jboss.dmr.ModelValue modelValue27 = bigIntegerModelValue21.resolve();
        boolean boolean29 = bigIntegerModelValue21.asBoolean(false);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory31 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream32 = null;
        org.jboss.dmr.Base64.InputStream inputStream34 = new org.jboss.dmr.Base64.InputStream(inputStream32, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue36 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str37 = longModelValue36.asString();
        byte[] byteArray38 = longModelValue36.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue39 = new org.jboss.dmr.BytesModelValue(byteArray38);
        int int42 = inputStream34.read(byteArray38, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream34, (-1));
        org.jboss.dmr.stream.ModelReader modelReader45 = modelStreamFactory31.newModelReader((java.io.InputStream) inputStream44);
        java.io.InputStream inputStream46 = null;
        org.jboss.dmr.Base64.InputStream inputStream48 = new org.jboss.dmr.Base64.InputStream(inputStream46, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream49 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream48);
        org.jboss.dmr.Base64.InputStream inputStream50 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream48);
        org.jboss.dmr.stream.ModelReader modelReader51 = modelStreamFactory31.newModelReader((java.io.InputStream) inputStream48);
        java.io.InputStream inputStream52 = null;
        org.jboss.dmr.Base64.InputStream inputStream54 = new org.jboss.dmr.Base64.InputStream(inputStream52, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream55 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream54);
        org.jboss.dmr.stream.ModelReader modelReader56 = modelStreamFactory31.newModelReader((java.io.InputStream) inputStream54);
        java.io.OutputStream outputStream57 = null;
        org.jboss.dmr.Base64.OutputStream outputStream58 = new org.jboss.dmr.Base64.OutputStream(outputStream57);
        outputStream58.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream60 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream58);
        org.jboss.dmr.Base64.OutputStream outputStream61 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream60);
        outputStream60.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream63 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream60);
        org.jboss.dmr.Base64.OutputStream outputStream64 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream60);
        org.jboss.dmr.stream.ModelWriter modelWriter65 = modelStreamFactory31.newModelWriter((java.io.OutputStream) outputStream64);
        org.jboss.dmr.stream.ModelWriter modelWriter67 = modelWriter65.writeBoolean(false);
        modelWriter67.close();
        boolean boolean69 = bigIntegerModelValue21.equals((java.lang.Object) modelWriter67);
        org.jboss.dmr.ValueExpression valueExpression70 = bigIntegerModelValue21.asExpression();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(modelReader45);
        org.junit.Assert.assertNotNull(modelReader51);
        org.junit.Assert.assertNotNull(modelReader56);
        org.junit.Assert.assertNotNull(modelWriter65);
        org.junit.Assert.assertNotNull(modelWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(valueExpression70);
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBoolean();
        boolean boolean19 = modelReader15.isObjectEnd();
        boolean boolean20 = modelReader15.isObjectStart();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(35L);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger6 = booleanModelValue5.asBigInteger();
        org.jboss.dmr.ModelNode modelNode7 = modelNode3.add(bigInteger6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode(bigInteger6);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode(modelType10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode8.set("true", modelType10);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set("\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\"", modelType10);
        java.lang.String str14 = modelNode13.asString();
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("hi!", 0.0d);
        org.jboss.dmr.Property property20 = new org.jboss.dmr.Property("", modelNode19);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.get(strArray21);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        org.jboss.dmr.ListModelValue listModelValue28 = new org.jboss.dmr.ListModelValue(modelNodeList27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue28);
        org.jboss.dmr.ModelValue modelValue30 = listModelValue28.resolve();
        int int32 = listModelValue28.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList33 = listModelValue28.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList34 = modelNode22.asPropertyList(propertyList33);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.set("hi!", 0.0d);
        org.jboss.dmr.Property property40 = new org.jboss.dmr.Property("", modelNode39);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode42 = modelNode39.get(strArray41);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode46.asList();
        org.jboss.dmr.ListModelValue listModelValue48 = new org.jboss.dmr.ListModelValue(modelNodeList47);
        org.jboss.dmr.ModelNode modelNode49 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue48);
        org.jboss.dmr.ModelValue modelValue50 = listModelValue48.resolve();
        int int52 = listModelValue48.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList53 = listModelValue48.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList54 = modelNode42.asPropertyList(propertyList53);
        modelNode22.setNoCopy(modelNode42);
        org.jboss.dmr.ModelNode modelNode57 = modelNode42.set((long) 100);
        org.jboss.dmr.ModelType modelType58 = modelNode57.getType();
        long long60 = modelNode57.asLong((long) (short) 100);
        org.jboss.dmr.ValueExpression valueExpression61 = modelNode57.asExpression();
        org.jboss.dmr.ModelNode modelNode62 = modelNode57.clone();
        modelNode13.setNoCopy(modelNode57);
        java.lang.Class<?> wildcardClass64 = modelNode13.getClass();
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType10.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(\"\\\"bytes {\\\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\\\n}\\\"\" => INT)" + "'", str14, "(\"\\\"bytes {\\\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\\\n}\\\"\" => INT)");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(propertyList33);
        org.junit.Assert.assertNotNull(propertyList34);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertNotNull(modelValue50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(propertyList53);
        org.junit.Assert.assertNotNull(propertyList54);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertTrue("'" + modelType58 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType58.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertNotNull(valueExpression61);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        byte[] byteArray5 = org.jboss.dmr.Base64.decode("true");
        boolean boolean7 = org.jboss.dmr.Base64.encodeToFile(byteArray5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int10 = inputStream2.read(byteArray5, (int) 'l', 0);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.copy(false);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue12);
        long long14 = listModelValue12.asLong();
        java.util.List<org.jboss.dmr.Property> propertyList15 = listModelValue12.asPropertyList();
        org.jboss.dmr.ModelValue modelValue16 = listModelValue12.protect();
        boolean boolean17 = objectModelValue0.equals((java.lang.Object) listModelValue12);
        int int18 = objectModelValue0.asInt();
        boolean boolean20 = objectModelValue0.asBoolean(false);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(propertyList15);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigInteger();
        boolean boolean18 = modelReader15.isObjectEnd();
        boolean boolean19 = modelReader15.isObjectEnd();
        boolean boolean20 = modelReader15.isBigInteger();
        // The following exception was thrown during execution in test generation
        try {
            modelReader15.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been read");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet7 = objectModelValue0.getKeys();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(bigDecimal5);
        org.jboss.dmr.ModelNode modelNode7 = modelNode6.clear();
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.clone();
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long12 = intModelValue10.asLong((long) 'b');
        java.lang.String str13 = intModelValue10.asString();
        java.math.BigDecimal bigDecimal14 = intModelValue10.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode15 = modelNode7.add(bigDecimal14);
        org.jboss.dmr.IntModelValue intModelValue18 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str19 = intModelValue18.asString();
        double double21 = intModelValue18.asDouble((double) 100);
        java.math.BigInteger bigInteger22 = intModelValue18.asBigInteger();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode(bigInteger22);
        boolean boolean25 = modelNode23.hasDefined((int) '4');
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.setExpression("hi!", "hi!");
        java.lang.String str30 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode26);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = modelNode26.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode33 = modelNode26.set((double) 0);
        org.jboss.dmr.ModelNode modelNode34 = modelNode26.clear();
        org.jboss.dmr.ObjectModelValue objectModelValue35 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode36 = objectModelValue35.asObject();
        java.util.Set<java.lang.String> strSet37 = objectModelValue35.getKeys();
        org.jboss.dmr.ModelNode modelNode39 = objectModelValue35.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean40 = objectModelValue35.asBoolean();
        int int42 = objectModelValue35.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode43 = objectModelValue35.asObject();
        java.util.Set<java.lang.String> strSet44 = modelNode43.keys();
        org.jboss.dmr.ModelNode modelNode45 = modelNode26.add(modelNode43);
        org.jboss.dmr.ModelNode modelNode46 = modelNode26.resolve();
        org.jboss.dmr.ModelNode modelNode47 = modelNode46.setEmptyList();
        org.jboss.dmr.ModelNode modelNode48 = modelNode23.set(modelNode46);
        org.jboss.dmr.Property property50 = new org.jboss.dmr.Property("\"true\"", modelNode23, true);
        org.jboss.dmr.ModelNode modelNode51 = modelNode7.set(property50);
        org.jboss.dmr.ModelNode modelNode52 = modelNode51.asObject();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32" + "'", str13, "32");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32" + "'", str19, "32");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 32.0d + "'", double21 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str30, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(modelNode39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode52);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.LongModelValue longModelValue3 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str4 = longModelValue3.asString();
        byte[] byteArray5 = longModelValue3.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue6 = new org.jboss.dmr.BytesModelValue(byteArray5);
        java.lang.String str7 = bytesModelValue6.asString();
        int int8 = bytesModelValue6.asInt();
        int int9 = bytesModelValue6.asInt();
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str12 = longModelValue11.asString();
        byte[] byteArray13 = longModelValue11.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue14 = new org.jboss.dmr.BytesModelValue(byteArray13);
        double double15 = bytesModelValue14.asDouble();
        boolean boolean16 = bytesModelValue6.equals(bytesModelValue14);
        byte[] byteArray17 = bytesModelValue14.asBytes();
        java.lang.String str18 = bytesModelValue14.asString();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        org.jboss.dmr.Property property28 = new org.jboss.dmr.Property("", modelNode27);
        boolean boolean30 = modelNode27.equals((java.lang.Object) 100L);
        boolean boolean31 = modelNode19.equals(modelNode27);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        org.jboss.dmr.Property property37 = new org.jboss.dmr.Property("", modelNode36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.get(strArray38);
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int41 = modelNode40.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode42 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode45 = modelNode42.setExpression("hi!", "hi!");
        java.lang.String str46 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode42);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode42.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode48 = modelNode40.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList47);
        org.jboss.dmr.ModelNode modelNode49 = modelNode39.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList47);
        org.jboss.dmr.ModelNode modelNode50 = modelNode27.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList47);
        org.jboss.dmr.ModelNode modelNode52 = modelNode27.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode54 = modelNode27.add(false);
        org.jboss.dmr.ModelType modelType55 = org.jboss.dmr.ModelType.PROPERTY;
        char char56 = modelType55.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue57 = org.jboss.dmr.TypeModelValue.of(modelType55);
        org.jboss.dmr.ModelType modelType58 = org.jboss.dmr.ModelType.PROPERTY;
        char char59 = modelType58.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue60 = org.jboss.dmr.TypeModelValue.of(modelType58);
        boolean boolean61 = typeModelValue57.equals(typeModelValue60);
        java.lang.String str62 = typeModelValue60.asString();
        org.jboss.dmr.ValueExpression valueExpression63 = typeModelValue60.asExpression();
        org.jboss.dmr.ModelType modelType64 = typeModelValue60.asType();
        boolean boolean66 = typeModelValue60.asBoolean(false);
        boolean boolean67 = modelNode54.equals((java.lang.Object) typeModelValue60);
        org.jboss.dmr.ExpressionValue expressionValue69 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue71 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean72 = expressionValue69.equals(expressionValue71);
        org.jboss.dmr.ExpressionValue expressionValue74 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression75 = expressionValue74.asExpression();
        boolean boolean76 = expressionValue69.equals(expressionValue74);
        java.lang.String str77 = expressionValue69.asString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory79 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream80 = null;
        org.jboss.dmr.Base64.InputStream inputStream82 = new org.jboss.dmr.Base64.InputStream(inputStream80, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream83 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream82);
        org.jboss.dmr.stream.ModelReader modelReader84 = modelStreamFactory79.newModelReader((java.io.InputStream) inputStream83);
        java.io.OutputStream outputStream85 = null;
        org.jboss.dmr.Base64.OutputStream outputStream86 = new org.jboss.dmr.Base64.OutputStream(outputStream85);
        org.jboss.dmr.Base64.OutputStream outputStream87 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream86);
        outputStream86.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter90 = modelStreamFactory79.newModelWriter((java.io.OutputStream) outputStream86);
        org.jboss.dmr.stream.ModelWriter modelWriter91 = modelWriter90.writeListStart();
        expressionValue69.write(modelWriter91);
        typeModelValue60.write(modelWriter91);
        org.jboss.dmr.stream.ModelWriter modelWriter95 = modelWriter91.writeString("(\"hi!\" => 0.0)");
        bytesModelValue14.write(modelWriter91);
        expressionValue1.write(modelWriter91);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str7, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4.9E-324d + "'", double15 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str18, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str46, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertTrue("'" + modelType55 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType55.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char56 + "' != '" + 'p' + "'", char56 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue57);
        org.junit.Assert.assertTrue("'" + modelType58 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType58.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char59 + "' != '" + 'p' + "'", char59 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PROPERTY" + "'", str62, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression63);
        org.junit.Assert.assertTrue("'" + modelType64 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType64.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(valueExpression75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(modelStreamFactory79);
        org.junit.Assert.assertNotNull(modelReader84);
        org.junit.Assert.assertNotNull(modelWriter90);
        org.junit.Assert.assertNotNull(modelWriter91);
        org.junit.Assert.assertNotNull(modelWriter95);
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        byte[] byteArray3 = doubleModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression4 = doubleModelValue1.asExpression();
        int int6 = doubleModelValue1.asInt((int) (byte) -1);
        int int7 = doubleModelValue1.asInt();
        double double8 = doubleModelValue1.asDouble();
        long long10 = doubleModelValue1.asLong(3L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        java.math.BigDecimal bigDecimal5 = booleanModelValue1.asBigDecimal();
        org.jboss.dmr.ModelValue modelValue6 = booleanModelValue1.protect();
        org.jboss.dmr.ValueExpression valueExpression7 = booleanModelValue1.asExpression();
        long long8 = booleanModelValue1.asLong();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        java.lang.String str1 = org.jboss.dmr.ModelValue.jsonEscape("(\"\\\"bytes {\\\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\\\n}\\\"\" => INT)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\"(\\\"\\\\\\\"bytes {\\\\\\\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\\\\\\\n}\\\\\\\"\\\" => INT)\"" + "'", str1, "\"(\\\"\\\\\\\"bytes {\\\\\\\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\\\\\\\n}\\\\\\\"\\\" => INT)\"");
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        org.jboss.dmr.ModelNode modelNode43 = modelNode28.set((long) 100);
        org.jboss.dmr.ModelType modelType44 = modelNode43.getType();
        long long46 = modelNode43.asLong((long) (short) 100);
        boolean boolean47 = modelNode43.isProtected();
        org.jboss.dmr.Property property49 = new org.jboss.dmr.Property("10", modelNode43, true);
        org.jboss.dmr.ModelType modelType50 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode51 = new org.jboss.dmr.ModelNode(modelType50);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode56 = modelNode53.set("hi!", 0.0d);
        org.jboss.dmr.Property property57 = new org.jboss.dmr.Property("", modelNode56);
        org.jboss.dmr.ModelNode modelNode58 = modelNode51.set(property57);
        java.lang.String str59 = property57.getName();
        org.jboss.dmr.Property property60 = property57.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue61 = new org.jboss.dmr.PropertyModelValue(property60);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = propertyModelValue61.asList();
        org.jboss.dmr.ListModelValue listModelValue63 = new org.jboss.dmr.ListModelValue(modelNodeList62);
        long long65 = listModelValue63.asLong((long) (short) 100);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory67 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream68 = null;
        org.jboss.dmr.Base64.InputStream inputStream70 = new org.jboss.dmr.Base64.InputStream(inputStream68, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream71 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream70);
        org.jboss.dmr.stream.ModelReader modelReader72 = modelStreamFactory67.newModelReader((java.io.InputStream) inputStream71);
        java.io.OutputStream outputStream73 = null;
        org.jboss.dmr.Base64.OutputStream outputStream74 = new org.jboss.dmr.Base64.OutputStream(outputStream73);
        org.jboss.dmr.Base64.OutputStream outputStream75 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream74);
        outputStream74.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter78 = modelStreamFactory67.newModelWriter((java.io.OutputStream) outputStream74);
        org.jboss.dmr.stream.ModelWriter modelWriter79 = modelWriter78.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter81 = modelWriter78.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter83 = modelWriter81.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter85 = modelWriter81.writeBoolean(true);
        listModelValue63.write(modelWriter85);
        boolean boolean87 = modelNode43.equals((java.lang.Object) listModelValue63);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode89 = listModelValue63.requireChild((int) 'b');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [98]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertTrue("'" + modelType44 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType44.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + modelType50 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType50.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(modelStreamFactory67);
        org.junit.Assert.assertNotNull(modelReader72);
        org.junit.Assert.assertNotNull(modelWriter78);
        org.junit.Assert.assertNotNull(modelWriter79);
        org.junit.Assert.assertNotNull(modelWriter81);
        org.junit.Assert.assertNotNull(modelWriter83);
        org.junit.Assert.assertNotNull(modelWriter85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.Property property12 = propertyModelValue11.asProperty();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.lang.String str18 = modelNode14.toString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode14.set(property25);
        org.jboss.dmr.PropertyModelValue propertyModelValue28 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode26, false);
        org.jboss.dmr.Property property29 = propertyModelValue28.asProperty();
        org.jboss.dmr.LongModelValue longModelValue31 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double33 = longModelValue31.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue35 = new org.jboss.dmr.LongModelValue((-1L));
        long long37 = longModelValue35.asLong((long) (byte) -1);
        byte[] byteArray38 = longModelValue35.asBytes();
        boolean boolean39 = longModelValue31.equals(longModelValue35);
        org.jboss.dmr.LongModelValue longModelValue41 = new org.jboss.dmr.LongModelValue(1L);
        long long43 = longModelValue41.asLong((long) (short) 0);
        java.math.BigInteger bigInteger44 = longModelValue41.asBigInteger();
        boolean boolean45 = longModelValue35.equals(longModelValue41);
        boolean boolean46 = propertyModelValue28.equals((java.lang.Object) longModelValue41);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = propertyModelValue28.asList();
        boolean boolean48 = propertyModelValue11.equals(propertyModelValue28);
        boolean boolean50 = propertyModelValue11.has("big decimal 1");
        org.jboss.dmr.ModelValue modelValue51 = propertyModelValue11.copy();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(\"hi!\" => 0.0)" + "'", str18, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(modelValue51);
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.lang.String str5 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode1);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode1.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set((double) 0);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.PROPERTY;
        char char11 = modelType10.getTypeChar();
        org.jboss.dmr.ModelNode modelNode12 = modelNode1.set("[(\"hi!\" => 0.0)]", modelType10);
        org.jboss.dmr.Property property13 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode12);
        org.jboss.dmr.Property property14 = property13.clone();
        org.jboss.dmr.Property property15 = property14.clone();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'p' + "'", char11 == 'p');
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double12 = booleanModelValue11.asDouble();
        org.jboss.dmr.ModelValue modelValue13 = booleanModelValue11.copy();
        java.math.BigInteger bigInteger14 = booleanModelValue11.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue15 = new org.jboss.dmr.BigIntegerModelValue(bigInteger14);
        java.lang.String str16 = bigIntegerModelValue15.asString();
        long long18 = bigIntegerModelValue15.asLong(32L);
        double double19 = bigIntegerModelValue15.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double21 = booleanModelValue20.asDouble();
        org.jboss.dmr.ModelValue modelValue22 = booleanModelValue20.copy();
        java.math.BigInteger bigInteger23 = booleanModelValue20.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = new org.jboss.dmr.BigIntegerModelValue(bigInteger23);
        double double26 = bigIntegerModelValue24.asDouble((double) 'b');
        boolean boolean27 = bigIntegerModelValue15.equals(bigIntegerModelValue24);
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double29 = booleanModelValue28.asDouble();
        org.jboss.dmr.ModelValue modelValue30 = booleanModelValue28.copy();
        java.math.BigInteger bigInteger31 = booleanModelValue28.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue32 = new org.jboss.dmr.BigIntegerModelValue(bigInteger31);
        long long34 = bigIntegerModelValue32.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue35 = null;
        boolean boolean36 = bigIntegerModelValue32.equals(bigIntegerModelValue35);
        boolean boolean37 = bigIntegerModelValue15.equals(bigIntegerModelValue32);
        java.math.BigDecimal bigDecimal38 = bigIntegerModelValue15.asBigDecimal();
        boolean boolean39 = bigIntegerModelValue4.equals(bigIntegerModelValue15);
        double double41 = bigIntegerModelValue4.asDouble((double) 32L);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==");
        boolean boolean44 = bigIntegerModelValue4.equals((java.lang.Object) modelNode43);
        int int46 = bigIntegerModelValue4.asInt((int) 's');
        java.lang.String str47 = bigIntegerModelValue4.asString();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = listModelValue5.asList();
        long long13 = listModelValue5.asLong((long) 52);
        boolean boolean15 = listModelValue5.asBoolean(false);
        boolean boolean16 = listModelValue5.asBoolean();
        org.jboss.dmr.ModelValue modelValue17 = listModelValue5.copy();
        int int19 = modelValue17.asInt((int) (short) 10);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ModelType modelType5 = modelNode3.getType();
        org.jboss.dmr.TypeModelValue typeModelValue6 = org.jboss.dmr.TypeModelValue.of(modelType5);
        org.jboss.dmr.ModelType modelType7 = org.jboss.dmr.ModelType.PROPERTY;
        char char8 = modelType7.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue9 = org.jboss.dmr.TypeModelValue.of(modelType7);
        java.lang.String str10 = typeModelValue9.asString();
        boolean boolean11 = typeModelValue6.equals(typeModelValue9);
        java.lang.String str12 = typeModelValue6.asString();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType5.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(typeModelValue6);
        org.junit.Assert.assertTrue("'" + modelType7 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType7.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + 'p' + "'", char8 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY" + "'", str10, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PROPERTY" + "'", str12, "PROPERTY");
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        java.math.BigInteger bigInteger3 = booleanModelValue1.asBigInteger();
        java.lang.String str4 = booleanModelValue1.asString();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode6 = booleanModelValue1.requireChild("\"AAAAIA==\"");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '\"AAAAIA==\"' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.protect();
        org.jboss.dmr.ModelValue modelValue3 = objectModelValue0.resolve();
        org.jboss.dmr.ModelValue modelValue5 = objectModelValue0.copy(true);
        boolean boolean7 = objectModelValue0.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue0.removeChild("-1");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode11 = objectModelValue0.getChild(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(modelValue3);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(modelNode9);
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int10 = modelNode9.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.clone();
        org.jboss.dmr.ModelNode modelNode12 = modelNode7.setNoCopy("35", modelNode11);
        org.jboss.dmr.ModelType modelType13 = modelNode11.getType();
        org.jboss.dmr.ModelNode modelNode16 = modelNode11.set("Expression \"true\"", "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        java.util.List<org.jboss.dmr.Property> propertyList17 = modelNode16.asPropertyListOrEmpty();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertTrue("'" + modelType13 + "' != '" + org.jboss.dmr.ModelType.UNDEFINED + "'", modelType13.equals(org.jboss.dmr.ModelType.UNDEFINED));
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(propertyList17);
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = modelNode1.asObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = modelNode1.addEmptyList();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean5 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList10 = modelNode9.asList();
        org.jboss.dmr.ListModelValue listModelValue11 = new org.jboss.dmr.ListModelValue(modelNodeList10);
        java.lang.String str12 = listModelValue11.asString();
        long long13 = listModelValue11.asLong();
        int int15 = listModelValue11.asInt((int) '4');
        int int17 = listModelValue11.asInt((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode18 = listModelValue11.asObject();
        boolean boolean20 = listModelValue11.asBoolean(true);
        boolean boolean21 = stringModelValue1.equals((java.lang.Object) true);
        java.io.PrintWriter printWriter22 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue1.format(printWriter22, (int) 'Z', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNodeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str12, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode6 = modelNode0.add((int) 'd');
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        org.jboss.dmr.Property property17 = new org.jboss.dmr.Property("", modelNode16);
        boolean boolean19 = modelNode16.equals((java.lang.Object) 100L);
        boolean boolean20 = modelNode8.equals(modelNode16);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int30 = modelNode29.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode34 = modelNode31.setExpression("hi!", "hi!");
        java.lang.String str35 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode31);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode31.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode37 = modelNode29.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = modelNode28.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList36);
        org.jboss.dmr.ModelNode modelNode39 = modelNode16.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList36);
        org.jboss.dmr.ModelNode modelNode41 = modelNode16.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode43 = modelNode16.add(false);
        org.jboss.dmr.BooleanModelValue booleanModelValue45 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray46 = booleanModelValue45.asBytes();
        java.lang.String str47 = booleanModelValue45.asString();
        int int48 = booleanModelValue45.asInt();
        java.math.BigInteger bigInteger49 = booleanModelValue45.asBigInteger();
        org.jboss.dmr.ModelNode modelNode50 = modelNode16.set(bigInteger49);
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue51 = new org.jboss.dmr.BigIntegerModelValue(bigInteger49);
        long long52 = bigIntegerModelValue51.asLong();
        java.math.BigDecimal bigDecimal53 = bigIntegerModelValue51.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode54 = modelNode6.add("\"AAAAIA==\"", bigDecimal53);
        java.io.DataOutputStream dataOutputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode54.writeExternal(dataOutputStream55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str35, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(booleanModelValue45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "true" + "'", str47, "true");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(modelNode54);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        boolean boolean22 = modelReader21.isBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelEvent modelEvent23 = modelReader21.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        org.jboss.dmr.ObjectModelValue objectModelValue3 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue3.asObject();
        java.util.Set<java.lang.String> strSet5 = objectModelValue3.getKeys();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue3.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean8 = objectModelValue3.asBoolean();
        int int10 = objectModelValue3.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode11 = objectModelValue3.asObject();
        boolean boolean12 = objectModelValue0.equals(objectModelValue3);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = objectModelValue0.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        boolean boolean15 = listModelValue14.asBoolean();
        int int16 = listModelValue14.asInt();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        java.lang.String str1 = org.jboss.dmr.ModelValue.jsonEscape("{\"TYPE_MODEL_VALUE\" => undefined,\"[(\\\"hi!\\\" => 0.0)]\" => undefined,\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => undefined}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\"{\\\"TYPE_MODEL_VALUE\\\" => undefined,\\\"[(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => undefined,\\\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => undefined}\"" + "'", str1, "\"{\\\"TYPE_MODEL_VALUE\\\" => undefined,\\\"[(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => undefined,\\\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => undefined}\"");
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        byte[] byteArray5 = stringModelValue3.asBytes();
        java.lang.Object obj6 = null;
        boolean boolean7 = stringModelValue3.equals(obj6);
        boolean boolean9 = stringModelValue3.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        byte[] byteArray10 = stringModelValue3.asBytes();
        org.jboss.dmr.ValueExpression valueExpression11 = stringModelValue3.asExpression();
        java.lang.String str12 = stringModelValue3.asString();
        org.jboss.dmr.ValueExpression valueExpression13 = stringModelValue3.asExpression();
        byte[] byteArray14 = stringModelValue3.asBytes();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str12, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        byte[] byteArray6 = longModelValue1.asBytes();
        java.lang.String str7 = org.jboss.dmr.Base64.encodeBytes(byteArray6);
        org.jboss.dmr.BytesModelValue bytesModelValue8 = new org.jboss.dmr.BytesModelValue(byteArray6);
        java.math.BigInteger bigInteger9 = bytesModelValue8.asBigInteger();
        java.math.BigInteger bigInteger10 = bytesModelValue8.asBigInteger();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AAAAAAAAAAE=" + "'", str7, "AAAAAAAAAAE=");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(bigInteger10);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isListStart();
        boolean boolean23 = modelReader15.isUndefined();
        boolean boolean24 = modelReader15.isBigInteger();
        boolean boolean25 = modelReader15.isObjectStart();
        boolean boolean26 = modelReader15.isExpression();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        long long7 = bigDecimalModelValue6.asLong();
        long long8 = bigDecimalModelValue6.asLong();
        int int10 = bigDecimalModelValue6.asInt((-1));
        org.jboss.dmr.ModelValue modelValue11 = bigDecimalModelValue6.copy();
        double double12 = bigDecimalModelValue6.asDouble();
        long long13 = bigDecimalModelValue6.asLong();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        boolean boolean7 = booleanModelValue1.equals((java.lang.Object) '4');
        long long9 = booleanModelValue1.asLong((long) (short) 0);
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long12 = booleanModelValue11.asLong();
        org.jboss.dmr.ValueExpression valueExpression13 = booleanModelValue11.asExpression();
        java.lang.String str14 = valueExpression13.toString();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression17 = expressionValue16.asExpression();
        boolean boolean18 = valueExpression13.equals(valueExpression17);
        java.lang.String str19 = valueExpression17.resolveString();
        boolean boolean20 = booleanModelValue1.equals((java.lang.Object) str19);
        int int21 = booleanModelValue1.asInt();
        int int23 = booleanModelValue1.asInt((int) 'I');
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Expression \"true\"" + "'", str14, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        boolean boolean2 = doubleModelValue1.asBoolean();
        double double3 = doubleModelValue1.asDouble();
        java.math.BigInteger bigInteger4 = doubleModelValue1.asBigInteger();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(bigInteger4);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromJSONString("AAAAIw==");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unexpected character 'A' while reading DMR stream");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        int int3 = longModelValue1.asInt();
        java.lang.String str4 = longModelValue1.asString();
        double double6 = longModelValue1.asDouble((double) 32L);
        boolean boolean8 = longModelValue1.asBoolean(false);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "52" + "'", str4, "52");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.ModelNode modelNode8 = modelNode3.set((double) 'a');
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue(1L);
        long long12 = longModelValue10.asLong((long) (short) 0);
        java.lang.String str13 = longModelValue10.asString();
        org.jboss.dmr.ValueExpression valueExpression14 = longModelValue10.asExpression();
        int int15 = valueExpression14.resolveInt();
        org.jboss.dmr.ModelNode modelNode16 = modelNode3.set(valueExpression14);
        org.jboss.dmr.IntModelValue intModelValue18 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str19 = intModelValue18.asString();
        double double21 = intModelValue18.asDouble((double) 2);
        java.math.BigDecimal bigDecimal22 = intModelValue18.asBigDecimal();
        boolean boolean23 = valueExpression14.equals((java.lang.Object) intModelValue18);
        int int24 = intModelValue18.asInt();
        org.jboss.dmr.IntModelValue intModelValue26 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long28 = intModelValue26.asLong((long) 'b');
        java.lang.String str29 = intModelValue26.asString();
        java.math.BigInteger bigInteger30 = intModelValue26.asBigInteger();
        double double32 = intModelValue26.asDouble(0.0d);
        double double33 = intModelValue26.asDouble();
        boolean boolean34 = intModelValue26.asBoolean();
        int int35 = intModelValue26.asInt();
        boolean boolean36 = intModelValue18.equals(intModelValue26);
        double double38 = intModelValue18.asDouble((double) (short) 1);
        double double40 = intModelValue18.asDouble(0.0d);
        java.io.DataOutput dataOutput41 = null;
        // The following exception was thrown during execution in test generation
        try {
            intModelValue18.writeExternal(dataOutput41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32" + "'", str19, "32");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 32.0d + "'", double21 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 32.0d + "'", double32 == 32.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 32.0d + "'", double33 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 32.0d + "'", double38 == 32.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        boolean boolean12 = modelNode9.equals((java.lang.Object) 100L);
        boolean boolean13 = modelNode1.equals(modelNode9);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("", modelNode18);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.get(strArray20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int23 = modelNode22.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.setExpression("hi!", "hi!");
        java.lang.String str28 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode24);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList29 = modelNode24.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode30 = modelNode22.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode32 = modelNode9.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode34 = modelNode9.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.PropertyModelValue propertyModelValue36 = new org.jboss.dmr.PropertyModelValue("1.0", modelNode9, false);
        java.io.InputStream inputStream37 = null;
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream(inputStream37, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue41 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str42 = longModelValue41.asString();
        byte[] byteArray43 = longModelValue41.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue44 = new org.jboss.dmr.BytesModelValue(byteArray43);
        int int47 = inputStream39.read(byteArray43, (int) (short) 1, (int) (byte) -1);
        java.lang.String str48 = org.jboss.dmr.Base64.encodeBytes(byteArray43);
        org.jboss.dmr.ModelNode modelNode49 = modelNode9.set(byteArray43);
        org.jboss.dmr.ModelNode modelNode50 = modelNode49.setEmptyObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode53 = modelNode50.add("H4sIAAAAAAAAAHNQYQADAAsATXcIAAAA", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str28, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "AAAAAAAAAAE=" + "'", str48, "AAAAAAAAAAE=");
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((-1));
        double double3 = intModelValue1.asDouble((double) 35L);
        int int5 = intModelValue1.asInt((int) 'i');
        org.jboss.dmr.IntModelValue intModelValue7 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str8 = intModelValue7.asString();
        double double10 = intModelValue7.asDouble((double) 2);
        int int11 = intModelValue7.asInt();
        boolean boolean12 = intModelValue7.asBoolean();
        boolean boolean13 = intModelValue1.equals(intModelValue7);
        double double14 = intModelValue7.asDouble();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 32.0d + "'", double10 == 32.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode13 = modelNode11.set((int) '#');
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.setNoCopy("EXPRESSION_VALUE", modelNode13);
        org.jboss.dmr.ModelNode modelNode17 = modelNode1.setExpression("(\"\" => (\"hi!\" => 0.0))", "");
        org.jboss.dmr.PropertyModelValue propertyModelValue19 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BQADaGkh\neA==", modelNode1, true);
        java.io.PrintWriter printWriter20 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyModelValue19.formatAsJSON(printWriter20, 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode17);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        byte[] byteArray8 = intModelValue1.asBytes();
        org.jboss.dmr.ValueExpression valueExpression9 = intModelValue1.asExpression();
        java.io.ObjectInput objectInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression9.readExternal(objectInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(valueExpression9);
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        boolean boolean4 = stringModelValue1.equals((java.lang.Object) (-1.0d));
        java.lang.String str5 = stringModelValue1.asString();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue8 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger9 = booleanModelValue8.asBigInteger();
        org.jboss.dmr.ModelNode modelNode10 = modelNode6.add(bigInteger9);
        boolean boolean11 = stringModelValue1.equals((java.lang.Object) modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.setEmptyObject();
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str5, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(booleanModelValue8);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNode12);
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int3 = doubleModelValue1.asInt((int) 'l');
        java.math.BigDecimal bigDecimal4 = doubleModelValue1.asBigDecimal();
        byte[] byteArray5 = doubleModelValue1.asBytes();
        double double7 = doubleModelValue1.asDouble(1.0d);
        java.math.BigInteger bigInteger8 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue9 = new org.jboss.dmr.BigIntegerModelValue(bigInteger8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(bigInteger8);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        byte[] byteArray6 = booleanModelValue1.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(byteArray6);
        boolean boolean9 = org.jboss.dmr.Base64.encodeToFile(byteArray6, "BYTES_VALUE");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = org.jboss.dmr.Base64.decode(byteArray6, 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean5 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.ValueExpression valueExpression6 = stringModelValue1.asExpression();
        org.jboss.dmr.ModelType modelType7 = stringModelValue1.getType();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode(modelType7);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = modelNode8.add("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertTrue("'" + modelType7 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType7.equals(org.jboss.dmr.ModelType.STRING));
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str5 = longModelValue4.asString();
        byte[] byteArray6 = longModelValue4.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue7 = new org.jboss.dmr.BytesModelValue(byteArray6);
        java.lang.String str8 = bytesModelValue7.asString();
        int int9 = bytesModelValue7.asInt();
        long long11 = bytesModelValue7.asLong((long) (short) 1);
        long long12 = bytesModelValue7.asLong();
        java.math.BigDecimal bigDecimal13 = bytesModelValue7.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode14 = modelNode1.set("32", bigDecimal13);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue15 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal13);
        long long17 = bigDecimalModelValue15.asLong((long) 'p');
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType0.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str8, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.asObject();
        java.lang.String str5 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode2, (int) (short) 1);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BW8AAAAAeA==" + "'", str5, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BW8AAAAAeA==");
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        byte[] byteArray6 = longModelValue1.asBytes();
        java.lang.String str7 = org.jboss.dmr.Base64.encodeBytes(byteArray6);
        org.jboss.dmr.BytesModelValue bytesModelValue8 = new org.jboss.dmr.BytesModelValue(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.Property property9 = bytesModelValue8.asProperty();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AAAAAAAAAAE=" + "'", str7, "AAAAAAAAAAE=");
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isBoolean();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = modelReader15.getBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't boolean");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.set((int) '#');
        java.lang.Boolean boolean4 = modelNode1.asBooleanOrNull();
        java.lang.String str6 = modelNode1.asString("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.BIG_DECIMAL;
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode(modelType8);
        org.jboss.dmr.ModelNode modelNode10 = modelNode1.set("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", modelType8);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.setExpression("rO0ABXNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5n\nLk51bWJlcoaslR0LlOCLAgAAeHAAAABk", "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long17 = modelNode16.asLong();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.set("hi!", 0.0d);
        org.jboss.dmr.Property property24 = new org.jboss.dmr.Property("", modelNode23);
        java.lang.String[] strArray25 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.get(strArray25);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = modelNode30.asList();
        org.jboss.dmr.ListModelValue listModelValue32 = new org.jboss.dmr.ListModelValue(modelNodeList31);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue32);
        org.jboss.dmr.ModelValue modelValue34 = listModelValue32.resolve();
        int int36 = listModelValue32.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList37 = listModelValue32.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList38 = modelNode26.asPropertyList(propertyList37);
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.set("hi!", 0.0d);
        org.jboss.dmr.Property property44 = new org.jboss.dmr.Property("", modelNode43);
        java.lang.String[] strArray45 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.get(strArray45);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode50 = modelNode47.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList51 = modelNode50.asList();
        org.jboss.dmr.ListModelValue listModelValue52 = new org.jboss.dmr.ListModelValue(modelNodeList51);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue52);
        org.jboss.dmr.ModelValue modelValue54 = listModelValue52.resolve();
        int int56 = listModelValue52.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList57 = listModelValue52.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList58 = modelNode46.asPropertyList(propertyList57);
        modelNode26.setNoCopy(modelNode46);
        org.jboss.dmr.ModelNode modelNode60 = modelNode16.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode26);
        org.jboss.dmr.ModelNode modelNode62 = modelNode26.set(false);
        org.jboss.dmr.LongModelValue longModelValue64 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str65 = longModelValue64.asString();
        byte[] byteArray66 = longModelValue64.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue67 = new org.jboss.dmr.BytesModelValue(byteArray66);
        java.lang.String str68 = bytesModelValue67.asString();
        int int69 = bytesModelValue67.asInt();
        long long71 = bytesModelValue67.asLong((long) (short) 1);
        long long72 = bytesModelValue67.asLong();
        byte[] byteArray73 = bytesModelValue67.asBytes();
        org.jboss.dmr.ModelNode modelNode74 = modelNode26.set(byteArray73);
        org.jboss.dmr.ModelNode modelNode75 = modelNode74.setEmptyList();
        org.jboss.dmr.ModelType modelType76 = modelNode75.getType();
        org.jboss.dmr.BooleanModelValue booleanModelValue78 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long79 = booleanModelValue78.asLong();
        org.jboss.dmr.ValueExpression valueExpression80 = booleanModelValue78.asExpression();
        java.lang.String str81 = valueExpression80.toString();
        org.jboss.dmr.ModelNode modelNode82 = modelNode75.add(valueExpression80);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode83 = modelNode13.add("H4sIAAAAAAAAAFvzloG1uIhBNr8oXS8rKb+4WC8lt0gvLDGnNNW1oqAotbg4Mz/vj9r8R3l9E2J4GBgqCspZGJh0DSsAkLuCFDkAAAA=", modelNode82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "35" + "'", str6, "35");
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.BIG_DECIMAL + "'", modelType8.equals(org.jboss.dmr.ModelType.BIG_DECIMAL));
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertNotNull(modelValue34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(propertyList37);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNodeList51);
        org.junit.Assert.assertNotNull(modelValue54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(propertyList57);
        org.junit.Assert.assertNotNull(propertyList58);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str68, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode74);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertTrue("'" + modelType76 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType76.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(booleanModelValue78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertNotNull(valueExpression80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Expression \"true\"" + "'", str81, "Expression \"true\"");
        org.junit.Assert.assertNotNull(modelNode82);
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        java.lang.String str4 = valueExpression3.toString();
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression7 = expressionValue6.asExpression();
        boolean boolean8 = valueExpression3.equals(valueExpression7);
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal11 = longModelValue10.asBigDecimal();
        int int12 = longModelValue10.asInt();
        org.jboss.dmr.ValueExpression valueExpression13 = longModelValue10.asExpression();
        boolean boolean14 = valueExpression7.equals(valueExpression13);
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue18 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean19 = stringModelValue16.equals(stringModelValue18);
        byte[] byteArray20 = stringModelValue18.asBytes();
        org.jboss.dmr.ValueExpression valueExpression21 = stringModelValue18.asExpression();
        boolean boolean22 = valueExpression13.equals(valueExpression21);
        java.io.ObjectInput objectInput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression21.readExternal(objectInput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Expression \"true\"" + "'", str4, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        byte[] byteArray1 = org.jboss.dmr.Base64.decode("1L");
        java.lang.String str3 = org.jboss.dmr.Base64.encodeBytes(byteArray1, (int) 'e');
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        double double15 = bigIntegerModelValue13.asDouble((double) 'b');
        boolean boolean16 = bigIntegerModelValue4.equals(bigIntegerModelValue13);
        long long17 = bigIntegerModelValue4.asLong();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory19 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream20 = null;
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream(inputStream20, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream22);
        org.jboss.dmr.stream.ModelReader modelReader24 = modelStreamFactory19.newModelReader((java.io.InputStream) inputStream23);
        java.io.OutputStream outputStream25 = null;
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream(outputStream25);
        org.jboss.dmr.Base64.OutputStream outputStream27 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream26);
        outputStream26.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelStreamFactory19.newModelWriter((java.io.OutputStream) outputStream26);
        org.jboss.dmr.stream.ModelWriter modelWriter31 = modelWriter30.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter33 = modelWriter31.writeInt((int) (byte) 10);
        org.jboss.dmr.stream.ModelWriter modelWriter34 = modelWriter31.writePropertyStart();
        org.jboss.dmr.stream.ModelWriter modelWriter36 = modelWriter34.writeString("H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        bigIntegerModelValue4.write(modelWriter34);
        long long38 = bigIntegerModelValue4.asLong();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(modelStreamFactory19);
        org.junit.Assert.assertNotNull(modelReader24);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelWriter31);
        org.junit.Assert.assertNotNull(modelWriter33);
        org.junit.Assert.assertNotNull(modelWriter34);
        org.junit.Assert.assertNotNull(modelWriter36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) '4');
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        byte[] byteArray3 = doubleModelValue1.asBytes();
        java.math.BigInteger bigInteger4 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue5 = new org.jboss.dmr.BigIntegerModelValue(bigInteger4);
        double double7 = bigIntegerModelValue5.asDouble((double) '#');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        byte[] byteArray5 = longModelValue1.asBytes();
        org.jboss.dmr.ModelValue modelValue6 = longModelValue1.clone();
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str9 = longModelValue8.asString();
        double double11 = longModelValue8.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression12 = longModelValue8.asExpression();
        boolean boolean13 = longModelValue1.equals(longModelValue8);
        boolean boolean14 = longModelValue1.asBoolean();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        java.lang.String str2 = stringModelValue1.toString();
        org.jboss.dmr.IntModelValue intModelValue4 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray5 = intModelValue4.asBytes();
        boolean boolean6 = stringModelValue1.equals((java.lang.Object) byteArray5);
        org.jboss.dmr.StringModelValue stringModelValue8 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression9 = stringModelValue8.asExpression();
        boolean boolean11 = stringModelValue8.equals((java.lang.Object) (-1.0d));
        java.lang.String str12 = stringModelValue8.asString();
        java.lang.String str13 = stringModelValue8.asString();
        boolean boolean14 = stringModelValue1.equals(stringModelValue8);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = stringModelValue1.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"" + "'", str2, "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str12, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str13, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.copy(false);
        int int7 = objectModelValue0.asInt();
        java.lang.String str8 = objectModelValue0.asString();
        boolean boolean9 = objectModelValue0.asBoolean();
        boolean boolean11 = objectModelValue0.asBoolean(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType12 = objectModelValue0.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.Property property3 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode2);
        org.jboss.dmr.ModelNode modelNode4 = modelNode2.resolve();
        org.junit.Assert.assertNotNull(modelNode4);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'd');
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.setExpression("hi!", "hi!");
        java.lang.String str7 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode3);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList8 = modelNode3.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode10 = modelNode3.set((double) 0);
        java.lang.String str11 = modelNode10.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode12 = modelNode1.setNoCopy("(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4\" => \"\\\"(\\\\\\\"\\\\\\\" => (\\\\\\\"hi!\\\\\\\" => 0.0))\\\"\")", modelNode10);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ValueExpression valueExpression13 = modelNode12.asExpression();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str7, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0.0" + "'", str11, "0.0");
        org.junit.Assert.assertNotNull(modelNode12);
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        org.jboss.dmr.ModelValue modelValue6 = booleanModelValue1.copy();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(modelValue6);
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        double double15 = bigIntegerModelValue13.asDouble((double) 'b');
        boolean boolean16 = bigIntegerModelValue4.equals(bigIntegerModelValue13);
        org.jboss.dmr.BooleanModelValue booleanModelValue17 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double18 = booleanModelValue17.asDouble();
        org.jboss.dmr.ModelValue modelValue19 = booleanModelValue17.copy();
        java.math.BigInteger bigInteger20 = booleanModelValue17.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue21 = new org.jboss.dmr.BigIntegerModelValue(bigInteger20);
        long long23 = bigIntegerModelValue21.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = null;
        boolean boolean25 = bigIntegerModelValue21.equals(bigIntegerModelValue24);
        boolean boolean26 = bigIntegerModelValue4.equals(bigIntegerModelValue21);
        org.jboss.dmr.ModelValue modelValue27 = bigIntegerModelValue21.resolve();
        int int28 = bigIntegerModelValue21.asInt();
        int int30 = bigIntegerModelValue21.asInt(97);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanModelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        long long7 = bytesModelValue4.asLong();
        java.math.BigInteger bigInteger8 = bytesModelValue4.asBigInteger();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(bigInteger8);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.clear();
        boolean boolean7 = modelNode5.has(112);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        boolean boolean13 = modelNode11.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.PropertyModelValue propertyModelValue14 = new org.jboss.dmr.PropertyModelValue("TYPE_MODEL_VALUE", modelNode11);
        org.jboss.dmr.ModelNode modelNode16 = propertyModelValue14.getChild(0);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long19 = modelNode18.asLong();
        org.jboss.dmr.ValueExpression valueExpression20 = modelNode18.asExpression();
        java.math.BigDecimal bigDecimal21 = valueExpression20.resolveBigDecimal();
        java.lang.String str22 = valueExpression20.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue24 = new org.jboss.dmr.LongModelValue(1L);
        long long26 = longModelValue24.asLong((long) (short) 0);
        java.lang.String str27 = longModelValue24.asString();
        org.jboss.dmr.ValueExpression valueExpression28 = longModelValue24.asExpression();
        int int29 = valueExpression28.resolveInt();
        boolean boolean30 = valueExpression20.equals(valueExpression28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode16.set(valueExpression20);
        java.math.BigDecimal bigDecimal32 = valueExpression20.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode33 = modelNode5.add("AAAAIw==", bigDecimal32);
        org.jboss.dmr.ModelNode modelNode35 = modelNode33.setExpression("(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => 2)");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = modelNode33.asBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1.0" + "'", str22, "1.0");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNode35);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isPropertyStart();
        boolean boolean23 = modelReader15.isInt();
        boolean boolean24 = modelReader15.isExpression();
        boolean boolean25 = modelReader15.isObjectStart();
        boolean boolean26 = modelReader15.isLong();
        boolean boolean27 = modelReader15.isUndefined();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = modelReader15.getBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't bytes");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'D');
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.Property> propertyList2 = modelNode1.asPropertyList();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.StringModelValue stringModelValue4 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression5 = stringModelValue4.asExpression();
        boolean boolean7 = stringModelValue4.equals((java.lang.Object) (-1.0d));
        java.lang.String str8 = stringModelValue4.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent9 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean10 = stringModelValue4.equals((java.lang.Object) modelEvent9);
        org.jboss.dmr.StringModelValue stringModelValue12 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue14 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue16 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean17 = stringModelValue14.equals(stringModelValue16);
        byte[] byteArray18 = stringModelValue16.asBytes();
        java.lang.Object obj19 = null;
        boolean boolean20 = stringModelValue16.equals(obj19);
        boolean boolean22 = stringModelValue16.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean23 = stringModelValue12.equals(stringModelValue16);
        boolean boolean24 = stringModelValue4.equals(stringModelValue16);
        boolean boolean25 = stringModelValue1.equals(stringModelValue16);
        org.jboss.dmr.StringModelValue stringModelValue27 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression28 = stringModelValue27.asExpression();
        boolean boolean30 = stringModelValue27.equals((java.lang.Object) (-1.0d));
        java.lang.String str31 = stringModelValue27.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent32 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean33 = stringModelValue27.equals((java.lang.Object) modelEvent32);
        org.jboss.dmr.StringModelValue stringModelValue35 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue37 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue39 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean40 = stringModelValue37.equals(stringModelValue39);
        byte[] byteArray41 = stringModelValue39.asBytes();
        java.lang.Object obj42 = null;
        boolean boolean43 = stringModelValue39.equals(obj42);
        boolean boolean45 = stringModelValue39.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean46 = stringModelValue35.equals(stringModelValue39);
        boolean boolean47 = stringModelValue27.equals(stringModelValue39);
        boolean boolean48 = stringModelValue1.equals(stringModelValue39);
        org.jboss.dmr.StringModelValue stringModelValue50 = new org.jboss.dmr.StringModelValue("");
        boolean boolean51 = stringModelValue1.equals(stringModelValue50);
        java.io.PrintWriter printWriter52 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue50.formatAsJSON(printWriter52, 97, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str8, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent9 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent9.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str31, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent32 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent32.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        double double6 = booleanModelValue1.asDouble((double) 1.0f);
        java.math.BigInteger bigInteger7 = booleanModelValue1.asBigInteger();
        int int9 = booleanModelValue1.asInt((int) (short) 1);
        int int11 = booleanModelValue1.asInt(52);
        java.math.BigInteger bigInteger12 = booleanModelValue1.asBigInteger();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode(bigInteger12);
        boolean boolean15 = modelNode13.asBoolean(true);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        java.math.BigInteger bigInteger3 = booleanModelValue1.asBigInteger();
        java.lang.String str4 = booleanModelValue1.asString();
        java.math.BigDecimal bigDecimal5 = booleanModelValue1.asBigDecimal();
        double double7 = booleanModelValue1.asDouble((double) 1L);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression9 = bigDecimalModelValue7.asExpression();
        boolean boolean11 = bigDecimalModelValue7.asBoolean(false);
        java.lang.String str12 = bigDecimalModelValue7.asString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0" + "'", str12, "1.0");
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        org.jboss.dmr.ModelNode modelNode6 = modelNodeFactory0.readFrom("100", false);
        org.jboss.dmr.ModelNode modelNode9 = modelNodeFactory0.readFrom("\"-1\"", false);
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue13 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean14 = stringModelValue11.equals(stringModelValue13);
        java.io.InputStream inputStream15 = null;
        org.jboss.dmr.Base64.InputStream inputStream17 = new org.jboss.dmr.Base64.InputStream(inputStream15, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream17);
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        boolean boolean20 = stringModelValue11.equals((java.lang.Object) inputStream19);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode22 = modelNodeFactory0.readFrom((java.io.InputStream) inputStream19, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        long long8 = bytesModelValue4.asLong((long) (short) 1);
        int int9 = bytesModelValue4.asInt();
        double double10 = bytesModelValue4.asDouble();
        java.io.PrintWriter printWriter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue4.formatMultiLine(printWriter11, (int) 'b');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.9E-324d + "'", double10 == 4.9E-324d);
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        java.math.BigInteger bigInteger6 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(bigInteger6);
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue((-1L));
        long long11 = longModelValue9.asLong((long) (byte) -1);
        int int13 = longModelValue9.asInt(0);
        org.jboss.dmr.ValueExpression valueExpression14 = longModelValue9.asExpression();
        org.jboss.dmr.ModelNode modelNode15 = modelNode7.set(valueExpression14);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.set("hi!", 0.0d);
        java.lang.String str22 = modelNode18.toString();
        org.jboss.dmr.ModelNode modelNode23 = modelNode18.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode25 = modelNode18.set(100);
        org.jboss.dmr.ModelNode modelNode26 = modelNode17.add(modelNode18);
        int int28 = modelNode18.asInt(2);
        org.jboss.dmr.ModelType modelType30 = org.jboss.dmr.ModelType.BYTES;
        org.jboss.dmr.ModelNode modelNode31 = modelNode18.set("[(\"hi!\" => 0.0)]", modelType30);
        org.jboss.dmr.TypeModelValue typeModelValue32 = org.jboss.dmr.TypeModelValue.of(modelType30);
        org.jboss.dmr.TypeModelValue typeModelValue33 = org.jboss.dmr.TypeModelValue.of(modelType30);
        org.jboss.dmr.ModelNode modelNode34 = modelNode15.set("-1.0", modelType30);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode37 = modelNode34.add("H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BWwAAAAAeA==");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(\"hi!\" => 0.0)" + "'", str22, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + modelType30 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType30.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(typeModelValue32);
        org.junit.Assert.assertNotNull(typeModelValue33);
        org.junit.Assert.assertNotNull(modelNode34);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        boolean boolean4 = stringModelValue1.equals((java.lang.Object) (-1.0d));
        java.lang.String str5 = stringModelValue1.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent6 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) modelEvent6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue13 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean14 = stringModelValue11.equals(stringModelValue13);
        byte[] byteArray15 = stringModelValue13.asBytes();
        java.lang.Object obj16 = null;
        boolean boolean17 = stringModelValue13.equals(obj16);
        boolean boolean19 = stringModelValue13.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean20 = stringModelValue9.equals(stringModelValue13);
        boolean boolean21 = stringModelValue1.equals(stringModelValue13);
        org.jboss.dmr.ValueExpression valueExpression22 = stringModelValue1.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = stringModelValue1.asLong((long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str5, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent6 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent6.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(valueExpression22);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (byte) -1);
        org.jboss.dmr.DoubleModelValue doubleModelValue3 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int5 = doubleModelValue3.asInt((int) 'l');
        java.math.BigDecimal bigDecimal6 = doubleModelValue3.asBigDecimal();
        boolean boolean7 = doubleModelValue1.equals(doubleModelValue3);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode(35L);
        org.jboss.dmr.ModelNode modelNode11 = modelNode9.set((int) '4');
        boolean boolean12 = doubleModelValue3.equals((java.lang.Object) modelNode11);
        org.jboss.dmr.ValueExpression valueExpression13 = doubleModelValue3.asExpression();
        org.jboss.dmr.ValueExpression valueExpression14 = doubleModelValue3.asExpression();
        double double15 = doubleModelValue3.asDouble();
        org.jboss.dmr.ValueExpression valueExpression16 = doubleModelValue3.asExpression();
        org.jboss.dmr.ObjectModelValue objectModelValue17 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode18 = objectModelValue17.asObject();
        org.jboss.dmr.ModelValue modelValue19 = objectModelValue17.protect();
        java.util.List<org.jboss.dmr.Property> propertyList20 = objectModelValue17.asPropertyList();
        org.jboss.dmr.LongModelValue longModelValue22 = new org.jboss.dmr.LongModelValue(97L);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory24 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream25 = null;
        org.jboss.dmr.Base64.InputStream inputStream27 = new org.jboss.dmr.Base64.InputStream(inputStream25, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream28 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream27);
        org.jboss.dmr.stream.ModelReader modelReader29 = modelStreamFactory24.newModelReader((java.io.InputStream) inputStream28);
        java.io.OutputStream outputStream30 = null;
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream(outputStream30);
        org.jboss.dmr.Base64.OutputStream outputStream32 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream31);
        outputStream31.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelStreamFactory24.newModelWriter((java.io.OutputStream) outputStream31);
        org.jboss.dmr.stream.ModelWriter modelWriter36 = modelWriter35.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue38 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray39 = intModelValue38.asBytes();
        int int41 = intModelValue38.asInt(0);
        java.math.BigInteger bigInteger42 = intModelValue38.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter43 = modelWriter36.writeBigInteger(bigInteger42);
        org.jboss.dmr.stream.ModelWriter modelWriter44 = modelWriter36.writeListStart();
        longModelValue22.write(modelWriter44);
        objectModelValue17.write(modelWriter44);
        org.jboss.dmr.stream.ModelWriter modelWriter48 = modelWriter44.writeLong((long) (byte) 100);
        doubleModelValue3.write(modelWriter44);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter50 = modelWriter44.writePropertyEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting ',' or LIST_END");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelStreamFactory24);
        org.junit.Assert.assertNotNull(modelReader29);
        org.junit.Assert.assertNotNull(modelWriter35);
        org.junit.Assert.assertNotNull(modelWriter36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(modelWriter43);
        org.junit.Assert.assertNotNull(modelWriter44);
        org.junit.Assert.assertNotNull(modelWriter48);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.get(strArray10);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asList();
        org.jboss.dmr.ListModelValue listModelValue17 = new org.jboss.dmr.ListModelValue(modelNodeList16);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue17);
        org.jboss.dmr.ModelValue modelValue19 = listModelValue17.resolve();
        int int21 = listModelValue17.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue17.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList23 = modelNode11.asPropertyList(propertyList22);
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.set("hi!", 0.0d);
        org.jboss.dmr.Property property29 = new org.jboss.dmr.Property("", modelNode28);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.get(strArray30);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode35.asList();
        org.jboss.dmr.ListModelValue listModelValue37 = new org.jboss.dmr.ListModelValue(modelNodeList36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue37);
        org.jboss.dmr.ModelValue modelValue39 = listModelValue37.resolve();
        int int41 = listModelValue37.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList42 = listModelValue37.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList43 = modelNode31.asPropertyList(propertyList42);
        modelNode11.setNoCopy(modelNode31);
        org.jboss.dmr.ModelNode modelNode45 = modelNode1.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode11);
        org.jboss.dmr.ModelNode modelNode47 = modelNode11.set(false);
        org.jboss.dmr.LongModelValue longModelValue49 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str50 = longModelValue49.asString();
        byte[] byteArray51 = longModelValue49.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue52 = new org.jboss.dmr.BytesModelValue(byteArray51);
        java.lang.String str53 = bytesModelValue52.asString();
        int int54 = bytesModelValue52.asInt();
        long long56 = bytesModelValue52.asLong((long) (short) 1);
        long long57 = bytesModelValue52.asLong();
        byte[] byteArray58 = bytesModelValue52.asBytes();
        org.jboss.dmr.ModelNode modelNode59 = modelNode11.set(byteArray58);
        org.jboss.dmr.ModelNode modelNode60 = modelNode59.setEmptyList();
        org.jboss.dmr.IntModelValue intModelValue63 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long65 = intModelValue63.asLong((long) 'b');
        java.lang.String str66 = intModelValue63.asString();
        java.math.BigDecimal bigDecimal67 = intModelValue63.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode68 = modelNode59.add("(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")", bigDecimal67);
        org.jboss.dmr.ModelNode modelNode70 = modelNode59.add("\"\\\"1L\\\"\"");
        org.jboss.dmr.ModelNode modelNode72 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode75 = modelNode72.set("hi!", 0.0d);
        org.jboss.dmr.Property property76 = new org.jboss.dmr.Property("", modelNode75);
        java.lang.String[] strArray77 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode78 = modelNode75.get(strArray77);
        org.jboss.dmr.ModelNode modelNode79 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int80 = modelNode79.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode81 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode84 = modelNode81.setExpression("hi!", "hi!");
        java.lang.String str85 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode81);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList86 = modelNode81.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode87 = modelNode79.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList86);
        org.jboss.dmr.ModelNode modelNode88 = modelNode78.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList86);
        org.jboss.dmr.LongModelValue longModelValue90 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str91 = longModelValue90.asString();
        double double93 = longModelValue90.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression94 = longModelValue90.asExpression();
        byte[] byteArray95 = longModelValue90.asBytes();
        org.jboss.dmr.ModelNode modelNode96 = modelNode88.add(byteArray95);
        java.lang.String str97 = modelNode88.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode98 = modelNode70.addNoCopy(modelNode88);
        org.jboss.dmr.ModelNode modelNode99 = modelNode88.clone();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertNotNull(modelValue39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(propertyList42);
        org.junit.Assert.assertNotNull(propertyList43);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str53, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 32L + "'", long65 == 32L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "32" + "'", str66, "32");
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(modelNode78);
        org.junit.Assert.assertNull(int80);
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str85, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList86);
        org.junit.Assert.assertNotNull(modelNode87);
        org.junit.Assert.assertNotNull(modelNode88);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1" + "'", str91, "1");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression94);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "[(\"hi!\" => expression \"hi!\"),bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }]" + "'", str97, "[(\"hi!\" => expression \"hi!\"),bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }]");
        org.junit.Assert.assertNotNull(modelNode98);
        org.junit.Assert.assertNotNull(modelNode99);
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        java.lang.String str8 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList9 = modelNode7.asListOrEmpty();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = modelNode7.asInt(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4" + "'", str8, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\nb24gImhpISJiAAAAAQF4");
        org.junit.Assert.assertNotNull(modelNodeList9);
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        java.lang.String str1 = null; // flaky: org.jboss.dmr.Base64.encodeFromFile("(\"true\" => expression \"true\")");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        int int5 = intModelValue1.asInt();
        byte[] byteArray6 = intModelValue1.asBytes();
        long long8 = intModelValue1.asLong((long) 112);
        long long9 = intModelValue1.asLong();
        boolean boolean11 = intModelValue1.asBoolean(false);
        java.io.OutputStream outputStream12 = null;
        org.jboss.dmr.Base64.OutputStream outputStream13 = new org.jboss.dmr.Base64.OutputStream(outputStream12);
        outputStream13.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream15 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream13);
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream15);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue21 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger22 = booleanModelValue21.asBigInteger();
        byte[] byteArray23 = booleanModelValue21.asBytes();
        org.jboss.dmr.ModelNode modelNode24 = modelNode18.set("expression \"hi!\"", byteArray23);
        outputStream15.write(byteArray23);
        org.jboss.dmr.BytesModelValue bytesModelValue26 = new org.jboss.dmr.BytesModelValue(byteArray23);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) bytesModelValue26);
        boolean boolean28 = intModelValue1.equals((java.lang.Object) bytesModelValue26);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(booleanModelValue21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        java.math.BigInteger bigInteger6 = bigIntegerModelValue4.asBigInteger();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(bigInteger6);
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue((-1L));
        long long11 = longModelValue9.asLong((long) (byte) -1);
        int int13 = longModelValue9.asInt(0);
        org.jboss.dmr.ValueExpression valueExpression14 = longModelValue9.asExpression();
        org.jboss.dmr.ModelNode modelNode15 = modelNode7.set(valueExpression14);
        org.jboss.dmr.BooleanModelValue booleanModelValue16 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double17 = booleanModelValue16.asDouble();
        org.jboss.dmr.ModelValue modelValue18 = booleanModelValue16.copy();
        java.math.BigInteger bigInteger19 = booleanModelValue16.asBigInteger();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode(bigInteger19);
        org.jboss.dmr.IntModelValue intModelValue22 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str23 = intModelValue22.asString();
        double double25 = intModelValue22.asDouble((double) 2);
        java.math.BigDecimal bigDecimal26 = intModelValue22.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue27 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal26);
        org.jboss.dmr.ModelNode modelNode28 = modelNode20.set(bigDecimal26);
        modelNode15.setNoCopy(modelNode28);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode31 = modelNode28.addExpression("expression \"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(booleanModelValue16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32" + "'", str23, "32");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(modelNode28);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(10);
        boolean boolean3 = intModelValue1.asBoolean(false);
        byte[] byteArray4 = intModelValue1.asBytes();
        java.lang.String str5 = intModelValue1.asString();
        byte[] byteArray6 = intModelValue1.asBytes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 10]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "10" + "'", str5, "10");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 10]");
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        java.lang.String str7 = bigIntegerModelValue4.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        boolean boolean10 = bigIntegerModelValue4.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue11 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double12 = booleanModelValue11.asDouble();
        org.jboss.dmr.ModelValue modelValue13 = booleanModelValue11.copy();
        java.math.BigInteger bigInteger14 = booleanModelValue11.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue15 = new org.jboss.dmr.BigIntegerModelValue(bigInteger14);
        java.lang.String str16 = bigIntegerModelValue15.asString();
        long long18 = bigIntegerModelValue15.asLong(32L);
        double double19 = bigIntegerModelValue15.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double21 = booleanModelValue20.asDouble();
        org.jboss.dmr.ModelValue modelValue22 = booleanModelValue20.copy();
        java.math.BigInteger bigInteger23 = booleanModelValue20.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue24 = new org.jboss.dmr.BigIntegerModelValue(bigInteger23);
        double double26 = bigIntegerModelValue24.asDouble((double) 'b');
        boolean boolean27 = bigIntegerModelValue15.equals(bigIntegerModelValue24);
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double29 = booleanModelValue28.asDouble();
        org.jboss.dmr.ModelValue modelValue30 = booleanModelValue28.copy();
        java.math.BigInteger bigInteger31 = booleanModelValue28.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue32 = new org.jboss.dmr.BigIntegerModelValue(bigInteger31);
        long long34 = bigIntegerModelValue32.asLong((long) 'b');
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue35 = null;
        boolean boolean36 = bigIntegerModelValue32.equals(bigIntegerModelValue35);
        boolean boolean37 = bigIntegerModelValue15.equals(bigIntegerModelValue32);
        java.math.BigDecimal bigDecimal38 = bigIntegerModelValue15.asBigDecimal();
        boolean boolean39 = bigIntegerModelValue4.equals(bigIntegerModelValue15);
        double double40 = bigIntegerModelValue4.asDouble();
        long long41 = bigIntegerModelValue4.asLong();
        java.math.BigDecimal bigDecimal42 = bigIntegerModelValue4.asBigDecimal();
        boolean boolean44 = bigIntegerModelValue4.asBoolean(true);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanModelValue11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        double double6 = booleanModelValue1.asDouble((double) 1.0f);
        java.math.BigInteger bigInteger7 = booleanModelValue1.asBigInteger();
        int int9 = booleanModelValue1.asInt((int) (short) 1);
        java.lang.String str10 = booleanModelValue1.asString();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue13 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger14 = booleanModelValue13.asBigInteger();
        org.jboss.dmr.ModelNode modelNode15 = modelNode11.add(bigInteger14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(bigInteger14);
        boolean boolean17 = modelNode16.isProtected();
        org.jboss.dmr.ModelNode modelNode18 = modelNode16.clone();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode22 = modelNode21.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue23 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode24 = objectModelValue23.asObject();
        java.util.Set<java.lang.String> strSet25 = objectModelValue23.getKeys();
        boolean boolean27 = objectModelValue23.has((int) 'a');
        boolean boolean29 = objectModelValue23.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue30 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode31 = objectModelValue30.asObject();
        java.util.Set<java.lang.String> strSet32 = objectModelValue30.getKeys();
        boolean boolean34 = objectModelValue30.has((int) 'a');
        boolean boolean35 = objectModelValue23.equals(objectModelValue30);
        org.jboss.dmr.ModelNode modelNode36 = objectModelValue30.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = objectModelValue30.asList();
        org.jboss.dmr.ModelNode modelNode38 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList37);
        org.jboss.dmr.Property property40 = new org.jboss.dmr.Property("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", modelNode21, true);
        org.jboss.dmr.ModelNode modelNode42 = modelNode21.add(2);
        boolean boolean44 = modelNode42.asBoolean(false);
        boolean boolean46 = modelNode42.hasDefined("AAAAIA==");
        org.jboss.dmr.IntModelValue intModelValue49 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long51 = intModelValue49.asLong((long) 'b');
        java.lang.String str52 = intModelValue49.asString();
        java.math.BigInteger bigInteger53 = intModelValue49.asBigInteger();
        byte[] byteArray54 = intModelValue49.asBytes();
        long long56 = intModelValue49.asLong((long) 8);
        boolean boolean58 = intModelValue49.equals((java.lang.Object) 97L);
        java.math.BigDecimal bigDecimal59 = intModelValue49.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode60 = modelNode42.add("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")", bigDecimal59);
        org.jboss.dmr.ModelNode modelNode61 = modelNode16.set(bigDecimal59);
        boolean boolean62 = booleanModelValue1.equals((java.lang.Object) modelNode16);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "false" + "'", str10, "false");
        org.junit.Assert.assertNotNull(booleanModelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 32L + "'", long51 == 32L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "32" + "'", str52, "32");
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 32L + "'", long56 == 32L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        boolean boolean12 = listModelValue5.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue13 = listModelValue5.resolve();
        boolean boolean14 = listModelValue5.asBoolean();
        boolean boolean15 = listModelValue5.asBoolean();
        org.jboss.dmr.ModelValue modelValue16 = listModelValue5.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode18 = listModelValue5.requireChild(10);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [10]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(modelValue16);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = inputStream4.available();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) 'e');
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        org.jboss.dmr.stream.ModelException modelException2 = new org.jboss.dmr.stream.ModelException("PROPERTY_VALUE");
        org.jboss.dmr.stream.ModelException modelException3 = new org.jboss.dmr.stream.ModelException("", (java.lang.Throwable) modelException2);
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double3 = longModelValue1.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        byte[] byteArray8 = longModelValue5.asBytes();
        boolean boolean9 = longModelValue1.equals(longModelValue5);
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue11.asLong((long) (short) 0);
        java.math.BigInteger bigInteger14 = longModelValue11.asBigInteger();
        boolean boolean15 = longModelValue5.equals(longModelValue11);
        java.lang.String str16 = longModelValue11.asString();
        org.jboss.dmr.ModelValue modelValue17 = longModelValue11.copy();
        double double18 = longModelValue11.asDouble();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory20 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream21 = null;
        org.jboss.dmr.Base64.InputStream inputStream23 = new org.jboss.dmr.Base64.InputStream(inputStream21, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue25 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str26 = longModelValue25.asString();
        byte[] byteArray27 = longModelValue25.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue28 = new org.jboss.dmr.BytesModelValue(byteArray27);
        int int31 = inputStream23.read(byteArray27, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream23, (-1));
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory20.newModelReader((java.io.InputStream) inputStream33);
        java.io.InputStream inputStream35 = null;
        org.jboss.dmr.Base64.InputStream inputStream37 = new org.jboss.dmr.Base64.InputStream(inputStream35, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream38 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream37);
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream37);
        org.jboss.dmr.stream.ModelReader modelReader40 = modelStreamFactory20.newModelReader((java.io.InputStream) inputStream37);
        java.io.InputStream inputStream41 = null;
        org.jboss.dmr.Base64.InputStream inputStream43 = new org.jboss.dmr.Base64.InputStream(inputStream41, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream43);
        org.jboss.dmr.stream.ModelReader modelReader45 = modelStreamFactory20.newModelReader((java.io.InputStream) inputStream43);
        java.io.OutputStream outputStream46 = null;
        org.jboss.dmr.Base64.OutputStream outputStream47 = new org.jboss.dmr.Base64.OutputStream(outputStream46);
        outputStream47.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream49 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream47);
        org.jboss.dmr.Base64.OutputStream outputStream50 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream49);
        outputStream49.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream52 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream49);
        org.jboss.dmr.Base64.OutputStream outputStream53 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream49);
        org.jboss.dmr.stream.ModelWriter modelWriter54 = modelStreamFactory20.newModelWriter((java.io.OutputStream) outputStream53);
        longModelValue11.write(modelWriter54);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter57 = modelWriter54.writeDouble(8.0d);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(modelStreamFactory20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertNotNull(modelReader40);
        org.junit.Assert.assertNotNull(modelReader45);
        org.junit.Assert.assertNotNull(modelWriter54);
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        java.lang.String str9 = property7.getName();
        org.jboss.dmr.Property property10 = property7.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue11.copy();
        org.jboss.dmr.ModelValue modelValue13 = propertyModelValue11.protect();
        java.util.Set<java.lang.String> strSet14 = propertyModelValue11.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode16 = propertyModelValue11.getChild("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3EnAAAHAAA2hpIUQA\nAAAAAAAAAHg=");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isExpression();
        boolean boolean18 = modelReader15.isListEnd();
        boolean boolean19 = modelReader15.isExpression();
        boolean boolean20 = modelReader15.isBytes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = modelReader15.getExpression();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't expression");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        java.lang.Long long46 = modelNode45.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray47 = new org.jboss.dmr.ModelNode[] { modelNode41, modelNode45 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList48 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48, modelNodeArray47);
        org.jboss.dmr.ModelNode modelNode50 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long54 = modelNode53.asLong();
        org.jboss.dmr.ValueExpression valueExpression55 = modelNode53.asExpression();
        java.math.BigDecimal bigDecimal56 = valueExpression55.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode57 = modelNode7.set("true", bigDecimal56);
        java.lang.String str58 = modelNode7.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode60 = new org.jboss.dmr.ModelNode(8);
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode64.asList();
        org.jboss.dmr.ModelNode modelNode68 = modelNode64.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType69 = modelNode64.getType();
        org.jboss.dmr.ModelNode modelNode70 = modelNode60.set(modelNode64);
        org.jboss.dmr.ModelNode modelNode71 = modelNode64.clone();
        modelNode7.setNoCopy(modelNode64);
        org.jboss.dmr.ModelNode modelNode73 = modelNode64.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode74 = modelNode64.setEmptyObject();
        java.io.PrintWriter printWriter75 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode74.writeString(printWriter75, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNull(long46);
        org.junit.Assert.assertNotNull(modelNodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(valueExpression55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(\"true\" => big decimal 1.0)" + "'", str58, "(\"true\" => big decimal 1.0)");
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertTrue("'" + modelType69 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType69.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertNotNull(modelNode74);
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        boolean boolean14 = typeModelValue10.equals(typeModelValue13);
        java.lang.String str15 = typeModelValue13.asString();
        boolean boolean17 = typeModelValue13.asBoolean(true);
        boolean boolean18 = typeModelValue5.equals(typeModelValue13);
        org.jboss.dmr.ValueExpression valueExpression19 = typeModelValue13.asExpression();
        org.jboss.dmr.ModelType modelType20 = org.jboss.dmr.ModelType.PROPERTY;
        char char21 = modelType20.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue22 = org.jboss.dmr.TypeModelValue.of(modelType20);
        org.jboss.dmr.ModelType modelType23 = org.jboss.dmr.ModelType.PROPERTY;
        char char24 = modelType23.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue25 = org.jboss.dmr.TypeModelValue.of(modelType23);
        boolean boolean26 = typeModelValue22.equals(typeModelValue25);
        boolean boolean27 = typeModelValue13.equals(typeModelValue22);
        java.lang.String str28 = typeModelValue13.asString();
        org.jboss.dmr.ValueExpression valueExpression29 = typeModelValue13.asExpression();
        java.lang.String str30 = typeModelValue13.asString();
        org.jboss.dmr.ValueExpression valueExpression31 = typeModelValue13.asExpression();
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long35 = modelNode34.asLong();
        org.jboss.dmr.ValueExpression valueExpression36 = modelNode34.asExpression();
        java.math.BigDecimal bigDecimal37 = valueExpression36.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue39 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long40 = booleanModelValue39.asLong();
        org.jboss.dmr.ValueExpression valueExpression41 = booleanModelValue39.asExpression();
        boolean boolean43 = valueExpression41.equals((java.lang.Object) 'p');
        boolean boolean44 = valueExpression36.equals(valueExpression41);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode(valueExpression36);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode45, false);
        org.jboss.dmr.ModelNode modelNode50 = modelNode45.set("rO0ABXQAUXJPMEFCWE55QUJkdmNtY3VhbUp2YzNNdVpHMXlMazF2WkdWc1RtOWtaUnd0b1VTZG80\nNC9EQUFBZUhCM0RIQUFBMmhwSVdVQUEyaHAKSVhnPQ==", 0L);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode55 = modelNode52.setExpression("hi!", "hi!");
        java.lang.String str56 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode52);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList57 = modelNode52.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode59 = modelNode52.set((double) 0);
        boolean boolean60 = modelNode52.isProtected();
        boolean boolean62 = modelNode52.hasDefined("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode65 = modelNode52.set("hi!", (long) (short) 100);
        org.jboss.dmr.ModelNode modelNode66 = modelNode45.set("(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")", modelNode52);
        boolean boolean67 = valueExpression31.equals((java.lang.Object) modelNode45);
        org.jboss.dmr.ModelType modelType68 = modelNode45.getType();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PROPERTY" + "'", str15, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + modelType20 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType20.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + 'p' + "'", char21 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue22);
        org.junit.Assert.assertTrue("'" + modelType23 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType23.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char24 + "' != '" + 'p' + "'", char24 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PROPERTY" + "'", str28, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PROPERTY" + "'", str30, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(valueExpression36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(booleanModelValue39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(valueExpression41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str56, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList57);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(modelNode65);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + modelType68 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType68.equals(org.jboss.dmr.ModelType.PROPERTY));
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        boolean boolean14 = typeModelValue10.equals(typeModelValue13);
        java.lang.String str15 = typeModelValue13.asString();
        boolean boolean17 = typeModelValue13.asBoolean(true);
        boolean boolean18 = typeModelValue5.equals(typeModelValue13);
        boolean boolean19 = typeModelValue13.asBoolean();
        org.jboss.dmr.ModelType modelType20 = typeModelValue13.asType();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode(modelType20);
        org.jboss.dmr.ModelNode modelNode23 = modelNode21.set("");
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PROPERTY" + "'", str15, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + modelType20 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType20.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode23);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int8 = bytesModelValue4.asInt((int) 'a');
        double double10 = bytesModelValue4.asDouble((double) '#');
        long long12 = bytesModelValue4.asLong((long) 'p');
        int int13 = bytesModelValue4.asInt();
        java.io.DataOutput dataOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue4.writeExternal(dataOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.9E-324d + "'", double10 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        long long12 = listModelValue5.asLong((long) ' ');
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str15 = longModelValue14.asString();
        byte[] byteArray16 = longModelValue14.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue17 = new org.jboss.dmr.BytesModelValue(byteArray16);
        java.lang.String str18 = bytesModelValue17.asString();
        int int19 = bytesModelValue17.asInt();
        int int20 = bytesModelValue17.asInt();
        org.jboss.dmr.LongModelValue longModelValue22 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str23 = longModelValue22.asString();
        byte[] byteArray24 = longModelValue22.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue25 = new org.jboss.dmr.BytesModelValue(byteArray24);
        double double26 = bytesModelValue25.asDouble();
        boolean boolean27 = bytesModelValue17.equals(bytesModelValue25);
        org.jboss.dmr.LongModelValue longModelValue29 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str30 = longModelValue29.asString();
        byte[] byteArray31 = longModelValue29.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue32 = new org.jboss.dmr.BytesModelValue(byteArray31);
        boolean boolean33 = bytesModelValue25.equals(bytesModelValue32);
        long long34 = bytesModelValue25.asLong();
        int int36 = bytesModelValue25.asInt(8);
        long long37 = bytesModelValue25.asLong();
        boolean boolean38 = listModelValue5.equals((java.lang.Object) long37);
        int int40 = listModelValue5.asInt(10);
        org.jboss.dmr.DoubleModelValue doubleModelValue42 = new org.jboss.dmr.DoubleModelValue((double) 1.0f);
        boolean boolean43 = listModelValue5.equals((java.lang.Object) 1.0f);
        int int44 = listModelValue5.asInt();
        org.jboss.dmr.ModelType modelType45 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode(modelType45);
        org.jboss.dmr.ModelNode modelNode48 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = modelNode48.set("hi!", 0.0d);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("", modelNode51);
        org.jboss.dmr.ModelNode modelNode53 = modelNode46.set(property52);
        org.jboss.dmr.ModelNode modelNode54 = property52.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue55 = new org.jboss.dmr.PropertyModelValue(property52);
        org.jboss.dmr.ModelValue modelValue56 = propertyModelValue55.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList57 = propertyModelValue55.asList();
        org.jboss.dmr.ModelNode modelNode59 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode62 = modelNode59.set("hi!", 0.0d);
        java.lang.String str63 = modelNode59.toString();
        org.jboss.dmr.ModelNode modelNode64 = modelNode59.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode66 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode69 = modelNode66.set("hi!", 0.0d);
        org.jboss.dmr.Property property70 = new org.jboss.dmr.Property("", modelNode69);
        org.jboss.dmr.ModelNode modelNode71 = modelNode59.set(property70);
        org.jboss.dmr.PropertyModelValue propertyModelValue73 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode71, false);
        java.util.Set<java.lang.String> strSet74 = propertyModelValue73.getKeys();
        org.jboss.dmr.ModelValue modelValue75 = propertyModelValue73.copy();
        boolean boolean76 = propertyModelValue55.equals(propertyModelValue73);
        org.jboss.dmr.Property property77 = propertyModelValue73.asProperty();
        boolean boolean78 = listModelValue5.equals((java.lang.Object) propertyModelValue73);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str18, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.9E-324d + "'", double26 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + modelType45 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType45.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelValue56);
        org.junit.Assert.assertNotNull(modelNodeList57);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(\"hi!\" => 0.0)" + "'", str63, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(modelValue75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        java.math.BigInteger bigInteger4 = longModelValue1.asBigInteger();
        boolean boolean6 = longModelValue1.asBoolean(false);
        int int8 = longModelValue1.asInt(32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        int int7 = bigIntegerModelValue4.asInt();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        java.lang.String str9 = bigIntegerModelValue4.toString();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "big integer 1" + "'", str9, "big integer 1");
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) 'a');
        int int9 = longModelValue1.asInt((int) '4');
        java.lang.String str10 = longModelValue1.asString();
        long long11 = longModelValue1.asLong();
        byte[] byteArray12 = longModelValue1.asBytes();
        java.lang.String str13 = org.jboss.dmr.Base64.encodeBytes(byteArray12);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AAAAAAAAAAE=" + "'", str13, "AAAAAAAAAAE=");
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set(property11);
        java.lang.String str13 = modelNode12.asString();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = modelNode17.asList();
        org.jboss.dmr.ListModelValue listModelValue19 = new org.jboss.dmr.ListModelValue(modelNodeList18);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue19);
        org.jboss.dmr.ModelValue modelValue21 = listModelValue19.resolve();
        int int23 = listModelValue19.asInt((int) (byte) 100);
        boolean boolean24 = listModelValue19.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = listModelValue19.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = modelNode12.asList(modelNodeList25);
        org.jboss.dmr.BooleanModelValue booleanModelValue28 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger29 = booleanModelValue28.asBigInteger();
        byte[] byteArray30 = booleanModelValue28.asBytes();
        org.jboss.dmr.ModelNode modelNode31 = modelNode12.set(byteArray30);
        org.jboss.dmr.ModelNode modelNode33 = modelNode31.setExpression("\"BYTES_VALUE\"");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode35 = modelNode31.add((long) 'l');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str13, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertNotNull(modelValue21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertNotNull(booleanModelValue28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        long long4 = doubleModelValue1.asLong((long) (short) -1);
        double double6 = doubleModelValue1.asDouble(0.0d);
        org.jboss.dmr.DoubleModelValue doubleModelValue8 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long9 = doubleModelValue8.asLong();
        boolean boolean10 = doubleModelValue8.asBoolean();
        byte[] byteArray11 = doubleModelValue8.asBytes();
        int int13 = doubleModelValue8.asInt((int) ' ');
        boolean boolean14 = doubleModelValue8.asBoolean();
        java.math.BigInteger bigInteger15 = doubleModelValue8.asBigInteger();
        boolean boolean16 = doubleModelValue1.equals(doubleModelValue8);
        byte[] byteArray17 = doubleModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue19 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str20 = longModelValue19.asString();
        byte[] byteArray21 = longModelValue19.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue22 = new org.jboss.dmr.BytesModelValue(byteArray21);
        java.lang.String str23 = bytesModelValue22.asString();
        int int24 = bytesModelValue22.asInt();
        byte[] byteArray25 = bytesModelValue22.asBytes();
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str28 = longModelValue27.asString();
        byte[] byteArray29 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue30 = new org.jboss.dmr.BytesModelValue(byteArray29);
        java.lang.String str31 = bytesModelValue30.asString();
        int int32 = bytesModelValue30.asInt();
        int int33 = bytesModelValue30.asInt();
        org.jboss.dmr.LongModelValue longModelValue35 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str36 = longModelValue35.asString();
        byte[] byteArray37 = longModelValue35.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue38 = new org.jboss.dmr.BytesModelValue(byteArray37);
        double double39 = bytesModelValue38.asDouble();
        boolean boolean40 = bytesModelValue30.equals(bytesModelValue38);
        byte[] byteArray41 = bytesModelValue38.asBytes();
        java.math.BigInteger bigInteger42 = bytesModelValue38.asBigInteger();
        boolean boolean43 = bytesModelValue22.equals(bytesModelValue38);
        int int45 = bytesModelValue38.asInt((int) 'J');
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory47 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream48 = null;
        org.jboss.dmr.Base64.InputStream inputStream50 = new org.jboss.dmr.Base64.InputStream(inputStream48, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream51 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream50);
        org.jboss.dmr.stream.ModelReader modelReader52 = modelStreamFactory47.newModelReader((java.io.InputStream) inputStream51);
        java.io.OutputStream outputStream53 = null;
        org.jboss.dmr.Base64.OutputStream outputStream54 = new org.jboss.dmr.Base64.OutputStream(outputStream53);
        org.jboss.dmr.Base64.OutputStream outputStream55 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream54);
        outputStream54.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter58 = modelStreamFactory47.newModelWriter((java.io.OutputStream) outputStream54);
        org.jboss.dmr.stream.ModelWriter modelWriter59 = modelWriter58.writeListStart();
        bytesModelValue38.write(modelWriter59);
        org.jboss.dmr.BooleanModelValue booleanModelValue62 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray63 = booleanModelValue62.asBytes();
        java.lang.String str64 = booleanModelValue62.asString();
        int int65 = booleanModelValue62.asInt();
        long long66 = booleanModelValue62.asLong();
        boolean boolean68 = booleanModelValue62.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger69 = booleanModelValue62.asBigInteger();
        java.lang.String str70 = booleanModelValue62.asString();
        byte[] byteArray71 = booleanModelValue62.asBytes();
        java.lang.String str73 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) byteArray71, 10);
        org.jboss.dmr.stream.ModelWriter modelWriter74 = modelWriter59.writeBytes(byteArray71);
        doubleModelValue1.write(modelWriter74);
        org.jboss.dmr.stream.ModelWriter modelWriter76 = modelWriter74.writeUndefined();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str23, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str31, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 4.9E-324d + "'", double39 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory47);
        org.junit.Assert.assertNotNull(modelReader52);
        org.junit.Assert.assertNotNull(modelWriter58);
        org.junit.Assert.assertNotNull(modelWriter59);
        org.junit.Assert.assertNotNull(booleanModelValue62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "true" + "'", str64, "true");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "true" + "'", str70, "true");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA" + "'", str73, "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.junit.Assert.assertNotNull(modelWriter74);
        org.junit.Assert.assertNotNull(modelWriter76);
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        java.lang.String str10 = bigDecimalModelValue7.asString();
        java.math.BigInteger bigInteger11 = bigDecimalModelValue7.asBigInteger();
        int int12 = bigDecimalModelValue7.asInt();
        java.math.BigDecimal bigDecimal13 = bigDecimalModelValue7.asBigDecimal();
        java.lang.String str14 = bigDecimalModelValue7.toString();
        org.jboss.dmr.ValueExpression valueExpression15 = bigDecimalModelValue7.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = valueExpression15.resolveBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0" + "'", str10, "1.0");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "big decimal 1.0" + "'", str14, "big decimal 1.0");
        org.junit.Assert.assertNotNull(valueExpression15);
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        byte[] byteArray7 = bytesModelValue4.asBytes();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        java.lang.String str13 = bytesModelValue12.asString();
        int int14 = bytesModelValue12.asInt();
        int int15 = bytesModelValue12.asInt();
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        double double21 = bytesModelValue20.asDouble();
        boolean boolean22 = bytesModelValue12.equals(bytesModelValue20);
        byte[] byteArray23 = bytesModelValue20.asBytes();
        java.math.BigInteger bigInteger24 = bytesModelValue20.asBigInteger();
        boolean boolean25 = bytesModelValue4.equals(bytesModelValue20);
        double double26 = bytesModelValue20.asDouble();
        byte[] byteArray27 = bytesModelValue20.asBytes();
        org.jboss.dmr.LongModelValue longModelValue29 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str30 = longModelValue29.asString();
        byte[] byteArray31 = longModelValue29.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue32 = new org.jboss.dmr.BytesModelValue(byteArray31);
        java.lang.String str33 = bytesModelValue32.asString();
        int int34 = bytesModelValue32.asInt();
        int int36 = bytesModelValue32.asInt((int) 'a');
        java.lang.String str37 = bytesModelValue32.asString();
        double double39 = bytesModelValue32.asDouble((double) (-1));
        double double40 = bytesModelValue32.asDouble();
        boolean boolean41 = bytesModelValue20.equals(bytesModelValue32);
        java.io.PrintWriter printWriter42 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue32.formatMultiLine(printWriter42, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str13, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.9E-324d + "'", double26 == 4.9E-324d);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str33, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str37, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 4.9E-324d + "'", double39 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 4.9E-324d + "'", double40 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        org.jboss.dmr.BooleanModelValue booleanModelValue19 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger20 = booleanModelValue19.asBigInteger();
        byte[] byteArray21 = booleanModelValue19.asBytes();
        boolean boolean23 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "1L");
        boolean boolean25 = org.jboss.dmr.Base64.encodeToFile(byteArray21, "[(\"hi!\" => 0.0)]");
        outputStream17.write(byteArray21);
        outputStream17.write((int) (short) 0);
        outputStream17.resumeEncoding();
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream17);
        java.io.InputStream inputStream31 = null;
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream(inputStream31, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream34 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream33);
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream34, 0);
        org.jboss.dmr.stream.ModelReader modelReader37 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream34);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = inputStream34.skip(2L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(booleanModelValue19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelReader37);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("(\"Expression \\\"true\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0)))", false);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode6 = modelNodeFactory0.readFrom("{\n    \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : {\n        \"hi!\" : 0.0\n    }\n}", false);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Unexpected character ':' while reading DMR stream");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression9 = bigDecimalModelValue7.asExpression();
        int int10 = bigDecimalModelValue7.asInt();
        java.math.BigDecimal bigDecimal11 = bigDecimalModelValue7.asBigDecimal();
        double double13 = bigDecimalModelValue7.asDouble(4.9E-324d);
        long long14 = bigDecimalModelValue7.asLong();
        boolean boolean16 = bigDecimalModelValue7.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) bigDecimalModelValue7);
        java.math.BigInteger bigInteger18 = bigDecimalModelValue7.asBigInteger();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(bigInteger18);
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        org.jboss.dmr.ModelNode modelNode2 = org.jboss.dmr.ModelNode.fromJSONString("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3LWwAAAACcAAAcAAD\naGkhRAAAAAAAAAAAcAAOKCJoaSEiID0+IDAuMClkAAIzMng=\"");
        org.jboss.dmr.PropertyModelValue propertyModelValue4 = new org.jboss.dmr.PropertyModelValue("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQACkVYUFJFU1NJT04=", modelNode2, false);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode6 = modelNode2.get("[big integer 1,100.0,35]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        int int9 = bytesModelValue4.asInt(112);
        java.math.BigInteger bigInteger10 = bytesModelValue4.asBigInteger();
        java.io.PrintWriter printWriter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue4.formatAsJSON(printWriter11, 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.math.BigDecimal bigDecimal16 = bytesModelValue12.asBigDecimal();
        org.jboss.dmr.LongModelValue longModelValue18 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str19 = longModelValue18.asString();
        byte[] byteArray20 = longModelValue18.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue21 = new org.jboss.dmr.BytesModelValue(byteArray20);
        java.lang.String str22 = bytesModelValue21.asString();
        int int23 = bytesModelValue21.asInt();
        int int24 = bytesModelValue21.asInt();
        org.jboss.dmr.LongModelValue longModelValue26 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str27 = longModelValue26.asString();
        byte[] byteArray28 = longModelValue26.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue29 = new org.jboss.dmr.BytesModelValue(byteArray28);
        double double30 = bytesModelValue29.asDouble();
        boolean boolean31 = bytesModelValue21.equals(bytesModelValue29);
        byte[] byteArray32 = bytesModelValue29.asBytes();
        boolean boolean33 = bytesModelValue12.equals(bytesModelValue29);
        int int34 = bytesModelValue12.asInt();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str22, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 4.9E-324d + "'", double30 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long2 = booleanModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = booleanModelValue1.asExpression();
        java.lang.String str4 = valueExpression3.toString();
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression7 = expressionValue6.asExpression();
        boolean boolean8 = valueExpression3.equals(valueExpression7);
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal11 = longModelValue10.asBigDecimal();
        int int12 = longModelValue10.asInt();
        org.jboss.dmr.ValueExpression valueExpression13 = longModelValue10.asExpression();
        boolean boolean14 = valueExpression7.equals(valueExpression13);
        int int15 = valueExpression13.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue17 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression18 = expressionValue17.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver19 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str20 = valueExpression18.resolveString(valueExpressionResolver19);
        java.math.BigInteger bigInteger21 = valueExpression13.resolveBigInteger(valueExpressionResolver19);
        org.jboss.dmr.ValueExpression valueExpression22 = null;
        boolean boolean23 = valueExpression13.equals(valueExpression22);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Expression \"true\"" + "'", str4, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(valueExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        boolean boolean11 = modelNode8.equals((java.lang.Object) 100L);
        boolean boolean12 = modelNode0.equals(modelNode8);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int22 = modelNode21.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.setExpression("hi!", "hi!");
        java.lang.String str27 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode23.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode29 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode8.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode33 = modelNode8.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        boolean boolean35 = modelNode8.hasDefined("1L");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode8.asList();
        org.jboss.dmr.LongModelValue longModelValue39 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str40 = longModelValue39.asString();
        org.jboss.dmr.ValueExpression valueExpression41 = longModelValue39.asExpression();
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        int int45 = longModelValue43.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue47 = new org.jboss.dmr.LongModelValue((-1L));
        long long49 = longModelValue47.asLong((long) (byte) -1);
        double double51 = longModelValue47.asDouble((double) 10.0f);
        boolean boolean52 = longModelValue43.equals(longModelValue47);
        org.jboss.dmr.ModelType modelType53 = longModelValue43.getType();
        boolean boolean54 = valueExpression41.equals((java.lang.Object) modelType53);
        org.jboss.dmr.ModelNode modelNode55 = modelNode8.set("{\n    \"\" : {\n        \"hi!\" : 0.0\n    }\n}", valueExpression41);
        org.jboss.dmr.ModelNode modelNode58 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode59 = modelNode58.clear();
        boolean boolean61 = modelNode58.has((int) '#');
        org.jboss.dmr.ModelNode modelNode64 = modelNode58.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode66 = modelNode58.set("1");
        org.jboss.dmr.PropertyModelValue propertyModelValue68 = new org.jboss.dmr.PropertyModelValue("[2L]", modelNode58, false);
        org.jboss.dmr.Property property69 = propertyModelValue68.asProperty();
        boolean boolean70 = modelNode55.equals((java.lang.Object) property69);
        org.jboss.dmr.ModelNode modelNode73 = modelNode55.set("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQAC0JJR19ERUNJTUFM", false);
        org.jboss.dmr.ModelNode modelNode74 = modelNode55.clone();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str27, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(valueExpression41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + modelType53 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType53.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertNotNull(modelNode74);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        boolean boolean8 = listModelValue5.equals((java.lang.Object) true);
        boolean boolean9 = listModelValue5.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList10 = listModelValue5.asList();
        org.jboss.dmr.ModelValue modelValue11 = listModelValue5.protect();
        org.jboss.dmr.LongModelValue longModelValue13 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double15 = longModelValue13.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue((-1L));
        long long19 = longModelValue17.asLong((long) (byte) -1);
        byte[] byteArray20 = longModelValue17.asBytes();
        boolean boolean21 = longModelValue13.equals(longModelValue17);
        org.jboss.dmr.LongModelValue longModelValue23 = new org.jboss.dmr.LongModelValue(1L);
        long long25 = longModelValue23.asLong((long) (short) 0);
        java.math.BigInteger bigInteger26 = longModelValue23.asBigInteger();
        boolean boolean27 = longModelValue17.equals(longModelValue23);
        java.math.BigInteger bigInteger28 = longModelValue17.asBigInteger();
        boolean boolean29 = listModelValue5.equals((java.lang.Object) longModelValue17);
        long long31 = longModelValue17.asLong((long) '4');
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(modelNodeList10);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.getChild("1L");
        org.jboss.dmr.ObjectModelValue objectModelValue8 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue8.asObject();
        java.util.Set<java.lang.String> strSet10 = objectModelValue8.getKeys();
        org.jboss.dmr.ModelNode modelNode12 = objectModelValue8.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean13 = objectModelValue8.asBoolean();
        int int15 = objectModelValue8.asInt((int) 'b');
        int int17 = objectModelValue8.asInt((int) '#');
        boolean boolean18 = objectModelValue0.equals(objectModelValue8);
        int int19 = objectModelValue8.asInt();
        java.util.Set<java.lang.String> strSet20 = objectModelValue8.getKeys();
        long long22 = objectModelValue8.asLong((long) 0);
        java.util.Set<java.lang.String> strSet23 = objectModelValue8.getKeys();
        org.jboss.dmr.ModelNode modelNode25 = objectModelValue8.getChild("-1");
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.add("(\"[1]\" => 0)", (double) 'e');
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(modelNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode28);
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        double double12 = bigDecimalModelValue7.asDouble((double) 0L);
        int int14 = bigDecimalModelValue7.asInt(97);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.clear();
        org.jboss.dmr.BooleanModelValue booleanModelValue10 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger11 = booleanModelValue10.asBigInteger();
        byte[] byteArray12 = booleanModelValue10.asBytes();
        boolean boolean13 = booleanModelValue10.asBoolean();
        byte[] byteArray14 = booleanModelValue10.asBytes();
        org.jboss.dmr.DoubleModelValue doubleModelValue16 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long17 = doubleModelValue16.asLong();
        boolean boolean18 = doubleModelValue16.asBoolean();
        byte[] byteArray19 = doubleModelValue16.asBytes();
        java.math.BigInteger bigInteger20 = doubleModelValue16.asBigInteger();
        boolean boolean21 = booleanModelValue10.equals((java.lang.Object) bigInteger20);
        org.jboss.dmr.ModelNode modelNode22 = modelNode7.set(bigInteger20);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        org.jboss.dmr.Property property28 = new org.jboss.dmr.Property("", modelNode27);
        java.lang.String[] strArray29 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.get(strArray29);
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode34 = modelNode31.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList35 = modelNode34.asList();
        org.jboss.dmr.ListModelValue listModelValue36 = new org.jboss.dmr.ListModelValue(modelNodeList35);
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue36);
        org.jboss.dmr.ModelValue modelValue38 = listModelValue36.resolve();
        int int40 = listModelValue36.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList41 = listModelValue36.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList42 = modelNode30.asPropertyList(propertyList41);
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.set("hi!", 0.0d);
        org.jboss.dmr.Property property48 = new org.jboss.dmr.Property("", modelNode47);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode50 = modelNode47.get(strArray49);
        org.jboss.dmr.ModelNode modelNode51 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode54 = modelNode51.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList55 = modelNode54.asList();
        org.jboss.dmr.ListModelValue listModelValue56 = new org.jboss.dmr.ListModelValue(modelNodeList55);
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue56);
        org.jboss.dmr.ModelValue modelValue58 = listModelValue56.resolve();
        int int60 = listModelValue56.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList61 = listModelValue56.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList62 = modelNode50.asPropertyList(propertyList61);
        modelNode30.setNoCopy(modelNode50);
        org.jboss.dmr.ModelNode modelNode64 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode67 = modelNode64.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode68 = new org.jboss.dmr.ModelNode();
        java.lang.Long long69 = modelNode68.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray70 = new org.jboss.dmr.ModelNode[] { modelNode64, modelNode68 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList71 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList71, modelNodeArray70);
        org.jboss.dmr.ModelNode modelNode73 = modelNode30.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList71);
        org.jboss.dmr.ModelNode modelNode76 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long77 = modelNode76.asLong();
        org.jboss.dmr.ValueExpression valueExpression78 = modelNode76.asExpression();
        java.math.BigDecimal bigDecimal79 = valueExpression78.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode80 = modelNode30.set("true", bigDecimal79);
        org.jboss.dmr.ModelType modelType81 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode82 = new org.jboss.dmr.ModelNode(modelType81);
        org.jboss.dmr.ModelNode modelNode84 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode87 = modelNode84.set("hi!", 0.0d);
        org.jboss.dmr.Property property88 = new org.jboss.dmr.Property("", modelNode87);
        org.jboss.dmr.ModelNode modelNode89 = modelNode82.set(property88);
        org.jboss.dmr.ModelNode modelNode90 = property88.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue91 = new org.jboss.dmr.PropertyModelValue(property88);
        java.util.List<org.jboss.dmr.Property> propertyList92 = propertyModelValue91.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList93 = modelNode80.asPropertyList(propertyList92);
        boolean boolean94 = modelNode7.equals(modelNode80);
        boolean boolean96 = modelNode80.hasDefined((int) (short) 1);
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(booleanModelValue10);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNodeList35);
        org.junit.Assert.assertNotNull(modelValue38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(propertyList41);
        org.junit.Assert.assertNotNull(propertyList42);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelNodeList55);
        org.junit.Assert.assertNotNull(modelValue58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(propertyList61);
        org.junit.Assert.assertNotNull(propertyList62);
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertNull(long69);
        org.junit.Assert.assertNotNull(modelNodeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(valueExpression78);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(modelNode80);
        org.junit.Assert.assertTrue("'" + modelType81 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType81.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode87);
        org.junit.Assert.assertNotNull(modelNode89);
        org.junit.Assert.assertNotNull(modelNode90);
        org.junit.Assert.assertNotNull(propertyList92);
        org.junit.Assert.assertNotNull(propertyList93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.TypeModelValue typeModelValue1 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType2 = typeModelValue1.asType();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(typeModelValue1);
        org.junit.Assert.assertTrue("'" + modelType2 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType2.equals(org.jboss.dmr.ModelType.INT));
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        boolean boolean8 = listModelValue5.equals((java.lang.Object) true);
        boolean boolean9 = listModelValue5.asBoolean();
        boolean boolean11 = listModelValue5.asBoolean(false);
        org.jboss.dmr.ModelValue modelValue12 = listModelValue5.protect();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList20 = modelNode19.asList();
        org.jboss.dmr.ListModelValue listModelValue21 = new org.jboss.dmr.ListModelValue(modelNodeList20);
        long long22 = listModelValue21.asLong();
        long long23 = listModelValue21.asLong();
        boolean boolean25 = listModelValue21.asBoolean(false);
        boolean boolean26 = listModelValue5.equals(listModelValue21);
        java.util.List<org.jboss.dmr.Property> propertyList27 = listModelValue5.asPropertyList();
        int int28 = listModelValue5.asInt();
        org.jboss.dmr.ModelType modelType29 = listModelValue5.getType();
        org.jboss.dmr.ModelValue modelValue30 = listModelValue5.protect();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelNodeList20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(propertyList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + modelType29 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType29.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(modelValue30);
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        boolean boolean3 = typeModelValue2.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression4 = typeModelValue2.asExpression();
        java.io.ObjectInput objectInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression4.readExternal(objectInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(valueExpression4);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        java.lang.String str14 = bigIntegerModelValue13.asString();
        java.math.BigInteger bigInteger15 = bigIntegerModelValue13.asBigInteger();
        long long16 = bigIntegerModelValue13.asLong();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = modelNode20.asList();
        org.jboss.dmr.ListModelValue listModelValue22 = new org.jboss.dmr.ListModelValue(modelNodeList21);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue22);
        org.jboss.dmr.ModelValue modelValue24 = listModelValue22.resolve();
        int int26 = listModelValue22.asInt((int) (byte) 100);
        boolean boolean27 = bigIntegerModelValue13.equals((java.lang.Object) (byte) 100);
        org.jboss.dmr.ValueExpression valueExpression28 = bigIntegerModelValue13.asExpression();
        org.jboss.dmr.ModelNode modelNode29 = modelNode4.set("true", valueExpression28);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(valueExpression28);
        org.junit.Assert.assertNotNull(modelNode29);
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        byte[] byteArray11 = longModelValue5.asBytes();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) longModelValue5);
        byte[] byteArray13 = longModelValue5.asBytes();
        org.jboss.dmr.ValueExpression valueExpression14 = longModelValue5.asExpression();
        int int15 = valueExpression14.resolveInt();
        org.jboss.dmr.DoubleModelValue doubleModelValue17 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long18 = doubleModelValue17.asLong();
        long long20 = doubleModelValue17.asLong((long) 32);
        org.jboss.dmr.ModelValue modelValue21 = doubleModelValue17.protect();
        int int22 = doubleModelValue17.asInt();
        boolean boolean23 = valueExpression14.equals((java.lang.Object) doubleModelValue17);
        double double24 = doubleModelValue17.asDouble();
        byte[] byteArray25 = doubleModelValue17.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = org.jboss.dmr.Base64.decode(byteArray25, (int) 'p', 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 112");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(modelValue21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[64, 36, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode19 = modelNode18.setEmptyList();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long22 = modelNode21.asLong();
        org.jboss.dmr.ValueExpression valueExpression23 = modelNode21.asExpression();
        java.math.BigDecimal bigDecimal24 = valueExpression23.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode18.set(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode27 = modelNode13.set(bigDecimal24);
        org.jboss.dmr.ModelType modelType29 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode(modelType29);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        org.jboss.dmr.Property property36 = new org.jboss.dmr.Property("", modelNode35);
        org.jboss.dmr.ModelNode modelNode37 = modelNode30.set(property36);
        org.jboss.dmr.ModelNode modelNode38 = property36.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue39 = new org.jboss.dmr.PropertyModelValue(property36);
        java.util.List<org.jboss.dmr.Property> propertyList40 = propertyModelValue39.asPropertyList();
        org.jboss.dmr.ModelNode modelNode42 = propertyModelValue39.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode43 = modelNode42.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue46 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long47 = booleanModelValue46.asLong();
        org.jboss.dmr.ValueExpression valueExpression48 = booleanModelValue46.asExpression();
        java.lang.String str49 = valueExpression48.toString();
        org.jboss.dmr.ExpressionValue expressionValue51 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression52 = expressionValue51.asExpression();
        boolean boolean53 = valueExpression48.equals(valueExpression52);
        org.jboss.dmr.LongModelValue longModelValue55 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal56 = longModelValue55.asBigDecimal();
        int int57 = longModelValue55.asInt();
        org.jboss.dmr.ValueExpression valueExpression58 = longModelValue55.asExpression();
        boolean boolean59 = valueExpression52.equals(valueExpression58);
        int int60 = valueExpression58.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue62 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression63 = expressionValue62.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver64 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str65 = valueExpression63.resolveString(valueExpressionResolver64);
        java.math.BigInteger bigInteger66 = valueExpression58.resolveBigInteger(valueExpressionResolver64);
        org.jboss.dmr.ModelNode modelNode67 = modelNode42.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression58);
        org.jboss.dmr.ModelNode modelNode68 = modelNode27.set("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression58);
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode();
        java.lang.Long long71 = modelNode70.asLongOrNull();
        org.jboss.dmr.BooleanModelValue booleanModelValue74 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger75 = booleanModelValue74.asBigInteger();
        byte[] byteArray76 = booleanModelValue74.asBytes();
        org.jboss.dmr.ModelNode modelNode77 = modelNode70.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", byteArray76);
        org.jboss.dmr.ModelType modelType78 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode79 = new org.jboss.dmr.ModelNode(modelType78);
        org.jboss.dmr.ModelNode modelNode81 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode84 = modelNode81.set("hi!", 0.0d);
        org.jboss.dmr.Property property85 = new org.jboss.dmr.Property("", modelNode84);
        org.jboss.dmr.ModelNode modelNode86 = modelNode79.set(property85);
        org.jboss.dmr.PropertyModelValue propertyModelValue87 = new org.jboss.dmr.PropertyModelValue(property85);
        org.jboss.dmr.PropertyModelValue propertyModelValue88 = new org.jboss.dmr.PropertyModelValue(property85);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList89 = propertyModelValue88.asList();
        java.util.List<org.jboss.dmr.Property> propertyList90 = propertyModelValue88.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList91 = modelNode70.asPropertyList(propertyList90);
        boolean boolean93 = modelNode70.has("{\n    \"EXPRESSION_VALUE\" : 35\n}");
        org.jboss.dmr.ModelNode modelNode95 = modelNode70.setExpression("{\n    \"EXPRESSION_VALUE\" : \"hi!\"\n}");
        org.jboss.dmr.ModelNode modelNode96 = modelNode68.set("\"AAAAIA==\"", modelNode95);
        boolean boolean97 = modelNode96.isProtected();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + modelType29 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType29.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(booleanModelValue46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(valueExpression48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Expression \"true\"" + "'", str49, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(valueExpression58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(valueExpression63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNull(long71);
        org.junit.Assert.assertNotNull(booleanModelValue74);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1]");
        org.junit.Assert.assertNotNull(modelNode77);
        org.junit.Assert.assertTrue("'" + modelType78 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType78.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertNotNull(modelNode86);
        org.junit.Assert.assertNotNull(modelNodeList89);
        org.junit.Assert.assertNotNull(propertyList90);
        org.junit.Assert.assertNotNull(propertyList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(modelNode95);
        org.junit.Assert.assertNotNull(modelNode96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        int int6 = longModelValue1.asInt();
        int int7 = longModelValue1.asInt();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.lang.String str13 = modelNode9.toString();
        org.jboss.dmr.ModelNode modelNode14 = modelNode9.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode16 = modelNode9.set(100);
        org.jboss.dmr.ModelNode modelNode17 = modelNode8.add(modelNode9);
        org.jboss.dmr.ModelNode modelNode19 = modelNode17.set((double) (-1.0f));
        java.math.BigInteger bigInteger20 = modelNode17.asBigIntegerOrNull();
        boolean boolean21 = longModelValue1.equals((java.lang.Object) modelNode17);
        byte[] byteArray22 = longModelValue1.asBytes();
        double double23 = longModelValue1.asDouble();
        boolean boolean25 = longModelValue1.asBoolean(false);
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double29 = longModelValue27.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue31 = new org.jboss.dmr.LongModelValue((-1L));
        long long33 = longModelValue31.asLong((long) (byte) -1);
        byte[] byteArray34 = longModelValue31.asBytes();
        boolean boolean35 = longModelValue27.equals(longModelValue31);
        org.jboss.dmr.LongModelValue longModelValue37 = new org.jboss.dmr.LongModelValue(1L);
        long long39 = longModelValue37.asLong((long) (short) 0);
        java.math.BigInteger bigInteger40 = longModelValue37.asBigInteger();
        boolean boolean41 = longModelValue31.equals(longModelValue37);
        int int43 = longModelValue37.asInt((int) (byte) 100);
        boolean boolean45 = longModelValue37.asBoolean(true);
        boolean boolean46 = longModelValue1.equals(longModelValue37);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"hi!\" => 0.0)" + "'", str13, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBigInteger();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isBigInteger();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        org.jboss.dmr.stream.ModelException modelException1 = new org.jboss.dmr.stream.ModelException("Expressi");
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigDecimal bigDecimal10 = bigDecimalModelValue7.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue7.asExpression();
        java.math.BigInteger bigInteger12 = bigDecimalModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long15 = modelNode14.asLong();
        org.jboss.dmr.ValueExpression valueExpression16 = modelNode14.asExpression();
        java.math.BigDecimal bigDecimal17 = valueExpression16.resolveBigDecimal();
        java.lang.String str18 = valueExpression16.getExpressionString();
        java.math.BigDecimal bigDecimal19 = valueExpression16.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue20 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal19);
        int int22 = bigDecimalModelValue20.asInt(0);
        java.math.BigInteger bigInteger23 = bigDecimalModelValue20.asBigInteger();
        java.math.BigDecimal bigDecimal24 = bigDecimalModelValue20.asBigDecimal();
        java.math.BigInteger bigInteger25 = bigDecimalModelValue20.asBigInteger();
        boolean boolean26 = bigDecimalModelValue7.equals(bigDecimalModelValue20);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory28 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream29 = null;
        org.jboss.dmr.Base64.InputStream inputStream31 = new org.jboss.dmr.Base64.InputStream(inputStream29, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream31);
        org.jboss.dmr.stream.ModelReader modelReader33 = modelStreamFactory28.newModelReader((java.io.InputStream) inputStream32);
        java.io.OutputStream outputStream34 = null;
        org.jboss.dmr.Base64.OutputStream outputStream35 = new org.jboss.dmr.Base64.OutputStream(outputStream34);
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream35);
        outputStream35.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter39 = modelStreamFactory28.newModelWriter((java.io.OutputStream) outputStream35);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelWriter39.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter42 = modelWriter39.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter44 = modelWriter42.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter46 = modelWriter42.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter48 = modelWriter46.writeLong((long) 0);
        org.jboss.dmr.stream.ModelWriter modelWriter49 = modelWriter46.writeUndefined();
        bigDecimalModelValue7.write(modelWriter46);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode52 = bigDecimalModelValue7.removeChild("bytes { 0x00 }");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1.0" + "'", str18, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory28);
        org.junit.Assert.assertNotNull(modelReader33);
        org.junit.Assert.assertNotNull(modelWriter39);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter42);
        org.junit.Assert.assertNotNull(modelWriter44);
        org.junit.Assert.assertNotNull(modelWriter46);
        org.junit.Assert.assertNotNull(modelWriter48);
        org.junit.Assert.assertNotNull(modelWriter49);
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long6 = longModelValue1.asLong();
        java.math.BigInteger bigInteger7 = longModelValue1.asBigInteger();
        java.math.BigDecimal bigDecimal8 = longModelValue1.asBigDecimal();
        boolean boolean10 = longModelValue1.asBoolean(true);
        boolean boolean11 = longModelValue1.asBoolean();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 100);
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode(bigInteger5);
        boolean boolean8 = modelNode6.hasDefined((int) '4');
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.setExpression("hi!", "hi!");
        java.lang.String str13 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode9);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode9.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode16 = modelNode9.set((double) 0);
        org.jboss.dmr.ModelNode modelNode17 = modelNode9.clear();
        org.jboss.dmr.ObjectModelValue objectModelValue18 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode19 = objectModelValue18.asObject();
        java.util.Set<java.lang.String> strSet20 = objectModelValue18.getKeys();
        org.jboss.dmr.ModelNode modelNode22 = objectModelValue18.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean23 = objectModelValue18.asBoolean();
        int int25 = objectModelValue18.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode26 = objectModelValue18.asObject();
        java.util.Set<java.lang.String> strSet27 = modelNode26.keys();
        org.jboss.dmr.ModelNode modelNode28 = modelNode9.add(modelNode26);
        org.jboss.dmr.ModelNode modelNode29 = modelNode9.resolve();
        org.jboss.dmr.ModelNode modelNode30 = modelNode29.setEmptyList();
        org.jboss.dmr.ModelNode modelNode31 = modelNode6.set(modelNode29);
        org.jboss.dmr.ObjectModelValue objectModelValue33 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode34 = objectModelValue33.asObject();
        org.jboss.dmr.ModelNode modelNode36 = objectModelValue33.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode38 = objectModelValue33.getChild("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.Property property39 = new org.jboss.dmr.Property("PROPERTY_VALUE", modelNode38);
        org.jboss.dmr.Property property40 = property39.clone();
        org.jboss.dmr.ModelNode modelNode41 = modelNode29.set(property40);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = modelNode41.asDouble(1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str13, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(modelNode41);
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        byte[] byteArray5 = stringModelValue3.asBytes();
        java.lang.Object obj6 = null;
        boolean boolean7 = stringModelValue3.equals(obj6);
        boolean boolean9 = stringModelValue3.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        byte[] byteArray10 = stringModelValue3.asBytes();
        org.jboss.dmr.ValueExpression valueExpression11 = stringModelValue3.asExpression();
        java.lang.String str12 = stringModelValue3.asString();
        org.jboss.dmr.ValueExpression valueExpression13 = stringModelValue3.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = stringModelValue3.asLong((long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str12, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(valueExpression13);
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        boolean boolean10 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue7.asExpression();
        long long12 = bigDecimalModelValue7.asLong();
        double double14 = bigDecimalModelValue7.asDouble((double) 10.0f);
        long long16 = bigDecimalModelValue7.asLong((long) ' ');
        double double17 = bigDecimalModelValue7.asDouble();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        java.lang.String str1 = org.jboss.dmr.ModelValue.quote("EXPRESSION_VALUE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\"EXPRESSION_VALUE\"" + "'", str1, "\"EXPRESSION_VALUE\"");
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        org.jboss.dmr.ModelNode modelNode43 = modelNode28.set((long) 100);
        org.jboss.dmr.ModelType modelType44 = modelNode43.getType();
        long long46 = modelNode43.asLong((long) (short) 100);
        boolean boolean47 = modelNode43.isProtected();
        org.jboss.dmr.Property property49 = new org.jboss.dmr.Property("10", modelNode43, true);
        org.jboss.dmr.ModelType modelType50 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode51 = new org.jboss.dmr.ModelNode(modelType50);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode56 = modelNode53.set("hi!", 0.0d);
        org.jboss.dmr.Property property57 = new org.jboss.dmr.Property("", modelNode56);
        org.jboss.dmr.ModelNode modelNode58 = modelNode51.set(property57);
        java.lang.String str59 = property57.getName();
        org.jboss.dmr.Property property60 = property57.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue61 = new org.jboss.dmr.PropertyModelValue(property60);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = propertyModelValue61.asList();
        org.jboss.dmr.ListModelValue listModelValue63 = new org.jboss.dmr.ListModelValue(modelNodeList62);
        long long65 = listModelValue63.asLong((long) (short) 100);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory67 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream68 = null;
        org.jboss.dmr.Base64.InputStream inputStream70 = new org.jboss.dmr.Base64.InputStream(inputStream68, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream71 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream70);
        org.jboss.dmr.stream.ModelReader modelReader72 = modelStreamFactory67.newModelReader((java.io.InputStream) inputStream71);
        java.io.OutputStream outputStream73 = null;
        org.jboss.dmr.Base64.OutputStream outputStream74 = new org.jboss.dmr.Base64.OutputStream(outputStream73);
        org.jboss.dmr.Base64.OutputStream outputStream75 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream74);
        outputStream74.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter78 = modelStreamFactory67.newModelWriter((java.io.OutputStream) outputStream74);
        org.jboss.dmr.stream.ModelWriter modelWriter79 = modelWriter78.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter81 = modelWriter78.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter83 = modelWriter81.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter85 = modelWriter81.writeBoolean(true);
        listModelValue63.write(modelWriter85);
        boolean boolean87 = modelNode43.equals((java.lang.Object) listModelValue63);
        java.util.List<org.jboss.dmr.Property> propertyList88 = listModelValue63.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertTrue("'" + modelType44 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType44.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + modelType50 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType50.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(modelStreamFactory67);
        org.junit.Assert.assertNotNull(modelReader72);
        org.junit.Assert.assertNotNull(modelWriter78);
        org.junit.Assert.assertNotNull(modelWriter79);
        org.junit.Assert.assertNotNull(modelWriter81);
        org.junit.Assert.assertNotNull(modelWriter83);
        org.junit.Assert.assertNotNull(modelWriter85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(propertyList88);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((-1L));
        long long3 = longModelValue1.asLong((long) (byte) -1);
        boolean boolean5 = longModelValue1.asBoolean(false);
        java.io.OutputStream outputStream6 = null;
        org.jboss.dmr.Base64.OutputStream outputStream7 = new org.jboss.dmr.Base64.OutputStream(outputStream6);
        outputStream7.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream11 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream9, (int) (byte) -1);
        org.jboss.dmr.Base64.OutputStream outputStream12 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream11);
        outputStream12.resumeEncoding();
        boolean boolean14 = longModelValue1.equals((java.lang.Object) outputStream12);
        long long16 = longModelValue1.asLong((long) 'p');
        boolean boolean17 = longModelValue1.asBoolean();
        org.jboss.dmr.LongModelValue longModelValue19 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double21 = longModelValue19.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue23 = new org.jboss.dmr.LongModelValue(1L);
        int int25 = longModelValue23.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue27 = new org.jboss.dmr.LongModelValue((-1L));
        long long29 = longModelValue27.asLong((long) (byte) -1);
        double double31 = longModelValue27.asDouble((double) 10.0f);
        boolean boolean32 = longModelValue23.equals(longModelValue27);
        byte[] byteArray33 = longModelValue27.asBytes();
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) longModelValue27);
        byte[] byteArray35 = longModelValue27.asBytes();
        boolean boolean36 = longModelValue19.equals(longModelValue27);
        boolean boolean37 = longModelValue1.equals(longModelValue27);
        byte[] byteArray38 = longModelValue27.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue39 = new org.jboss.dmr.BytesModelValue(byteArray38);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, -1, -1, -1, -1, -1, -1, -1]");
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.jboss.dmr.Base64.decode("[(\"[(\\\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\\\" => big integer 32)]\" => expression \"52\"),(\"AQ==\" => false),(\"\" => (\"hi!\" => 0.0)),big integer 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Bad Base64 input character at 0: 91(decimal)");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        long long9 = bigDecimalModelValue7.asLong();
        java.lang.String str10 = bigDecimalModelValue7.asString();
        org.jboss.dmr.ValueExpression valueExpression11 = bigDecimalModelValue7.asExpression();
        boolean boolean13 = bigDecimalModelValue7.asBoolean(false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0" + "'", str10, "1.0");
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        java.lang.String str8 = listModelValue5.asString();
        boolean boolean10 = listModelValue5.has((int) 'l');
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode12 = listModelValue5.removeChild((int) 'D');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [68]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str8, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        double double15 = bytesModelValue12.asDouble();
        java.lang.String str16 = bytesModelValue12.asString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4.9E-324d + "'", double15 == 4.9E-324d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str16, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = listModelValue5.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode27, false);
        org.jboss.dmr.Property property30 = propertyModelValue29.asProperty();
        boolean boolean31 = listModelValue5.equals((java.lang.Object) propertyModelValue29);
        java.util.List<org.jboss.dmr.Property> propertyList32 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList44 = modelNode43.asList();
        org.jboss.dmr.ListModelValue listModelValue45 = new org.jboss.dmr.ListModelValue(modelNodeList44);
        java.lang.String str46 = listModelValue45.asString();
        long long47 = listModelValue45.asLong();
        int int49 = listModelValue45.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue50 = listModelValue45.protect();
        boolean boolean51 = listModelValue38.equals(listModelValue45);
        org.jboss.dmr.ModelValue modelValue52 = listModelValue38.protect();
        boolean boolean53 = listModelValue5.equals(listModelValue38);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode55 = listModelValue38.removeChild((int) 'i');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [105]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNodeList44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str46, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(modelValue50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(modelValue52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        boolean boolean15 = expressionValue8.equals((java.lang.Object) modelNode12);
        org.jboss.dmr.ModelType modelType16 = modelNode12.getType();
        org.jboss.dmr.IntModelValue intModelValue19 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long21 = intModelValue19.asLong((long) 'b');
        org.jboss.dmr.ValueExpression valueExpression22 = intModelValue19.asExpression();
        byte[] byteArray23 = intModelValue19.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode24 = modelNode12.add("Expression \"0.0\"", byteArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType16.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 32L + "'", long21 == 32L);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 32]");
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        boolean boolean12 = modelNode9.equals((java.lang.Object) 100L);
        boolean boolean13 = modelNode1.equals(modelNode9);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("", modelNode18);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.get(strArray20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int23 = modelNode22.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.setExpression("hi!", "hi!");
        java.lang.String str28 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode24);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList29 = modelNode24.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode30 = modelNode22.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode32 = modelNode9.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode34 = modelNode9.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.PropertyModelValue propertyModelValue36 = new org.jboss.dmr.PropertyModelValue("1.0", modelNode9, false);
        java.io.InputStream inputStream37 = null;
        org.jboss.dmr.Base64.InputStream inputStream39 = new org.jboss.dmr.Base64.InputStream(inputStream37, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue41 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str42 = longModelValue41.asString();
        byte[] byteArray43 = longModelValue41.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue44 = new org.jboss.dmr.BytesModelValue(byteArray43);
        int int47 = inputStream39.read(byteArray43, (int) (short) 1, (int) (byte) -1);
        java.lang.String str48 = org.jboss.dmr.Base64.encodeBytes(byteArray43);
        org.jboss.dmr.ModelNode modelNode49 = modelNode9.set(byteArray43);
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode53 = modelNode50.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList54 = modelNode53.asList();
        org.jboss.dmr.ModelNode modelNode57 = modelNode53.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType58 = modelNode53.getType();
        boolean boolean59 = modelNode9.equals(modelNode53);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = modelNode53.asBoolean(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str28, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "AAAAAAAAAAE=" + "'", str48, "AAAAAAAAAAE=");
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNodeList54);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertTrue("'" + modelType58 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType58.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        double double9 = bigDecimalModelValue7.asDouble((double) 'p');
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger10);
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode19 = modelNode18.setEmptyList();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long22 = modelNode21.asLong();
        org.jboss.dmr.ValueExpression valueExpression23 = modelNode21.asExpression();
        java.math.BigDecimal bigDecimal24 = valueExpression23.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode18.set(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode27 = modelNode13.set(bigDecimal24);
        org.jboss.dmr.ModelType modelType29 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode(modelType29);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.set("hi!", 0.0d);
        org.jboss.dmr.Property property36 = new org.jboss.dmr.Property("", modelNode35);
        org.jboss.dmr.ModelNode modelNode37 = modelNode30.set(property36);
        org.jboss.dmr.ModelNode modelNode38 = property36.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue39 = new org.jboss.dmr.PropertyModelValue(property36);
        java.util.List<org.jboss.dmr.Property> propertyList40 = propertyModelValue39.asPropertyList();
        org.jboss.dmr.ModelNode modelNode42 = propertyModelValue39.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode43 = modelNode42.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue46 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long47 = booleanModelValue46.asLong();
        org.jboss.dmr.ValueExpression valueExpression48 = booleanModelValue46.asExpression();
        java.lang.String str49 = valueExpression48.toString();
        org.jboss.dmr.ExpressionValue expressionValue51 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression52 = expressionValue51.asExpression();
        boolean boolean53 = valueExpression48.equals(valueExpression52);
        org.jboss.dmr.LongModelValue longModelValue55 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal56 = longModelValue55.asBigDecimal();
        int int57 = longModelValue55.asInt();
        org.jboss.dmr.ValueExpression valueExpression58 = longModelValue55.asExpression();
        boolean boolean59 = valueExpression52.equals(valueExpression58);
        int int60 = valueExpression58.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue62 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression63 = expressionValue62.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver64 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str65 = valueExpression63.resolveString(valueExpressionResolver64);
        java.math.BigInteger bigInteger66 = valueExpression58.resolveBigInteger(valueExpressionResolver64);
        org.jboss.dmr.ModelNode modelNode67 = modelNode42.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression58);
        org.jboss.dmr.ModelNode modelNode68 = modelNode27.set("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression58);
        org.jboss.dmr.ModelNode modelNode70 = new org.jboss.dmr.ModelNode();
        java.lang.Long long71 = modelNode70.asLongOrNull();
        org.jboss.dmr.BooleanModelValue booleanModelValue74 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger75 = booleanModelValue74.asBigInteger();
        byte[] byteArray76 = booleanModelValue74.asBytes();
        org.jboss.dmr.ModelNode modelNode77 = modelNode70.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", byteArray76);
        org.jboss.dmr.ModelType modelType78 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode79 = new org.jboss.dmr.ModelNode(modelType78);
        org.jboss.dmr.ModelNode modelNode81 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode84 = modelNode81.set("hi!", 0.0d);
        org.jboss.dmr.Property property85 = new org.jboss.dmr.Property("", modelNode84);
        org.jboss.dmr.ModelNode modelNode86 = modelNode79.set(property85);
        org.jboss.dmr.PropertyModelValue propertyModelValue87 = new org.jboss.dmr.PropertyModelValue(property85);
        org.jboss.dmr.PropertyModelValue propertyModelValue88 = new org.jboss.dmr.PropertyModelValue(property85);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList89 = propertyModelValue88.asList();
        java.util.List<org.jboss.dmr.Property> propertyList90 = propertyModelValue88.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList91 = modelNode70.asPropertyList(propertyList90);
        boolean boolean93 = modelNode70.has("{\n    \"EXPRESSION_VALUE\" : 35\n}");
        org.jboss.dmr.ModelNode modelNode95 = modelNode70.setExpression("{\n    \"EXPRESSION_VALUE\" : \"hi!\"\n}");
        org.jboss.dmr.ModelNode modelNode96 = modelNode68.set("\"AAAAIA==\"", modelNode95);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode98 = modelNode95.remove((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + modelType29 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType29.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(booleanModelValue46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(valueExpression48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Expression \"true\"" + "'", str49, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(valueExpression58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(valueExpression63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNull(long71);
        org.junit.Assert.assertNotNull(booleanModelValue74);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1]");
        org.junit.Assert.assertNotNull(modelNode77);
        org.junit.Assert.assertTrue("'" + modelType78 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType78.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertNotNull(modelNode86);
        org.junit.Assert.assertNotNull(modelNodeList89);
        org.junit.Assert.assertNotNull(propertyList90);
        org.junit.Assert.assertNotNull(propertyList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(modelNode95);
        org.junit.Assert.assertNotNull(modelNode96);
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        java.math.BigInteger bigInteger5 = doubleModelValue1.asBigInteger();
        double double7 = doubleModelValue1.asDouble((double) (-1));
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long10 = modelNode9.asLong();
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        org.jboss.dmr.Property property17 = new org.jboss.dmr.Property("", modelNode16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.get(strArray18);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList24 = modelNode23.asList();
        org.jboss.dmr.ListModelValue listModelValue25 = new org.jboss.dmr.ListModelValue(modelNodeList24);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue25);
        org.jboss.dmr.ModelValue modelValue27 = listModelValue25.resolve();
        int int29 = listModelValue25.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList30 = listModelValue25.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList31 = modelNode19.asPropertyList(propertyList30);
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        org.jboss.dmr.Property property37 = new org.jboss.dmr.Property("", modelNode36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.get(strArray38);
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList44 = modelNode43.asList();
        org.jboss.dmr.ListModelValue listModelValue45 = new org.jboss.dmr.ListModelValue(modelNodeList44);
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue45);
        org.jboss.dmr.ModelValue modelValue47 = listModelValue45.resolve();
        int int49 = listModelValue45.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList50 = listModelValue45.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList51 = modelNode39.asPropertyList(propertyList50);
        modelNode19.setNoCopy(modelNode39);
        org.jboss.dmr.ModelNode modelNode53 = modelNode9.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode19);
        org.jboss.dmr.ModelNode modelNode55 = modelNode19.set(false);
        org.jboss.dmr.LongModelValue longModelValue57 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str58 = longModelValue57.asString();
        byte[] byteArray59 = longModelValue57.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue60 = new org.jboss.dmr.BytesModelValue(byteArray59);
        java.lang.String str61 = bytesModelValue60.asString();
        int int62 = bytesModelValue60.asInt();
        long long64 = bytesModelValue60.asLong((long) (short) 1);
        long long65 = bytesModelValue60.asLong();
        byte[] byteArray66 = bytesModelValue60.asBytes();
        org.jboss.dmr.ModelNode modelNode67 = modelNode19.set(byteArray66);
        org.jboss.dmr.ModelNode modelNode68 = modelNode67.setEmptyList();
        org.jboss.dmr.ModelType modelType69 = modelNode68.getType();
        org.jboss.dmr.BooleanModelValue booleanModelValue71 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long72 = booleanModelValue71.asLong();
        org.jboss.dmr.ValueExpression valueExpression73 = booleanModelValue71.asExpression();
        java.lang.String str74 = valueExpression73.toString();
        org.jboss.dmr.ModelNode modelNode75 = modelNode68.add(valueExpression73);
        boolean boolean76 = doubleModelValue1.equals((java.lang.Object) modelNode75);
        boolean boolean78 = modelNode75.has((int) (short) -1);
        org.jboss.dmr.ModelNode modelNode81 = modelNode75.setExpression("100.0", "Expression \"(\"\" => (\"hi!\" => 0.0))\"");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode83 = modelNode81.add((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNodeList24);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(propertyList30);
        org.junit.Assert.assertNotNull(propertyList31);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNodeList44);
        org.junit.Assert.assertNotNull(modelValue47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(propertyList50);
        org.junit.Assert.assertNotNull(propertyList51);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str61, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertTrue("'" + modelType69 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType69.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(booleanModelValue71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(valueExpression73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Expression \"true\"" + "'", str74, "Expression \"true\"");
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(modelNode81);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory9 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream10 = null;
        org.jboss.dmr.Base64.InputStream inputStream12 = new org.jboss.dmr.Base64.InputStream(inputStream10, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str15 = longModelValue14.asString();
        byte[] byteArray16 = longModelValue14.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue17 = new org.jboss.dmr.BytesModelValue(byteArray16);
        int int20 = inputStream12.read(byteArray16, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream12, (-1));
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory9.newModelReader((java.io.InputStream) inputStream22);
        java.io.InputStream inputStream24 = null;
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream(inputStream24, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream27 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream26);
        byte[] byteArray29 = org.jboss.dmr.Base64.decode("true");
        boolean boolean31 = org.jboss.dmr.Base64.encodeToFile(byteArray29, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int34 = inputStream26.read(byteArray29, (int) 'l', 0);
        org.jboss.dmr.stream.ModelReader modelReader35 = modelStreamFactory9.newModelReader((java.io.InputStream) inputStream26);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory37 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream38 = null;
        org.jboss.dmr.Base64.InputStream inputStream40 = new org.jboss.dmr.Base64.InputStream(inputStream38, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream41 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream40);
        org.jboss.dmr.stream.ModelReader modelReader42 = modelStreamFactory37.newModelReader((java.io.InputStream) inputStream41);
        java.io.OutputStream outputStream43 = null;
        org.jboss.dmr.Base64.OutputStream outputStream44 = new org.jboss.dmr.Base64.OutputStream(outputStream43);
        org.jboss.dmr.Base64.OutputStream outputStream45 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream44);
        outputStream44.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter48 = modelStreamFactory37.newModelWriter((java.io.OutputStream) outputStream44);
        outputStream44.write(2);
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelStreamFactory9.newModelWriter((java.io.OutputStream) outputStream44);
        boolean boolean52 = stringModelValue1.equals((java.lang.Object) modelWriter51);
        org.jboss.dmr.stream.ModelWriter modelWriter54 = modelWriter51.writeString("H4sIAAAAAAAAAPv/HwIAHN9EIQgAAAA=");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter55 = modelWriter51.writePropertyEnd();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(modelReader35);
        org.junit.Assert.assertNotNull(modelStreamFactory37);
        org.junit.Assert.assertNotNull(modelReader42);
        org.junit.Assert.assertNotNull(modelWriter48);
        org.junit.Assert.assertNotNull(modelWriter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(modelWriter54);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        java.math.BigDecimal bigDecimal5 = booleanModelValue1.asBigDecimal();
        org.jboss.dmr.ModelValue modelValue6 = booleanModelValue1.protect();
        org.jboss.dmr.ValueExpression valueExpression7 = booleanModelValue1.asExpression();
        org.jboss.dmr.ValueExpression valueExpression8 = booleanModelValue1.asExpression();
        java.lang.String str9 = booleanModelValue1.asString();
        boolean boolean11 = booleanModelValue1.asBoolean(true);
        org.jboss.dmr.ModelType modelType12 = booleanModelValue1.getType();
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "false" + "'", str9, "false");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + modelType12 + "' != '" + org.jboss.dmr.ModelType.BOOLEAN + "'", modelType12.equals(org.jboss.dmr.ModelType.BOOLEAN));
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.math.BigInteger bigInteger16 = bytesModelValue12.asBigInteger();
        java.lang.String str17 = bytesModelValue12.asString();
        long long19 = bytesModelValue12.asLong((long) (short) 0);
        java.math.BigInteger bigInteger20 = bytesModelValue12.asBigInteger();
        double double21 = bytesModelValue12.asDouble();
        java.io.OutputStream outputStream22 = null;
        org.jboss.dmr.Base64.OutputStream outputStream23 = new org.jboss.dmr.Base64.OutputStream(outputStream22);
        outputStream23.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream25 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream23);
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream25);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue31 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger32 = booleanModelValue31.asBigInteger();
        byte[] byteArray33 = booleanModelValue31.asBytes();
        org.jboss.dmr.ModelNode modelNode34 = modelNode28.set("expression \"hi!\"", byteArray33);
        outputStream25.write(byteArray33);
        org.jboss.dmr.BytesModelValue bytesModelValue36 = new org.jboss.dmr.BytesModelValue(byteArray33);
        org.jboss.dmr.LongModelValue longModelValue38 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str39 = longModelValue38.asString();
        byte[] byteArray40 = longModelValue38.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue41 = new org.jboss.dmr.BytesModelValue(byteArray40);
        java.lang.String str42 = bytesModelValue41.asString();
        int int43 = bytesModelValue41.asInt();
        byte[] byteArray44 = bytesModelValue41.asBytes();
        boolean boolean45 = bytesModelValue36.equals((java.lang.Object) byteArray44);
        java.math.BigInteger bigInteger46 = bytesModelValue36.asBigInteger();
        boolean boolean47 = bytesModelValue12.equals(bytesModelValue36);
        org.jboss.dmr.LongModelValue longModelValue49 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str50 = longModelValue49.asString();
        byte[] byteArray51 = longModelValue49.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue52 = new org.jboss.dmr.BytesModelValue(byteArray51);
        java.lang.String str53 = bytesModelValue52.asString();
        int int54 = bytesModelValue52.asInt();
        int int55 = bytesModelValue52.asInt();
        org.jboss.dmr.LongModelValue longModelValue57 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str58 = longModelValue57.asString();
        byte[] byteArray59 = longModelValue57.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue60 = new org.jboss.dmr.BytesModelValue(byteArray59);
        double double61 = bytesModelValue60.asDouble();
        boolean boolean62 = bytesModelValue52.equals(bytesModelValue60);
        byte[] byteArray63 = bytesModelValue60.asBytes();
        long long65 = bytesModelValue60.asLong((long) (short) 100);
        boolean boolean66 = bytesModelValue12.equals(bytesModelValue60);
        int int68 = bytesModelValue60.asInt(1);
        double double70 = bytesModelValue60.asDouble((double) 's');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str17, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertNotNull(booleanModelValue31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str42, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str53, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4.9E-324d + "'", double61 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 4.9E-324d + "'", double70 == 4.9E-324d);
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isUndefined();
        boolean boolean19 = modelReader15.isBytes();
        boolean boolean20 = modelReader15.isInt();
        boolean boolean21 = modelReader15.isListEnd();
        boolean boolean22 = modelReader15.isString();
        boolean boolean23 = modelReader15.isDouble();
        boolean boolean24 = modelReader15.isDouble();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue15 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray16 = intModelValue15.asBytes();
        int int18 = intModelValue15.asInt(0);
        java.math.BigInteger bigInteger19 = intModelValue15.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter20 = modelWriter13.writeBigInteger(bigInteger19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long23 = modelNode22.asLong();
        org.jboss.dmr.ValueExpression valueExpression24 = modelNode22.asExpression();
        java.math.BigDecimal bigDecimal25 = valueExpression24.resolveBigDecimal();
        java.lang.String str26 = valueExpression24.getExpressionString();
        java.math.BigDecimal bigDecimal27 = valueExpression24.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue28 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal27);
        boolean boolean29 = bigDecimalModelValue28.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression30 = bigDecimalModelValue28.asExpression();
        int int31 = bigDecimalModelValue28.asInt();
        long long32 = bigDecimalModelValue28.asLong();
        double double33 = bigDecimalModelValue28.asDouble();
        java.math.BigInteger bigInteger34 = bigDecimalModelValue28.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter35 = modelWriter20.writeBigInteger(bigInteger34);
        org.jboss.dmr.LongModelValue longModelValue37 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str38 = longModelValue37.asString();
        byte[] byteArray39 = longModelValue37.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue40 = new org.jboss.dmr.BytesModelValue(byteArray39);
        java.math.BigInteger bigInteger41 = bytesModelValue40.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter42 = modelWriter20.writeBigInteger(bigInteger41);
        org.jboss.dmr.LongModelValue longModelValue44 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double46 = longModelValue44.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue48 = new org.jboss.dmr.LongModelValue((-1L));
        long long50 = longModelValue48.asLong((long) (byte) -1);
        byte[] byteArray51 = longModelValue48.asBytes();
        boolean boolean52 = longModelValue44.equals(longModelValue48);
        org.jboss.dmr.LongModelValue longModelValue54 = new org.jboss.dmr.LongModelValue(1L);
        long long56 = longModelValue54.asLong((long) (short) 0);
        java.math.BigInteger bigInteger57 = longModelValue54.asBigInteger();
        boolean boolean58 = longModelValue48.equals(longModelValue54);
        java.lang.String str59 = longModelValue54.asString();
        org.jboss.dmr.ModelValue modelValue60 = longModelValue54.copy();
        byte[] byteArray61 = longModelValue54.asBytes();
        org.jboss.dmr.stream.ModelWriter modelWriter62 = modelWriter42.writeBytes(byteArray61);
        org.jboss.dmr.stream.ModelWriter modelWriter63 = modelWriter42.writeObjectStart();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(modelWriter20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1.0" + "'", str26, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(modelWriter35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(modelWriter42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(modelValue60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelWriter62);
        org.junit.Assert.assertNotNull(modelWriter63);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        long long7 = listModelValue5.asLong();
        java.util.List<org.jboss.dmr.Property> propertyList8 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode9 = listModelValue5.asObject();
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode12 = listModelValue5.requireChild((int) 'l');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [108]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(propertyList8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue10);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int3 = doubleModelValue1.asInt((int) 'l');
        java.math.BigDecimal bigDecimal4 = doubleModelValue1.asBigDecimal();
        byte[] byteArray5 = doubleModelValue1.asBytes();
        double double7 = doubleModelValue1.asDouble(1.0d);
        java.lang.String str8 = doubleModelValue1.asString();
        byte[] byteArray9 = doubleModelValue1.asBytes();
        java.lang.String str10 = org.jboss.dmr.Base64.encodeBytes(byteArray9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10.0" + "'", str8, "10.0");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QCQAAAAAAAA=" + "'", str10, "QCQAAAAAAAA=");
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double3 = longModelValue1.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        byte[] byteArray8 = longModelValue5.asBytes();
        boolean boolean9 = longModelValue1.equals(longModelValue5);
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        long long13 = longModelValue11.asLong((long) (short) 0);
        java.math.BigInteger bigInteger14 = longModelValue11.asBigInteger();
        boolean boolean15 = longModelValue5.equals(longModelValue11);
        java.lang.String str16 = longModelValue11.asString();
        java.math.BigInteger bigInteger17 = longModelValue11.asBigInteger();
        boolean boolean19 = longModelValue11.asBoolean(false);
        java.math.BigDecimal bigDecimal20 = longModelValue11.asBigDecimal();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(bigDecimal20);
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode6 = modelNode0.add((double) 100);
        org.jboss.dmr.BooleanModelValue booleanModelValue8 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long9 = booleanModelValue8.asLong();
        org.jboss.dmr.ValueExpression valueExpression10 = booleanModelValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue11 = new org.jboss.dmr.ExpressionValue(valueExpression10);
        java.lang.String str12 = valueExpression10.getExpressionString();
        org.jboss.dmr.ModelNode modelNode13 = modelNode6.set(valueExpression10);
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(booleanModelValue8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(valueExpression10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "true" + "'", str12, "true");
        org.junit.Assert.assertNotNull(modelNode13);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        double double7 = intModelValue1.asDouble(0.0d);
        double double8 = intModelValue1.asDouble();
        boolean boolean9 = intModelValue1.asBoolean();
        double double10 = intModelValue1.asDouble();
        byte[] byteArray11 = intModelValue1.asBytes();
        java.lang.String str12 = org.jboss.dmr.Base64.encodeBytes(byteArray11);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 32.0d + "'", double7 == 32.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 32.0d + "'", double8 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 32.0d + "'", double10 == 32.0d);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 32]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAIA==" + "'", str12, "AAAAIA==");
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(false);
        int int3 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set(52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue12);
        org.jboss.dmr.ModelValue modelValue14 = listModelValue12.resolve();
        int int16 = listModelValue12.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList17 = listModelValue12.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue12.asPropertyList();
        org.jboss.dmr.ModelNode modelNode20 = listModelValue12.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.resolve();
        org.jboss.dmr.ModelNode modelNode22 = modelNode5.set("EXPRESSION_VALUE", modelNode21);
        org.jboss.dmr.ModelNode modelNode25 = modelNode5.set("1", (double) 1.0f);
        org.jboss.dmr.ModelNode modelNode27 = org.jboss.dmr.ModelNode.fromJSONString("1.0");
        org.jboss.dmr.ModelNode modelNode28 = modelNode27.setEmptyObject();
        modelNode25.setNoCopy(modelNode27);
        org.jboss.dmr.StringModelValue stringModelValue31 = new org.jboss.dmr.StringModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory33 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream34 = null;
        org.jboss.dmr.Base64.InputStream inputStream36 = new org.jboss.dmr.Base64.InputStream(inputStream34, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue38 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str39 = longModelValue38.asString();
        byte[] byteArray40 = longModelValue38.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue41 = new org.jboss.dmr.BytesModelValue(byteArray40);
        int int44 = inputStream36.read(byteArray40, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream46 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream36, (-1));
        org.jboss.dmr.stream.ModelReader modelReader47 = modelStreamFactory33.newModelReader((java.io.InputStream) inputStream46);
        java.io.InputStream inputStream48 = null;
        org.jboss.dmr.Base64.InputStream inputStream50 = new org.jboss.dmr.Base64.InputStream(inputStream48, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream51 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream50);
        org.jboss.dmr.Base64.InputStream inputStream52 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream50);
        org.jboss.dmr.stream.ModelReader modelReader53 = modelStreamFactory33.newModelReader((java.io.InputStream) inputStream50);
        java.io.InputStream inputStream54 = null;
        org.jboss.dmr.Base64.InputStream inputStream56 = new org.jboss.dmr.Base64.InputStream(inputStream54, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream57 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream56);
        org.jboss.dmr.stream.ModelReader modelReader58 = modelStreamFactory33.newModelReader((java.io.InputStream) inputStream56);
        java.io.OutputStream outputStream59 = null;
        org.jboss.dmr.Base64.OutputStream outputStream60 = new org.jboss.dmr.Base64.OutputStream(outputStream59);
        outputStream60.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream62 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream60);
        org.jboss.dmr.Base64.OutputStream outputStream63 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream62);
        outputStream62.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream65 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream62);
        org.jboss.dmr.Base64.OutputStream outputStream66 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream62);
        org.jboss.dmr.stream.ModelWriter modelWriter67 = modelStreamFactory33.newModelWriter((java.io.OutputStream) outputStream66);
        stringModelValue31.write(modelWriter67);
        org.jboss.dmr.ValueExpression valueExpression69 = stringModelValue31.asExpression();
        org.jboss.dmr.DoubleModelValue doubleModelValue71 = new org.jboss.dmr.DoubleModelValue((double) 100);
        org.jboss.dmr.ModelNode modelNode72 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode75 = modelNode72.setExpression("hi!", "hi!");
        java.lang.String str76 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode72);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList77 = modelNode72.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode79 = modelNode72.set((double) 0);
        boolean boolean80 = modelNode72.isProtected();
        java.math.BigInteger bigInteger81 = modelNode72.asBigIntegerOrNull();
        boolean boolean82 = doubleModelValue71.equals((java.lang.Object) modelNode72);
        java.lang.String str83 = doubleModelValue71.toString();
        boolean boolean84 = valueExpression69.equals((java.lang.Object) doubleModelValue71);
        org.jboss.dmr.ModelNode modelNode85 = modelNode27.set(valueExpression69);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = modelNode85.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelStreamFactory33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(modelReader47);
        org.junit.Assert.assertNotNull(modelReader53);
        org.junit.Assert.assertNotNull(modelReader58);
        org.junit.Assert.assertNotNull(modelWriter67);
        org.junit.Assert.assertNotNull(valueExpression69);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str76, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList77);
        org.junit.Assert.assertNotNull(modelNode79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(bigInteger81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "100.0" + "'", str83, "100.0");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(modelNode85);
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode6 = modelNode0.add((double) 100);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode11 = modelNode10.setEmptyList();
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.asObject();
        org.jboss.dmr.ModelNode modelNode14 = modelNode12.get("Expression \"true\"");
        boolean boolean15 = modelNode6.equals(modelNode12);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode(modelType16);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        org.jboss.dmr.ModelNode modelNode24 = modelNode17.set(property23);
        org.jboss.dmr.ModelNode modelNode25 = property23.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue26 = new org.jboss.dmr.PropertyModelValue(property23);
        org.jboss.dmr.ModelValue modelValue27 = propertyModelValue26.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = propertyModelValue26.asList();
        org.jboss.dmr.ModelNode modelNode29 = modelNode6.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode6.set(false);
        org.jboss.dmr.LongModelValue longModelValue34 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str35 = longModelValue34.asString();
        byte[] byteArray36 = longModelValue34.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue37 = new org.jboss.dmr.BytesModelValue(byteArray36);
        double double38 = bytesModelValue37.asDouble();
        java.math.BigDecimal bigDecimal39 = bytesModelValue37.asBigDecimal();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode40 = modelNode6.add("10.0", bigDecimal39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType16.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4.9E-324d + "'", double38 == 4.9E-324d);
        org.junit.Assert.assertNotNull(bigDecimal39);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwAGI=");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression4 = stringModelValue3.asExpression();
        boolean boolean6 = stringModelValue3.equals((java.lang.Object) (-1.0d));
        boolean boolean7 = stringModelValue1.equals(stringModelValue3);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType8 = stringModelValue3.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.jboss.dmr.ModelType.(\"\" => (\"hi!\" => 0.0))");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        org.jboss.dmr.Base64.OutputStream outputStream2 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream2);
        outputStream3.resumeEncoding();
        outputStream3.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream7 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3, (int) 'b');
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        java.lang.String str5 = doubleModelValue1.asString();
        int int6 = doubleModelValue1.asInt();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "10.0" + "'", str5, "10.0");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'I');
        long long3 = modelNode1.asLong((long) 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 73L + "'", long3 == 73L);
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.jboss.dmr.Base64.encodeToFile(byteArray0, "\"QA==\"");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        byte[] byteArray1 = org.jboss.dmr.Base64.decode("true");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(byteArray1);
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean7 = expressionValue4.equals(expressionValue6);
        org.jboss.dmr.ExpressionValue expressionValue9 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue11 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean12 = expressionValue9.equals(expressionValue11);
        boolean boolean13 = expressionValue4.equals(expressionValue11);
        org.jboss.dmr.ModelValue modelValue14 = expressionValue4.resolve();
        java.lang.String str15 = expressionValue4.asString();
        org.jboss.dmr.ModelValue modelValue16 = expressionValue4.resolve();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory18 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream19 = null;
        org.jboss.dmr.Base64.InputStream inputStream21 = new org.jboss.dmr.Base64.InputStream(inputStream19, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream22 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream21);
        org.jboss.dmr.stream.ModelReader modelReader23 = modelStreamFactory18.newModelReader((java.io.InputStream) inputStream22);
        java.io.OutputStream outputStream24 = null;
        org.jboss.dmr.Base64.OutputStream outputStream25 = new org.jboss.dmr.Base64.OutputStream(outputStream24);
        org.jboss.dmr.Base64.OutputStream outputStream26 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream25);
        outputStream25.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter29 = modelStreamFactory18.newModelWriter((java.io.OutputStream) outputStream25);
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter29.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter32 = modelWriter30.writeInt((int) (byte) 10);
        expressionValue4.write(modelWriter30);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode38 = modelNode35.set("hi!", 0.0d);
        org.jboss.dmr.Property property39 = new org.jboss.dmr.Property("", modelNode38);
        java.lang.String[] strArray40 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode41 = modelNode38.get(strArray40);
        org.jboss.dmr.ModelNode modelNode42 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int43 = modelNode42.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode44 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode47 = modelNode44.setExpression("hi!", "hi!");
        java.lang.String str48 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode44);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList49 = modelNode44.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode50 = modelNode42.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList49);
        org.jboss.dmr.ModelNode modelNode51 = modelNode41.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList49);
        org.jboss.dmr.LongModelValue longModelValue53 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str54 = longModelValue53.asString();
        double double56 = longModelValue53.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression57 = longModelValue53.asExpression();
        byte[] byteArray58 = longModelValue53.asBytes();
        org.jboss.dmr.ModelNode modelNode59 = modelNode51.add(byteArray58);
        org.jboss.dmr.stream.ModelWriter modelWriter60 = modelWriter30.writeBytes(byteArray58);
        org.jboss.dmr.stream.ModelWriter modelWriter62 = modelWriter60.writeExpression("[]");
        modelNode2.write(modelWriter62);
        org.jboss.dmr.stream.ModelWriter modelWriter64 = modelWriter62.writeListStart();
        org.jboss.dmr.DoubleModelValue doubleModelValue66 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long67 = doubleModelValue66.asLong();
        long long69 = doubleModelValue66.asLong((long) 32);
        org.jboss.dmr.ModelValue modelValue70 = doubleModelValue66.protect();
        byte[] byteArray71 = doubleModelValue66.asBytes();
        java.lang.String str72 = org.jboss.dmr.Base64.encodeBytes(byteArray71);
        org.jboss.dmr.stream.ModelWriter modelWriter73 = modelWriter64.writeBytes(byteArray71);
        org.jboss.dmr.BooleanModelValue booleanModelValue74 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double75 = booleanModelValue74.asDouble();
        org.jboss.dmr.ModelValue modelValue76 = booleanModelValue74.copy();
        java.math.BigInteger bigInteger77 = booleanModelValue74.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue78 = new org.jboss.dmr.BigIntegerModelValue(bigInteger77);
        java.lang.String str79 = bigIntegerModelValue78.asString();
        long long81 = bigIntegerModelValue78.asLong(32L);
        double double82 = bigIntegerModelValue78.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue83 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double84 = booleanModelValue83.asDouble();
        org.jboss.dmr.ModelValue modelValue85 = booleanModelValue83.copy();
        java.math.BigInteger bigInteger86 = booleanModelValue83.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue87 = new org.jboss.dmr.BigIntegerModelValue(bigInteger86);
        double double89 = bigIntegerModelValue87.asDouble((double) 'b');
        boolean boolean90 = bigIntegerModelValue78.equals(bigIntegerModelValue87);
        boolean boolean92 = bigIntegerModelValue87.equals((java.lang.Object) "35");
        java.math.BigDecimal bigDecimal93 = bigIntegerModelValue87.asBigDecimal();
        org.jboss.dmr.stream.ModelWriter modelWriter94 = modelWriter73.writeBigDecimal(bigDecimal93);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertNotNull(modelStreamFactory18);
        org.junit.Assert.assertNotNull(modelReader23);
        org.junit.Assert.assertNotNull(modelWriter29);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(modelWriter32);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str48, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelWriter60);
        org.junit.Assert.assertNotNull(modelWriter62);
        org.junit.Assert.assertNotNull(modelWriter64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10L + "'", long67 == 10L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10L + "'", long69 == 10L);
        org.junit.Assert.assertNotNull(modelValue70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "QCQAAAAAAAA=" + "'", str72, "QCQAAAAAAAA=");
        org.junit.Assert.assertNotNull(modelWriter73);
        org.junit.Assert.assertNotNull(booleanModelValue74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue76);
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue85);
        org.junit.Assert.assertNotNull(bigInteger86);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0d + "'", double89 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertNotNull(modelWriter94);
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(bigInteger3);
        boolean boolean6 = modelNode5.isProtected();
        org.jboss.dmr.ModelNode modelNode7 = modelNode5.clone();
        double double8 = modelNode5.asDouble();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode10 = modelNode5.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isUndefined();
        boolean boolean19 = modelReader15.isBytes();
        boolean boolean20 = modelReader15.isPropertyEnd();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        org.jboss.dmr.ModelType modelType1 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode(modelType1);
        java.lang.Boolean boolean3 = modelNode2.asBooleanOrNull();
        org.jboss.dmr.ModelType modelType4 = modelNode2.getType();
        org.jboss.dmr.PropertyModelValue propertyModelValue5 = new org.jboss.dmr.PropertyModelValue("AAAAIA==", modelNode2);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode(false);
        int int9 = modelNode7.asInt(2);
        org.jboss.dmr.ModelNode modelNode11 = modelNode7.set(52);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode16 = modelNode13.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = modelNode16.asList();
        org.jboss.dmr.ListModelValue listModelValue18 = new org.jboss.dmr.ListModelValue(modelNodeList17);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue18);
        org.jboss.dmr.ModelValue modelValue20 = listModelValue18.resolve();
        int int22 = listModelValue18.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList23 = listModelValue18.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList24 = listModelValue18.asPropertyList();
        org.jboss.dmr.ModelNode modelNode26 = listModelValue18.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode27 = modelNode26.resolve();
        org.jboss.dmr.ModelNode modelNode28 = modelNode11.set("EXPRESSION_VALUE", modelNode27);
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set(true);
        org.jboss.dmr.ModelNode modelNode31 = modelNode30.resolve();
        java.lang.String str32 = modelNode30.asString();
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.clear();
        boolean boolean34 = modelNode2.equals(modelNode30);
        org.junit.Assert.assertTrue("'" + modelType1 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType1.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertTrue("'" + modelType4 + "' != '" + org.jboss.dmr.ModelType.TYPE + "'", modelType4.equals(org.jboss.dmr.ModelType.TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(propertyList23);
        org.junit.Assert.assertNotNull(propertyList24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "true" + "'", str32, "true");
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        java.lang.String str2 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        org.jboss.dmr.ModelType modelType4 = org.jboss.dmr.ModelType.LONG;
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.set("rO0ABXNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5n\nLk51bWJlcoaslR0LlOCLAgAAeHAAAABk", modelType4);
        java.lang.String str7 = modelNode0.toJSONString(false);
        org.jboss.dmr.ModelNode modelNode10 = modelNode0.setExpression("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }", "H4sIAAAAAAAAAFvzloG1uIhBICuxLFEvJzEvXc8lvzQpJ7Vh8yEvzezfLEwMjC4MrGWJOaWpFSjK/Epzk1KL2tZMleWe8qCbiYGhosD+AwMYAAAkVvhKVAAAAA==");
        java.lang.String str11 = modelNode10.toString();
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4" + "'", str2, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.junit.Assert.assertTrue("'" + modelType4 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType4.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{\n    \"rO0ABXNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5n\\nLk51bWJlcoaslR0LlOCLAgAAeHAAAABk\" : {\n        \"TYPE_MODEL_VALUE\" : \"LONG\"\n    }\n}" + "'", str7, "{\n    \"rO0ABXNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5n\\nLk51bWJlcoaslR0LlOCLAgAAeHAAAABk\" : {\n        \"TYPE_MODEL_VALUE\" : \"LONG\"\n    }\n}");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\" => expression \"H4sIAAAAAAAAAFvzloG1uIhBICuxLFEvJzEvXc8lvzQpJ7Vh8yEvzezfLEwMjC4MrGWJOaWpFSjK/Epzk1KL2tZMleWe8qCbiYGhosD+AwMYAAAkVvhKVAAAAA==\")" + "'", str11, "(\"bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }\" => expression \"H4sIAAAAAAAAAFvzloG1uIhBICuxLFEvJzEvXc8lvzQpJ7Vh8yEvzezfLEwMjC4MrGWJOaWpFSjK/Epzk1KL2tZMleWe8qCbiYGhosD+AwMYAAAkVvhKVAAAAA==\")");
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode3 = modelNode2.asObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode5 = modelNode3.require("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BW8AAAAAeA==");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3BW8AAAAAeA==' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode3);
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray2 = intModelValue1.asBytes();
        int int4 = intModelValue1.asInt(0);
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        org.jboss.dmr.ModelValue modelValue6 = intModelValue1.clone();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(modelValue6);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set(100);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((int) '#');
        org.jboss.dmr.ModelNode modelNode13 = modelNode0.setNoCopy("EXPRESSION_VALUE", modelNode12);
        org.jboss.dmr.ModelNode modelNode14 = modelNode13.resolve();
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode19 = modelNode18.setEmptyList();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long22 = modelNode21.asLong();
        org.jboss.dmr.ValueExpression valueExpression23 = modelNode21.asExpression();
        java.math.BigDecimal bigDecimal24 = valueExpression23.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode18.set(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode27 = modelNode13.set(bigDecimal24);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        org.jboss.dmr.Property property33 = new org.jboss.dmr.Property("", modelNode32);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode35 = modelNode32.get(strArray34);
        org.jboss.dmr.ModelNode modelNode37 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int38 = modelNode37.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode39 = modelNode37.clone();
        org.jboss.dmr.ModelNode modelNode40 = modelNode35.setNoCopy("35", modelNode39);
        org.jboss.dmr.ModelType modelType41 = modelNode39.getType();
        org.jboss.dmr.ModelNode modelNode44 = modelNode39.set("Expression \"true\"", "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.jboss.dmr.ModelNode modelNode45 = modelNode27.set(modelNode44);
        boolean boolean47 = modelNode27.has((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode50 = modelNode27.add("{\n    \"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" : {\n        \"hi!\" : 0.0\n    }\n}", (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertTrue("'" + modelType41 + "' != '" + org.jboss.dmr.ModelType.UNDEFINED + "'", modelType41.equals(org.jboss.dmr.ModelType.UNDEFINED));
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNode45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ObjectModelValue objectModelValue4 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode5 = objectModelValue4.asObject();
        org.jboss.dmr.ObjectModelValue objectModelValue6 = null;
        boolean boolean7 = objectModelValue4.equals(objectModelValue6);
        boolean boolean8 = objectModelValue0.equals(objectModelValue6);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue13 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger14 = booleanModelValue13.asBigInteger();
        byte[] byteArray15 = booleanModelValue13.asBytes();
        org.jboss.dmr.ModelNode modelNode16 = modelNode10.set("expression \"hi!\"", byteArray15);
        org.jboss.dmr.ModelNode modelNode17 = modelNode16.clear();
        int int19 = modelNode16.asInt((int) 'p');
        java.lang.Boolean boolean20 = modelNode16.asBooleanOrNull();
        boolean boolean21 = objectModelValue0.equals((java.lang.Object) modelNode16);
        double double23 = modelNode16.asDouble((double) 0.0f);
        org.jboss.dmr.ModelNode modelNode24 = modelNode16.clear();
        java.io.DataOutputStream dataOutputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode24.writeExternal(dataOutputStream25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanModelValue13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 112 + "'", int19 == 112);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(modelNode24);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isString();
        boolean boolean17 = modelReader15.isObjectEnd();
        boolean boolean18 = modelReader15.isString();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        double double4 = intModelValue1.asDouble((double) 2);
        java.math.BigDecimal bigDecimal5 = intModelValue1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        long long7 = bigDecimalModelValue6.asLong();
        long long8 = bigDecimalModelValue6.asLong();
        int int10 = bigDecimalModelValue6.asInt((-1));
        boolean boolean11 = bigDecimalModelValue6.asBoolean();
        java.lang.String str12 = bigDecimalModelValue6.asString();
        java.lang.String str13 = bigDecimalModelValue6.asString();
        double double15 = bigDecimalModelValue6.asDouble((double) (byte) 10);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 32.0d + "'", double4 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32" + "'", str13, "32");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 32.0d + "'", double15 == 32.0d);
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = objectModelValue7.asList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        org.jboss.dmr.ModelValue modelValue17 = objectModelValue15.protect();
        long long18 = objectModelValue15.asLong();
        boolean boolean20 = objectModelValue15.has("(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")");
        boolean boolean21 = objectModelValue15.asBoolean();
        boolean boolean22 = objectModelValue7.equals(objectModelValue15);
        org.jboss.dmr.ModelValue modelValue24 = objectModelValue15.copy(false);
        int int26 = objectModelValue15.asInt(97);
        int int28 = objectModelValue15.asInt((int) (byte) -1);
        java.lang.String str29 = objectModelValue15.asString();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue7.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = objectModelValue7.asList();
        org.jboss.dmr.ObjectModelValue objectModelValue15 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue15.asObject();
        org.jboss.dmr.ModelValue modelValue17 = objectModelValue15.protect();
        long long18 = objectModelValue15.asLong();
        boolean boolean20 = objectModelValue15.has("(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")");
        boolean boolean21 = objectModelValue15.asBoolean();
        boolean boolean22 = objectModelValue7.equals(objectModelValue15);
        org.jboss.dmr.ModelValue modelValue24 = objectModelValue15.copy(false);
        int int26 = objectModelValue15.asInt(52);
        org.jboss.dmr.ModelValue modelValue27 = objectModelValue15.copy();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(modelValue27);
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int8 = bytesModelValue4.asInt((int) 'a');
        double double10 = bytesModelValue4.asDouble((double) '#');
        long long12 = bytesModelValue4.asLong((long) 'p');
        byte[] byteArray13 = bytesModelValue4.asBytes();
        java.math.BigDecimal bigDecimal14 = bytesModelValue4.asBigDecimal();
        java.math.BigInteger bigInteger15 = bytesModelValue4.asBigInteger();
        java.io.DataOutput dataOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            bytesModelValue4.writeExternal(dataOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.9E-324d + "'", double10 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigInteger15);
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str2 = intModelValue1.asString();
        long long3 = intModelValue1.asLong();
        org.jboss.dmr.ModelValue modelValue4 = intModelValue1.protect();
        int int5 = intModelValue1.asInt();
        int int6 = intModelValue1.asInt();
        long long7 = intModelValue1.asLong();
        long long9 = intModelValue1.asLong(4413000076175092009L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        boolean boolean11 = intModelValue5.asBoolean(true);
        org.jboss.dmr.ValueExpression valueExpression12 = intModelValue5.asExpression();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType13 = intModelValue5.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(valueExpression12);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        java.math.BigInteger bigInteger6 = bigIntegerModelValue4.asBigInteger();
        java.math.BigInteger bigInteger7 = bigIntegerModelValue4.asBigInteger();
        double double8 = bigIntegerModelValue4.asDouble();
        int int10 = bigIntegerModelValue4.asInt(32);
        double double11 = bigIntegerModelValue4.asDouble();
        java.math.BigDecimal bigDecimal12 = bigIntegerModelValue4.asBigDecimal();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(bigDecimal12);
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) 100);
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.setExpression("hi!", "hi!");
        java.lang.String str6 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode2);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList7 = modelNode2.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set((double) 0);
        boolean boolean10 = modelNode2.isProtected();
        java.math.BigInteger bigInteger11 = modelNode2.asBigIntegerOrNull();
        boolean boolean12 = doubleModelValue1.equals((java.lang.Object) modelNode2);
        java.lang.String str13 = doubleModelValue1.toString();
        org.jboss.dmr.ModelType modelType14 = doubleModelValue1.getType();
        org.jboss.dmr.TypeModelValue typeModelValue15 = org.jboss.dmr.TypeModelValue.of(modelType14);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode17 = typeModelValue15.getChild((int) 'd');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str6, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100.0" + "'", str13, "100.0");
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType14.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertNotNull(typeModelValue15);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.math.BigInteger bigInteger16 = bytesModelValue12.asBigInteger();
        int int18 = bytesModelValue12.asInt((-1));
        org.jboss.dmr.ModelValue modelValue19 = bytesModelValue12.resolve();
        int int21 = bytesModelValue12.asInt(0);
        long long23 = bytesModelValue12.asLong(0L);
        double double25 = bytesModelValue12.asDouble(2.737053247814936E-153d);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(modelValue19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4.9E-324d + "'", double25 == 4.9E-324d);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("PROPERTY");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        java.io.DataOutput dataOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue1.writeExternal(dataOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ObjectModelValue objectModelValue2 = null;
        boolean boolean3 = objectModelValue0.equals(objectModelValue2);
        java.lang.String str4 = objectModelValue0.asString();
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.copy(false);
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue0.copy();
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue0.getChild("\"(\\\"hi!\\\" => 0.0)\"");
        long long10 = objectModelValue0.asLong();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        java.math.BigDecimal bigDecimal11 = bigDecimalModelValue7.asBigDecimal();
        java.io.PrintWriter printWriter12 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue7.format(printWriter12, 97, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(bigDecimal11);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ValueExpression valueExpression11 = expressionValue8.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression14 = expressionValue13.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue16 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str17 = expressionValue16.toString();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        org.jboss.dmr.Property property23 = new org.jboss.dmr.Property("", modelNode22);
        boolean boolean24 = expressionValue16.equals((java.lang.Object) property23);
        boolean boolean25 = expressionValue13.equals(expressionValue16);
        boolean boolean26 = expressionValue8.equals((java.lang.Object) boolean25);
        boolean boolean28 = expressionValue8.equals((java.lang.Object) 8);
        org.jboss.dmr.ExpressionValue expressionValue30 = new org.jboss.dmr.ExpressionValue("[{ \"hi!\" : 0.0 }]");
        boolean boolean31 = expressionValue8.equals(expressionValue30);
        java.io.PrintWriter printWriter32 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue8.format(printWriter32, (int) 'I', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "expression \"hi!\"" + "'", str17, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.hasNext();
        boolean boolean22 = modelReader15.isUndefined();
        boolean boolean23 = modelReader15.isType();
        boolean boolean24 = modelReader15.isLong();
        boolean boolean25 = modelReader15.isPropertyStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelEvent modelEvent26 = modelReader15.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        boolean boolean2 = booleanModelValue0.asBoolean();
        double double4 = booleanModelValue0.asDouble((double) 35);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        java.math.BigInteger bigInteger10 = bigDecimalModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long13 = modelNode12.asLong();
        org.jboss.dmr.ValueExpression valueExpression14 = modelNode12.asExpression();
        java.math.BigDecimal bigDecimal15 = valueExpression14.resolveBigDecimal();
        java.lang.String str16 = valueExpression14.getExpressionString();
        java.math.BigDecimal bigDecimal17 = valueExpression14.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue18 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal17);
        boolean boolean19 = bigDecimalModelValue18.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression20 = bigDecimalModelValue18.asExpression();
        int int21 = bigDecimalModelValue18.asInt();
        long long22 = bigDecimalModelValue18.asLong();
        long long24 = bigDecimalModelValue18.asLong(32L);
        boolean boolean25 = bigDecimalModelValue7.equals(bigDecimalModelValue18);
        double double27 = bigDecimalModelValue7.asDouble((double) (short) -1);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long30 = modelNode29.asLong();
        org.jboss.dmr.ValueExpression valueExpression31 = modelNode29.asExpression();
        java.math.BigDecimal bigDecimal32 = valueExpression31.resolveBigDecimal();
        java.lang.String str33 = valueExpression31.getExpressionString();
        java.math.BigDecimal bigDecimal34 = valueExpression31.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue35 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal34);
        boolean boolean36 = bigDecimalModelValue35.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression37 = bigDecimalModelValue35.asExpression();
        int int38 = bigDecimalModelValue35.asInt();
        long long39 = bigDecimalModelValue35.asLong();
        long long41 = bigDecimalModelValue35.asLong(32L);
        boolean boolean42 = bigDecimalModelValue7.equals(bigDecimalModelValue35);
        java.math.BigInteger bigInteger43 = bigDecimalModelValue35.asBigInteger();
        java.lang.Object obj44 = null;
        boolean boolean45 = bigDecimalModelValue35.equals(obj44);
        double double46 = bigDecimalModelValue35.asDouble();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0" + "'", str16, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(valueExpression20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(valueExpression31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1.0" + "'", str33, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(valueExpression37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        byte[] byteArray6 = intModelValue1.asBytes();
        boolean boolean8 = intModelValue1.has("[1]");
        long long10 = intModelValue1.asLong((long) (byte) 10);
        int int12 = intModelValue1.asInt((int) (short) 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        org.jboss.dmr.ModelType modelType6 = org.jboss.dmr.ModelType.PROPERTY;
        char char7 = modelType6.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue8 = org.jboss.dmr.TypeModelValue.of(modelType6);
        boolean boolean9 = typeModelValue5.equals(typeModelValue8);
        java.lang.String str10 = typeModelValue8.asString();
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        org.jboss.dmr.ModelType modelType14 = org.jboss.dmr.ModelType.PROPERTY;
        char char15 = modelType14.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue16 = org.jboss.dmr.TypeModelValue.of(modelType14);
        boolean boolean17 = typeModelValue13.equals(typeModelValue16);
        java.lang.String str18 = typeModelValue16.asString();
        boolean boolean20 = typeModelValue16.asBoolean(true);
        boolean boolean21 = typeModelValue8.equals(typeModelValue16);
        org.jboss.dmr.ValueExpression valueExpression22 = typeModelValue16.asExpression();
        org.jboss.dmr.ModelType modelType23 = org.jboss.dmr.ModelType.PROPERTY;
        char char24 = modelType23.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue25 = org.jboss.dmr.TypeModelValue.of(modelType23);
        org.jboss.dmr.ModelType modelType26 = org.jboss.dmr.ModelType.PROPERTY;
        char char27 = modelType26.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue28 = org.jboss.dmr.TypeModelValue.of(modelType26);
        boolean boolean29 = typeModelValue25.equals(typeModelValue28);
        boolean boolean30 = typeModelValue16.equals(typeModelValue25);
        org.jboss.dmr.ModelType modelType31 = org.jboss.dmr.ModelType.PROPERTY;
        char char32 = modelType31.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue33 = org.jboss.dmr.TypeModelValue.of(modelType31);
        boolean boolean34 = typeModelValue33.asBoolean();
        boolean boolean35 = typeModelValue16.equals(typeModelValue33);
        org.jboss.dmr.ValueExpression valueExpression36 = typeModelValue33.asExpression();
        boolean boolean37 = typeModelValue2.equals(typeModelValue33);
        org.jboss.dmr.BooleanModelValue booleanModelValue39 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray40 = booleanModelValue39.asBytes();
        java.lang.String str41 = booleanModelValue39.asString();
        int int42 = booleanModelValue39.asInt();
        org.jboss.dmr.ModelType modelType43 = org.jboss.dmr.ModelType.STRING;
        boolean boolean44 = booleanModelValue39.equals((java.lang.Object) modelType43);
        org.jboss.dmr.TypeModelValue typeModelValue45 = org.jboss.dmr.TypeModelValue.of(modelType43);
        org.jboss.dmr.ValueExpression valueExpression46 = typeModelValue45.asExpression();
        boolean boolean47 = typeModelValue2.equals(typeModelValue45);
        java.lang.String str48 = typeModelValue45.asString();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + modelType6 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType6.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + 'p' + "'", char7 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY" + "'", str10, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType14.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'p' + "'", char15 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PROPERTY" + "'", str18, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertTrue("'" + modelType23 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType23.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char24 + "' != '" + 'p' + "'", char24 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue25);
        org.junit.Assert.assertTrue("'" + modelType26 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType26.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + 'p' + "'", char27 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + modelType31 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType31.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + 'p' + "'", char32 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(valueExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(booleanModelValue39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "true" + "'", str41, "true");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + modelType43 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType43.equals(org.jboss.dmr.ModelType.STRING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(typeModelValue45);
        org.junit.Assert.assertNotNull(valueExpression46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "STRING" + "'", str48, "STRING");
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.protect();
        long long3 = objectModelValue0.asLong();
        boolean boolean5 = objectModelValue0.has("(\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\" => expression \"\")");
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.removeChild("rO0ABXNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRM\nZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFn\nbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7/\n///+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAABAXg=");
        org.jboss.dmr.ModelValue modelValue8 = objectModelValue0.protect();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(modelNode7);
        org.junit.Assert.assertNotNull(modelValue8);
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode10 = modelNode0.resolve();
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set((double) 'D');
        org.jboss.dmr.ModelNode modelNode14 = modelNode0.setExpression("H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgnNWT\ngYFBuQIAwPz32jQAAAA=");
        java.lang.String str16 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode14, (int) '#');
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgPCWV\nIdHDpNjTEQbcyqpy8t0NSz0znAJ8LPIjgi2KvJO0TcKdLXJKDLIC/KoscvySkwOCfbPyffKCo0rN\nswLy8lOd8hO90/P8wkO40iPdnEoDPR3LA6qMjbICQUbaVgAAaYrhhZMAAAA=" + "'", str16, "H4sIAAAAAAAAAFvzloG1uIhBPL8oXS8rKb+4WC8lt0jPNz8lNccPSMjoLnSZu7jPnoeBoaKgPCWV\nIdHDpNjTEQbcyqpy8t0NSz0znAJ8LPIjgi2KvJO0TcKdLXJKDLIC/KoscvySkwOCfbPyffKCo0rN\nswLy8lOd8hO90/P8wkO40iPdnEoDPR3LA6qMjbICQUbaVgAAaYrhhZMAAAA=");
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        double double6 = booleanModelValue1.asDouble((double) 1.0f);
        java.math.BigInteger bigInteger7 = booleanModelValue1.asBigInteger();
        int int9 = booleanModelValue1.asInt((int) (short) 1);
        int int11 = booleanModelValue1.asInt(52);
        java.math.BigInteger bigInteger12 = booleanModelValue1.asBigInteger();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode14 = booleanModelValue1.removeChild(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        java.math.BigDecimal bigDecimal5 = booleanModelValue1.asBigDecimal();
        boolean boolean7 = booleanModelValue1.asBoolean(false);
        long long9 = booleanModelValue1.asLong((long) 3);
        boolean boolean11 = booleanModelValue1.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode12 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList16 = modelNode15.asList();
        org.jboss.dmr.ModelNode modelNode19 = modelNode15.setExpression("hi!", "(\"hi!\" => 0.0)");
        org.jboss.dmr.ModelNode modelNode21 = modelNode15.set(10L);
        org.jboss.dmr.ModelType modelType22 = modelNode21.getType();
        java.lang.String str24 = modelNode21.toJSONString(true);
        boolean boolean25 = booleanModelValue1.equals((java.lang.Object) str24);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNodeList16);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertTrue("'" + modelType22 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType22.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "10" + "'", str24, "10");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        java.lang.String str2 = doubleModelValue1.asString();
        long long4 = doubleModelValue1.asLong((long) (short) -1);
        org.jboss.dmr.DoubleModelValue doubleModelValue6 = new org.jboss.dmr.DoubleModelValue((double) 100);
        boolean boolean7 = doubleModelValue1.equals(doubleModelValue6);
        java.math.BigInteger bigInteger8 = doubleModelValue1.asBigInteger();
        int int9 = doubleModelValue1.asInt();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        java.util.Set<java.lang.String> strSet8 = modelNode4.keys();
        org.jboss.dmr.ModelType modelType9 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(modelType9);
        org.jboss.dmr.LongModelValue longModelValue13 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str14 = longModelValue13.asString();
        byte[] byteArray15 = longModelValue13.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue16 = new org.jboss.dmr.BytesModelValue(byteArray15);
        java.lang.String str17 = bytesModelValue16.asString();
        int int18 = bytesModelValue16.asInt();
        long long20 = bytesModelValue16.asLong((long) (short) 1);
        long long21 = bytesModelValue16.asLong();
        java.math.BigDecimal bigDecimal22 = bytesModelValue16.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode23 = modelNode10.set("32", bigDecimal22);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue24 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal22);
        org.jboss.dmr.ModelNode modelNode25 = modelNode4.set(bigDecimal22);
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode(bigDecimal22);
        boolean boolean28 = modelNode26.asBoolean(false);
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.resolve();
        org.jboss.dmr.ModelNode modelNode30 = modelNode26.setEmptyObject();
        // The following exception was thrown during execution in test generation
        try {
            double double32 = modelNode26.asDouble((double) 11975582L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType9.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str17, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue2 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger3 = booleanModelValue2.asBigInteger();
        org.jboss.dmr.ModelNode modelNode4 = modelNode0.add(bigInteger3);
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode(bigInteger3);
        boolean boolean6 = modelNode5.isProtected();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode8 = modelNode5.require("rO0ABXNyABRqYXZhLm1hdGguQmlnRGVjaW1hbFTHFVf5gShPAwACSQAFc2NhbGVMAAZpbnRWYWx0\nABZMamF2YS9tYXRoL0JpZ0ludGVnZXI7eHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhw\nAAAAAHNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRM\nZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFn\nbml0dWRldAACW0J4cQB+AAL///////////////7////+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAA\nAAABIHh4");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'rO0ABXNyABRqYXZhLm1hdGguQmlnRGVjaW1hbFTHFVf5gShPAwACSQAFc2NhbGVMAAZpbnRWYWx0?ABZMamF2YS9tYXRoL0JpZ0ludGVnZXI7eHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhw?AAAAAHNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRM?ZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFn?bml0dWRldAACW0J4cQB+AAL///////////////7////+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAA?AAABIHh4' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        org.jboss.dmr.ModelNode modelNode6 = property5.getValue();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.get(strArray13);
        boolean boolean15 = modelNode6.has(strArray13);
        boolean boolean16 = modelNode6.isDefined();
        java.io.PrintWriter printWriter17 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode6.writeJSONString(printWriter17, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Parameter cannot be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        org.jboss.dmr.ModelType modelType5 = org.jboss.dmr.ModelType.STRING;
        boolean boolean6 = booleanModelValue1.equals((java.lang.Object) modelType5);
        org.jboss.dmr.TypeModelValue typeModelValue7 = org.jboss.dmr.TypeModelValue.of(modelType5);
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue7.asExpression();
        org.jboss.dmr.LongModelValue longModelValue10 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal11 = longModelValue10.asBigDecimal();
        int int12 = longModelValue10.asInt();
        boolean boolean13 = typeModelValue7.equals((java.lang.Object) longModelValue10);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList18 = modelNode17.asList();
        org.jboss.dmr.ListModelValue listModelValue19 = new org.jboss.dmr.ListModelValue(modelNodeList18);
        java.lang.String str20 = listModelValue19.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = listModelValue19.asList();
        org.jboss.dmr.ModelValue modelValue22 = listModelValue19.protect();
        boolean boolean24 = listModelValue19.asBoolean(false);
        java.util.List<org.jboss.dmr.Property> propertyList25 = listModelValue19.asPropertyList();
        boolean boolean26 = typeModelValue7.equals((java.lang.Object) listModelValue19);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType5.equals(org.jboss.dmr.ModelType.STRING));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typeModelValue7);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(modelNodeList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str20, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertNotNull(modelValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(propertyList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.lang.String str16 = bytesModelValue12.asString();
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        boolean boolean28 = modelNode25.equals((java.lang.Object) 100L);
        boolean boolean29 = modelNode17.equals(modelNode25);
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode34 = modelNode31.set("hi!", 0.0d);
        org.jboss.dmr.Property property35 = new org.jboss.dmr.Property("", modelNode34);
        java.lang.String[] strArray36 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.get(strArray36);
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int39 = modelNode38.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.setExpression("hi!", "hi!");
        java.lang.String str44 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode40);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode40.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode46 = modelNode38.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList45);
        org.jboss.dmr.ModelNode modelNode47 = modelNode37.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList45);
        org.jboss.dmr.ModelNode modelNode48 = modelNode25.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList45);
        org.jboss.dmr.ModelNode modelNode50 = modelNode25.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode52 = modelNode25.add(false);
        org.jboss.dmr.ModelType modelType53 = org.jboss.dmr.ModelType.PROPERTY;
        char char54 = modelType53.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue55 = org.jboss.dmr.TypeModelValue.of(modelType53);
        org.jboss.dmr.ModelType modelType56 = org.jboss.dmr.ModelType.PROPERTY;
        char char57 = modelType56.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue58 = org.jboss.dmr.TypeModelValue.of(modelType56);
        boolean boolean59 = typeModelValue55.equals(typeModelValue58);
        java.lang.String str60 = typeModelValue58.asString();
        org.jboss.dmr.ValueExpression valueExpression61 = typeModelValue58.asExpression();
        org.jboss.dmr.ModelType modelType62 = typeModelValue58.asType();
        boolean boolean64 = typeModelValue58.asBoolean(false);
        boolean boolean65 = modelNode52.equals((java.lang.Object) typeModelValue58);
        org.jboss.dmr.ExpressionValue expressionValue67 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue69 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean70 = expressionValue67.equals(expressionValue69);
        org.jboss.dmr.ExpressionValue expressionValue72 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression73 = expressionValue72.asExpression();
        boolean boolean74 = expressionValue67.equals(expressionValue72);
        java.lang.String str75 = expressionValue67.asString();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory77 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream78 = null;
        org.jboss.dmr.Base64.InputStream inputStream80 = new org.jboss.dmr.Base64.InputStream(inputStream78, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream81 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream80);
        org.jboss.dmr.stream.ModelReader modelReader82 = modelStreamFactory77.newModelReader((java.io.InputStream) inputStream81);
        java.io.OutputStream outputStream83 = null;
        org.jboss.dmr.Base64.OutputStream outputStream84 = new org.jboss.dmr.Base64.OutputStream(outputStream83);
        org.jboss.dmr.Base64.OutputStream outputStream85 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream84);
        outputStream84.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter88 = modelStreamFactory77.newModelWriter((java.io.OutputStream) outputStream84);
        org.jboss.dmr.stream.ModelWriter modelWriter89 = modelWriter88.writeListStart();
        expressionValue67.write(modelWriter89);
        typeModelValue58.write(modelWriter89);
        org.jboss.dmr.stream.ModelWriter modelWriter93 = modelWriter89.writeString("(\"hi!\" => 0.0)");
        bytesModelValue12.write(modelWriter89);
        long long96 = bytesModelValue12.asLong((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode98 = bytesModelValue12.requireChild("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np?b24gIjEiZQADaGkheA==' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str16, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str44, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNode47);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNode52);
        org.junit.Assert.assertTrue("'" + modelType53 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType53.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char54 + "' != '" + 'p' + "'", char54 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue55);
        org.junit.Assert.assertTrue("'" + modelType56 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType56.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char57 + "' != '" + 'p' + "'", char57 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PROPERTY" + "'", str60, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression61);
        org.junit.Assert.assertTrue("'" + modelType62 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType62.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(valueExpression73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(modelStreamFactory77);
        org.junit.Assert.assertNotNull(modelReader82);
        org.junit.Assert.assertNotNull(modelWriter88);
        org.junit.Assert.assertNotNull(modelWriter89);
        org.junit.Assert.assertNotNull(modelWriter93);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray2 = intModelValue1.asBytes();
        int int4 = intModelValue1.asInt(0);
        org.jboss.dmr.ModelType modelType5 = intModelValue1.getType();
        boolean boolean7 = intModelValue1.has("\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\"");
        long long8 = intModelValue1.asLong();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType5.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isBigInteger();
        boolean boolean21 = modelReader15.isUndefined();
        boolean boolean22 = modelReader15.isUndefined();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = listModelValue5.getChild((int) (short) 0);
        int int14 = listModelValue5.asInt();
        org.jboss.dmr.ModelValue modelValue15 = listModelValue5.resolve();
        java.lang.String str16 = modelValue15.toString();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str16, "[(\"hi!\" => 0.0)]");
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.setExpression("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode11 = modelNode9.require("[(\"hi!\" => expression \"hi!\"),\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\",false,(\"H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA\" => bytes {\n    0x28, 0x22, 0x22, 0x20, 0x3d, 0x3e, 0x20, 0x28,\n    0x22, 0x68, 0x69, 0x21, 0x22, 0x20, 0x3d, 0x3e,\n    0x20, 0x30, 0x2e, 0x30, 0x29, 0x29\n})]");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child '[(\"hi!\" => expression \"hi!\"),\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4\",false,(\"H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA\" => bytes {?    0x28, 0x22, 0x22, 0x20, 0x3d, 0x3e, 0x20, 0x28,?    0x22, 0x68, 0x69, 0x21, 0x22, 0x20, 0x3d, 0x3e,?    0x20, 0x30, 0x2e, 0x30, 0x29, 0x29?})]' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression9 = bigDecimalModelValue7.asExpression();
        int int10 = bigDecimalModelValue7.asInt();
        long long11 = bigDecimalModelValue7.asLong();
        double double12 = bigDecimalModelValue7.asDouble();
        java.math.BigInteger bigInteger13 = bigDecimalModelValue7.asBigInteger();
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("hi!", 0.0d);
        org.jboss.dmr.Property property20 = new org.jboss.dmr.Property("", modelNode19);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.get(strArray21);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        org.jboss.dmr.ListModelValue listModelValue28 = new org.jboss.dmr.ListModelValue(modelNodeList27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue28);
        org.jboss.dmr.ModelValue modelValue30 = listModelValue28.resolve();
        int int32 = listModelValue28.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList33 = listModelValue28.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList34 = modelNode22.asPropertyList(propertyList33);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.set("hi!", 0.0d);
        org.jboss.dmr.Property property40 = new org.jboss.dmr.Property("", modelNode39);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode42 = modelNode39.get(strArray41);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode46.asList();
        org.jboss.dmr.ListModelValue listModelValue48 = new org.jboss.dmr.ListModelValue(modelNodeList47);
        org.jboss.dmr.ModelNode modelNode49 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue48);
        org.jboss.dmr.ModelValue modelValue50 = listModelValue48.resolve();
        int int52 = listModelValue48.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList53 = listModelValue48.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList54 = modelNode42.asPropertyList(propertyList53);
        modelNode22.setNoCopy(modelNode42);
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.set("hi!", 0.0d);
        org.jboss.dmr.Property property61 = new org.jboss.dmr.Property("", modelNode60);
        java.lang.String[] strArray62 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode63 = modelNode60.get(strArray62);
        org.jboss.dmr.ModelNode modelNode64 = modelNode42.get(strArray62);
        org.jboss.dmr.Property property66 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode64, true);
        org.jboss.dmr.PropertyModelValue propertyModelValue67 = new org.jboss.dmr.PropertyModelValue(property66);
        org.jboss.dmr.Property property68 = propertyModelValue67.asProperty();
        java.util.Set<java.lang.String> strSet69 = propertyModelValue67.getKeys();
        java.lang.Object obj70 = null;
        boolean boolean71 = propertyModelValue67.equals(obj70);
        boolean boolean72 = bigDecimalModelValue7.equals((java.lang.Object) boolean71);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(propertyList33);
        org.junit.Assert.assertNotNull(propertyList34);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertNotNull(modelValue50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(propertyList53);
        org.junit.Assert.assertNotNull(propertyList54);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        boolean boolean3 = typeModelValue2.asBoolean();
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray6 = booleanModelValue5.asBytes();
        java.lang.String str7 = booleanModelValue5.asString();
        int int8 = booleanModelValue5.asInt();
        boolean boolean9 = typeModelValue2.equals((java.lang.Object) booleanModelValue5);
        java.lang.String str10 = booleanModelValue5.asString();
        int int11 = booleanModelValue5.asInt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = booleanModelValue5.asList();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "true" + "'", str10, "true");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("\"\\\"AAAAIw==\\\"\"");
        org.junit.Assert.assertNotNull(modelNode1);
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        double double7 = bigIntegerModelValue4.asDouble();
        double double9 = bigIntegerModelValue4.asDouble(8.0d);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.PROPERTY;
        char char11 = modelType10.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue12 = org.jboss.dmr.TypeModelValue.of(modelType10);
        boolean boolean13 = typeModelValue12.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression14 = typeModelValue12.asExpression();
        boolean boolean15 = bigIntegerModelValue4.equals((java.lang.Object) typeModelValue12);
        org.jboss.dmr.ModelType modelType16 = typeModelValue12.asType();
        boolean boolean17 = typeModelValue12.asBoolean();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType10.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'p' + "'", char11 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(valueExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType16.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        java.lang.String str5 = bigIntegerModelValue4.asString();
        long long7 = bigIntegerModelValue4.asLong(32L);
        double double8 = bigIntegerModelValue4.asDouble();
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double10 = booleanModelValue9.asDouble();
        org.jboss.dmr.ModelValue modelValue11 = booleanModelValue9.copy();
        java.math.BigInteger bigInteger12 = booleanModelValue9.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue13 = new org.jboss.dmr.BigIntegerModelValue(bigInteger12);
        double double15 = bigIntegerModelValue13.asDouble((double) 'b');
        boolean boolean16 = bigIntegerModelValue4.equals(bigIntegerModelValue13);
        long long17 = bigIntegerModelValue4.asLong();
        int int18 = bigIntegerModelValue4.asInt();
        org.jboss.dmr.DoubleModelValue doubleModelValue20 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long21 = doubleModelValue20.asLong();
        boolean boolean23 = doubleModelValue20.asBoolean(true);
        byte[] byteArray24 = doubleModelValue20.asBytes();
        byte[] byteArray25 = doubleModelValue20.asBytes();
        boolean boolean26 = bigIntegerModelValue4.equals((java.lang.Object) byteArray25);
        org.jboss.dmr.BooleanModelValue booleanModelValue27 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double28 = booleanModelValue27.asDouble();
        org.jboss.dmr.ModelValue modelValue29 = booleanModelValue27.copy();
        java.math.BigInteger bigInteger30 = booleanModelValue27.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue31 = new org.jboss.dmr.BigIntegerModelValue(bigInteger30);
        int int33 = bigIntegerModelValue31.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue34 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double35 = booleanModelValue34.asDouble();
        org.jboss.dmr.ModelValue modelValue36 = booleanModelValue34.copy();
        java.math.BigInteger bigInteger37 = booleanModelValue34.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue38 = new org.jboss.dmr.BigIntegerModelValue(bigInteger37);
        java.lang.String str39 = bigIntegerModelValue38.asString();
        java.math.BigInteger bigInteger40 = bigIntegerModelValue38.asBigInteger();
        boolean boolean41 = bigIntegerModelValue31.equals(bigIntegerModelValue38);
        boolean boolean42 = bigIntegerModelValue4.equals(bigIntegerModelValue38);
        java.lang.String str43 = bigIntegerModelValue4.asString();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanModelValue27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = listModelValue5.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode27, false);
        org.jboss.dmr.Property property30 = propertyModelValue29.asProperty();
        boolean boolean31 = listModelValue5.equals((java.lang.Object) propertyModelValue29);
        org.jboss.dmr.ModelType modelType32 = org.jboss.dmr.ModelType.PROPERTY;
        char char33 = modelType32.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue34 = org.jboss.dmr.TypeModelValue.of(modelType32);
        org.jboss.dmr.ModelType modelType35 = org.jboss.dmr.ModelType.PROPERTY;
        char char36 = modelType35.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue37 = org.jboss.dmr.TypeModelValue.of(modelType35);
        boolean boolean38 = typeModelValue34.equals(typeModelValue37);
        java.lang.String str39 = typeModelValue37.asString();
        org.jboss.dmr.ModelNode modelNode40 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode43 = modelNode40.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList44 = modelNode43.asList();
        org.jboss.dmr.ListModelValue listModelValue45 = new org.jboss.dmr.ListModelValue(modelNodeList44);
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue45);
        org.jboss.dmr.ModelValue modelValue47 = listModelValue45.resolve();
        int int49 = listModelValue45.asInt((int) (byte) 100);
        boolean boolean50 = listModelValue45.asBoolean();
        org.jboss.dmr.ModelNode[] modelNodeArray51 = org.jboss.dmr.ListModelValue.NO_NODES;
        boolean boolean52 = listModelValue45.equals((java.lang.Object) modelNodeArray51);
        boolean boolean53 = typeModelValue37.equals((java.lang.Object) listModelValue45);
        org.jboss.dmr.ModelValue modelValue54 = listModelValue45.resolve();
        org.jboss.dmr.ModelValue modelValue55 = listModelValue45.protect();
        java.lang.Throwable throwable57 = null;
        org.jboss.dmr.stream.ModelException modelException58 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable57);
        org.jboss.dmr.stream.ModelException modelException59 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException58);
        java.lang.Throwable throwable61 = null;
        org.jboss.dmr.stream.ModelException modelException62 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable61);
        org.jboss.dmr.stream.ModelException modelException63 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException62);
        modelException58.addSuppressed((java.lang.Throwable) modelException62);
        boolean boolean65 = listModelValue45.equals((java.lang.Object) modelException58);
        boolean boolean66 = listModelValue5.equals(listModelValue45);
        org.jboss.dmr.LongModelValue longModelValue68 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str69 = longModelValue68.asString();
        byte[] byteArray70 = longModelValue68.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue71 = new org.jboss.dmr.BytesModelValue(byteArray70);
        java.lang.String str72 = bytesModelValue71.asString();
        int int73 = bytesModelValue71.asInt();
        long long75 = bytesModelValue71.asLong((long) (short) 1);
        long long76 = bytesModelValue71.asLong();
        byte[] byteArray77 = bytesModelValue71.asBytes();
        double double78 = bytesModelValue71.asDouble();
        java.math.BigDecimal bigDecimal79 = bytesModelValue71.asBigDecimal();
        boolean boolean80 = listModelValue5.equals((java.lang.Object) bytesModelValue71);
        java.lang.String str82 = bytesModelValue71.toJSONString(false);
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + modelType32 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType32.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char33 + "' != '" + 'p' + "'", char33 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue34);
        org.junit.Assert.assertTrue("'" + modelType35 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType35.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char36 + "' != '" + 'p' + "'", char36 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PROPERTY" + "'", str39, "PROPERTY");
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNodeList44);
        org.junit.Assert.assertNotNull(modelValue47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(modelNodeArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(modelValue54);
        org.junit.Assert.assertNotNull(modelValue55);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str72, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 4.9E-324d + "'", double78 == 4.9E-324d);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{\n    \"BYTES_VALUE\" : \"AAAAAAAAAAE=\"\n}" + "'", str82, "{\n    \"BYTES_VALUE\" : \"AAAAAAAAAAE=\"\n}");
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        java.lang.String str13 = listModelValue12.asString();
        long long14 = listModelValue12.asLong();
        int int16 = listModelValue12.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue17 = listModelValue12.protect();
        boolean boolean18 = listModelValue5.equals(listModelValue12);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue12);
        java.util.List<org.jboss.dmr.Property> propertyList20 = listModelValue12.asPropertyList();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str13, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(propertyList20);
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue8 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        byte[] byteArray9 = booleanModelValue8.asBytes();
        boolean boolean10 = bigIntegerModelValue4.equals((java.lang.Object) booleanModelValue8);
        boolean boolean12 = booleanModelValue8.asBoolean(true);
        org.jboss.dmr.ModelType modelType13 = booleanModelValue8.getType();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + modelType13 + "' != '" + org.jboss.dmr.ModelType.BOOLEAN + "'", modelType13.equals(org.jboss.dmr.ModelType.BOOLEAN));
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        org.jboss.dmr.LongModelValue longModelValue16 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str17 = longModelValue16.asString();
        byte[] byteArray18 = longModelValue16.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue19 = new org.jboss.dmr.BytesModelValue(byteArray18);
        boolean boolean20 = bytesModelValue12.equals(bytesModelValue19);
        java.math.BigInteger bigInteger21 = bytesModelValue19.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue22 = new org.jboss.dmr.BigIntegerModelValue(bigInteger21);
        boolean boolean24 = bigIntegerModelValue22.has((int) 'p');
        java.io.PrintWriter printWriter25 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigIntegerModelValue22.format(printWriter25, 1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode4 = modelNode3.setEmptyList();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(bigDecimal9);
        org.jboss.dmr.ModelNode modelNode11 = modelNode3.set(bigDecimal9);
        org.jboss.dmr.ModelNode modelNode12 = modelNode3.setEmptyList();
        org.jboss.dmr.ModelNode modelNode15 = modelNode12.setExpression("H4sIAAAAAAAAANNQUlKwtVPQUMrIVASzDPQMNDUBLH2F1RYAAAA=", "(\"(\\\"Expression \\\\\\\"1\\\\\\\"\\\" => (\\\"org.jboss.dmr.stream.ModelException: [(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => BYTES))\" => expression \"big decimal 1\")");
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode15);
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        long long4 = doubleModelValue1.asLong((long) 32);
        org.jboss.dmr.ModelValue modelValue5 = doubleModelValue1.protect();
        double double6 = doubleModelValue1.asDouble();
        boolean boolean8 = doubleModelValue1.asBoolean(false);
        org.jboss.dmr.DoubleModelValue doubleModelValue10 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long11 = doubleModelValue10.asLong();
        boolean boolean12 = doubleModelValue10.asBoolean();
        byte[] byteArray13 = doubleModelValue10.asBytes();
        double double14 = doubleModelValue10.asDouble();
        org.jboss.dmr.ValueExpression valueExpression15 = doubleModelValue10.asExpression();
        java.lang.String str16 = doubleModelValue10.asString();
        org.jboss.dmr.DoubleModelValue doubleModelValue18 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long19 = doubleModelValue18.asLong();
        boolean boolean20 = doubleModelValue18.asBoolean();
        java.math.BigInteger bigInteger21 = doubleModelValue18.asBigInteger();
        byte[] byteArray22 = doubleModelValue18.asBytes();
        boolean boolean23 = doubleModelValue10.equals(doubleModelValue18);
        org.jboss.dmr.ValueExpression valueExpression24 = doubleModelValue10.asExpression();
        boolean boolean25 = doubleModelValue1.equals(doubleModelValue10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "10.0" + "'", str16, "10.0");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(valueExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        boolean boolean11 = intModelValue5.asBoolean(true);
        int int12 = intModelValue5.asInt();
        double double13 = intModelValue5.asDouble();
        boolean boolean14 = intModelValue5.asBoolean();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        long long2 = objectModelValue0.asLong((long) (-1));
        java.util.Set<java.lang.String> strSet3 = objectModelValue0.getKeys();
        boolean boolean5 = objectModelValue0.has("rO0ABXNyABNqYXZhLmxhbmcuQ2hhcmFjdGVyNItH2WsaJngCAAFDAAV2YWx1ZXhwAGE=");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        int int6 = doubleModelValue1.asInt(2);
        double double8 = doubleModelValue1.asDouble(0.0d);
        org.jboss.dmr.DoubleModelValue doubleModelValue10 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long11 = doubleModelValue10.asLong();
        boolean boolean12 = doubleModelValue10.asBoolean();
        boolean boolean13 = doubleModelValue1.equals(doubleModelValue10);
        int int15 = doubleModelValue10.asInt((int) (short) 10);
        org.jboss.dmr.DoubleModelValue doubleModelValue17 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int19 = doubleModelValue17.asInt((int) 'l');
        java.math.BigDecimal bigDecimal20 = doubleModelValue17.asBigDecimal();
        byte[] byteArray21 = doubleModelValue17.asBytes();
        double double23 = doubleModelValue17.asDouble(1.0d);
        java.lang.String str24 = doubleModelValue17.asString();
        boolean boolean25 = doubleModelValue17.asBoolean();
        boolean boolean26 = doubleModelValue10.equals(doubleModelValue17);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "10.0" + "'", str24, "10.0");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        boolean boolean3 = objectModelValue0.asBoolean();
        java.lang.String str4 = objectModelValue0.asString();
        org.jboss.dmr.ObjectModelValue objectModelValue5 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue5.asObject();
        java.util.Set<java.lang.String> strSet7 = objectModelValue5.getKeys();
        boolean boolean9 = objectModelValue5.has((int) 'a');
        boolean boolean11 = objectModelValue5.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue12 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode13 = objectModelValue12.asObject();
        java.util.Set<java.lang.String> strSet14 = objectModelValue12.getKeys();
        boolean boolean16 = objectModelValue12.has((int) 'a');
        boolean boolean17 = objectModelValue5.equals(objectModelValue12);
        org.jboss.dmr.ModelNode modelNode18 = objectModelValue12.asObject();
        java.util.List<org.jboss.dmr.Property> propertyList19 = objectModelValue12.asPropertyList();
        org.jboss.dmr.ObjectModelValue objectModelValue20 = new org.jboss.dmr.ObjectModelValue();
        boolean boolean21 = objectModelValue20.asBoolean();
        int int23 = objectModelValue20.asInt(0);
        org.jboss.dmr.ModelValue modelValue25 = objectModelValue20.copy(false);
        boolean boolean26 = objectModelValue12.equals(objectModelValue20);
        boolean boolean27 = objectModelValue0.equals(objectModelValue12);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory29 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream30 = null;
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream(inputStream30, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream32);
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory29.newModelReader((java.io.InputStream) inputStream33);
        java.io.OutputStream outputStream35 = null;
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream(outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream36);
        outputStream36.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelStreamFactory29.newModelWriter((java.io.OutputStream) outputStream36);
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelWriter40.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter43 = modelWriter41.writeInt((int) (byte) 10);
        java.io.InputStream inputStream44 = null;
        org.jboss.dmr.Base64.InputStream inputStream46 = new org.jboss.dmr.Base64.InputStream(inputStream44, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue48 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str49 = longModelValue48.asString();
        byte[] byteArray50 = longModelValue48.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue51 = new org.jboss.dmr.BytesModelValue(byteArray50);
        int int54 = inputStream46.read(byteArray50, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter55 = modelWriter43.writeBytes(byteArray50);
        org.jboss.dmr.ModelNode modelNode57 = org.jboss.dmr.ModelNode.fromString("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"");
        org.jboss.dmr.ModelNode modelNode59 = modelNode57.setExpression("AAAAIA==");
        org.jboss.dmr.ModelNode modelNode62 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long63 = modelNode62.asLong();
        org.jboss.dmr.ValueExpression valueExpression64 = modelNode62.asExpression();
        java.math.BigDecimal bigDecimal65 = valueExpression64.resolveBigDecimal();
        java.lang.String str66 = valueExpression64.getExpressionString();
        java.math.BigDecimal bigDecimal67 = valueExpression64.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue68 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal67);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue69 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal67);
        org.jboss.dmr.ModelNode modelNode70 = modelNode57.set("\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"", bigDecimal67);
        org.jboss.dmr.stream.ModelWriter modelWriter71 = modelWriter55.writeBigDecimal(bigDecimal67);
        org.jboss.dmr.stream.ModelWriter modelWriter72 = modelWriter71.writePropertyStart();
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue12.write(modelWriter71);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(modelValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(modelStreamFactory29);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter41);
        org.junit.Assert.assertNotNull(modelWriter43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(modelWriter55);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(valueExpression64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1.0" + "'", str66, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelWriter71);
        org.junit.Assert.assertNotNull(modelWriter72);
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.math.BigDecimal bigDecimal16 = bytesModelValue12.asBigDecimal();
        long long18 = bytesModelValue12.asLong((long) 32);
        java.math.BigDecimal bigDecimal19 = bytesModelValue12.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode(bigDecimal19);
        boolean boolean22 = modelNode20.has("expression \"hi!\"");
        java.lang.String str23 = modelNode20.toString();
        org.jboss.dmr.ModelNode modelNode24 = modelNode20.clone();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "big decimal 1" + "'", str23, "big decimal 1");
        org.junit.Assert.assertNotNull(modelNode24);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        java.util.Set<java.lang.String> strSet6 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue0.copy();
        int int9 = objectModelValue0.asInt((int) (short) 1);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = objectModelValue0.asList();
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet7 = objectModelValue0.getKeys();
        boolean boolean9 = objectModelValue0.asBoolean(false);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 0);
        java.math.BigInteger bigInteger2 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.ValueExpression valueExpression3 = doubleModelValue1.asExpression();
        org.jboss.dmr.StringModelValue stringModelValue5 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray6 = stringModelValue5.asBytes();
        org.jboss.dmr.LongModelValue longModelValue8 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal9 = longModelValue8.asBigDecimal();
        byte[] byteArray10 = longModelValue8.asBytes();
        boolean boolean11 = stringModelValue5.equals((java.lang.Object) byteArray10);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory13 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream14 = null;
        org.jboss.dmr.Base64.InputStream inputStream16 = new org.jboss.dmr.Base64.InputStream(inputStream14, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue18 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str19 = longModelValue18.asString();
        byte[] byteArray20 = longModelValue18.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue21 = new org.jboss.dmr.BytesModelValue(byteArray20);
        int int24 = inputStream16.read(byteArray20, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream26 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream16, (-1));
        org.jboss.dmr.stream.ModelReader modelReader27 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream26);
        java.io.InputStream inputStream28 = null;
        org.jboss.dmr.Base64.InputStream inputStream30 = new org.jboss.dmr.Base64.InputStream(inputStream28, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream31 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream30);
        byte[] byteArray33 = org.jboss.dmr.Base64.decode("true");
        boolean boolean35 = org.jboss.dmr.Base64.encodeToFile(byteArray33, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        int int38 = inputStream30.read(byteArray33, (int) 'l', 0);
        org.jboss.dmr.stream.ModelReader modelReader39 = modelStreamFactory13.newModelReader((java.io.InputStream) inputStream30);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory41 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream42 = null;
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream(inputStream42, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream44);
        org.jboss.dmr.stream.ModelReader modelReader46 = modelStreamFactory41.newModelReader((java.io.InputStream) inputStream45);
        java.io.OutputStream outputStream47 = null;
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream(outputStream47);
        org.jboss.dmr.Base64.OutputStream outputStream49 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream48);
        outputStream48.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelStreamFactory41.newModelWriter((java.io.OutputStream) outputStream48);
        outputStream48.write(2);
        org.jboss.dmr.stream.ModelWriter modelWriter55 = modelStreamFactory13.newModelWriter((java.io.OutputStream) outputStream48);
        boolean boolean56 = stringModelValue5.equals((java.lang.Object) modelWriter55);
        org.jboss.dmr.stream.ModelWriter modelWriter58 = modelWriter55.writeBoolean(true);
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue1.write(modelWriter58);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting EOF");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(modelReader27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-74, -69, -98]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(modelReader39);
        org.junit.Assert.assertNotNull(modelStreamFactory41);
        org.junit.Assert.assertNotNull(modelReader46);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(modelWriter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(modelWriter58);
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        long long2 = objectModelValue0.asLong((long) (-1));
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.getChild("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]");
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.add("[]", "TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        org.jboss.dmr.Validation.validate(modelNode9, "[(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.setExpression("hi!", "hi!");
        java.lang.String str19 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode15);
        boolean boolean21 = modelNode15.hasDefined((-1));
        org.jboss.dmr.BooleanModelValue booleanModelValue22 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double23 = booleanModelValue22.asDouble();
        org.jboss.dmr.ModelValue modelValue24 = booleanModelValue22.copy();
        java.math.BigInteger bigInteger25 = booleanModelValue22.asBigInteger();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode(bigInteger25);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode(bigInteger25);
        org.jboss.dmr.ModelNode modelNode28 = modelNode15.set(bigInteger25);
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue29 = new org.jboss.dmr.BigIntegerModelValue(bigInteger25);
        org.jboss.dmr.ModelNode modelNode30 = modelNode9.set(bigInteger25);
        org.jboss.dmr.ModelNode modelNode31 = modelNode7.set("", bigInteger25);
        java.lang.String str32 = modelNode7.asString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str19, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(booleanModelValue22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(\"\" => big integer 1)" + "'", str32, "(\"\" => big integer 1)");
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 0);
        org.jboss.dmr.DoubleModelValue doubleModelValue3 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long4 = doubleModelValue3.asLong();
        long long6 = doubleModelValue3.asLong((long) 32);
        org.jboss.dmr.ModelValue modelValue7 = doubleModelValue3.protect();
        byte[] byteArray8 = doubleModelValue3.asBytes();
        boolean boolean9 = doubleModelValue1.equals(doubleModelValue3);
        org.jboss.dmr.DoubleModelValue doubleModelValue11 = new org.jboss.dmr.DoubleModelValue(0.0d);
        int int13 = doubleModelValue11.asInt(1);
        boolean boolean14 = doubleModelValue3.equals(doubleModelValue11);
        java.lang.String str15 = doubleModelValue3.asString();
        double double16 = doubleModelValue3.asDouble();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10.0" + "'", str15, "10.0");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        int int7 = bytesModelValue4.asInt();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        double double13 = bytesModelValue12.asDouble();
        boolean boolean14 = bytesModelValue4.equals(bytesModelValue12);
        byte[] byteArray15 = bytesModelValue12.asBytes();
        java.math.BigDecimal bigDecimal16 = bytesModelValue12.asBigDecimal();
        long long18 = bytesModelValue12.asLong((long) 32);
        java.math.BigInteger bigInteger19 = bytesModelValue12.asBigInteger();
        org.jboss.dmr.LongModelValue longModelValue21 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str22 = longModelValue21.asString();
        byte[] byteArray23 = longModelValue21.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue24 = new org.jboss.dmr.BytesModelValue(byteArray23);
        java.lang.String str25 = bytesModelValue24.asString();
        int int26 = bytesModelValue24.asInt();
        long long28 = bytesModelValue24.asLong((long) (short) 1);
        int int29 = bytesModelValue24.asInt();
        int int30 = bytesModelValue24.asInt();
        byte[] byteArray31 = bytesModelValue24.asBytes();
        org.jboss.dmr.LongModelValue longModelValue33 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str34 = longModelValue33.asString();
        byte[] byteArray35 = longModelValue33.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue36 = new org.jboss.dmr.BytesModelValue(byteArray35);
        java.lang.String str37 = bytesModelValue36.asString();
        int int38 = bytesModelValue36.asInt();
        long long40 = bytesModelValue36.asLong((long) (short) 1);
        int int41 = bytesModelValue36.asInt();
        double double42 = bytesModelValue36.asDouble();
        boolean boolean43 = bytesModelValue24.equals(bytesModelValue36);
        long long44 = bytesModelValue24.asLong();
        org.jboss.dmr.IntModelValue intModelValue46 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str47 = intModelValue46.asString();
        double double49 = intModelValue46.asDouble((double) 2);
        int int51 = intModelValue46.asInt((int) (byte) 100);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode54 = modelNode53.resolve();
        org.jboss.dmr.LongModelValue longModelValue57 = new org.jboss.dmr.LongModelValue((-1L));
        long long59 = longModelValue57.asLong((long) (byte) -1);
        java.math.BigDecimal bigDecimal60 = longModelValue57.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode61 = modelNode53.set("1.0", bigDecimal60);
        boolean boolean62 = intModelValue46.equals((java.lang.Object) "1.0");
        boolean boolean63 = bytesModelValue24.equals((java.lang.Object) "1.0");
        byte[] byteArray64 = bytesModelValue24.asBytes();
        boolean boolean65 = bytesModelValue12.equals(bytesModelValue24);
        long long67 = bytesModelValue24.asLong((long) 10);
        int int69 = bytesModelValue24.asInt((int) '#');
        long long70 = bytesModelValue24.asLong();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.9E-324d + "'", double13 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str25, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str37, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4.9E-324d + "'", double42 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "32" + "'", str47, "32");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 32.0d + "'", double49 == 32.0d);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        java.lang.String str3 = objectModelValue0.toString();
        org.jboss.dmr.ModelValue modelValue4 = objectModelValue0.resolve();
        java.util.List<org.jboss.dmr.Property> propertyList5 = objectModelValue0.asPropertyList();
        long long6 = objectModelValue0.asLong();
        long long8 = objectModelValue0.asLong((long) (short) 1);
        java.util.Set<java.lang.String> strSet9 = objectModelValue0.getKeys();
        boolean boolean11 = objectModelValue0.asBoolean(false);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertNotNull(propertyList5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression2 = expressionValue1.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue4 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str5 = expressionValue4.toString();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        boolean boolean12 = expressionValue4.equals((java.lang.Object) property11);
        boolean boolean13 = expressionValue1.equals(expressionValue4);
        org.jboss.dmr.ModelType modelType14 = org.jboss.dmr.ModelType.PROPERTY;
        char char15 = modelType14.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue16 = org.jboss.dmr.TypeModelValue.of(modelType14);
        org.jboss.dmr.ValueExpression valueExpression17 = typeModelValue16.asExpression();
        org.jboss.dmr.stream.ModelEvent modelEvent18 = org.jboss.dmr.stream.ModelEvent.TYPE;
        boolean boolean19 = valueExpression17.equals((java.lang.Object) modelEvent18);
        boolean boolean20 = expressionValue1.equals((java.lang.Object) boolean19);
        org.jboss.dmr.ExpressionValue expressionValue22 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression23 = expressionValue22.asExpression();
        boolean boolean24 = expressionValue1.equals(expressionValue22);
        org.jboss.dmr.ExpressionValue expressionValue26 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue28 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean29 = expressionValue26.equals(expressionValue28);
        org.jboss.dmr.ExpressionValue expressionValue31 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue33 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean34 = expressionValue31.equals(expressionValue33);
        boolean boolean35 = expressionValue26.equals(expressionValue33);
        org.jboss.dmr.ModelValue modelValue36 = expressionValue26.resolve();
        java.lang.String str37 = expressionValue26.asString();
        org.jboss.dmr.ModelValue modelValue38 = expressionValue26.resolve();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory40 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream41 = null;
        org.jboss.dmr.Base64.InputStream inputStream43 = new org.jboss.dmr.Base64.InputStream(inputStream41, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream44 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream43);
        org.jboss.dmr.stream.ModelReader modelReader45 = modelStreamFactory40.newModelReader((java.io.InputStream) inputStream44);
        java.io.OutputStream outputStream46 = null;
        org.jboss.dmr.Base64.OutputStream outputStream47 = new org.jboss.dmr.Base64.OutputStream(outputStream46);
        org.jboss.dmr.Base64.OutputStream outputStream48 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream47);
        outputStream47.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter51 = modelStreamFactory40.newModelWriter((java.io.OutputStream) outputStream47);
        org.jboss.dmr.stream.ModelWriter modelWriter52 = modelWriter51.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter54 = modelWriter52.writeInt((int) (byte) 10);
        expressionValue26.write(modelWriter52);
        org.jboss.dmr.ModelNode modelNode57 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode60 = modelNode57.set("hi!", 0.0d);
        org.jboss.dmr.Property property61 = new org.jboss.dmr.Property("", modelNode60);
        java.lang.String[] strArray62 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode63 = modelNode60.get(strArray62);
        org.jboss.dmr.ModelNode modelNode64 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int65 = modelNode64.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode66 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode69 = modelNode66.setExpression("hi!", "hi!");
        java.lang.String str70 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode66);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList71 = modelNode66.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode72 = modelNode64.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList71);
        org.jboss.dmr.ModelNode modelNode73 = modelNode63.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList71);
        org.jboss.dmr.LongModelValue longModelValue75 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str76 = longModelValue75.asString();
        double double78 = longModelValue75.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression79 = longModelValue75.asExpression();
        byte[] byteArray80 = longModelValue75.asBytes();
        org.jboss.dmr.ModelNode modelNode81 = modelNode73.add(byteArray80);
        org.jboss.dmr.stream.ModelWriter modelWriter82 = modelWriter52.writeBytes(byteArray80);
        expressionValue22.write(modelWriter82);
        org.jboss.dmr.stream.ModelWriter modelWriter84 = modelWriter82.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter86 = modelWriter82.writeDouble((double) ' ');
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "expression \"hi!\"" + "'", str5, "expression \"hi!\"");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType14.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'p' + "'", char15 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue16);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertTrue("'" + modelEvent18 + "' != '" + org.jboss.dmr.stream.ModelEvent.TYPE + "'", modelEvent18.equals(org.jboss.dmr.stream.ModelEvent.TYPE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(modelValue38);
        org.junit.Assert.assertNotNull(modelStreamFactory40);
        org.junit.Assert.assertNotNull(modelReader45);
        org.junit.Assert.assertNotNull(modelWriter51);
        org.junit.Assert.assertNotNull(modelWriter52);
        org.junit.Assert.assertNotNull(modelWriter54);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str70, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList71);
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode81);
        org.junit.Assert.assertNotNull(modelWriter82);
        org.junit.Assert.assertNotNull(modelWriter84);
        org.junit.Assert.assertNotNull(modelWriter86);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        java.lang.String str6 = listModelValue5.asString();
        long long7 = listModelValue5.asLong();
        int int9 = listModelValue5.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue10 = listModelValue5.protect();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ListModelValue listModelValue16 = new org.jboss.dmr.ListModelValue(modelNodeList15);
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue16);
        org.jboss.dmr.ModelValue modelValue18 = listModelValue16.resolve();
        int int20 = listModelValue16.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList21 = listModelValue16.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList22 = listModelValue16.asPropertyList();
        boolean boolean23 = listModelValue5.equals(listModelValue16);
        boolean boolean25 = listModelValue16.has((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode27 = listModelValue16.removeChild(32);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [32]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str6, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelValue10);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelValue18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(propertyList21);
        org.junit.Assert.assertNotNull(propertyList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue(0);
        boolean boolean2 = intModelValue1.asBoolean();
        java.math.BigDecimal bigDecimal3 = intModelValue1.asBigDecimal();
        double double4 = intModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean4 = doubleModelValue1.asBoolean(true);
        boolean boolean6 = doubleModelValue1.asBoolean(false);
        byte[] byteArray7 = doubleModelValue1.asBytes();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[64, 36, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        java.lang.Long long46 = modelNode45.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray47 = new org.jboss.dmr.ModelNode[] { modelNode41, modelNode45 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList48 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48, modelNodeArray47);
        org.jboss.dmr.ModelNode modelNode50 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long54 = modelNode53.asLong();
        org.jboss.dmr.ValueExpression valueExpression55 = modelNode53.asExpression();
        java.math.BigDecimal bigDecimal56 = valueExpression55.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode57 = modelNode7.set("true", bigDecimal56);
        org.jboss.dmr.ModelNode modelNode58 = new org.jboss.dmr.ModelNode(bigDecimal56);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNull(long46);
        org.junit.Assert.assertNotNull(modelNodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(valueExpression55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(modelNode57);
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        boolean boolean4 = stringModelValue1.equals((java.lang.Object) (-1.0d));
        java.lang.String str5 = stringModelValue1.asString();
        org.jboss.dmr.stream.ModelEvent modelEvent6 = org.jboss.dmr.stream.ModelEvent.UNDEFINED;
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) modelEvent6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue13 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean14 = stringModelValue11.equals(stringModelValue13);
        byte[] byteArray15 = stringModelValue13.asBytes();
        java.lang.Object obj16 = null;
        boolean boolean17 = stringModelValue13.equals(obj16);
        boolean boolean19 = stringModelValue13.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean20 = stringModelValue9.equals(stringModelValue13);
        boolean boolean21 = stringModelValue1.equals(stringModelValue13);
        org.jboss.dmr.ValueExpression valueExpression22 = stringModelValue1.asExpression();
        org.jboss.dmr.IntModelValue intModelValue24 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long26 = intModelValue24.asLong((long) 'b');
        java.lang.String str27 = intModelValue24.asString();
        long long28 = intModelValue24.asLong();
        long long29 = intModelValue24.asLong();
        org.jboss.dmr.ValueExpression valueExpression30 = intModelValue24.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver31 = new org.jboss.dmr.ValueExpressionResolver();
        java.math.BigDecimal bigDecimal32 = valueExpression30.resolveBigDecimal(valueExpressionResolver31);
        // The following exception was thrown during execution in test generation
        try {
            long long33 = valueExpression22.resolveLong(valueExpressionResolver31);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str5, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertTrue("'" + modelEvent6 + "' != '" + org.jboss.dmr.stream.ModelEvent.UNDEFINED + "'", modelEvent6.equals(org.jboss.dmr.stream.ModelEvent.UNDEFINED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(valueExpression22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "32" + "'", str27, "32");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertNotNull(bigDecimal32);
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode(false);
        org.jboss.dmr.DoubleModelValue doubleModelValue6 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long7 = doubleModelValue6.asLong();
        boolean boolean8 = doubleModelValue6.asBoolean();
        byte[] byteArray9 = doubleModelValue6.asBytes();
        org.jboss.dmr.ModelNode modelNode10 = modelNode4.set(byteArray9);
        org.jboss.dmr.ModelNode modelNode11 = modelNode1.set("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"", byteArray9);
        java.lang.String str12 = org.jboss.dmr.Base64.encodeBytes(byteArray9);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "QCQAAAAAAAA=" + "'", str12, "QCQAAAAAAAA=");
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean4 = stringModelValue1.equals(stringModelValue3);
        org.jboss.dmr.StringModelValue stringModelValue6 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        boolean boolean7 = stringModelValue3.equals(stringModelValue6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        org.jboss.dmr.ValueExpression valueExpression12 = stringModelValue11.asExpression();
        boolean boolean13 = stringModelValue9.equals(stringModelValue11);
        boolean boolean14 = stringModelValue6.equals(stringModelValue11);
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue11.formatAsJSON(printWriter15, (int) (byte) 10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter14 = modelWriter12.writePropertyStart();
        org.jboss.dmr.DoubleModelValue doubleModelValue16 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long17 = doubleModelValue16.asLong();
        boolean boolean18 = doubleModelValue16.asBoolean();
        byte[] byteArray19 = doubleModelValue16.asBytes();
        int int21 = doubleModelValue16.asInt((int) ' ');
        boolean boolean22 = doubleModelValue16.asBoolean();
        byte[] byteArray23 = doubleModelValue16.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.stream.ModelWriter modelWriter24 = modelWriter12.writeBytes(byteArray23);
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Expecting STRING");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[64, 36, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ModelType modelType8 = org.jboss.dmr.ModelType.PROPERTY;
        char char9 = modelType8.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue10 = org.jboss.dmr.TypeModelValue.of(modelType8);
        org.jboss.dmr.ModelType modelType11 = org.jboss.dmr.ModelType.PROPERTY;
        char char12 = modelType11.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue13 = org.jboss.dmr.TypeModelValue.of(modelType11);
        boolean boolean14 = typeModelValue10.equals(typeModelValue13);
        java.lang.String str15 = typeModelValue13.asString();
        boolean boolean17 = typeModelValue13.asBoolean(true);
        boolean boolean18 = typeModelValue5.equals(typeModelValue13);
        org.jboss.dmr.ValueExpression valueExpression19 = typeModelValue13.asExpression();
        org.jboss.dmr.ModelType modelType20 = org.jboss.dmr.ModelType.PROPERTY;
        char char21 = modelType20.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue22 = org.jboss.dmr.TypeModelValue.of(modelType20);
        boolean boolean23 = typeModelValue22.asBoolean();
        boolean boolean24 = typeModelValue13.equals(typeModelValue22);
        boolean boolean26 = typeModelValue13.asBoolean(true);
        boolean boolean28 = typeModelValue13.has("32");
        org.jboss.dmr.ModelNode modelNode30 = org.jboss.dmr.ModelNode.fromString("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        org.jboss.dmr.ModelNode modelNode33 = modelNode30.set("hi!", (long) 32);
        boolean boolean34 = typeModelValue13.equals((java.lang.Object) 32);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType8 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType8.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'p' + "'", char9 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue10);
        org.junit.Assert.assertTrue("'" + modelType11 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType11.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'p' + "'", char12 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PROPERTY" + "'", str15, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + modelType20 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType20.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + 'p' + "'", char21 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        double double9 = longModelValue5.asDouble((double) 10.0f);
        boolean boolean10 = longModelValue1.equals(longModelValue5);
        long long11 = longModelValue1.asLong();
        long long13 = longModelValue1.asLong(1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        int int3 = doubleModelValue1.asInt((int) 'l');
        double double5 = doubleModelValue1.asDouble((double) 'a');
        org.jboss.dmr.ValueExpression valueExpression6 = doubleModelValue1.asExpression();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(valueExpression6);
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode5 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.set("hi!", 0.0d);
        org.jboss.dmr.Property property9 = new org.jboss.dmr.Property("", modelNode8);
        boolean boolean11 = modelNode8.equals((java.lang.Object) 100L);
        boolean boolean12 = modelNode0.equals(modelNode8);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int22 = modelNode21.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.setExpression("hi!", "hi!");
        java.lang.String str27 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode23.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode29 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode30 = modelNode20.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode31 = modelNode8.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList28);
        org.jboss.dmr.ModelNode modelNode33 = modelNode8.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        boolean boolean35 = modelNode8.hasDefined("1L");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList36 = modelNode8.asList();
        org.jboss.dmr.LongModelValue longModelValue39 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str40 = longModelValue39.asString();
        org.jboss.dmr.ValueExpression valueExpression41 = longModelValue39.asExpression();
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        int int45 = longModelValue43.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue47 = new org.jboss.dmr.LongModelValue((-1L));
        long long49 = longModelValue47.asLong((long) (byte) -1);
        double double51 = longModelValue47.asDouble((double) 10.0f);
        boolean boolean52 = longModelValue43.equals(longModelValue47);
        org.jboss.dmr.ModelType modelType53 = longModelValue43.getType();
        boolean boolean54 = valueExpression41.equals((java.lang.Object) modelType53);
        org.jboss.dmr.ModelNode modelNode55 = modelNode8.set("{\n    \"\" : {\n        \"hi!\" : 0.0\n    }\n}", valueExpression41);
        org.jboss.dmr.ModelNode modelNode58 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode59 = modelNode58.clear();
        boolean boolean61 = modelNode58.has((int) '#');
        org.jboss.dmr.ModelNode modelNode64 = modelNode58.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode66 = modelNode58.set("1");
        org.jboss.dmr.PropertyModelValue propertyModelValue68 = new org.jboss.dmr.PropertyModelValue("[2L]", modelNode58, false);
        org.jboss.dmr.Property property69 = propertyModelValue68.asProperty();
        boolean boolean70 = modelNode55.equals((java.lang.Object) property69);
        org.jboss.dmr.ModelNode modelNode71 = property69.getValue();
        org.jboss.dmr.ModelNode modelNode72 = property69.getValue();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str27, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelNodeList36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(valueExpression41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + modelType53 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType53.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNode66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(modelNode72);
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        java.lang.String str9 = property7.getName();
        org.jboss.dmr.Property property10 = property7.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        java.io.DataOutput dataOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue13.writeExternal(dataOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(modelNodeList12);
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        int int10 = bigDecimalModelValue7.asInt();
        int int11 = bigDecimalModelValue7.asInt();
        java.lang.String str12 = bigDecimalModelValue7.asString();
        long long14 = bigDecimalModelValue7.asLong((long) 52);
        boolean boolean16 = bigDecimalModelValue7.has("");
        double double17 = bigDecimalModelValue7.asDouble();
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long20 = modelNode19.asLong();
        org.jboss.dmr.ValueExpression valueExpression21 = modelNode19.asExpression();
        java.math.BigDecimal bigDecimal22 = valueExpression21.resolveBigDecimal();
        java.lang.String str23 = valueExpression21.getExpressionString();
        java.math.BigDecimal bigDecimal24 = valueExpression21.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue25 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal24);
        boolean boolean26 = bigDecimalModelValue25.asBoolean();
        long long27 = bigDecimalModelValue25.asLong();
        java.lang.String str28 = bigDecimalModelValue25.asString();
        org.jboss.dmr.ModelNode modelNode30 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long31 = modelNode30.asLong();
        org.jboss.dmr.ValueExpression valueExpression32 = modelNode30.asExpression();
        java.math.BigDecimal bigDecimal33 = valueExpression32.resolveBigDecimal();
        java.lang.String str34 = valueExpression32.getExpressionString();
        java.math.BigDecimal bigDecimal35 = valueExpression32.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue36 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal35);
        boolean boolean37 = bigDecimalModelValue36.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression38 = bigDecimalModelValue36.asExpression();
        int int39 = bigDecimalModelValue36.asInt();
        long long40 = bigDecimalModelValue36.asLong();
        boolean boolean41 = bigDecimalModelValue25.equals(bigDecimalModelValue36);
        boolean boolean42 = bigDecimalModelValue7.equals(bigDecimalModelValue25);
        java.io.DataOutput dataOutput43 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue25.writeExternal(dataOutput43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0" + "'", str12, "1.0");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1.0" + "'", str23, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0" + "'", str28, "1.0");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1.0" + "'", str34, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(valueExpression38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        org.jboss.dmr.ModelNode modelNode0 = org.jboss.dmr.ModelNode.TRUE;
        boolean boolean2 = modelNode0.has((int) 'a');
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str5 = longModelValue4.asString();
        double double7 = longModelValue4.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression8 = longModelValue4.asExpression();
        byte[] byteArray9 = longModelValue4.asBytes();
        java.lang.String str10 = org.jboss.dmr.Base64.encodeBytes(byteArray9);
        org.jboss.dmr.BytesModelValue bytesModelValue11 = new org.jboss.dmr.BytesModelValue(byteArray9);
        java.math.BigInteger bigInteger12 = bytesModelValue11.asBigInteger();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode13 = modelNode0.set(bigInteger12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AAAAAAAAAAE=" + "'", str10, "AAAAAAAAAAE=");
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isBoolean();
        boolean boolean19 = modelReader15.isPropertyEnd();
        boolean boolean20 = modelReader15.hasNext();
        boolean boolean21 = modelReader15.isBigInteger();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode4 = modelNode2.set((int) 'l');
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode4);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        int int6 = longModelValue4.asInt((int) (byte) 0);
        java.math.BigInteger bigInteger7 = longModelValue4.asBigInteger();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue((-1L));
        long long11 = longModelValue9.asLong((long) (byte) -1);
        int int13 = longModelValue9.asInt(0);
        boolean boolean14 = longModelValue4.equals((java.lang.Object) longModelValue9);
        java.lang.String str15 = longModelValue4.asString();
        boolean boolean16 = stringModelValue1.equals((java.lang.Object) str15);
        org.jboss.dmr.ModelNode modelNode18 = new org.jboss.dmr.ModelNode((int) (short) 0);
        boolean boolean19 = stringModelValue1.equals((java.lang.Object) (short) 0);
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, 0);
        // The following exception was thrown during execution in test generation
        try {
            inputStream5.reset();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        java.lang.Long long46 = modelNode45.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray47 = new org.jboss.dmr.ModelNode[] { modelNode41, modelNode45 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList48 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48, modelNodeArray47);
        org.jboss.dmr.ModelNode modelNode50 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.LongModelValue longModelValue52 = new org.jboss.dmr.LongModelValue((-1L));
        int int53 = longModelValue52.asInt();
        boolean boolean54 = modelNode7.equals((java.lang.Object) int53);
        org.jboss.dmr.ModelNode modelNode55 = modelNode7.add();
        org.jboss.dmr.ModelNode modelNode56 = modelNode7.addEmptyList();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNull(long46);
        org.junit.Assert.assertNotNull(modelNodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(modelNode56);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        long long11 = listModelValue5.asLong();
        long long13 = listModelValue5.asLong((long) (short) -1);
        org.jboss.dmr.ModelValue modelValue14 = listModelValue5.copy();
        java.io.DataOutput dataOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            listModelValue5.writeExternal(dataOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(modelValue14);
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode0.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        org.jboss.dmr.Property property11 = new org.jboss.dmr.Property("", modelNode10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode0.set(property11);
        org.jboss.dmr.ModelNode modelNode15 = modelNode0.setExpression("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", "true");
        org.jboss.dmr.ModelNode modelNode17 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.set("hi!", 0.0d);
        org.jboss.dmr.Property property21 = new org.jboss.dmr.Property("", modelNode20);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode23 = modelNode20.get(strArray22);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int25 = modelNode24.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.setExpression("hi!", "hi!");
        java.lang.String str30 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode26);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList31 = modelNode26.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode32 = modelNode24.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList31);
        org.jboss.dmr.ModelNode modelNode33 = modelNode23.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList31);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList34 = modelNode15.asList(modelNodeList31);
        java.lang.String str36 = modelNode15.asString("(\"hi!\" => 0.0)");
        org.jboss.dmr.ModelNode modelNode38 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode41 = modelNode38.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        boolean boolean49 = modelNode46.equals((java.lang.Object) 100L);
        boolean boolean50 = modelNode38.equals(modelNode46);
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode55 = modelNode52.set("hi!", 0.0d);
        org.jboss.dmr.Property property56 = new org.jboss.dmr.Property("", modelNode55);
        java.lang.String[] strArray57 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode58 = modelNode55.get(strArray57);
        org.jboss.dmr.ModelNode modelNode59 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int60 = modelNode59.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.setExpression("hi!", "hi!");
        java.lang.String str65 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode61);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList66 = modelNode61.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode67 = modelNode59.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList66);
        org.jboss.dmr.ModelNode modelNode68 = modelNode58.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList66);
        org.jboss.dmr.ModelNode modelNode69 = modelNode46.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList66);
        org.jboss.dmr.ModelNode modelNode71 = modelNode46.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.PropertyModelValue propertyModelValue73 = new org.jboss.dmr.PropertyModelValue("1.0", modelNode46, false);
        java.io.InputStream inputStream74 = null;
        org.jboss.dmr.Base64.InputStream inputStream76 = new org.jboss.dmr.Base64.InputStream(inputStream74, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue78 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str79 = longModelValue78.asString();
        byte[] byteArray80 = longModelValue78.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue81 = new org.jboss.dmr.BytesModelValue(byteArray80);
        int int84 = inputStream76.read(byteArray80, (int) (short) 1, (int) (byte) -1);
        java.lang.String str85 = org.jboss.dmr.Base64.encodeBytes(byteArray80);
        org.jboss.dmr.ModelNode modelNode86 = modelNode46.set(byteArray80);
        boolean boolean87 = modelNode15.equals(modelNode46);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode88 = modelNode15.add();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str30, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode33);
        org.junit.Assert.assertNotNull(modelNodeList34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")" + "'", str36, "(\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"true\")");
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str65, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList66);
        org.junit.Assert.assertNotNull(modelNode67);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNode69);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "AAAAAAAAAAE=" + "'", str85, "AAAAAAAAAAE=");
        org.junit.Assert.assertNotNull(modelNode86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean5 = objectModelValue0.asBoolean();
        boolean boolean6 = objectModelValue0.asBoolean();
        boolean boolean7 = objectModelValue0.asBoolean();
        long long9 = objectModelValue0.asLong((long) 1);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        java.lang.Throwable throwable4 = null;
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable4);
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException5);
        java.lang.Throwable throwable8 = null;
        org.jboss.dmr.stream.ModelException modelException9 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable8);
        org.jboss.dmr.stream.ModelException modelException10 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException9);
        modelException5.addSuppressed((java.lang.Throwable) modelException9);
        java.lang.Throwable[] throwableArray12 = modelException9.getSuppressed();
        org.jboss.dmr.stream.ModelException modelException13 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException9);
        org.jboss.dmr.stream.ModelException modelException14 = new org.jboss.dmr.stream.ModelException("32", (java.lang.Throwable) modelException9);
        org.jboss.dmr.stream.ModelException modelException15 = new org.jboss.dmr.stream.ModelException("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQACFBST1BFUlRZ", (java.lang.Throwable) modelException14);
        org.jboss.dmr.stream.ModelException modelException16 = new org.jboss.dmr.stream.ModelException("", (java.lang.Throwable) modelException15);
        java.lang.Throwable[] throwableArray17 = modelException16.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        double double4 = longModelValue1.asDouble((double) 32L);
        org.jboss.dmr.ValueExpression valueExpression5 = longModelValue1.asExpression();
        long long7 = longModelValue1.asLong((long) 'a');
        byte[] byteArray8 = longModelValue1.asBytes();
        boolean boolean9 = longModelValue1.asBoolean();
        java.lang.String str10 = longModelValue1.toString();
        double double12 = longModelValue1.asDouble((double) (short) 100);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(valueExpression5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1L" + "'", str10, "1L");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.resolve();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode11 = modelNode7.add("(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => 2)", (int) 'b');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        org.jboss.dmr.Property property12 = new org.jboss.dmr.Property("", modelNode11);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set(property12);
        org.jboss.dmr.PropertyModelValue propertyModelValue15 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode13, false);
        java.util.List<org.jboss.dmr.Property> propertyList16 = modelNode13.asPropertyListOrEmpty();
        java.util.Set<java.lang.String> strSet17 = modelNode13.keys();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode20 = modelNode13.add("rO0ABXNyAB1vcmcuamJvc3MuZG1yLlZhbHVlRXhwcmVzc2lvbvwmn+JujpBcDAAAeHB3BgAEdHJ1\nZXg=", false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(propertyList16);
        org.junit.Assert.assertNotNull(strSet17);
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isLong();
        boolean boolean17 = modelReader15.isBigDecimal();
        boolean boolean18 = modelReader15.isUndefined();
        boolean boolean19 = modelReader15.isBytes();
        boolean boolean20 = modelReader15.isInt();
        boolean boolean21 = modelReader15.isListEnd();
        boolean boolean22 = modelReader15.isString();
        boolean boolean23 = modelReader15.isDouble();
        boolean boolean24 = modelReader15.isType();
        boolean boolean25 = modelReader15.isLong();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelNode modelNode10 = propertyModelValue9.asObject();
        boolean boolean12 = modelNode10.hasDefined("{\"hi!\" => 0.0}");
        java.io.OutputStream outputStream13 = null;
        org.jboss.dmr.Base64.OutputStream outputStream14 = new org.jboss.dmr.Base64.OutputStream(outputStream13);
        outputStream14.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream16 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream14);
        org.jboss.dmr.Base64.OutputStream outputStream17 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        outputStream16.flushBase64();
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        org.jboss.dmr.Base64.OutputStream outputStream20 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream16);
        outputStream20.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream22 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream20);
        // The following exception was thrown during execution in test generation
        try {
            modelNode10.writeBase64((java.io.OutputStream) outputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        boolean boolean9 = propertyModelValue7.has("10.0");
        boolean boolean11 = propertyModelValue7.has("AAAAIA==");
        org.jboss.dmr.ModelValue modelValue12 = propertyModelValue7.resolve();
        java.lang.String str13 = propertyModelValue7.asString();
        org.jboss.dmr.ExpressionValue expressionValue15 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue17 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean18 = expressionValue15.equals(expressionValue17);
        org.jboss.dmr.ExpressionValue expressionValue20 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue22 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean23 = expressionValue20.equals(expressionValue22);
        boolean boolean24 = expressionValue15.equals(expressionValue22);
        org.jboss.dmr.ModelValue modelValue25 = expressionValue15.resolve();
        java.lang.String str26 = expressionValue15.asString();
        org.jboss.dmr.ModelValue modelValue27 = expressionValue15.resolve();
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory29 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream30 = null;
        org.jboss.dmr.Base64.InputStream inputStream32 = new org.jboss.dmr.Base64.InputStream(inputStream30, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream33 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream32);
        org.jboss.dmr.stream.ModelReader modelReader34 = modelStreamFactory29.newModelReader((java.io.InputStream) inputStream33);
        java.io.OutputStream outputStream35 = null;
        org.jboss.dmr.Base64.OutputStream outputStream36 = new org.jboss.dmr.Base64.OutputStream(outputStream35);
        org.jboss.dmr.Base64.OutputStream outputStream37 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream36);
        outputStream36.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter40 = modelStreamFactory29.newModelWriter((java.io.OutputStream) outputStream36);
        org.jboss.dmr.stream.ModelWriter modelWriter41 = modelWriter40.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter43 = modelWriter41.writeInt((int) (byte) 10);
        expressionValue15.write(modelWriter41);
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long47 = modelNode46.asLong();
        org.jboss.dmr.ValueExpression valueExpression48 = modelNode46.asExpression();
        java.math.BigDecimal bigDecimal49 = valueExpression48.resolveBigDecimal();
        java.lang.String str50 = valueExpression48.getExpressionString();
        java.math.BigDecimal bigDecimal51 = valueExpression48.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue52 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal51);
        boolean boolean53 = bigDecimalModelValue52.asBoolean();
        long long54 = bigDecimalModelValue52.asLong();
        java.lang.String str55 = bigDecimalModelValue52.asString();
        java.math.BigInteger bigInteger56 = bigDecimalModelValue52.asBigInteger();
        int int58 = bigDecimalModelValue52.asInt(0);
        int int59 = bigDecimalModelValue52.asInt();
        int int61 = bigDecimalModelValue52.asInt((int) 'd');
        java.math.BigDecimal bigDecimal62 = bigDecimalModelValue52.asBigDecimal();
        org.jboss.dmr.stream.ModelWriter modelWriter63 = modelWriter41.writeBigDecimal(bigDecimal62);
        propertyModelValue7.write(modelWriter41);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=\" => (\"hi!\" => expression \"hi!\"))" + "'", str13, "(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=\" => (\"hi!\" => expression \"hi!\"))");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(modelValue25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(modelValue27);
        org.junit.Assert.assertNotNull(modelStreamFactory29);
        org.junit.Assert.assertNotNull(modelReader34);
        org.junit.Assert.assertNotNull(modelWriter40);
        org.junit.Assert.assertNotNull(modelWriter41);
        org.junit.Assert.assertNotNull(modelWriter43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(valueExpression48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1.0" + "'", str50, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1.0" + "'", str55, "1.0");
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(modelWriter63);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue(52.0d);
        double double2 = doubleModelValue1.asDouble();
        int int4 = doubleModelValue1.asInt(100);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 52.0d + "'", double2 == 52.0d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        java.math.BigInteger bigInteger5 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.ValueExpression valueExpression6 = doubleModelValue1.asExpression();
        long long8 = doubleModelValue1.asLong(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.lang.String str5 = modelNode1.toString();
        org.jboss.dmr.ModelNode modelNode6 = modelNode1.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(100);
        org.jboss.dmr.ModelNode modelNode9 = modelNode0.add(modelNode1);
        org.jboss.dmr.ModelNode modelNode10 = modelNode0.resolve();
        org.jboss.dmr.LongModelValue longModelValue13 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str14 = longModelValue13.asString();
        byte[] byteArray15 = longModelValue13.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue16 = new org.jboss.dmr.BytesModelValue(byteArray15);
        java.lang.String str17 = bytesModelValue16.asString();
        int int18 = bytesModelValue16.asInt();
        byte[] byteArray19 = bytesModelValue16.asBytes();
        org.jboss.dmr.ModelNode modelNode20 = modelNode0.add("{ \"BYTES_VALUE\" : \"v/AAAAAAAAA=\" }", byteArray19);
        org.jboss.dmr.ModelType modelType21 = org.jboss.dmr.ModelType.PROPERTY;
        char char22 = modelType21.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue23 = org.jboss.dmr.TypeModelValue.of(modelType21);
        org.jboss.dmr.ModelType modelType24 = org.jboss.dmr.ModelType.PROPERTY;
        char char25 = modelType24.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue26 = org.jboss.dmr.TypeModelValue.of(modelType24);
        boolean boolean27 = typeModelValue23.equals(typeModelValue26);
        java.lang.String str28 = typeModelValue26.asString();
        org.jboss.dmr.ValueExpression valueExpression29 = typeModelValue26.asExpression();
        org.jboss.dmr.ModelNode modelNode30 = modelNode20.set(valueExpression29);
        org.jboss.dmr.ModelNode modelNode32 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode34 = modelNode32.set((int) '#');
        java.lang.Boolean boolean35 = modelNode32.asBooleanOrNull();
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.set("hi!", 0.0d);
        java.lang.String str40 = modelNode36.toString();
        org.jboss.dmr.ModelNode modelNode41 = modelNode36.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode43 = modelNode36.set(100);
        org.jboss.dmr.ModelNode modelNode46 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode48 = modelNode46.set((int) '#');
        org.jboss.dmr.ModelNode modelNode49 = modelNode36.setNoCopy("EXPRESSION_VALUE", modelNode48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode49.resolve();
        org.jboss.dmr.ModelType modelType51 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode52 = new org.jboss.dmr.ModelNode(modelType51);
        org.jboss.dmr.ModelNode modelNode54 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode57 = modelNode54.set("hi!", 0.0d);
        org.jboss.dmr.Property property58 = new org.jboss.dmr.Property("", modelNode57);
        org.jboss.dmr.ModelNode modelNode59 = modelNode52.set(property58);
        org.jboss.dmr.PropertyModelValue propertyModelValue60 = new org.jboss.dmr.PropertyModelValue(property58);
        org.jboss.dmr.PropertyModelValue propertyModelValue61 = new org.jboss.dmr.PropertyModelValue(property58);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList62 = propertyModelValue61.asList();
        org.jboss.dmr.ModelNode modelNode63 = modelNode50.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList62);
        org.jboss.dmr.IntModelValue intModelValue66 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str67 = intModelValue66.asString();
        double double69 = intModelValue66.asDouble((double) 2);
        java.math.BigDecimal bigDecimal70 = intModelValue66.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode71 = modelNode63.add("(\"hi!\" => 0.0)", bigDecimal70);
        org.jboss.dmr.ModelNode modelNode72 = modelNode32.set(bigDecimal70);
        org.jboss.dmr.ValueExpression valueExpression73 = modelNode72.asExpression();
        boolean boolean74 = modelNode20.equals(modelNode72);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(\"hi!\" => 0.0)" + "'", str5, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str17, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + modelType21 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType21.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char22 + "' != '" + 'p' + "'", char22 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue23);
        org.junit.Assert.assertTrue("'" + modelType24 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType24.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + 'p' + "'", char25 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PROPERTY" + "'", str28, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertEquals("'" + boolean35 + "' != '" + true + "'", boolean35, true);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(\"hi!\" => 0.0)" + "'", str40, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertTrue("'" + modelType51 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType51.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(modelNodeList62);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "32" + "'", str67, "32");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 32.0d + "'", double69 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertNotNull(valueExpression73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        int int4 = objectModelValue0.asInt((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue5 = objectModelValue0.protect();
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        java.lang.String str10 = modelNode6.toString();
        org.jboss.dmr.ModelNode modelNode11 = modelNode6.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode13 = modelNode6.set(100);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode18 = modelNode16.set((int) '#');
        org.jboss.dmr.ModelNode modelNode19 = modelNode6.setNoCopy("EXPRESSION_VALUE", modelNode18);
        org.jboss.dmr.ModelNode modelNode20 = modelNode19.setEmptyList();
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.add();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList26 = modelNode25.asList();
        java.lang.String str28 = modelNode25.asString("true");
        org.jboss.dmr.ModelNode modelNode30 = modelNode25.set((double) 'a');
        org.jboss.dmr.IntModelValue intModelValue32 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str33 = intModelValue32.asString();
        double double35 = intModelValue32.asDouble((double) 2);
        java.math.BigDecimal bigDecimal36 = intModelValue32.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue37 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal36);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue38 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal36);
        org.jboss.dmr.ModelNode modelNode39 = modelNode30.set(bigDecimal36);
        org.jboss.dmr.ModelNode modelNode40 = modelNode20.set(bigDecimal36);
        boolean boolean41 = objectModelValue0.equals((java.lang.Object) modelNode20);
        org.jboss.dmr.ModelNode modelNode43 = modelNode20.set((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==", true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal47 = modelNode43.asBigDecimalOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(\"hi!\" => 0.0)" + "'", str10, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNodeList26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(\"hi!\" => 0.0)" + "'", str28, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "32" + "'", str33, "32");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 32.0d + "'", double35 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(modelNode43);
        org.junit.Assert.assertNotNull(modelNode46);
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        org.jboss.dmr.ModelNodeFactory modelNodeFactory0 = org.jboss.dmr.ModelNodeFactory.INSTANCE;
        org.jboss.dmr.ModelNode modelNode3 = modelNodeFactory0.readFrom("10.0", false);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode6 = modelNode3.add("org.jboss.dmr.stream.ModelException: \"Expression \\\"true\\\"\"", (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNodeFactory0);
        org.junit.Assert.assertNotNull(modelNode3);
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3GXAAEGV4cHJlc3Np\\nb24gImhpISJiAAAAAQF4\"");
        org.jboss.dmr.ModelValue modelValue2 = expressionValue1.resolve();
        java.io.DataOutput dataOutput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.writeExternal(dataOutput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelValue2);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.clear();
        boolean boolean4 = modelNode1.has((int) '#');
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode9 = modelNode1.set("1");
        org.jboss.dmr.ModelNode modelNode10 = modelNode9.clone();
        java.io.DataInputStream dataInputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode9.readExternal(dataInputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
        java.lang.String str2 = stringModelValue1.asString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = stringModelValue1.asBoolean(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"" + "'", str2, "\"(\\\"\\\" => (\\\"hi!\\\" => 0.0))\"");
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue7);
        org.jboss.dmr.ModelValue modelValue9 = listModelValue7.resolve();
        int int11 = listModelValue7.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList12 = listModelValue7.asPropertyList();
        boolean boolean13 = intModelValue1.equals((java.lang.Object) listModelValue7);
        double double14 = intModelValue1.asDouble();
        int int15 = intModelValue1.asInt();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(true);
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.resolve();
        java.lang.String str3 = modelNode1.asString();
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set((long) 52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.setExpression("hi!", "hi!");
        java.lang.String str11 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode7.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode14 = modelNode7.set((double) 0);
        org.jboss.dmr.ModelType modelType16 = org.jboss.dmr.ModelType.PROPERTY;
        char char17 = modelType16.getTypeChar();
        org.jboss.dmr.ModelNode modelNode18 = modelNode7.set("[(\"hi!\" => 0.0)]", modelType16);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("\"(\\\"hi!\\\" => 0.0)\"", modelNode18);
        org.jboss.dmr.ModelNode modelNode20 = modelNode5.set(property19);
        org.jboss.dmr.ModelType modelType21 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode(modelType21);
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.set("hi!", 0.0d);
        org.jboss.dmr.Property property28 = new org.jboss.dmr.Property("", modelNode27);
        org.jboss.dmr.ModelNode modelNode29 = modelNode22.set(property28);
        org.jboss.dmr.ModelNode modelNode30 = property28.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue31 = new org.jboss.dmr.PropertyModelValue(property28);
        java.util.List<org.jboss.dmr.Property> propertyList32 = propertyModelValue31.asPropertyList();
        org.jboss.dmr.ModelNode modelNode34 = propertyModelValue31.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode35 = modelNode34.setEmptyList();
        org.jboss.dmr.BooleanModelValue booleanModelValue38 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long39 = booleanModelValue38.asLong();
        org.jboss.dmr.ValueExpression valueExpression40 = booleanModelValue38.asExpression();
        java.lang.String str41 = valueExpression40.toString();
        org.jboss.dmr.ExpressionValue expressionValue43 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression44 = expressionValue43.asExpression();
        boolean boolean45 = valueExpression40.equals(valueExpression44);
        org.jboss.dmr.LongModelValue longModelValue47 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal48 = longModelValue47.asBigDecimal();
        int int49 = longModelValue47.asInt();
        org.jboss.dmr.ValueExpression valueExpression50 = longModelValue47.asExpression();
        boolean boolean51 = valueExpression44.equals(valueExpression50);
        int int52 = valueExpression50.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue54 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression55 = expressionValue54.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver56 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str57 = valueExpression55.resolveString(valueExpressionResolver56);
        java.math.BigInteger bigInteger58 = valueExpression50.resolveBigInteger(valueExpressionResolver56);
        org.jboss.dmr.ModelNode modelNode59 = modelNode34.add("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]", valueExpression50);
        java.lang.String str60 = valueExpression50.resolveString();
        org.jboss.dmr.ModelNode modelNode61 = modelNode5.set(valueExpression50);
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long64 = modelNode63.asLong();
        org.jboss.dmr.ValueExpression valueExpression65 = modelNode63.asExpression();
        java.math.BigDecimal bigDecimal66 = valueExpression65.resolveBigDecimal();
        org.jboss.dmr.BooleanModelValue booleanModelValue68 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long69 = booleanModelValue68.asLong();
        org.jboss.dmr.ValueExpression valueExpression70 = booleanModelValue68.asExpression();
        boolean boolean72 = valueExpression70.equals((java.lang.Object) 'p');
        boolean boolean73 = valueExpression65.equals(valueExpression70);
        org.jboss.dmr.ModelNode modelNode74 = new org.jboss.dmr.ModelNode(valueExpression65);
        org.jboss.dmr.ModelNode modelNode76 = modelNode74.set(false);
        boolean boolean77 = modelNode5.equals(modelNode76);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory79 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream80 = null;
        org.jboss.dmr.Base64.InputStream inputStream82 = new org.jboss.dmr.Base64.InputStream(inputStream80, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream83 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream82);
        org.jboss.dmr.stream.ModelReader modelReader84 = modelStreamFactory79.newModelReader((java.io.InputStream) inputStream83);
        java.io.OutputStream outputStream85 = null;
        org.jboss.dmr.Base64.OutputStream outputStream86 = new org.jboss.dmr.Base64.OutputStream(outputStream85);
        org.jboss.dmr.Base64.OutputStream outputStream87 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream86);
        outputStream86.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter90 = modelStreamFactory79.newModelWriter((java.io.OutputStream) outputStream86);
        java.io.OutputStream outputStream91 = null;
        org.jboss.dmr.Base64.OutputStream outputStream92 = new org.jboss.dmr.Base64.OutputStream(outputStream91);
        org.jboss.dmr.Base64.OutputStream outputStream93 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream92);
        org.jboss.dmr.Base64.OutputStream outputStream94 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream93);
        outputStream93.resumeEncoding();
        outputStream93.resumeEncoding();
        org.jboss.dmr.stream.ModelWriter modelWriter97 = modelStreamFactory79.newModelWriter((java.io.OutputStream) outputStream93);
        org.jboss.dmr.Base64.OutputStream outputStream98 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream93);
        modelNode76.writeExternal((java.io.OutputStream) outputStream93);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str11, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertTrue("'" + modelType16 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType16.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'p' + "'", char17 == 'p');
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertTrue("'" + modelType21 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType21.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(booleanModelValue38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(valueExpression40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Expression \"true\"" + "'", str41, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(valueExpression50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(valueExpression55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "52" + "'", str60, "52");
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(valueExpression65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(booleanModelValue68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(valueExpression70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(modelNode76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory79);
        org.junit.Assert.assertNotNull(modelReader84);
        org.junit.Assert.assertNotNull(modelWriter90);
        org.junit.Assert.assertNotNull(modelWriter97);
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("1");
        boolean boolean5 = objectModelValue0.asBoolean();
        int int7 = objectModelValue0.asInt(0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList8 = objectModelValue0.asList();
        int int9 = objectModelValue0.asInt();
        org.jboss.dmr.ModelValue modelValue10 = objectModelValue0.copy();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(modelNodeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(modelValue10);
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue3 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue5 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean6 = stringModelValue3.equals(stringModelValue5);
        byte[] byteArray7 = stringModelValue5.asBytes();
        java.lang.Object obj8 = null;
        boolean boolean9 = stringModelValue5.equals(obj8);
        boolean boolean11 = stringModelValue5.equals((java.lang.Object) "TYPE_MODEL_VALUE");
        boolean boolean12 = stringModelValue1.equals(stringModelValue5);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal13 = stringModelValue5.asBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        java.lang.String str9 = property7.getName();
        org.jboss.dmr.Property property10 = property7.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue11 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode24.asList();
        org.jboss.dmr.ListModelValue listModelValue26 = new org.jboss.dmr.ListModelValue(modelNodeList25);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue26);
        org.jboss.dmr.ModelValue modelValue28 = listModelValue26.resolve();
        int int30 = listModelValue26.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList31 = listModelValue26.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList32 = modelNode20.asPropertyList(propertyList31);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        org.jboss.dmr.Property property38 = new org.jboss.dmr.Property("", modelNode37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.get(strArray39);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode44.asList();
        org.jboss.dmr.ListModelValue listModelValue46 = new org.jboss.dmr.ListModelValue(modelNodeList45);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue46);
        org.jboss.dmr.ModelValue modelValue48 = listModelValue46.resolve();
        int int50 = listModelValue46.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList51 = listModelValue46.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList52 = modelNode40.asPropertyList(propertyList51);
        modelNode20.setNoCopy(modelNode40);
        org.jboss.dmr.ModelNode modelNode55 = modelNode40.set((long) 100);
        org.jboss.dmr.ModelType modelType56 = modelNode55.getType();
        boolean boolean58 = modelNode55.has("[97L]");
        org.jboss.dmr.PropertyModelValue propertyModelValue59 = new org.jboss.dmr.PropertyModelValue("Expression \"hi!\"", modelNode55);
        java.util.Set<java.lang.String> strSet60 = propertyModelValue59.getKeys();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList61 = propertyModelValue59.asList();
        boolean boolean62 = propertyModelValue11.equals(propertyModelValue59);
        org.jboss.dmr.ModelValue modelValue63 = propertyModelValue11.copy();
        org.jboss.dmr.ModelNode modelNode64 = propertyModelValue11.asObject();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelValue28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(propertyList31);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertNotNull(modelValue48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(propertyList51);
        org.junit.Assert.assertNotNull(propertyList52);
        org.junit.Assert.assertNotNull(modelNode55);
        org.junit.Assert.assertTrue("'" + modelType56 + "' != '" + org.jboss.dmr.ModelType.LONG + "'", modelType56.equals(org.jboss.dmr.ModelType.LONG));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(modelNodeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(modelValue63);
        org.junit.Assert.assertNotNull(modelNode64);
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = inputStream2.markSupported();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isString();
        boolean boolean18 = modelReader15.isBoolean();
        boolean boolean19 = modelReader15.isUndefined();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = modelReader15.getBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't boolean");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        org.jboss.dmr.Property property5 = new org.jboss.dmr.Property("", modelNode4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode7 = modelNode4.get(strArray6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode11 = modelNode8.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = modelNode11.asList();
        org.jboss.dmr.ListModelValue listModelValue13 = new org.jboss.dmr.ListModelValue(modelNodeList12);
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue13);
        org.jboss.dmr.ModelValue modelValue15 = listModelValue13.resolve();
        int int17 = listModelValue13.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue13.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList19 = modelNode7.asPropertyList(propertyList18);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.get(strArray26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode31 = modelNode28.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = modelNode31.asList();
        org.jboss.dmr.ListModelValue listModelValue33 = new org.jboss.dmr.ListModelValue(modelNodeList32);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue33);
        org.jboss.dmr.ModelValue modelValue35 = listModelValue33.resolve();
        int int37 = listModelValue33.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList38 = listModelValue33.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList39 = modelNode27.asPropertyList(propertyList38);
        modelNode7.setNoCopy(modelNode27);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        org.jboss.dmr.ModelNode modelNode45 = new org.jboss.dmr.ModelNode();
        java.lang.Long long46 = modelNode45.asLongOrNull();
        org.jboss.dmr.ModelNode[] modelNodeArray47 = new org.jboss.dmr.ModelNode[] { modelNode41, modelNode45 };
        java.util.ArrayList<org.jboss.dmr.ModelNode> modelNodeList48 = new java.util.ArrayList<org.jboss.dmr.ModelNode>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48, modelNodeArray47);
        org.jboss.dmr.ModelNode modelNode50 = modelNode7.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList48);
        org.jboss.dmr.ModelNode modelNode53 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long54 = modelNode53.asLong();
        org.jboss.dmr.ValueExpression valueExpression55 = modelNode53.asExpression();
        java.math.BigDecimal bigDecimal56 = valueExpression55.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode57 = modelNode7.set("true", bigDecimal56);
        java.lang.String str58 = modelNode7.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode60 = new org.jboss.dmr.ModelNode(8);
        org.jboss.dmr.ModelNode modelNode61 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode64 = modelNode61.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList65 = modelNode64.asList();
        org.jboss.dmr.ModelNode modelNode68 = modelNode64.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType69 = modelNode64.getType();
        org.jboss.dmr.ModelNode modelNode70 = modelNode60.set(modelNode64);
        org.jboss.dmr.ModelNode modelNode71 = modelNode64.clone();
        modelNode7.setNoCopy(modelNode64);
        org.jboss.dmr.ModelNode modelNode73 = modelNode64.setEmptyObject();
        long long74 = modelNode73.asLong();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNodeList32);
        org.junit.Assert.assertNotNull(modelValue35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(propertyList38);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNull(long46);
        org.junit.Assert.assertNotNull(modelNodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(valueExpression55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(modelNode57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(\"true\" => big decimal 1.0)" + "'", str58, "(\"true\" => big decimal 1.0)");
        org.junit.Assert.assertNotNull(modelNode64);
        org.junit.Assert.assertNotNull(modelNodeList65);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertTrue("'" + modelType69 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType69.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(modelNode73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelNode modelNode13 = listModelValue5.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        java.lang.String str19 = modelNode15.toString();
        org.jboss.dmr.ModelNode modelNode20 = modelNode15.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        org.jboss.dmr.ModelNode modelNode27 = modelNode15.set(property26);
        org.jboss.dmr.PropertyModelValue propertyModelValue29 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode27, false);
        org.jboss.dmr.Property property30 = propertyModelValue29.asProperty();
        boolean boolean31 = listModelValue5.equals((java.lang.Object) propertyModelValue29);
        boolean boolean33 = listModelValue5.asBoolean(true);
        int int34 = listModelValue5.asInt();
        long long36 = listModelValue5.asLong((-1L));
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(\"hi!\" => 0.0)" + "'", str19, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        org.jboss.dmr.ModelNode modelNode7 = objectModelValue0.removeChild("\"TYPE_MODEL_VALUE\"");
        org.jboss.dmr.ModelNode modelNode9 = objectModelValue0.removeChild("\"[(\\\"hi!\\\" => expression \\\"hi!\\\"),bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }]\"");
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(modelNode7);
        org.junit.Assert.assertNull(modelNode9);
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.IntModelValue intModelValue7 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str8 = intModelValue7.asString();
        double double10 = intModelValue7.asDouble((double) 2);
        java.math.BigInteger bigInteger11 = intModelValue7.asBigInteger();
        boolean boolean12 = listModelValue5.equals((java.lang.Object) intModelValue7);
        boolean boolean13 = listModelValue5.asBoolean();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 32.0d + "'", double10 == 32.0d);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asList();
        java.lang.String str7 = modelNode4.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue10 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long11 = booleanModelValue10.asLong();
        org.jboss.dmr.ValueExpression valueExpression12 = booleanModelValue10.asExpression();
        java.lang.String str13 = valueExpression12.toString();
        org.jboss.dmr.ExpressionValue expressionValue15 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression16 = expressionValue15.asExpression();
        boolean boolean17 = valueExpression12.equals(valueExpression16);
        java.lang.String str18 = valueExpression16.resolveString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode4.set("Expression \"1\"", valueExpression16);
        java.lang.String str20 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode19);
        org.jboss.dmr.PropertyModelValue propertyModelValue22 = new org.jboss.dmr.PropertyModelValue("(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => expression \"1.0\")", modelNode19, false);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue25 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger26 = booleanModelValue25.asBigInteger();
        org.jboss.dmr.ModelNode modelNode27 = modelNode23.add(bigInteger26);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode(bigInteger26);
        boolean boolean29 = modelNode28.isProtected();
        org.jboss.dmr.ModelNode modelNode30 = modelNode28.clone();
        org.jboss.dmr.ModelNode modelNode31 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue33 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger34 = booleanModelValue33.asBigInteger();
        org.jboss.dmr.ModelNode modelNode35 = modelNode31.add(bigInteger34);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode(bigInteger34);
        org.jboss.dmr.ModelNode modelNode37 = modelNode30.set(bigInteger34);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode38 = modelNode19.add(bigInteger34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(\"hi!\" => 0.0)" + "'", str7, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Expression \"true\"" + "'", str13, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==" + "'", str20, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3F3AADkV4cHJlc3Np\nb24gIjEiZQADaGkheA==");
        org.junit.Assert.assertNotNull(booleanModelValue25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(booleanModelValue33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(modelNode35);
        org.junit.Assert.assertNotNull(modelNode37);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode9 = modelNode6.set("hi!", 0.0d);
        org.jboss.dmr.Property property10 = new org.jboss.dmr.Property("", modelNode9);
        boolean boolean12 = modelNode9.equals((java.lang.Object) 100L);
        boolean boolean13 = modelNode1.equals(modelNode9);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode18 = modelNode15.set("hi!", 0.0d);
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("", modelNode18);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode21 = modelNode18.get(strArray20);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int23 = modelNode22.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode24 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode27 = modelNode24.setExpression("hi!", "hi!");
        java.lang.String str28 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode24);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList29 = modelNode24.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode30 = modelNode22.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode21.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode32 = modelNode9.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList29);
        org.jboss.dmr.ModelNode modelNode34 = modelNode9.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelType modelType35 = modelNode34.getType();
        byte[] byteArray38 = org.jboss.dmr.Base64.decode("true");
        org.jboss.dmr.ModelNode modelNode39 = modelNode34.set("\"(\\\"hi!\\\" => 0.0)\"", byteArray38);
        org.jboss.dmr.PropertyModelValue propertyModelValue40 = new org.jboss.dmr.PropertyModelValue("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode39);
        org.jboss.dmr.ModelNode modelNode41 = modelNode39.setEmptyList();
        org.jboss.dmr.ModelNode modelNode42 = modelNode41.addEmptyList();
        long long43 = modelNode41.asLong();
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(modelNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str28, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNode34);
        org.junit.Assert.assertTrue("'" + modelType35 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType35.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-74, -69, -98]");
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue(10.0d);
        long long3 = doubleModelValue1.asLong((long) (byte) 100);
        double double4 = doubleModelValue1.asDouble();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long11 = modelNode10.asLong();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode24.asList();
        org.jboss.dmr.ListModelValue listModelValue26 = new org.jboss.dmr.ListModelValue(modelNodeList25);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue26);
        org.jboss.dmr.ModelValue modelValue28 = listModelValue26.resolve();
        int int30 = listModelValue26.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList31 = listModelValue26.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList32 = modelNode20.asPropertyList(propertyList31);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        org.jboss.dmr.Property property38 = new org.jboss.dmr.Property("", modelNode37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.get(strArray39);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode44.asList();
        org.jboss.dmr.ListModelValue listModelValue46 = new org.jboss.dmr.ListModelValue(modelNodeList45);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue46);
        org.jboss.dmr.ModelValue modelValue48 = listModelValue46.resolve();
        int int50 = listModelValue46.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList51 = listModelValue46.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList52 = modelNode40.asPropertyList(propertyList51);
        modelNode20.setNoCopy(modelNode40);
        org.jboss.dmr.ModelNode modelNode54 = modelNode10.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode20);
        org.jboss.dmr.ModelNode modelNode56 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode59 = modelNode56.set("hi!", 0.0d);
        org.jboss.dmr.Property property60 = new org.jboss.dmr.Property("", modelNode59);
        java.lang.String[] strArray61 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode62 = modelNode59.get(strArray61);
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int64 = modelNode63.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode65 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode68 = modelNode65.setExpression("hi!", "hi!");
        java.lang.String str69 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode65);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList70 = modelNode65.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode71 = modelNode63.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList70);
        org.jboss.dmr.ModelNode modelNode72 = modelNode62.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList70);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList73 = modelNode10.asList(modelNodeList70);
        org.jboss.dmr.PropertyModelValue propertyModelValue75 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode10, false);
        org.jboss.dmr.ModelType modelType76 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode77 = new org.jboss.dmr.ModelNode(modelType76);
        org.jboss.dmr.ModelNode modelNode79 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode82 = modelNode79.set("hi!", 0.0d);
        org.jboss.dmr.Property property83 = new org.jboss.dmr.Property("", modelNode82);
        org.jboss.dmr.ModelNode modelNode84 = modelNode77.set(property83);
        org.jboss.dmr.PropertyModelValue propertyModelValue85 = new org.jboss.dmr.PropertyModelValue(property83);
        org.jboss.dmr.ModelValue modelValue86 = propertyModelValue85.copy();
        boolean boolean87 = propertyModelValue75.equals(propertyModelValue85);
        boolean boolean89 = propertyModelValue85.has("bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        boolean boolean90 = stringModelValue1.equals((java.lang.Object) propertyModelValue85);
        java.lang.String str91 = stringModelValue1.asString();
        java.io.DataOutput dataOutput92 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringModelValue1.writeExternal(dataOutput92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelValue28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(propertyList31);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertNotNull(modelValue48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(propertyList51);
        org.junit.Assert.assertNotNull(propertyList52);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str69, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertNotNull(modelNodeList73);
        org.junit.Assert.assertTrue("'" + modelType76 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType76.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode82);
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertNotNull(modelValue86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Expression \"true\"" + "'", str91, "Expression \"true\"");
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = propertyModelValue10.asList();
        java.util.List<org.jboss.dmr.Property> propertyList12 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelValue modelValue13 = propertyModelValue10.protect();
        java.util.List<org.jboss.dmr.Property> propertyList14 = propertyModelValue10.asPropertyList();
        org.jboss.dmr.ModelNode modelNode15 = propertyModelValue10.asObject();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode17 = propertyModelValue10.requireChild("H4sIAAAAAAAAANv/gQEMALshig4IAAAA");
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child 'H4sIAAAAAAAAANv/gQEMALshig4IAAAA' exists");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertNotNull(modelValue13);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertNotNull(modelNode15);
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(35L);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.BooleanModelValue booleanModelValue5 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger6 = booleanModelValue5.asBigInteger();
        org.jboss.dmr.ModelNode modelNode7 = modelNode3.add(bigInteger6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode(bigInteger6);
        org.jboss.dmr.ModelType modelType10 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode(modelType10);
        org.jboss.dmr.ModelNode modelNode12 = modelNode8.set("true", modelType10);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.set("\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\"", modelType10);
        java.lang.String str14 = modelNode13.asString();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.PROPERTY;
        char char16 = modelType15.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue17 = org.jboss.dmr.TypeModelValue.of(modelType15);
        org.jboss.dmr.ModelType modelType18 = org.jboss.dmr.ModelType.PROPERTY;
        char char19 = modelType18.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue20 = org.jboss.dmr.TypeModelValue.of(modelType18);
        boolean boolean21 = typeModelValue17.equals(typeModelValue20);
        java.lang.String str22 = typeModelValue20.asString();
        org.jboss.dmr.ValueExpression valueExpression23 = typeModelValue20.asExpression();
        org.jboss.dmr.ModelType modelType24 = typeModelValue20.asType();
        boolean boolean26 = typeModelValue20.asBoolean(true);
        java.lang.String str27 = typeModelValue20.asString();
        java.lang.String str28 = typeModelValue20.asString();
        org.jboss.dmr.ValueExpression valueExpression29 = typeModelValue20.asExpression();
        org.jboss.dmr.ModelNode modelNode30 = modelNode13.set(valueExpression29);
        org.jboss.dmr.ModelNode modelNode32 = modelNode30.set((-1L));
        org.jboss.dmr.ModelNode modelNode34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode35 = modelNode32.add("QCQ=", modelNode34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + modelType10 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType10.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(\"\\\"bytes {\\\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\\\n}\\\"\" => INT)" + "'", str14, "(\"\\\"bytes {\\\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\\\n}\\\"\" => INT)");
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType15.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'p' + "'", char16 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue17);
        org.junit.Assert.assertTrue("'" + modelType18 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType18.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + 'p' + "'", char19 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PROPERTY" + "'", str22, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression23);
        org.junit.Assert.assertTrue("'" + modelType24 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType24.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PROPERTY" + "'", str27, "PROPERTY");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PROPERTY" + "'", str28, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression29);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode32);
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromBase64String("QCQAAAAAAAA=");
            org.junit.Assert.fail("Expected exception of type java.io.InvalidObjectException; message: Invalid type character '@'");
        } catch (java.io.InvalidObjectException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList6 = modelNode5.asList();
        org.jboss.dmr.ListModelValue listModelValue7 = new org.jboss.dmr.ListModelValue(modelNodeList6);
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue7);
        org.jboss.dmr.ModelValue modelValue9 = listModelValue7.resolve();
        int int11 = listModelValue7.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList12 = listModelValue7.asPropertyList();
        boolean boolean13 = intModelValue1.equals((java.lang.Object) listModelValue7);
        double double14 = intModelValue1.asDouble();
        double double15 = intModelValue1.asDouble();
        org.jboss.dmr.IntModelValue intModelValue16 = null;
        boolean boolean17 = intModelValue1.equals(intModelValue16);
        org.jboss.dmr.LongModelValue longModelValue19 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str20 = longModelValue19.asString();
        byte[] byteArray21 = longModelValue19.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue22 = new org.jboss.dmr.BytesModelValue(byteArray21);
        java.lang.String str23 = bytesModelValue22.asString();
        int int24 = bytesModelValue22.asInt();
        int int25 = bytesModelValue22.asInt();
        int int27 = bytesModelValue22.asInt(112);
        int int28 = bytesModelValue22.asInt();
        org.jboss.dmr.BooleanModelValue booleanModelValue30 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray31 = booleanModelValue30.asBytes();
        java.lang.String str32 = booleanModelValue30.asString();
        int int33 = booleanModelValue30.asInt();
        org.jboss.dmr.LongModelValue longModelValue35 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str36 = longModelValue35.asString();
        byte[] byteArray37 = longModelValue35.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue38 = new org.jboss.dmr.BytesModelValue(byteArray37);
        java.lang.String str39 = bytesModelValue38.asString();
        int int40 = bytesModelValue38.asInt();
        byte[] byteArray41 = bytesModelValue38.asBytes();
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str44 = longModelValue43.asString();
        byte[] byteArray45 = longModelValue43.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue46 = new org.jboss.dmr.BytesModelValue(byteArray45);
        java.lang.String str47 = bytesModelValue46.asString();
        int int48 = bytesModelValue46.asInt();
        int int49 = bytesModelValue46.asInt();
        org.jboss.dmr.LongModelValue longModelValue51 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str52 = longModelValue51.asString();
        byte[] byteArray53 = longModelValue51.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue54 = new org.jboss.dmr.BytesModelValue(byteArray53);
        double double55 = bytesModelValue54.asDouble();
        boolean boolean56 = bytesModelValue46.equals(bytesModelValue54);
        byte[] byteArray57 = bytesModelValue54.asBytes();
        java.math.BigInteger bigInteger58 = bytesModelValue54.asBigInteger();
        boolean boolean59 = bytesModelValue38.equals(bytesModelValue54);
        int int61 = bytesModelValue54.asInt((int) 'J');
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory63 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream64 = null;
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream(inputStream64, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream67 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream66);
        org.jboss.dmr.stream.ModelReader modelReader68 = modelStreamFactory63.newModelReader((java.io.InputStream) inputStream67);
        java.io.OutputStream outputStream69 = null;
        org.jboss.dmr.Base64.OutputStream outputStream70 = new org.jboss.dmr.Base64.OutputStream(outputStream69);
        org.jboss.dmr.Base64.OutputStream outputStream71 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream70);
        outputStream70.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter74 = modelStreamFactory63.newModelWriter((java.io.OutputStream) outputStream70);
        org.jboss.dmr.stream.ModelWriter modelWriter75 = modelWriter74.writeListStart();
        bytesModelValue54.write(modelWriter75);
        org.jboss.dmr.BooleanModelValue booleanModelValue78 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray79 = booleanModelValue78.asBytes();
        java.lang.String str80 = booleanModelValue78.asString();
        int int81 = booleanModelValue78.asInt();
        long long82 = booleanModelValue78.asLong();
        boolean boolean84 = booleanModelValue78.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger85 = booleanModelValue78.asBigInteger();
        java.lang.String str86 = booleanModelValue78.asString();
        byte[] byteArray87 = booleanModelValue78.asBytes();
        java.lang.String str89 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) byteArray87, 10);
        org.jboss.dmr.stream.ModelWriter modelWriter90 = modelWriter75.writeBytes(byteArray87);
        booleanModelValue30.write(modelWriter90);
        bytesModelValue22.write(modelWriter90);
        org.jboss.dmr.stream.ModelWriter modelWriter94 = modelWriter90.writeInt(0);
        intModelValue1.write(modelWriter90);
        org.jboss.dmr.stream.ModelWriter modelWriter96 = modelWriter90.writeListEnd();
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNodeList6);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(propertyList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 32.0d + "'", double15 == 32.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str23, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "true" + "'", str32, "true");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str39, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str47, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 4.9E-324d + "'", double55 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory63);
        org.junit.Assert.assertNotNull(modelReader68);
        org.junit.Assert.assertNotNull(modelWriter74);
        org.junit.Assert.assertNotNull(modelWriter75);
        org.junit.Assert.assertNotNull(booleanModelValue78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "true" + "'", str80, "true");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "true" + "'", str86, "true");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA" + "'", str89, "H4sIAAAAAAAAAFvzloG1tIiBKdppzWfxH2wcIQ+YGBgqChgYGBgZASVtzhAcAAAA");
        org.junit.Assert.assertNotNull(modelWriter90);
        org.junit.Assert.assertNotNull(modelWriter94);
        org.junit.Assert.assertNotNull(modelWriter96);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ModelType modelType9 = typeModelValue5.asType();
        boolean boolean11 = typeModelValue5.asBoolean(true);
        java.lang.String str12 = typeModelValue5.asString();
        boolean boolean13 = typeModelValue5.asBoolean();
        org.jboss.dmr.LongModelValue longModelValue15 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal16 = longModelValue15.asBigDecimal();
        int int17 = longModelValue15.asInt();
        java.lang.String str18 = longModelValue15.asString();
        double double20 = longModelValue15.asDouble((double) 32L);
        boolean boolean21 = typeModelValue5.equals((java.lang.Object) longModelValue15);
        byte[] byteArray22 = longModelValue15.asBytes();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PROPERTY" + "'", str12, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "52" + "'", str18, "52");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0, 0, 0, 52]");
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isPropertyStart();
        boolean boolean23 = modelReader15.isInt();
        boolean boolean24 = modelReader15.isExpression();
        boolean boolean25 = modelReader15.isObjectStart();
        boolean boolean26 = modelReader15.isLong();
        boolean boolean27 = modelReader15.isUndefined();
        boolean boolean28 = modelReader15.isPropertyStart();
        boolean boolean29 = modelReader15.isListEnd();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        java.lang.Long long1 = modelNode0.asLongOrNull();
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.add("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", byteArray6);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long11 = modelNode10.asLong();
        org.jboss.dmr.ValueExpression valueExpression12 = modelNode10.asExpression();
        java.math.BigDecimal bigDecimal13 = valueExpression12.resolveBigDecimal();
        java.lang.String str14 = valueExpression12.getExpressionString();
        org.jboss.dmr.ModelNode modelNode15 = modelNode0.set("BYTES_VALUE", valueExpression12);
        java.lang.String str17 = modelNode0.toJSONString(true);
        org.jboss.dmr.ModelNode modelNode20 = modelNode0.set("H4sIAAAAAAAAAFvzloG1uIhBICuxLFEvJzEvXc8lvzQpJ7Vh8yEvzezfLEwMjC4MrGWJOaWpFSjK/Epzk1KL2tZMleWe8qCbiYGhosD+AwMYAAAkVvhKVAAAAA==", "bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(valueExpression12);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1.0" + "'", str14, "1.0");
        org.junit.Assert.assertNotNull(modelNode15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{ \"BYTES_VALUE\" : { \"EXPRESSION_VALUE\" : \"1.0\" } }" + "'", str17, "{ \"BYTES_VALUE\" : { \"EXPRESSION_VALUE\" : \"1.0\" } }");
        org.junit.Assert.assertNotNull(modelNode20);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("Expression \"hi!\"");
        java.lang.String str2 = expressionValue1.asString();
        java.io.PrintWriter printWriter3 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue1.format(printWriter3, (int) 'J', false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Expression \"hi!\"" + "'", str2, "Expression \"hi!\"");
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long3 = booleanModelValue1.asLong((long) 32);
        int int4 = booleanModelValue1.asInt();
        org.jboss.dmr.ModelNode modelNode5 = org.jboss.dmr.ModelNode.FALSE;
        boolean boolean6 = booleanModelValue1.equals((java.lang.Object) modelNode5);
        java.math.BigInteger bigInteger7 = booleanModelValue1.asBigInteger();
        boolean boolean9 = booleanModelValue1.asBoolean(true);
        boolean boolean11 = booleanModelValue1.has("rO0ABX5yABdvcmcuamJvc3MuZG1yLk1vZGVsVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5F\nbnVtAAAAAAAAAAASAAB4cHQAC0JJR19ERUNJTUFM");
        org.jboss.dmr.ValueExpression valueExpression12 = booleanModelValue1.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue13 = new org.jboss.dmr.ExpressionValue(valueExpression12);
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(valueExpression12);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.BooleanModelValue booleanModelValue4 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger5 = booleanModelValue4.asBigInteger();
        byte[] byteArray6 = booleanModelValue4.asBytes();
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("expression \"hi!\"", byteArray6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode7.clear();
        org.jboss.dmr.ModelNode modelNode9 = modelNode7.clone();
        org.jboss.dmr.ModelNode modelNode11 = modelNode7.add((double) 0.0f);
        org.jboss.dmr.ObjectModelValue objectModelValue13 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode14 = objectModelValue13.asObject();
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue13.getChild("TYPE_MODEL_VALUE");
        org.jboss.dmr.ModelNode modelNode18 = objectModelValue13.getChild("[(\"hi!\" => 0.0)]");
        org.jboss.dmr.Property property19 = new org.jboss.dmr.Property("PROPERTY_VALUE", modelNode18);
        org.jboss.dmr.Property property20 = property19.clone();
        org.jboss.dmr.ModelNode modelNode21 = modelNode7.set(property20);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = modelNode7.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(modelNode21);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream5 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4);
        org.jboss.dmr.stream.ModelReader modelReader6 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream5);
        java.io.OutputStream outputStream7 = null;
        org.jboss.dmr.Base64.OutputStream outputStream8 = new org.jboss.dmr.Base64.OutputStream(outputStream7);
        org.jboss.dmr.Base64.OutputStream outputStream9 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream8);
        outputStream8.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter12 = modelStreamFactory1.newModelWriter((java.io.OutputStream) outputStream8);
        org.jboss.dmr.stream.ModelWriter modelWriter13 = modelWriter12.writeListStart();
        org.jboss.dmr.stream.ModelWriter modelWriter15 = modelWriter12.writeInt((int) '4');
        org.jboss.dmr.stream.ModelWriter modelWriter17 = modelWriter15.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter19 = modelWriter15.writeBoolean(true);
        org.jboss.dmr.stream.ModelWriter modelWriter21 = modelWriter19.writeLong((long) 0);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter21.writeString("(\"\\\"bytes {\\\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\\\n}\\\"\" => INT)");
        org.jboss.dmr.stream.ModelWriter modelWriter24 = modelWriter21.writeListStart();
        // The following exception was thrown during execution in test generation
        try {
            modelWriter24.close();
            org.junit.Assert.fail("Expected exception of type org.jboss.dmr.stream.ModelException; message: Uncomplete DMR stream have been written");
        } catch (org.jboss.dmr.stream.ModelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertNotNull(modelReader6);
        org.junit.Assert.assertNotNull(modelWriter12);
        org.junit.Assert.assertNotNull(modelWriter13);
        org.junit.Assert.assertNotNull(modelWriter15);
        org.junit.Assert.assertNotNull(modelWriter17);
        org.junit.Assert.assertNotNull(modelWriter19);
        org.junit.Assert.assertNotNull(modelWriter21);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(modelWriter24);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        java.math.BigInteger bigInteger1 = booleanModelValue0.asBigInteger();
        boolean boolean2 = booleanModelValue0.asBoolean();
        long long4 = booleanModelValue0.asLong((long) 'l');
        long long6 = booleanModelValue0.asLong((long) (short) 10);
        org.jboss.dmr.ValueExpression valueExpression7 = booleanModelValue0.asExpression();
        org.jboss.dmr.ValueExpression valueExpression8 = booleanModelValue0.asExpression();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(1L);
        org.jboss.dmr.ValueExpression valueExpression11 = modelNode10.asExpression();
        org.jboss.dmr.BooleanModelValue booleanModelValue13 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long14 = booleanModelValue13.asLong();
        org.jboss.dmr.ValueExpression valueExpression15 = booleanModelValue13.asExpression();
        java.lang.String str16 = valueExpression15.toString();
        org.jboss.dmr.ExpressionValue expressionValue18 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression19 = expressionValue18.asExpression();
        boolean boolean20 = valueExpression15.equals(valueExpression19);
        org.jboss.dmr.LongModelValue longModelValue22 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal23 = longModelValue22.asBigDecimal();
        int int24 = longModelValue22.asInt();
        org.jboss.dmr.ValueExpression valueExpression25 = longModelValue22.asExpression();
        boolean boolean26 = valueExpression19.equals(valueExpression25);
        int int27 = valueExpression25.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue29 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression30 = expressionValue29.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver31 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str32 = valueExpression30.resolveString(valueExpressionResolver31);
        java.math.BigInteger bigInteger33 = valueExpression25.resolveBigInteger(valueExpressionResolver31);
        int int34 = valueExpression25.resolveInt();
        org.jboss.dmr.BooleanModelValue booleanModelValue35 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double36 = booleanModelValue35.asDouble();
        org.jboss.dmr.ModelValue modelValue37 = booleanModelValue35.copy();
        java.math.BigInteger bigInteger38 = booleanModelValue35.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue39 = new org.jboss.dmr.BigIntegerModelValue(bigInteger38);
        java.lang.String str40 = bigIntegerModelValue39.asString();
        long long42 = bigIntegerModelValue39.asLong(32L);
        double double43 = bigIntegerModelValue39.asDouble();
        long long45 = bigIntegerModelValue39.asLong((long) '4');
        org.jboss.dmr.ValueExpression valueExpression46 = bigIntegerModelValue39.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue47 = new org.jboss.dmr.ExpressionValue(valueExpression46);
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver48 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str50 = valueExpressionResolver48.resolvePart("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        java.math.BigDecimal bigDecimal51 = valueExpression46.resolveBigDecimal(valueExpressionResolver48);
        java.math.BigInteger bigInteger52 = valueExpression25.resolveBigInteger(valueExpressionResolver48);
        long long53 = valueExpression11.resolveLong(valueExpressionResolver48);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger54 = valueExpression8.resolveBigInteger(valueExpressionResolver48);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"true\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertNotNull(bigInteger1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(valueExpression7);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertNotNull(booleanModelValue13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Expression \"true\"" + "'", str16, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(valueExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(booleanModelValue35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(valueExpression46);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        boolean boolean4 = objectModelValue0.has((int) 'a');
        boolean boolean6 = objectModelValue0.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue7 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue7.asObject();
        java.util.Set<java.lang.String> strSet9 = objectModelValue7.getKeys();
        boolean boolean11 = objectModelValue7.has((int) 'a');
        boolean boolean12 = objectModelValue0.equals(objectModelValue7);
        int int13 = objectModelValue7.asInt();
        java.util.List<org.jboss.dmr.Property> propertyList14 = objectModelValue7.asPropertyList();
        org.jboss.dmr.ModelType modelType15 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode(modelType15);
        org.jboss.dmr.LongModelValue longModelValue19 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str20 = longModelValue19.asString();
        byte[] byteArray21 = longModelValue19.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue22 = new org.jboss.dmr.BytesModelValue(byteArray21);
        java.lang.String str23 = bytesModelValue22.asString();
        int int24 = bytesModelValue22.asInt();
        long long26 = bytesModelValue22.asLong((long) (short) 1);
        long long27 = bytesModelValue22.asLong();
        java.math.BigDecimal bigDecimal28 = bytesModelValue22.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode29 = modelNode16.set("32", bigDecimal28);
        boolean boolean30 = objectModelValue7.equals((java.lang.Object) modelNode29);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory32 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream33 = null;
        org.jboss.dmr.Base64.InputStream inputStream35 = new org.jboss.dmr.Base64.InputStream(inputStream33, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue37 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str38 = longModelValue37.asString();
        byte[] byteArray39 = longModelValue37.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue40 = new org.jboss.dmr.BytesModelValue(byteArray39);
        int int43 = inputStream35.read(byteArray39, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream45 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream35, (-1));
        org.jboss.dmr.stream.ModelReader modelReader46 = modelStreamFactory32.newModelReader((java.io.InputStream) inputStream45);
        boolean boolean47 = modelReader46.isLong();
        boolean boolean48 = modelReader46.isBigDecimal();
        boolean boolean49 = modelReader46.isBoolean();
        boolean boolean50 = modelReader46.isListStart();
        boolean boolean51 = modelNode29.equals((java.lang.Object) modelReader46);
        org.jboss.dmr.ModelNode modelNode55 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode56 = modelNode55.clear();
        boolean boolean58 = modelNode55.has((int) '#');
        org.jboss.dmr.ModelNode modelNode61 = modelNode55.add("BYTES_VALUE", "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AXV4");
        org.jboss.dmr.ModelNode modelNode63 = modelNode55.set("1");
        org.jboss.dmr.ModelNode modelNode65 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode68 = modelNode65.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList69 = modelNode68.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue71 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode68, false);
        boolean boolean73 = propertyModelValue71.has("10.0");
        org.jboss.dmr.ModelNode modelNode75 = propertyModelValue71.getChild(0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList76 = propertyModelValue71.asList();
        org.jboss.dmr.ModelNode modelNode77 = modelNode55.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList76);
        org.jboss.dmr.ModelNode modelNode79 = modelNode55.add((double) 'I');
        org.jboss.dmr.PropertyModelValue propertyModelValue81 = new org.jboss.dmr.PropertyModelValue("\"Expression \\\"true\\\"\"", modelNode55, true);
        org.jboss.dmr.ModelNode modelNode82 = modelNode29.set("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode55);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyList14);
        org.junit.Assert.assertTrue("'" + modelType15 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType15.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str23, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(modelStreamFactory32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(modelReader46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(modelNode61);
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertNotNull(modelNodeList69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(modelNode75);
        org.junit.Assert.assertNotNull(modelNodeList76);
        org.junit.Assert.assertNotNull(modelNode77);
        org.junit.Assert.assertNotNull(modelNode79);
        org.junit.Assert.assertNotNull(modelNode82);
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("BYTES_VALUE");
        org.jboss.dmr.ValueExpression valueExpression2 = stringModelValue1.asExpression();
        org.jboss.dmr.BooleanModelValue booleanModelValue3 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double4 = booleanModelValue3.asDouble();
        org.jboss.dmr.ModelValue modelValue5 = booleanModelValue3.copy();
        java.math.BigInteger bigInteger6 = booleanModelValue3.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue7 = new org.jboss.dmr.BigIntegerModelValue(bigInteger6);
        double double9 = bigIntegerModelValue7.asDouble((double) 'b');
        java.lang.String str10 = bigIntegerModelValue7.asString();
        org.jboss.dmr.ValueExpression valueExpression11 = bigIntegerModelValue7.asExpression();
        boolean boolean13 = bigIntegerModelValue7.asBoolean(true);
        org.jboss.dmr.BooleanModelValue booleanModelValue15 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long16 = booleanModelValue15.asLong();
        org.jboss.dmr.ValueExpression valueExpression17 = booleanModelValue15.asExpression();
        java.lang.String str18 = valueExpression17.toString();
        org.jboss.dmr.ExpressionValue expressionValue20 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression21 = expressionValue20.asExpression();
        boolean boolean22 = valueExpression17.equals(valueExpression21);
        org.jboss.dmr.LongModelValue longModelValue24 = new org.jboss.dmr.LongModelValue((long) '4');
        java.math.BigDecimal bigDecimal25 = longModelValue24.asBigDecimal();
        int int26 = longModelValue24.asInt();
        org.jboss.dmr.ValueExpression valueExpression27 = longModelValue24.asExpression();
        boolean boolean28 = valueExpression21.equals(valueExpression27);
        int int29 = valueExpression27.resolveInt();
        org.jboss.dmr.ExpressionValue expressionValue31 = new org.jboss.dmr.ExpressionValue("1");
        org.jboss.dmr.ValueExpression valueExpression32 = expressionValue31.asExpression();
        org.jboss.dmr.ValueExpressionResolver valueExpressionResolver33 = new org.jboss.dmr.ValueExpressionResolver();
        java.lang.String str34 = valueExpression32.resolveString(valueExpressionResolver33);
        java.math.BigInteger bigInteger35 = valueExpression27.resolveBigInteger(valueExpressionResolver33);
        java.lang.String str37 = valueExpressionResolver33.resolvePart("1L");
        java.lang.String str39 = valueExpressionResolver33.resolvePart("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3AloAeA==");
        boolean boolean40 = bigIntegerModelValue7.equals((java.lang.Object) valueExpressionResolver33);
        java.lang.String str42 = valueExpressionResolver33.resolvePart("(\"hi!\" => 0.0)");
        org.jboss.dmr.ExpressionValue expressionValue44 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue46 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean47 = expressionValue44.equals(expressionValue46);
        org.jboss.dmr.ExpressionValue expressionValue49 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue51 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean52 = expressionValue49.equals(expressionValue51);
        boolean boolean53 = expressionValue44.equals(expressionValue51);
        org.jboss.dmr.ExpressionValue expressionValue55 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str56 = expressionValue55.asString();
        boolean boolean57 = expressionValue44.equals(expressionValue55);
        org.jboss.dmr.ModelValue modelValue58 = expressionValue44.resolve();
        org.jboss.dmr.ExpressionValue expressionValue60 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression61 = expressionValue60.asExpression();
        boolean boolean62 = expressionValue44.equals(expressionValue60);
        org.jboss.dmr.ModelValue modelValue63 = expressionValue60.resolve();
        org.jboss.dmr.ValueExpression valueExpression64 = expressionValue60.asExpression();
        java.lang.String str65 = valueExpressionResolver33.resolve(valueExpression64);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = valueExpression2.resolveInt(valueExpressionResolver33);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"BYTES_VALUE\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueExpression2);
        org.junit.Assert.assertNotNull(booleanModelValue3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(booleanModelValue15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(valueExpression17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Expression \"true\"" + "'", str18, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(valueExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(valueExpression32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(modelValue58);
        org.junit.Assert.assertNotNull(valueExpression61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(modelValue63);
        org.junit.Assert.assertNotNull(valueExpression64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        boolean boolean8 = bigDecimalModelValue7.asBoolean();
        org.jboss.dmr.ValueExpression valueExpression9 = bigDecimalModelValue7.asExpression();
        int int10 = bigDecimalModelValue7.asInt();
        java.math.BigDecimal bigDecimal11 = bigDecimalModelValue7.asBigDecimal();
        java.math.BigInteger bigInteger12 = bigDecimalModelValue7.asBigInteger();
        java.math.BigInteger bigInteger13 = bigDecimalModelValue7.asBigInteger();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(valueExpression9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigInteger13);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        java.lang.String[] strArray48 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode49 = modelNode46.get(strArray48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode28.get(strArray48);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode50, true);
        org.jboss.dmr.PropertyModelValue propertyModelValue53 = new org.jboss.dmr.PropertyModelValue(property52);
        org.jboss.dmr.Property property54 = propertyModelValue53.asProperty();
        org.jboss.dmr.ModelValue modelValue55 = propertyModelValue53.resolve();
        java.lang.String str56 = propertyModelValue53.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList57 = propertyModelValue53.asList();
        org.jboss.dmr.ListModelValue listModelValue58 = new org.jboss.dmr.ListModelValue(modelNodeList57);
        org.jboss.dmr.ListModelValue listModelValue59 = new org.jboss.dmr.ListModelValue(modelNodeList57);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(modelValue55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))" + "'", str56, "(\"org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNodeList57);
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        long long3 = longModelValue1.asLong((long) (short) 0);
        java.lang.String str4 = longModelValue1.asString();
        byte[] byteArray5 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue6 = new org.jboss.dmr.BytesModelValue(byteArray5);
        java.lang.String str8 = org.jboss.dmr.Base64.encodeBytes(byteArray5, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AAAAAAAAAAE=" + "'", str8, "AAAAAAAAAAE=");
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = modelReader15.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't double");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        java.lang.Throwable throwable1 = null;
        org.jboss.dmr.stream.ModelException modelException2 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable1);
        org.jboss.dmr.stream.ModelException modelException3 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException2);
        java.lang.Throwable throwable5 = null;
        org.jboss.dmr.stream.ModelException modelException6 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable5);
        org.jboss.dmr.stream.ModelException modelException7 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException6);
        modelException2.addSuppressed((java.lang.Throwable) modelException6);
        java.lang.Throwable[] throwableArray9 = modelException6.getSuppressed();
        org.jboss.dmr.stream.ModelException modelException10 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException6);
        org.jboss.dmr.stream.ModelException modelException13 = new org.jboss.dmr.stream.ModelException("\"35\"");
        org.jboss.dmr.stream.ModelException modelException14 = new org.jboss.dmr.stream.ModelException("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}", (java.lang.Throwable) modelException13);
        modelException10.addSuppressed((java.lang.Throwable) modelException14);
        org.jboss.dmr.stream.ModelException modelException16 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException10);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        boolean boolean5 = booleanModelValue0.asBoolean(true);
        org.jboss.dmr.ValueExpression valueExpression6 = booleanModelValue0.asExpression();
        long long7 = booleanModelValue0.asLong();
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(valueExpression6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((int) ' ');
        long long7 = doubleModelValue1.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = doubleModelValue1.asExpression();
        java.math.BigInteger bigInteger9 = doubleModelValue1.asBigInteger();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode13 = modelNode10.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList14 = modelNode13.asList();
        org.jboss.dmr.ListModelValue listModelValue15 = new org.jboss.dmr.ListModelValue(modelNodeList14);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue15);
        org.jboss.dmr.ModelValue modelValue17 = listModelValue15.resolve();
        int int19 = listModelValue15.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList20 = listModelValue15.asPropertyList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = listModelValue15.asList();
        long long22 = listModelValue15.asLong();
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        org.jboss.dmr.ListModelValue listModelValue28 = new org.jboss.dmr.ListModelValue(modelNodeList27);
        java.lang.String str29 = listModelValue28.asString();
        long long30 = listModelValue28.asLong();
        int int32 = listModelValue28.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue33 = listModelValue28.protect();
        boolean boolean35 = listModelValue28.has((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue28.resolve();
        boolean boolean37 = listModelValue28.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = listModelValue28.asList();
        boolean boolean39 = listModelValue15.equals(listModelValue28);
        java.util.List<org.jboss.dmr.Property> propertyList40 = listModelValue15.asPropertyList();
        boolean boolean41 = doubleModelValue1.equals((java.lang.Object) propertyList40);
        org.jboss.dmr.LongModelValue longModelValue43 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str44 = longModelValue43.asString();
        byte[] byteArray45 = longModelValue43.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue46 = new org.jboss.dmr.BytesModelValue(byteArray45);
        java.lang.String str47 = bytesModelValue46.asString();
        int int48 = bytesModelValue46.asInt();
        int int49 = bytesModelValue46.asInt();
        int int51 = bytesModelValue46.asInt(112);
        boolean boolean52 = doubleModelValue1.equals((java.lang.Object) int51);
        java.io.InputStream inputStream53 = null;
        org.jboss.dmr.Base64.InputStream inputStream55 = new org.jboss.dmr.Base64.InputStream(inputStream53, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue57 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str58 = longModelValue57.asString();
        byte[] byteArray59 = longModelValue57.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue60 = new org.jboss.dmr.BytesModelValue(byteArray59);
        int int63 = inputStream55.read(byteArray59, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream65 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream55, (-1));
        org.jboss.dmr.Base64.InputStream inputStream66 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream65);
        boolean boolean67 = doubleModelValue1.equals((java.lang.Object) inputStream66);
        org.jboss.dmr.Base64.InputStream inputStream69 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream66, (int) (short) 1);
        org.jboss.dmr.Base64.InputStream inputStream70 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream69);
        org.jboss.dmr.LongModelValue longModelValue72 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str73 = longModelValue72.asString();
        byte[] byteArray74 = longModelValue72.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue75 = new org.jboss.dmr.BytesModelValue(byteArray74);
        java.lang.String str76 = bytesModelValue75.asString();
        int int77 = bytesModelValue75.asInt();
        int int78 = bytesModelValue75.asInt();
        int int80 = bytesModelValue75.asInt(112);
        java.math.BigInteger bigInteger81 = bytesModelValue75.asBigInteger();
        byte[] byteArray82 = bytesModelValue75.asBytes();
        // The following exception was thrown during execution in test generation
        try {
            int int85 = inputStream69.read(byteArray82, 32, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertNotNull(modelNodeList14);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNodeList21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str29, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(modelValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str47, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str76, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(bigInteger81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ExpressionValue expressionValue12 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str13 = expressionValue12.asString();
        boolean boolean14 = expressionValue1.equals(expressionValue12);
        org.jboss.dmr.ModelValue modelValue15 = expressionValue1.resolve();
        org.jboss.dmr.ExpressionValue expressionValue17 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression18 = expressionValue17.asExpression();
        boolean boolean19 = expressionValue1.equals(expressionValue17);
        org.jboss.dmr.ModelValue modelValue20 = expressionValue17.resolve();
        java.lang.String str22 = expressionValue17.toJSONString(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelValue15);
        org.junit.Assert.assertNotNull(valueExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(modelValue20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{ \"EXPRESSION_VALUE\" : \"hi!\" }" + "'", str22, "{ \"EXPRESSION_VALUE\" : \"hi!\" }");
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        java.lang.String str13 = listModelValue12.asString();
        long long14 = listModelValue12.asLong();
        int int16 = listModelValue12.asInt((int) '4');
        org.jboss.dmr.ModelValue modelValue17 = listModelValue12.protect();
        boolean boolean18 = listModelValue5.equals(listModelValue12);
        java.lang.String str19 = listModelValue5.asString();
        int int20 = listModelValue5.asInt();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList21 = listModelValue5.asList();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str13, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(modelValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str19, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(modelNodeList21);
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.lang.String str4 = modelNode0.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = modelNode0.asLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"hi!\" => 0.0)" + "'", str4, "(\"hi!\" => 0.0)");
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(false);
        int int3 = modelNode1.asInt(2);
        org.jboss.dmr.ModelNode modelNode5 = modelNode1.set(52);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue12);
        org.jboss.dmr.ModelValue modelValue14 = listModelValue12.resolve();
        int int16 = listModelValue12.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList17 = listModelValue12.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList18 = listModelValue12.asPropertyList();
        org.jboss.dmr.ModelNode modelNode20 = listModelValue12.getChild((int) (short) 0);
        org.jboss.dmr.ModelNode modelNode21 = modelNode20.resolve();
        org.jboss.dmr.ModelNode modelNode22 = modelNode5.set("EXPRESSION_VALUE", modelNode21);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.setExpression("hi!", "hi!");
        java.lang.String str27 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode23);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList28 = modelNode23.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode30 = modelNode23.set((double) 0);
        org.jboss.dmr.ModelNode modelNode31 = modelNode23.clear();
        int int33 = modelNode31.asInt(112);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList38 = modelNode37.asList();
        org.jboss.dmr.ModelNode modelNode41 = modelNode37.setExpression("hi!", "(\"hi!\" => 0.0)");
        java.util.Set<java.lang.String> strSet42 = modelNode41.keys();
        boolean boolean43 = modelNode31.equals(modelNode41);
        org.jboss.dmr.ModelNode modelNode46 = modelNode31.add("(\"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => bytes {\n    0xb6, 0xbb, 0x9e\n})", "AAAAZA==");
        org.jboss.dmr.Validation.validate(modelNode31, "52");
        boolean boolean49 = modelNode5.equals(modelNode31);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertNotNull(modelValue14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(propertyList17);
        org.junit.Assert.assertNotNull(propertyList18);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str27, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList28);
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 112 + "'", int33 == 112);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(modelNodeList38);
        org.junit.Assert.assertNotNull(modelNode41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        org.jboss.dmr.Property property47 = new org.jboss.dmr.Property("", modelNode46);
        java.lang.String[] strArray48 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode49 = modelNode46.get(strArray48);
        org.jboss.dmr.ModelNode modelNode50 = modelNode28.get(strArray48);
        org.jboss.dmr.Property property52 = new org.jboss.dmr.Property("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode50, true);
        org.jboss.dmr.PropertyModelValue propertyModelValue53 = new org.jboss.dmr.PropertyModelValue(property52);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList54 = propertyModelValue53.asList();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType55 = propertyModelValue53.asType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(modelNode49);
        org.junit.Assert.assertNotNull(modelNode50);
        org.junit.Assert.assertNotNull(modelNodeList54);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        long long2 = objectModelValue0.asLong((long) (-1));
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.getChild("[(\"H4sIAAAAAAAAAAMAAAAAAAAAAAA=\" => big integer 32)]");
        org.jboss.dmr.ModelType modelType5 = modelNode4.getType();
        char char6 = modelType5.getTypeChar();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertTrue("'" + modelType5 + "' != '" + org.jboss.dmr.ModelType.UNDEFINED + "'", modelType5.equals(org.jboss.dmr.ModelType.UNDEFINED));
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'u' + "'", char6 == 'u');
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((int) ' ');
        boolean boolean7 = doubleModelValue1.asBoolean();
        byte[] byteArray8 = doubleModelValue1.asBytes();
        boolean boolean9 = doubleModelValue1.asBoolean();
        int int10 = doubleModelValue1.asInt();
        java.io.DataOutput dataOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleModelValue1.writeExternal(dataOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.copy(false);
        org.jboss.dmr.ModelNode modelNode7 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode10 = modelNode7.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList11 = modelNode10.asList();
        org.jboss.dmr.ListModelValue listModelValue12 = new org.jboss.dmr.ListModelValue(modelNodeList11);
        org.jboss.dmr.ModelNode modelNode13 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue12);
        long long14 = listModelValue12.asLong();
        java.util.List<org.jboss.dmr.Property> propertyList15 = listModelValue12.asPropertyList();
        org.jboss.dmr.ModelValue modelValue16 = listModelValue12.protect();
        boolean boolean17 = objectModelValue0.equals((java.lang.Object) listModelValue12);
        org.jboss.dmr.ModelValue modelValue18 = objectModelValue0.resolve();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode20 = modelValue18.getChild((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNodeList11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(propertyList15);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(modelValue18);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.ModelNode modelNode9 = property7.getValue();
        org.jboss.dmr.PropertyModelValue propertyModelValue10 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelValue modelValue11 = propertyModelValue10.clone();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList12 = propertyModelValue10.asList();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        java.lang.String str18 = modelNode14.toString();
        org.jboss.dmr.ModelNode modelNode19 = modelNode14.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("", modelNode24);
        org.jboss.dmr.ModelNode modelNode26 = modelNode14.set(property25);
        org.jboss.dmr.PropertyModelValue propertyModelValue28 = new org.jboss.dmr.PropertyModelValue("EXPRESSION_VALUE", modelNode26, false);
        java.util.Set<java.lang.String> strSet29 = propertyModelValue28.getKeys();
        org.jboss.dmr.ModelValue modelValue30 = propertyModelValue28.copy();
        boolean boolean31 = propertyModelValue10.equals(propertyModelValue28);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList32 = propertyModelValue10.asList();
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelValue11);
        org.junit.Assert.assertNotNull(modelNodeList12);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(\"hi!\" => 0.0)" + "'", str18, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(modelNodeList32);
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        org.jboss.dmr.ModelNode modelNode0 = org.jboss.dmr.ModelNode.FALSE;
        java.math.BigInteger bigInteger1 = modelNode0.asBigInteger();
        org.junit.Assert.assertNotNull(modelNode0);
        org.junit.Assert.assertNotNull(bigInteger1);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        org.jboss.dmr.ModelValue modelValue2 = objectModelValue0.copy();
        int int4 = objectModelValue0.asInt((int) (short) 100);
        org.jboss.dmr.ModelValue modelValue5 = objectModelValue0.protect();
        org.jboss.dmr.ModelValue modelValue6 = objectModelValue0.copy();
        org.jboss.dmr.ModelNode modelNode8 = modelValue6.removeChild("(\"Expression \\\"true\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => (\"hi!\" => 0.0)))");
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertNotNull(modelValue6);
        org.junit.Assert.assertNull(modelNode8);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        int int6 = objectModelValue0.asInt(10);
        org.jboss.dmr.ModelValue modelValue7 = objectModelValue0.copy();
        boolean boolean9 = objectModelValue0.has((int) '4');
        int int11 = objectModelValue0.asInt(0);
        java.io.DataOutput dataOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectModelValue0.writeExternal(dataOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.setExpression("hi!", "hi!");
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode4.asListOrEmpty();
        org.jboss.dmr.PropertyModelValue propertyModelValue7 = new org.jboss.dmr.PropertyModelValue("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=", modelNode4, false);
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long11 = modelNode10.asLong();
        org.jboss.dmr.ModelNode modelNode14 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode17 = modelNode14.set("hi!", 0.0d);
        org.jboss.dmr.Property property18 = new org.jboss.dmr.Property("", modelNode17);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode20 = modelNode17.get(strArray19);
        org.jboss.dmr.ModelNode modelNode21 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList25 = modelNode24.asList();
        org.jboss.dmr.ListModelValue listModelValue26 = new org.jboss.dmr.ListModelValue(modelNodeList25);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue26);
        org.jboss.dmr.ModelValue modelValue28 = listModelValue26.resolve();
        int int30 = listModelValue26.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList31 = listModelValue26.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList32 = modelNode20.asPropertyList(propertyList31);
        org.jboss.dmr.ModelNode modelNode34 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode37 = modelNode34.set("hi!", 0.0d);
        org.jboss.dmr.Property property38 = new org.jboss.dmr.Property("", modelNode37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode40 = modelNode37.get(strArray39);
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode44.asList();
        org.jboss.dmr.ListModelValue listModelValue46 = new org.jboss.dmr.ListModelValue(modelNodeList45);
        org.jboss.dmr.ModelNode modelNode47 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue46);
        org.jboss.dmr.ModelValue modelValue48 = listModelValue46.resolve();
        int int50 = listModelValue46.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList51 = listModelValue46.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList52 = modelNode40.asPropertyList(propertyList51);
        modelNode20.setNoCopy(modelNode40);
        org.jboss.dmr.ModelNode modelNode54 = modelNode10.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelNode20);
        org.jboss.dmr.ModelNode modelNode56 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode59 = modelNode56.set("hi!", 0.0d);
        org.jboss.dmr.Property property60 = new org.jboss.dmr.Property("", modelNode59);
        java.lang.String[] strArray61 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode62 = modelNode59.get(strArray61);
        org.jboss.dmr.ModelNode modelNode63 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int64 = modelNode63.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode65 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode68 = modelNode65.setExpression("hi!", "hi!");
        java.lang.String str69 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode65);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList70 = modelNode65.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode71 = modelNode63.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList70);
        org.jboss.dmr.ModelNode modelNode72 = modelNode62.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList70);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList73 = modelNode10.asList(modelNodeList70);
        org.jboss.dmr.PropertyModelValue propertyModelValue75 = new org.jboss.dmr.PropertyModelValue("Expression \"true\"", modelNode10, false);
        org.jboss.dmr.ModelType modelType76 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode77 = new org.jboss.dmr.ModelNode(modelType76);
        org.jboss.dmr.ModelNode modelNode79 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode82 = modelNode79.set("hi!", 0.0d);
        org.jboss.dmr.Property property83 = new org.jboss.dmr.Property("", modelNode82);
        org.jboss.dmr.ModelNode modelNode84 = modelNode77.set(property83);
        org.jboss.dmr.PropertyModelValue propertyModelValue85 = new org.jboss.dmr.PropertyModelValue(property83);
        org.jboss.dmr.ModelValue modelValue86 = propertyModelValue85.copy();
        boolean boolean87 = propertyModelValue75.equals(propertyModelValue85);
        java.util.Set<java.lang.String> strSet88 = propertyModelValue75.getKeys();
        boolean boolean89 = propertyModelValue7.equals(propertyModelValue75);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNodeList25);
        org.junit.Assert.assertNotNull(modelValue28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(propertyList31);
        org.junit.Assert.assertNotNull(propertyList32);
        org.junit.Assert.assertNotNull(modelNode37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(modelNode40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertNotNull(modelValue48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(propertyList51);
        org.junit.Assert.assertNotNull(propertyList52);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(modelNode62);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(modelNode68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str69, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList70);
        org.junit.Assert.assertNotNull(modelNode71);
        org.junit.Assert.assertNotNull(modelNode72);
        org.junit.Assert.assertNotNull(modelNodeList73);
        org.junit.Assert.assertTrue("'" + modelType76 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType76.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode82);
        org.junit.Assert.assertNotNull(modelNode84);
        org.junit.Assert.assertNotNull(modelValue86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        java.lang.String str9 = modelNode0.toJSONString(true);
        java.lang.String str10 = modelNode0.toString();
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0" + "'", str9, "0.0");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0.0" + "'", str10, "0.0");
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        byte[] byteArray2 = stringModelValue1.asBytes();
        org.jboss.dmr.LongModelValue longModelValue4 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal5 = longModelValue4.asBigDecimal();
        byte[] byteArray6 = longModelValue4.asBytes();
        boolean boolean7 = stringModelValue1.equals((java.lang.Object) byteArray6);
        org.jboss.dmr.StringModelValue stringModelValue9 = new org.jboss.dmr.StringModelValue("Expression \"true\"");
        org.jboss.dmr.StringModelValue stringModelValue11 = new org.jboss.dmr.StringModelValue("(\"\" => (\"hi!\" => 0.0))");
        boolean boolean12 = stringModelValue9.equals(stringModelValue11);
        byte[] byteArray13 = stringModelValue11.asBytes();
        java.lang.Object obj14 = null;
        boolean boolean15 = stringModelValue11.equals(obj14);
        byte[] byteArray16 = stringModelValue11.asBytes();
        boolean boolean17 = stringModelValue1.equals(stringModelValue11);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = stringModelValue11.asInt(5);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"(\"\" => (\"hi!\" => 0.0))\"");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[69, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 34, 116, 114, 117, 101, 34]");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 34, 34, 32, 61, 62, 32, 40, 34, 104, 105, 33, 34, 32, 61, 62, 32, 48, 46, 48, 41, 41]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isObjectStart();
        boolean boolean22 = modelReader15.isObjectEnd();
        boolean boolean23 = modelReader15.isBytes();
        boolean boolean24 = modelReader15.isDouble();
        boolean boolean25 = modelReader15.isBigInteger();
        boolean boolean26 = modelReader15.isDouble();
        boolean boolean27 = modelReader15.isListEnd();
        boolean boolean28 = modelReader15.isUndefined();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.math.BigDecimal bigDecimal2 = longModelValue1.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression3 = longModelValue1.asExpression();
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(valueExpression3);
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((long) 10);
        java.lang.String str3 = modelNode1.asString("true");
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long7 = modelNode6.asLong();
        org.jboss.dmr.ValueExpression valueExpression8 = modelNode6.asExpression();
        java.math.BigDecimal bigDecimal9 = valueExpression8.resolveBigDecimal();
        org.jboss.dmr.ModelNode modelNode10 = new org.jboss.dmr.ModelNode(bigDecimal9);
        org.jboss.dmr.ModelNode modelNode12 = modelNode10.set((double) (byte) 0);
        org.jboss.dmr.ModelNode modelNode13 = modelNode1.setNoCopy("35", modelNode12);
        boolean boolean15 = modelNode12.hasDefined("rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3R3AANW9yZy5qYm9z\ncy5kbXIuc3RyZWFtLk1vZGVsRXhjZXB0aW9uOiBbKCJoaSEiID0+IDAuMCldcAADaGkhRAAAAAAA\nAAAAeA==");
        org.jboss.dmr.ModelNode modelNode17 = modelNode12.set("\"bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}\"");
        org.jboss.dmr.BooleanModelValue booleanModelValue20 = org.jboss.dmr.BooleanModelValue.valueOf(false);
        long long22 = booleanModelValue20.asLong((long) 32);
        int int23 = booleanModelValue20.asInt();
        java.math.BigDecimal bigDecimal24 = booleanModelValue20.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode25 = modelNode12.set("\"\\\"1L\\\"\"", bigDecimal24);
        java.io.OutputStream outputStream27 = null;
        org.jboss.dmr.Base64.OutputStream outputStream28 = new org.jboss.dmr.Base64.OutputStream(outputStream27);
        outputStream28.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream30 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream28);
        org.jboss.dmr.Base64.OutputStream outputStream31 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream30);
        org.jboss.dmr.BooleanModelValue booleanModelValue33 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger34 = booleanModelValue33.asBigInteger();
        byte[] byteArray35 = booleanModelValue33.asBytes();
        outputStream30.write(byteArray35, (int) (short) -1, (int) (byte) 0);
        org.jboss.dmr.ModelNode modelNode39 = modelNode25.set("TYPE_MODEL_VALUE", byteArray35);
        java.lang.String str40 = org.jboss.dmr.Base64.encodeBytes(byteArray35);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNode13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertNotNull(booleanModelValue20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(booleanModelValue33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "AQ==" + "'", str40, "AQ==");
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        org.jboss.dmr.StringModelValue stringModelValue1 = new org.jboss.dmr.StringModelValue("{\n    \"TYPE_MODEL_VALUE\" => undefined,\n    \"[(\\\"hi!\\\" => 0.0)]\" => undefined,\n    \"\\\"(\\\\\\\"hi!\\\\\\\" => 0.0)\\\"\" => undefined\n}");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = stringModelValue1.asBoolean(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.ModelNode modelNode8 = modelNode3.set((double) 'a');
        org.jboss.dmr.IntModelValue intModelValue10 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str11 = intModelValue10.asString();
        double double13 = intModelValue10.asDouble((double) 2);
        java.math.BigDecimal bigDecimal14 = intModelValue10.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue15 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal14);
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue16 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal14);
        org.jboss.dmr.ModelNode modelNode17 = modelNode8.set(bigDecimal14);
        org.jboss.dmr.ModelType modelType18 = org.jboss.dmr.ModelType.DOUBLE;
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode(modelType18);
        org.jboss.dmr.ModelNode modelNode20 = new org.jboss.dmr.ModelNode(modelType18);
        org.jboss.dmr.ModelNode modelNode21 = modelNode17.set(modelType18);
        org.jboss.dmr.TypeModelValue typeModelValue22 = org.jboss.dmr.TypeModelValue.of(modelType18);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode(modelType18);
        org.jboss.dmr.ModelNode modelNode24 = modelNode23.resolve();
        java.lang.String str26 = modelNode24.asString("(\"rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=\" => (\"hi!\" => expression \"hi!\"))");
        org.jboss.dmr.ModelNode modelNode28 = modelNode24.setExpression("Expression \"true\"");
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(modelNode17);
        org.junit.Assert.assertTrue("'" + modelType18 + "' != '" + org.jboss.dmr.ModelType.DOUBLE + "'", modelType18.equals(org.jboss.dmr.ModelType.DOUBLE));
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(typeModelValue22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DOUBLE" + "'", str26, "DOUBLE");
        org.junit.Assert.assertNotNull(modelNode28);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        org.jboss.dmr.Property property6 = new org.jboss.dmr.Property("", modelNode5);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode8 = modelNode5.get(strArray7);
        org.jboss.dmr.ModelNode modelNode9 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode12 = modelNode9.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList13 = modelNode12.asList();
        org.jboss.dmr.ListModelValue listModelValue14 = new org.jboss.dmr.ListModelValue(modelNodeList13);
        org.jboss.dmr.ModelNode modelNode15 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue14);
        org.jboss.dmr.ModelValue modelValue16 = listModelValue14.resolve();
        int int18 = listModelValue14.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList19 = listModelValue14.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList20 = modelNode8.asPropertyList(propertyList19);
        org.jboss.dmr.ModelNode modelNode22 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode25 = modelNode22.set("hi!", 0.0d);
        org.jboss.dmr.Property property26 = new org.jboss.dmr.Property("", modelNode25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode28 = modelNode25.get(strArray27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode32 = modelNode29.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList33 = modelNode32.asList();
        org.jboss.dmr.ListModelValue listModelValue34 = new org.jboss.dmr.ListModelValue(modelNodeList33);
        org.jboss.dmr.ModelNode modelNode35 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue34);
        org.jboss.dmr.ModelValue modelValue36 = listModelValue34.resolve();
        int int38 = listModelValue34.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList39 = listModelValue34.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList40 = modelNode28.asPropertyList(propertyList39);
        modelNode8.setNoCopy(modelNode28);
        boolean boolean42 = modelNode28.isProtected();
        org.jboss.dmr.ModelNode modelNode45 = modelNode28.set("", (double) 8);
        org.jboss.dmr.PropertyModelValue propertyModelValue46 = new org.jboss.dmr.PropertyModelValue("\"bytes {\\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\\n}\"", modelNode45);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode12);
        org.junit.Assert.assertNotNull(modelNodeList13);
        org.junit.Assert.assertNotNull(modelValue16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(propertyList19);
        org.junit.Assert.assertNotNull(propertyList20);
        org.junit.Assert.assertNotNull(modelNode25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertNotNull(modelNodeList33);
        org.junit.Assert.assertNotNull(modelValue36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(propertyList39);
        org.junit.Assert.assertNotNull(propertyList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(modelNode45);
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        int int6 = bigIntegerModelValue4.asInt((int) (short) 1);
        org.jboss.dmr.BooleanModelValue booleanModelValue7 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double8 = booleanModelValue7.asDouble();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue7.copy();
        java.math.BigInteger bigInteger10 = booleanModelValue7.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue11 = new org.jboss.dmr.BigIntegerModelValue(bigInteger10);
        java.lang.String str12 = bigIntegerModelValue11.asString();
        java.math.BigInteger bigInteger13 = bigIntegerModelValue11.asBigInteger();
        boolean boolean14 = bigIntegerModelValue4.equals(bigIntegerModelValue11);
        int int15 = bigIntegerModelValue11.asInt();
        java.lang.String str16 = bigIntegerModelValue11.asString();
        long long18 = bigIntegerModelValue11.asLong((long) 32);
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanModelValue7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.hasNext();
        boolean boolean22 = modelReader15.isUndefined();
        boolean boolean23 = modelReader15.isType();
        boolean boolean24 = modelReader15.isLong();
        boolean boolean25 = modelReader15.isPropertyStart();
        boolean boolean26 = modelReader15.isPropertyStart();
        boolean boolean27 = modelReader15.isBytes();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        boolean boolean3 = doubleModelValue1.asBoolean();
        byte[] byteArray4 = doubleModelValue1.asBytes();
        int int6 = doubleModelValue1.asInt((-1));
        java.math.BigDecimal bigDecimal7 = doubleModelValue1.asBigDecimal();
        double double9 = doubleModelValue1.asDouble((double) 100);
        boolean boolean11 = doubleModelValue1.asBoolean(false);
        java.math.BigInteger bigInteger12 = doubleModelValue1.asBigInteger();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        java.math.BigDecimal bigDecimal6 = valueExpression3.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue7 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal6);
        int int9 = bigDecimalModelValue7.asInt(0);
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory11 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream12 = null;
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream(inputStream12, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream15 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream14);
        org.jboss.dmr.stream.ModelReader modelReader16 = modelStreamFactory11.newModelReader((java.io.InputStream) inputStream15);
        java.io.OutputStream outputStream17 = null;
        org.jboss.dmr.Base64.OutputStream outputStream18 = new org.jboss.dmr.Base64.OutputStream(outputStream17);
        org.jboss.dmr.Base64.OutputStream outputStream19 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream18);
        outputStream18.write((int) (byte) -1);
        org.jboss.dmr.stream.ModelWriter modelWriter22 = modelStreamFactory11.newModelWriter((java.io.OutputStream) outputStream18);
        org.jboss.dmr.stream.ModelWriter modelWriter23 = modelWriter22.writeListStart();
        org.jboss.dmr.IntModelValue intModelValue25 = new org.jboss.dmr.IntModelValue(10);
        byte[] byteArray26 = intModelValue25.asBytes();
        int int28 = intModelValue25.asInt(0);
        java.math.BigInteger bigInteger29 = intModelValue25.asBigInteger();
        org.jboss.dmr.stream.ModelWriter modelWriter30 = modelWriter23.writeBigInteger(bigInteger29);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str33 = org.jboss.dmr.Base64.encodeBytes(byteArray31, (int) '#');
        org.jboss.dmr.stream.ModelWriter modelWriter34 = modelWriter23.writeBytes(byteArray31);
        bigDecimalModelValue7.write(modelWriter23);
        boolean boolean36 = bigDecimalModelValue7.asBoolean();
        java.io.PrintWriter printWriter37 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue7.format(printWriter37, (-1), false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(modelStreamFactory11);
        org.junit.Assert.assertNotNull(modelReader16);
        org.junit.Assert.assertNotNull(modelWriter22);
        org.junit.Assert.assertNotNull(modelWriter23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(modelWriter30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "H4sIAAAAAAAAAAMAAAAAAAAAAAA=" + "'", str33, "H4sIAAAAAAAAAAMAAAAAAAAAAAA=");
        org.junit.Assert.assertNotNull(modelWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) 'b');
        java.lang.String str4 = intModelValue1.asString();
        java.math.BigInteger bigInteger5 = intModelValue1.asBigInteger();
        boolean boolean7 = intModelValue1.asBoolean(false);
        org.jboss.dmr.IntModelValue intModelValue9 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long11 = intModelValue9.asLong((long) 'b');
        java.lang.String str12 = intModelValue9.asString();
        boolean boolean13 = intModelValue1.equals(intModelValue9);
        byte[] byteArray14 = intModelValue9.asBytes();
        org.jboss.dmr.IntModelValue intModelValue16 = new org.jboss.dmr.IntModelValue((int) ' ');
        java.lang.String str17 = intModelValue16.asString();
        double double19 = intModelValue16.asDouble((double) 2);
        int int20 = intModelValue16.asInt();
        byte[] byteArray21 = intModelValue16.asBytes();
        long long22 = intModelValue16.asLong();
        boolean boolean23 = intModelValue9.equals(intModelValue16);
        byte[] byteArray24 = intModelValue9.asBytes();
        java.lang.String str25 = intModelValue9.asString();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) intModelValue9);
        long long27 = intModelValue9.asLong();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32" + "'", str4, "32");
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 32]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32" + "'", str17, "32");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 32.0d + "'", double19 == 32.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 32]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "32" + "'", str25, "32");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        java.lang.String str6 = modelNode3.asString("true");
        org.jboss.dmr.BooleanModelValue booleanModelValue9 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        long long10 = booleanModelValue9.asLong();
        org.jboss.dmr.ValueExpression valueExpression11 = booleanModelValue9.asExpression();
        java.lang.String str12 = valueExpression11.toString();
        org.jboss.dmr.ExpressionValue expressionValue14 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ValueExpression valueExpression15 = expressionValue14.asExpression();
        boolean boolean16 = valueExpression11.equals(valueExpression15);
        java.lang.String str17 = valueExpression15.resolveString();
        org.jboss.dmr.ModelNode modelNode18 = modelNode3.set("Expression \"1\"", valueExpression15);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList23 = modelNode22.asList();
        org.jboss.dmr.ModelNode modelNode26 = modelNode22.set("Expression \"1\"", (int) (byte) 1);
        org.jboss.dmr.ModelType modelType27 = modelNode22.getType();
        org.jboss.dmr.ModelNode modelNode28 = modelNode18.set(modelType27);
        java.lang.String str29 = modelNode28.asString();
        boolean boolean31 = modelNode28.hasDefined(52);
        org.jboss.dmr.ModelType modelType32 = org.jboss.dmr.ModelType.LIST;
        org.jboss.dmr.ModelNode modelNode33 = modelNode28.set(modelType32);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger34 = modelNode28.asBigIntegerOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(booleanModelValue9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Expression \"true\"" + "'", str12, "Expression \"true\"");
        org.junit.Assert.assertNotNull(valueExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNodeList23);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertTrue("'" + modelType27 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType27.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertNotNull(modelNode28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PROPERTY" + "'", str29, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + modelType32 + "' != '" + org.jboss.dmr.ModelType.LIST + "'", modelType32.equals(org.jboss.dmr.ModelType.LIST));
        org.junit.Assert.assertNotNull(modelNode33);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        java.math.BigInteger bigInteger2 = booleanModelValue1.asBigInteger();
        byte[] byteArray3 = booleanModelValue1.asBytes();
        org.jboss.dmr.ModelNode modelNode4 = new org.jboss.dmr.ModelNode(byteArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode6 = modelNode4.require((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [0]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str2 = longModelValue1.asString();
        byte[] byteArray3 = longModelValue1.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue4 = new org.jboss.dmr.BytesModelValue(byteArray3);
        java.lang.String str5 = bytesModelValue4.asString();
        int int6 = bytesModelValue4.asInt();
        byte[] byteArray7 = bytesModelValue4.asBytes();
        org.jboss.dmr.LongModelValue longModelValue9 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str10 = longModelValue9.asString();
        byte[] byteArray11 = longModelValue9.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue12 = new org.jboss.dmr.BytesModelValue(byteArray11);
        java.lang.String str13 = bytesModelValue12.asString();
        int int14 = bytesModelValue12.asInt();
        int int15 = bytesModelValue12.asInt();
        org.jboss.dmr.LongModelValue longModelValue17 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str18 = longModelValue17.asString();
        byte[] byteArray19 = longModelValue17.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue20 = new org.jboss.dmr.BytesModelValue(byteArray19);
        double double21 = bytesModelValue20.asDouble();
        boolean boolean22 = bytesModelValue12.equals(bytesModelValue20);
        byte[] byteArray23 = bytesModelValue20.asBytes();
        java.math.BigInteger bigInteger24 = bytesModelValue20.asBigInteger();
        boolean boolean25 = bytesModelValue4.equals(bytesModelValue20);
        byte[] byteArray26 = bytesModelValue20.asBytes();
        org.jboss.dmr.LongModelValue longModelValue28 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str29 = longModelValue28.asString();
        byte[] byteArray30 = longModelValue28.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue31 = new org.jboss.dmr.BytesModelValue(byteArray30);
        java.lang.String str32 = bytesModelValue31.asString();
        int int33 = bytesModelValue31.asInt();
        long long35 = bytesModelValue31.asLong((long) (short) 1);
        int int36 = bytesModelValue31.asInt();
        int int37 = bytesModelValue31.asInt();
        byte[] byteArray38 = bytesModelValue31.asBytes();
        org.jboss.dmr.LongModelValue longModelValue40 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str41 = longModelValue40.asString();
        byte[] byteArray42 = longModelValue40.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue43 = new org.jboss.dmr.BytesModelValue(byteArray42);
        java.lang.String str44 = bytesModelValue43.asString();
        int int45 = bytesModelValue43.asInt();
        long long47 = bytesModelValue43.asLong((long) (short) 1);
        int int48 = bytesModelValue43.asInt();
        double double49 = bytesModelValue43.asDouble();
        boolean boolean50 = bytesModelValue31.equals(bytesModelValue43);
        boolean boolean51 = bytesModelValue20.equals(bytesModelValue31);
        double double53 = bytesModelValue31.asDouble((double) 112L);
        double double55 = bytesModelValue31.asDouble((double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jboss.dmr.ModelNode> modelNodeList56 = bytesModelValue31.asList();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str5, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str13, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.9E-324d + "'", double21 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str32, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str44, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4.9E-324d + "'", double49 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 4.9E-324d + "'", double53 == 4.9E-324d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 4.9E-324d + "'", double55 == 4.9E-324d);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromBase64String("RXhwcmVzc2lvbiAidHJ1ZSI=");
            org.junit.Assert.fail("Expected exception of type java.io.InvalidObjectException; message: Invalid type character 'E'");
        } catch (java.io.InvalidObjectException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ExpressionValue expressionValue9 = new org.jboss.dmr.ExpressionValue(valueExpression8);
        org.jboss.dmr.LongModelValue longModelValue11 = new org.jboss.dmr.LongModelValue(1L);
        int int13 = longModelValue11.asInt((int) (byte) 0);
        org.jboss.dmr.LongModelValue longModelValue15 = new org.jboss.dmr.LongModelValue((-1L));
        long long17 = longModelValue15.asLong((long) (byte) -1);
        double double19 = longModelValue15.asDouble((double) 10.0f);
        boolean boolean20 = longModelValue11.equals(longModelValue15);
        byte[] byteArray21 = longModelValue11.asBytes();
        boolean boolean22 = expressionValue9.equals((java.lang.Object) byteArray21);
        java.io.PrintWriter printWriter23 = null;
        // The following exception was thrown during execution in test generation
        try {
            expressionValue9.formatAsJSON(printWriter23, 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) 100);
        org.jboss.dmr.ModelNode modelNode3 = modelNode1.set((int) '#');
        boolean boolean4 = modelNode1.isProtected();
        java.math.BigDecimal bigDecimal5 = modelNode1.asBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue6 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal5);
        int int8 = bigDecimalModelValue6.asInt((int) 'p');
        boolean boolean10 = bigDecimalModelValue6.asBoolean(true);
        java.io.DataOutput dataOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigDecimalModelValue6.writeExternal(dataOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        org.jboss.dmr.ModelNode modelNode8 = modelNode0.clear();
        int int10 = modelNode8.asInt(112);
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList15 = modelNode14.asList();
        org.jboss.dmr.ModelNode modelNode18 = modelNode14.setExpression("hi!", "(\"hi!\" => 0.0)");
        java.util.Set<java.lang.String> strSet19 = modelNode18.keys();
        boolean boolean20 = modelNode8.equals(modelNode18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Long long21 = modelNode18.asLongOrNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 112 + "'", int10 == 112);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertNotNull(modelNodeList15);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue((long) (byte) -1);
        double double3 = longModelValue1.asDouble(0.0d);
        org.jboss.dmr.LongModelValue longModelValue5 = new org.jboss.dmr.LongModelValue((-1L));
        long long7 = longModelValue5.asLong((long) (byte) -1);
        byte[] byteArray8 = longModelValue5.asBytes();
        boolean boolean9 = longModelValue1.equals(longModelValue5);
        int int10 = longModelValue5.asInt();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        org.jboss.dmr.Validation.validate(modelNode0, "[(\"hi!\" => 0.0)]");
        boolean boolean7 = modelNode0.hasDefined("org.jboss.dmr.stream.ModelException: 1");
        java.io.ObjectOutput objectOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            modelNode0.writeExternal(objectOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long2 = modelNode1.asLong();
        org.jboss.dmr.ValueExpression valueExpression3 = modelNode1.asExpression();
        java.math.BigDecimal bigDecimal4 = valueExpression3.resolveBigDecimal();
        java.lang.String str5 = valueExpression3.getExpressionString();
        org.jboss.dmr.LongModelValue longModelValue7 = new org.jboss.dmr.LongModelValue(1L);
        long long9 = longModelValue7.asLong((long) (short) 0);
        java.lang.String str10 = longModelValue7.asString();
        org.jboss.dmr.ValueExpression valueExpression11 = longModelValue7.asExpression();
        int int12 = valueExpression11.resolveInt();
        boolean boolean13 = valueExpression3.equals(valueExpression11);
        java.math.BigInteger bigInteger14 = valueExpression11.resolveBigInteger();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(valueExpression3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1.0" + "'", str5, "1.0");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(valueExpression11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        java.io.InputStream inputStream16 = null;
        org.jboss.dmr.Base64.InputStream inputStream18 = new org.jboss.dmr.Base64.InputStream(inputStream16, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream19 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.Base64.InputStream inputStream20 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream18);
        org.jboss.dmr.stream.ModelReader modelReader21 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream18);
        boolean boolean22 = modelReader21.isLong();
        boolean boolean23 = modelReader21.isType();
        boolean boolean24 = modelReader21.isLong();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelType modelType25 = modelReader21.getType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current event isn't type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertNotNull(modelReader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode(modelType0);
        org.jboss.dmr.ModelNode modelNode3 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode6 = modelNode3.set("hi!", 0.0d);
        org.jboss.dmr.Property property7 = new org.jboss.dmr.Property("", modelNode6);
        org.jboss.dmr.ModelNode modelNode8 = modelNode1.set(property7);
        org.jboss.dmr.PropertyModelValue propertyModelValue9 = new org.jboss.dmr.PropertyModelValue(property7);
        org.jboss.dmr.ModelNode modelNode10 = propertyModelValue9.asObject();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) propertyModelValue9);
        boolean boolean13 = modelNode11.has((int) (short) 10);
        org.jboss.dmr.ModelNode modelNode16 = modelNode11.set("[(\"hi!\" => expression \"hi!\"),bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }]", 0L);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode("EXPRESSION_VALUE");
        org.jboss.dmr.ModelNode modelNode20 = modelNode19.clear();
        org.jboss.dmr.ModelNode modelNode23 = modelNode19.add("35", 10);
        org.jboss.dmr.ModelType modelType24 = org.jboss.dmr.ModelType.INT;
        org.jboss.dmr.ModelNode modelNode25 = new org.jboss.dmr.ModelNode(modelType24);
        org.jboss.dmr.ModelNode modelNode27 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode30 = modelNode27.set("hi!", 0.0d);
        org.jboss.dmr.Property property31 = new org.jboss.dmr.Property("", modelNode30);
        org.jboss.dmr.ModelNode modelNode32 = modelNode25.set(property31);
        java.lang.String str33 = property31.getName();
        org.jboss.dmr.Property property34 = property31.clone();
        org.jboss.dmr.PropertyModelValue propertyModelValue35 = new org.jboss.dmr.PropertyModelValue(property31);
        org.jboss.dmr.ModelNode modelNode36 = modelNode19.add(property31);
        org.jboss.dmr.ModelNode modelNode38 = modelNode19.addExpression("");
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode();
        java.lang.Long long40 = modelNode39.asLongOrNull();
        org.jboss.dmr.ModelNode modelNode41 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode44 = modelNode41.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode44.asList();
        org.jboss.dmr.ListModelValue listModelValue46 = new org.jboss.dmr.ListModelValue(modelNodeList45);
        java.lang.String str47 = listModelValue46.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList48 = listModelValue46.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList49 = modelNode39.asList(modelNodeList48);
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode53 = modelNode50.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList54 = modelNode53.asList();
        org.jboss.dmr.ListModelValue listModelValue55 = new org.jboss.dmr.ListModelValue(modelNodeList54);
        java.lang.String str56 = listModelValue55.asString();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList57 = listModelValue55.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList58 = modelNode39.asList(modelNodeList57);
        org.jboss.dmr.ListModelValue listModelValue59 = new org.jboss.dmr.ListModelValue(modelNodeList58);
        org.jboss.dmr.ModelNode modelNode60 = modelNode38.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList58);
        boolean boolean61 = modelNode38.isProtected();
        org.jboss.dmr.ModelNode modelNode62 = modelNode16.setNoCopy("35", modelNode38);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType0.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode6);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode20);
        org.junit.Assert.assertNotNull(modelNode23);
        org.junit.Assert.assertTrue("'" + modelType24 + "' != '" + org.jboss.dmr.ModelType.INT + "'", modelType24.equals(org.jboss.dmr.ModelType.INT));
        org.junit.Assert.assertNotNull(modelNode30);
        org.junit.Assert.assertNotNull(modelNode32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNode38);
        org.junit.Assert.assertNull(long40);
        org.junit.Assert.assertNotNull(modelNode44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str47, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList48);
        org.junit.Assert.assertNotNull(modelNodeList49);
        org.junit.Assert.assertNotNull(modelNode53);
        org.junit.Assert.assertNotNull(modelNodeList54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str56, "[(\"hi!\" => 0.0)]");
        org.junit.Assert.assertNotNull(modelNodeList57);
        org.junit.Assert.assertNotNull(modelNodeList58);
        org.junit.Assert.assertNotNull(modelNode60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(modelNode62);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        boolean boolean2 = objectModelValue0.asBoolean(false);
        org.jboss.dmr.ModelValue modelValue4 = objectModelValue0.copy(false);
        org.jboss.dmr.ModelNode modelNode6 = objectModelValue0.removeChild("\"0.0\"");
        int int8 = objectModelValue0.asInt((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertNull(modelNode6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        java.io.OutputStream outputStream0 = null;
        org.jboss.dmr.Base64.OutputStream outputStream1 = new org.jboss.dmr.Base64.OutputStream(outputStream0);
        outputStream1.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream3 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream1);
        org.jboss.dmr.Base64.OutputStream outputStream5 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3, (int) (byte) -1);
        outputStream3.suspendEncoding();
        outputStream3.write((int) (byte) 0);
        outputStream3.flushBase64();
        outputStream3.resumeEncoding();
        org.jboss.dmr.Base64.OutputStream outputStream11 = new org.jboss.dmr.Base64.OutputStream((java.io.OutputStream) outputStream3);
        outputStream3.suspendEncoding();
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        org.jboss.dmr.ObjectModelValue objectModelValue0 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode1 = objectModelValue0.asObject();
        java.util.Set<java.lang.String> strSet2 = objectModelValue0.getKeys();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue0.removeChild("org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
        boolean boolean5 = objectModelValue0.asBoolean();
        int int7 = objectModelValue0.asInt((int) 'b');
        org.jboss.dmr.ModelNode modelNode8 = objectModelValue0.asObject();
        org.jboss.dmr.ModelNode modelNode9 = modelNode8.clone();
        java.lang.Boolean boolean10 = modelNode8.asBooleanOrNull();
        java.lang.String str11 = modelNode8.toString();
        org.jboss.dmr.ModelNode modelNode13 = modelNode8.set((long) (short) 10);
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(modelNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(modelNode8);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + false + "'", boolean10, false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNotNull(modelNode13);
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        java.io.DataInput dataInput1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.StringModelValue stringModelValue2 = new org.jboss.dmr.StringModelValue('s', dataInput1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode2 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode5 = modelNode2.set("hi!", 0.0d);
        java.lang.String str6 = modelNode2.toString();
        org.jboss.dmr.ModelNode modelNode7 = modelNode2.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode9 = modelNode2.set(100);
        org.jboss.dmr.ModelNode modelNode10 = modelNode1.add(modelNode2);
        org.jboss.dmr.ModelNode modelNode11 = modelNode1.resolve();
        org.jboss.dmr.LongModelValue longModelValue14 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str15 = longModelValue14.asString();
        byte[] byteArray16 = longModelValue14.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue17 = new org.jboss.dmr.BytesModelValue(byteArray16);
        java.lang.String str18 = bytesModelValue17.asString();
        int int19 = bytesModelValue17.asInt();
        byte[] byteArray20 = bytesModelValue17.asBytes();
        org.jboss.dmr.ModelNode modelNode21 = modelNode1.add("{ \"BYTES_VALUE\" : \"v/AAAAAAAAA=\" }", byteArray20);
        org.jboss.dmr.ModelNode modelNode22 = modelNode21.clear();
        org.jboss.dmr.ModelNode modelNode24 = modelNode21.get((int) 'J');
        org.jboss.dmr.Property property25 = new org.jboss.dmr.Property("(\"Expression \\\"1\\\"\" => (\"org.jboss.dmr.stream.ModelException: [(\\\"hi!\\\" => 0.0)]\" => BYTES))", modelNode21);
        org.jboss.dmr.ModelNode modelNode28 = new org.jboss.dmr.ModelNode((double) (byte) 1);
        long long29 = modelNode28.asLong();
        org.jboss.dmr.ValueExpression valueExpression30 = modelNode28.asExpression();
        java.math.BigDecimal bigDecimal31 = valueExpression30.resolveBigDecimal();
        java.lang.String str32 = valueExpression30.getExpressionString();
        java.math.BigDecimal bigDecimal33 = valueExpression30.resolveBigDecimal();
        org.jboss.dmr.BigDecimalModelValue bigDecimalModelValue34 = new org.jboss.dmr.BigDecimalModelValue(bigDecimal33);
        int int36 = bigDecimalModelValue34.asInt(0);
        java.math.BigDecimal bigDecimal37 = bigDecimalModelValue34.asBigDecimal();
        org.jboss.dmr.ValueExpression valueExpression38 = bigDecimalModelValue34.asExpression();
        java.math.BigInteger bigInteger39 = bigDecimalModelValue34.asBigInteger();
        java.math.BigDecimal bigDecimal40 = bigDecimalModelValue34.asBigDecimal();
        org.jboss.dmr.ModelNode modelNode41 = modelNode21.add("\"org.jboss.dmr.stream.ModelException: (\\\"Expression \\\\\\\"1\\\\\\\"\\\" => (\\\"org.jboss.dmr.stream.ModelException: [(\\\\\\\"hi!\\\\\\\" => 0.0)]\\\" => BYTES))\"", bigDecimal40);
        org.junit.Assert.assertNotNull(modelNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"hi!\" => 0.0)" + "'", str6, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNotNull(modelNode9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }" + "'", str18, "bytes { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(modelNode21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(valueExpression30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0" + "'", str32, "1.0");
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(valueExpression38);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(modelNode41);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isBigInteger();
        boolean boolean17 = modelReader15.isLong();
        boolean boolean18 = modelReader15.isBigDecimal();
        boolean boolean19 = modelReader15.isUndefined();
        boolean boolean20 = modelReader15.isUndefined();
        boolean boolean21 = modelReader15.isListStart();
        boolean boolean22 = modelReader15.isPropertyStart();
        boolean boolean23 = modelReader15.isObjectEnd();
        boolean boolean24 = modelReader15.isObjectStart();
        boolean boolean25 = modelReader15.isUndefined();
        boolean boolean26 = modelReader15.hasNext();
        boolean boolean27 = modelReader15.isObjectEnd();
        boolean boolean28 = modelReader15.isType();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.setExpression("hi!", "hi!");
        java.lang.String str4 = org.jboss.dmr.Base64.encodeObject((java.io.Serializable) modelNode0);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList5 = modelNode0.asListOrEmpty();
        org.jboss.dmr.ModelNode modelNode7 = modelNode0.set((double) 0);
        boolean boolean8 = modelNode0.isProtected();
        org.jboss.dmr.ModelNode modelNode11 = modelNode0.set("rO0ABXQAiigiKFwiRXhwcmVzc2lvbiBcXFwiMVxcXCJcIiA9PiAoXCJvcmcuamJvc3MuZG1yLnN0cmVhbS5Nb2RlbEV4Y2VwdGlvbjogWyhcXFwiaGkhXFxcIiA9PiAwLjApXVwiID0+IEJZVEVTKSkiID0+IGV4cHJlc3Npb24gImJpZyBkZWNpbWFsIDEiKQ==", (int) 'u');
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=" + "'", str4, "rO0ABXNyABdvcmcuamJvc3MuZG1yLk1vZGVsTm9kZRwtoUSdo44/DAAAeHB3DHAAA2hpIWUAA2hp\nIXg=");
        org.junit.Assert.assertNotNull(modelNodeList5);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(modelNode11);
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        org.jboss.dmr.ModelNode modelNode1 = new org.jboss.dmr.ModelNode((int) 'a');
        org.jboss.dmr.ModelNode modelNode2 = modelNode1.setEmptyList();
        org.jboss.dmr.ObjectModelValue objectModelValue3 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode4 = objectModelValue3.asObject();
        java.util.Set<java.lang.String> strSet5 = objectModelValue3.getKeys();
        boolean boolean7 = objectModelValue3.has((int) 'a');
        boolean boolean9 = objectModelValue3.has("");
        org.jboss.dmr.ObjectModelValue objectModelValue10 = new org.jboss.dmr.ObjectModelValue();
        org.jboss.dmr.ModelNode modelNode11 = objectModelValue10.asObject();
        java.util.Set<java.lang.String> strSet12 = objectModelValue10.getKeys();
        boolean boolean14 = objectModelValue10.has((int) 'a');
        boolean boolean15 = objectModelValue3.equals(objectModelValue10);
        org.jboss.dmr.ModelNode modelNode16 = objectModelValue10.asObject();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList17 = objectModelValue10.asList();
        org.jboss.dmr.ModelNode modelNode18 = modelNode1.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList17);
        org.jboss.dmr.ModelNode modelNode20 = modelNode18.add((long) 100);
        org.junit.Assert.assertNotNull(modelNode2);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(modelNode11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNodeList17);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode20);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        org.jboss.dmr.ModelNode modelNode0 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode3 = modelNode0.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList4 = modelNode3.asList();
        org.jboss.dmr.ListModelValue listModelValue5 = new org.jboss.dmr.ListModelValue(modelNodeList4);
        org.jboss.dmr.ModelNode modelNode6 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue5);
        org.jboss.dmr.ModelValue modelValue7 = listModelValue5.resolve();
        int int9 = listModelValue5.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList10 = listModelValue5.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList11 = listModelValue5.asPropertyList();
        org.jboss.dmr.ModelValue modelValue12 = listModelValue5.copy();
        java.lang.String str13 = listModelValue5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jboss.dmr.ModelNode modelNode15 = listModelValue5.removeChild((int) '4');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No child exists at index [52]");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(modelNode3);
        org.junit.Assert.assertNotNull(modelNodeList4);
        org.junit.Assert.assertNotNull(modelValue7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(propertyList10);
        org.junit.Assert.assertNotNull(propertyList11);
        org.junit.Assert.assertNotNull(modelValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[(\"hi!\" => 0.0)]" + "'", str13, "[(\"hi!\" => 0.0)]");
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue((double) (short) 10);
        long long2 = doubleModelValue1.asLong();
        long long4 = doubleModelValue1.asLong((long) 32);
        org.jboss.dmr.ModelValue modelValue5 = doubleModelValue1.protect();
        double double6 = doubleModelValue1.asDouble();
        boolean boolean7 = doubleModelValue1.asBoolean();
        long long8 = doubleModelValue1.asLong();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertNotNull(modelValue5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        org.jboss.dmr.ModelNode modelNode1 = org.jboss.dmr.ModelNode.fromString("bytes {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01\n}");
        org.jboss.dmr.ModelNode modelNode4 = modelNode1.set("hi!", (long) 32);
        org.jboss.dmr.ModelNode modelNode7 = modelNode1.set("{\n    \"hi!\" : {\n        \"EXPRESSION_VALUE\" : \"hi!\"\n    }\n}", (int) 'a');
        org.jboss.dmr.ModelNode modelNode8 = new org.jboss.dmr.ModelNode();
        java.lang.Integer int9 = modelNode8.asIntOrNull();
        org.jboss.dmr.ModelNode modelNode10 = modelNode8.clone();
        org.jboss.dmr.ModelNode modelNode11 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode14 = modelNode11.set("hi!", 0.0d);
        java.lang.String str15 = modelNode11.toString();
        org.jboss.dmr.ModelNode modelNode16 = modelNode11.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode18 = modelNode11.set(100);
        org.jboss.dmr.ModelNode modelNode19 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.set("hi!", 0.0d);
        java.lang.String str23 = modelNode19.toString();
        org.jboss.dmr.ModelNode modelNode24 = modelNode19.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode26 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode29 = modelNode26.set("hi!", 0.0d);
        org.jboss.dmr.Property property30 = new org.jboss.dmr.Property("", modelNode29);
        org.jboss.dmr.ModelNode modelNode31 = modelNode19.set(property30);
        java.lang.String str32 = modelNode31.asString();
        org.jboss.dmr.ModelNode modelNode33 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode36 = modelNode33.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList37 = modelNode36.asList();
        org.jboss.dmr.ListModelValue listModelValue38 = new org.jboss.dmr.ListModelValue(modelNodeList37);
        org.jboss.dmr.ModelNode modelNode39 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue38);
        org.jboss.dmr.ModelValue modelValue40 = listModelValue38.resolve();
        int int42 = listModelValue38.asInt((int) (byte) 100);
        boolean boolean43 = listModelValue38.asBoolean();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList44 = listModelValue38.asList();
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList45 = modelNode31.asList(modelNodeList44);
        org.jboss.dmr.ModelNode modelNode46 = modelNode18.set((java.util.Collection<org.jboss.dmr.ModelNode>) modelNodeList44);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode10.asList(modelNodeList44);
        boolean boolean48 = modelNode1.equals(modelNode10);
        org.jboss.dmr.ModelNode modelNode49 = modelNode10.clear();
        org.junit.Assert.assertNotNull(modelNode1);
        org.junit.Assert.assertNotNull(modelNode4);
        org.junit.Assert.assertNotNull(modelNode7);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(modelNode10);
        org.junit.Assert.assertNotNull(modelNode14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(\"hi!\" => 0.0)" + "'", str15, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode16);
        org.junit.Assert.assertNotNull(modelNode18);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(\"hi!\" => 0.0)" + "'", str23, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode24);
        org.junit.Assert.assertNotNull(modelNode29);
        org.junit.Assert.assertNotNull(modelNode31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(\"\" => (\"hi!\" => 0.0))" + "'", str32, "(\"\" => (\"hi!\" => 0.0))");
        org.junit.Assert.assertNotNull(modelNode36);
        org.junit.Assert.assertNotNull(modelNodeList37);
        org.junit.Assert.assertNotNull(modelValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(modelNodeList44);
        org.junit.Assert.assertNotNull(modelNodeList45);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(modelNode49);
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        org.jboss.dmr.BooleanModelValue booleanModelValue0 = org.jboss.dmr.BooleanModelValue.TRUE;
        double double1 = booleanModelValue0.asDouble();
        org.jboss.dmr.ModelValue modelValue2 = booleanModelValue0.copy();
        java.math.BigInteger bigInteger3 = booleanModelValue0.asBigInteger();
        org.jboss.dmr.BigIntegerModelValue bigIntegerModelValue4 = new org.jboss.dmr.BigIntegerModelValue(bigInteger3);
        double double6 = bigIntegerModelValue4.asDouble((double) 'b');
        int int7 = bigIntegerModelValue4.asInt();
        org.jboss.dmr.ValueExpression valueExpression8 = bigIntegerModelValue4.asExpression();
        java.math.BigDecimal bigDecimal9 = bigIntegerModelValue4.asBigDecimal();
        double double11 = bigIntegerModelValue4.asDouble((double) 'b');
        org.junit.Assert.assertNotNull(booleanModelValue0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
        org.junit.Assert.assertNotNull(modelValue2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        java.lang.Throwable throwable1 = null;
        org.jboss.dmr.stream.ModelException modelException2 = new org.jboss.dmr.stream.ModelException("[(\"hi!\" => 0.0)]", throwable1);
        org.jboss.dmr.stream.ModelException modelException3 = new org.jboss.dmr.stream.ModelException((java.lang.Throwable) modelException2);
        org.jboss.dmr.stream.ModelException modelException5 = new org.jboss.dmr.stream.ModelException("true");
        modelException3.addSuppressed((java.lang.Throwable) modelException5);
        java.lang.String str7 = modelException3.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]" + "'", str7, "org.jboss.dmr.stream.ModelException: org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]");
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        org.jboss.dmr.ModelType modelType0 = org.jboss.dmr.ModelType.PROPERTY;
        char char1 = modelType0.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue2 = org.jboss.dmr.TypeModelValue.of(modelType0);
        org.jboss.dmr.ModelType modelType3 = org.jboss.dmr.ModelType.PROPERTY;
        char char4 = modelType3.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue5 = org.jboss.dmr.TypeModelValue.of(modelType3);
        boolean boolean6 = typeModelValue2.equals(typeModelValue5);
        java.lang.String str7 = typeModelValue5.asString();
        org.jboss.dmr.ValueExpression valueExpression8 = typeModelValue5.asExpression();
        org.jboss.dmr.ModelType modelType9 = typeModelValue5.asType();
        boolean boolean11 = typeModelValue5.asBoolean(true);
        java.lang.String str12 = typeModelValue5.asString();
        org.jboss.dmr.ModelType modelType13 = typeModelValue5.asType();
        org.jboss.dmr.ModelType modelType14 = org.jboss.dmr.ModelType.PROPERTY;
        char char15 = modelType14.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue16 = org.jboss.dmr.TypeModelValue.of(modelType14);
        org.jboss.dmr.ModelType modelType17 = org.jboss.dmr.ModelType.PROPERTY;
        char char18 = modelType17.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue19 = org.jboss.dmr.TypeModelValue.of(modelType17);
        boolean boolean20 = typeModelValue16.equals(typeModelValue19);
        java.lang.String str21 = typeModelValue19.asString();
        org.jboss.dmr.ModelType modelType22 = org.jboss.dmr.ModelType.PROPERTY;
        char char23 = modelType22.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue24 = org.jboss.dmr.TypeModelValue.of(modelType22);
        org.jboss.dmr.ModelType modelType25 = org.jboss.dmr.ModelType.PROPERTY;
        char char26 = modelType25.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue27 = org.jboss.dmr.TypeModelValue.of(modelType25);
        boolean boolean28 = typeModelValue24.equals(typeModelValue27);
        java.lang.String str29 = typeModelValue27.asString();
        boolean boolean31 = typeModelValue27.asBoolean(true);
        boolean boolean32 = typeModelValue19.equals(typeModelValue27);
        org.jboss.dmr.ValueExpression valueExpression33 = typeModelValue27.asExpression();
        org.jboss.dmr.ModelType modelType34 = org.jboss.dmr.ModelType.PROPERTY;
        char char35 = modelType34.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue36 = org.jboss.dmr.TypeModelValue.of(modelType34);
        org.jboss.dmr.ModelType modelType37 = org.jboss.dmr.ModelType.PROPERTY;
        char char38 = modelType37.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue39 = org.jboss.dmr.TypeModelValue.of(modelType37);
        boolean boolean40 = typeModelValue36.equals(typeModelValue39);
        boolean boolean41 = typeModelValue27.equals(typeModelValue36);
        org.jboss.dmr.ModelType modelType42 = org.jboss.dmr.ModelType.PROPERTY;
        char char43 = modelType42.getTypeChar();
        org.jboss.dmr.TypeModelValue typeModelValue44 = org.jboss.dmr.TypeModelValue.of(modelType42);
        boolean boolean45 = typeModelValue44.asBoolean();
        boolean boolean46 = typeModelValue27.equals(typeModelValue44);
        org.jboss.dmr.ValueExpression valueExpression47 = typeModelValue44.asExpression();
        org.jboss.dmr.ModelType modelType48 = org.jboss.dmr.ModelType.TYPE;
        org.jboss.dmr.TypeModelValue typeModelValue49 = org.jboss.dmr.TypeModelValue.of(modelType48);
        org.jboss.dmr.ModelNode modelNode50 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode51 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode54 = modelNode51.set("hi!", 0.0d);
        java.lang.String str55 = modelNode51.toString();
        org.jboss.dmr.ModelNode modelNode56 = modelNode51.setEmptyObject();
        org.jboss.dmr.ModelNode modelNode58 = modelNode51.set(100);
        org.jboss.dmr.ModelNode modelNode59 = modelNode50.add(modelNode51);
        org.jboss.dmr.ModelType modelType61 = org.jboss.dmr.ModelType.BYTES;
        char char62 = modelType61.getTypeChar();
        org.jboss.dmr.ModelNode modelNode63 = modelNode50.set("org.jboss.dmr.stream.ModelException: [(\"hi!\" => 0.0)]", modelType61);
        org.jboss.dmr.TypeModelValue typeModelValue64 = org.jboss.dmr.TypeModelValue.of(modelType61);
        boolean boolean65 = typeModelValue64.asBoolean();
        boolean boolean66 = typeModelValue49.equals(typeModelValue64);
        boolean boolean67 = typeModelValue44.equals(typeModelValue49);
        org.jboss.dmr.BooleanModelValue booleanModelValue69 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray70 = booleanModelValue69.asBytes();
        java.lang.String str71 = booleanModelValue69.asString();
        int int72 = booleanModelValue69.asInt();
        org.jboss.dmr.ModelType modelType73 = org.jboss.dmr.ModelType.STRING;
        boolean boolean74 = booleanModelValue69.equals((java.lang.Object) modelType73);
        org.jboss.dmr.TypeModelValue typeModelValue75 = org.jboss.dmr.TypeModelValue.of(modelType73);
        org.jboss.dmr.ValueExpression valueExpression76 = typeModelValue75.asExpression();
        boolean boolean77 = typeModelValue49.equals(typeModelValue75);
        boolean boolean78 = typeModelValue5.equals(typeModelValue49);
        org.junit.Assert.assertTrue("'" + modelType0 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType0.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'p' + "'", char1 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue2);
        org.junit.Assert.assertTrue("'" + modelType3 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType3.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'p' + "'", char4 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY" + "'", str7, "PROPERTY");
        org.junit.Assert.assertNotNull(valueExpression8);
        org.junit.Assert.assertTrue("'" + modelType9 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType9.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PROPERTY" + "'", str12, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType13 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType13.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + modelType14 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType14.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'p' + "'", char15 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue16);
        org.junit.Assert.assertTrue("'" + modelType17 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType17.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'p' + "'", char18 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PROPERTY" + "'", str21, "PROPERTY");
        org.junit.Assert.assertTrue("'" + modelType22 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType22.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + 'p' + "'", char23 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue24);
        org.junit.Assert.assertTrue("'" + modelType25 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType25.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + 'p' + "'", char26 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PROPERTY" + "'", str29, "PROPERTY");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(valueExpression33);
        org.junit.Assert.assertTrue("'" + modelType34 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType34.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char35 + "' != '" + 'p' + "'", char35 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue36);
        org.junit.Assert.assertTrue("'" + modelType37 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType37.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char38 + "' != '" + 'p' + "'", char38 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + modelType42 + "' != '" + org.jboss.dmr.ModelType.PROPERTY + "'", modelType42.equals(org.jboss.dmr.ModelType.PROPERTY));
        org.junit.Assert.assertTrue("'" + char43 + "' != '" + 'p' + "'", char43 == 'p');
        org.junit.Assert.assertNotNull(typeModelValue44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(valueExpression47);
        org.junit.Assert.assertTrue("'" + modelType48 + "' != '" + org.jboss.dmr.ModelType.TYPE + "'", modelType48.equals(org.jboss.dmr.ModelType.TYPE));
        org.junit.Assert.assertNotNull(typeModelValue49);
        org.junit.Assert.assertNotNull(modelNode54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(\"hi!\" => 0.0)" + "'", str55, "(\"hi!\" => 0.0)");
        org.junit.Assert.assertNotNull(modelNode56);
        org.junit.Assert.assertNotNull(modelNode58);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertTrue("'" + modelType61 + "' != '" + org.jboss.dmr.ModelType.BYTES + "'", modelType61.equals(org.jboss.dmr.ModelType.BYTES));
        org.junit.Assert.assertTrue("'" + char62 + "' != '" + 'b' + "'", char62 == 'b');
        org.junit.Assert.assertNotNull(modelNode63);
        org.junit.Assert.assertNotNull(typeModelValue64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(booleanModelValue69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "true" + "'", str71, "true");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + modelType73 + "' != '" + org.jboss.dmr.ModelType.STRING + "'", modelType73.equals(org.jboss.dmr.ModelType.STRING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(typeModelValue75);
        org.junit.Assert.assertNotNull(valueExpression76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        java.io.InputStream inputStream0 = null;
        org.jboss.dmr.Base64.InputStream inputStream2 = new org.jboss.dmr.Base64.InputStream(inputStream0, (int) ' ');
        org.jboss.dmr.Base64.InputStream inputStream3 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream2);
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3);
        org.jboss.dmr.Base64.InputStream inputStream6 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream3, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            inputStream6.mark(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        org.jboss.dmr.DoubleModelValue doubleModelValue1 = new org.jboss.dmr.DoubleModelValue(10.0d);
        java.lang.String str2 = doubleModelValue1.asString();
        boolean boolean4 = doubleModelValue1.asBoolean(false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10.0" + "'", str2, "10.0");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        org.jboss.dmr.stream.ModelStreamFactory modelStreamFactory1 = org.jboss.dmr.stream.ModelStreamFactory.getInstance(false);
        java.io.InputStream inputStream2 = null;
        org.jboss.dmr.Base64.InputStream inputStream4 = new org.jboss.dmr.Base64.InputStream(inputStream2, (int) ' ');
        org.jboss.dmr.LongModelValue longModelValue6 = new org.jboss.dmr.LongModelValue(1L);
        java.lang.String str7 = longModelValue6.asString();
        byte[] byteArray8 = longModelValue6.asBytes();
        org.jboss.dmr.BytesModelValue bytesModelValue9 = new org.jboss.dmr.BytesModelValue(byteArray8);
        int int12 = inputStream4.read(byteArray8, (int) (short) 1, (int) (byte) -1);
        org.jboss.dmr.Base64.InputStream inputStream14 = new org.jboss.dmr.Base64.InputStream((java.io.InputStream) inputStream4, (-1));
        org.jboss.dmr.stream.ModelReader modelReader15 = modelStreamFactory1.newModelReader((java.io.InputStream) inputStream14);
        boolean boolean16 = modelReader15.isPropertyStart();
        boolean boolean17 = modelReader15.isPropertyStart();
        boolean boolean18 = modelReader15.isInt();
        org.junit.Assert.assertNotNull(modelStreamFactory1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(modelReader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        org.jboss.dmr.ExpressionValue expressionValue1 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue3 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean4 = expressionValue1.equals(expressionValue3);
        org.jboss.dmr.ExpressionValue expressionValue6 = new org.jboss.dmr.ExpressionValue("hi!");
        org.jboss.dmr.ExpressionValue expressionValue8 = new org.jboss.dmr.ExpressionValue("hi!");
        boolean boolean9 = expressionValue6.equals(expressionValue8);
        boolean boolean10 = expressionValue1.equals(expressionValue8);
        org.jboss.dmr.ExpressionValue expressionValue12 = new org.jboss.dmr.ExpressionValue("hi!");
        java.lang.String str13 = expressionValue12.asString();
        boolean boolean14 = expressionValue1.equals(expressionValue12);
        org.jboss.dmr.ModelNode modelNode16 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode19 = modelNode16.set("hi!", 0.0d);
        org.jboss.dmr.Property property20 = new org.jboss.dmr.Property("", modelNode19);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode22 = modelNode19.get(strArray21);
        org.jboss.dmr.ModelNode modelNode23 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode26 = modelNode23.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList27 = modelNode26.asList();
        org.jboss.dmr.ListModelValue listModelValue28 = new org.jboss.dmr.ListModelValue(modelNodeList27);
        org.jboss.dmr.ModelNode modelNode29 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue28);
        org.jboss.dmr.ModelValue modelValue30 = listModelValue28.resolve();
        int int32 = listModelValue28.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList33 = listModelValue28.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList34 = modelNode22.asPropertyList(propertyList33);
        org.jboss.dmr.ModelNode modelNode36 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode39 = modelNode36.set("hi!", 0.0d);
        org.jboss.dmr.Property property40 = new org.jboss.dmr.Property("", modelNode39);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        org.jboss.dmr.ModelNode modelNode42 = modelNode39.get(strArray41);
        org.jboss.dmr.ModelNode modelNode43 = new org.jboss.dmr.ModelNode();
        org.jboss.dmr.ModelNode modelNode46 = modelNode43.set("hi!", 0.0d);
        java.util.List<org.jboss.dmr.ModelNode> modelNodeList47 = modelNode46.asList();
        org.jboss.dmr.ListModelValue listModelValue48 = new org.jboss.dmr.ListModelValue(modelNodeList47);
        org.jboss.dmr.ModelNode modelNode49 = new org.jboss.dmr.ModelNode((org.jboss.dmr.ModelValue) listModelValue48);
        org.jboss.dmr.ModelValue modelValue50 = listModelValue48.resolve();
        int int52 = listModelValue48.asInt((int) (byte) 100);
        java.util.List<org.jboss.dmr.Property> propertyList53 = listModelValue48.asPropertyList();
        java.util.List<org.jboss.dmr.Property> propertyList54 = modelNode42.asPropertyList(propertyList53);
        modelNode22.setNoCopy(modelNode42);
        boolean boolean56 = expressionValue12.equals((java.lang.Object) modelNode22);
        org.jboss.dmr.ModelNode modelNode59 = modelNode22.set("[1]", 0);
        java.lang.String str60 = modelNode22.asStringOrNull();
        org.jboss.dmr.ModelNode modelNode63 = modelNode22.set("\"{\\n    \\\"BYTES_VALUE\\\" : \\\"AAAAAAAAAAE=\\\"\\n}\"", false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(modelNode19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(modelNode22);
        org.junit.Assert.assertNotNull(modelNode26);
        org.junit.Assert.assertNotNull(modelNodeList27);
        org.junit.Assert.assertNotNull(modelValue30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(propertyList33);
        org.junit.Assert.assertNotNull(propertyList34);
        org.junit.Assert.assertNotNull(modelNode39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(modelNode42);
        org.junit.Assert.assertNotNull(modelNode46);
        org.junit.Assert.assertNotNull(modelNodeList47);
        org.junit.Assert.assertNotNull(modelValue50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(propertyList53);
        org.junit.Assert.assertNotNull(propertyList54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(modelNode59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(\"[1]\" => 0)" + "'", str60, "(\"[1]\" => 0)");
        org.junit.Assert.assertNotNull(modelNode63);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        org.jboss.dmr.IntModelValue intModelValue1 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long3 = intModelValue1.asLong((long) '#');
        org.jboss.dmr.IntModelValue intModelValue5 = new org.jboss.dmr.IntModelValue((int) ' ');
        long long7 = intModelValue5.asLong((long) 'b');
        java.lang.String str8 = intModelValue5.asString();
        boolean boolean9 = intModelValue1.equals(intModelValue5);
        long long11 = intModelValue5.asLong(52L);
        boolean boolean12 = intModelValue5.asBoolean();
        double double14 = intModelValue5.asDouble((double) 32L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32" + "'", str8, "32");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        org.jboss.dmr.LongModelValue longModelValue1 = new org.jboss.dmr.LongModelValue(1L);
        int int3 = longModelValue1.asInt((int) (byte) 0);
        org.jboss.dmr.ModelValue modelValue4 = longModelValue1.copy();
        long long5 = longModelValue1.asLong();
        double double6 = longModelValue1.asDouble();
        java.io.PrintWriter printWriter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            longModelValue1.format(printWriter7, (int) 'p', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(modelValue4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        org.jboss.dmr.BooleanModelValue booleanModelValue1 = org.jboss.dmr.BooleanModelValue.valueOf(true);
        byte[] byteArray2 = booleanModelValue1.asBytes();
        java.lang.String str3 = booleanModelValue1.asString();
        int int4 = booleanModelValue1.asInt();
        long long5 = booleanModelValue1.asLong();
        boolean boolean7 = booleanModelValue1.equals((java.lang.Object) '4');
        java.math.BigInteger bigInteger8 = booleanModelValue1.asBigInteger();
        org.jboss.dmr.ModelValue modelValue9 = booleanModelValue1.clone();
        org.jboss.dmr.ValueExpression valueExpression10 = booleanModelValue1.asExpression();
        java.io.ObjectInput objectInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            valueExpression10.readExternal(objectInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanModelValue1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(modelValue9);
        org.junit.Assert.assertNotNull(valueExpression10);
    }
}
